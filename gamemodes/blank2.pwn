#include <a_samp>
#include <core>
#include <Pawn.CMD>
#include <float>
#include <streamer>
#include <a_mysql>
#include <crashdetect>

#include <YSI\y_iterate>
#include <YSI_Coding\y_timers>
#include <YSI\y_va.inc>

#include <foreach>
#include <sscanf2>
#include <a_zones>
#include <beaZone>
#include <timerfix>
#include <fly>
#include <timestamptodate>
#include <firework>		
#include <md5>	
#include <YSI\y_hooks>

#define SERVER_VERSION "RPG Romania, v9.1e"
#define SQL_HOST "localhost"
#define SQL_USER "root"
#define SQL_DATA "secret"

#define quest_barbut 	0
#define quest_drog   	1
#define quest_find 	 	2
#define quest_credit	3
#define quest_benzina 	4
#define quest_flori		5
#define quest_depozit	6
#define quest_food		7
#define quest_sellcar	8    
#define quest_skin		9
#define quest_news		10
#define quest_farmer	11
#define quest_rob 		12
#define quest_contract 	13
#define quest_rent		14
#define quest_crate		15

#define COLOR_BID			0x4B4BE9FF
#define COLOR_PRINC			0x5D2D9CFF
#define COLOR_SKEMA			0x9F57FFFF
#define COLOR_ADMCHAT 		0xFFC266AA
#define COLOR_CHATBUBBLE    0xFFFFFFCC
#define COLOR_GRAD2 		0xBFC0C2FF
#define COLOR_PRINC1  		0xFF5959FF
#define COLOR_GREY 			0xCECECEFF
#define COLOR_GREEN 		0x33AA33AA
#define COLOR_GREEN2		0x4DAD2BAA
#define COLOR_RED 			0xAA3333AA
#define COLOR_LIGHTRED 		0xFF6347AA
#define COLOR_LIGHTBLUE 	0x33CCFFAA
#define COLOR_LIGHTGREEN 	0x8BBA2EAA
#define COLOR_ORANGE 		0xFFA500AA
#define COLOR_YELLOW 		0xFFFF00AA
#define COLOR_DCHAT 		0x7E689B4A
#define COLOR_WHITE 		0xFFFFFFFF
#define COLOR_FADE1 		0xE6E6E6E6
#define COLOR_FADE2 		0xC8C8C8C8
#define COLOR_FADE3 		0xAAAAAAAA
#define COLOR_FADE4 		0x8C8C8C8C
#define COLOR_FADE5 		0x6E6E6E6E
#define COLOR_PURPLE 		0xC2A2DAAA
#define COLOR_DBLUE 		0x2641FEAA
#define COLOR_RADIOCHAT		0x8D8DFFFF
#define COLOR_TEAL          0x67AAB1FF
#define COLOR_GENANNOUNCE   0xA9C4E4FF
#define COLOR_GENANNOUNCE2  0xFF8080FF
#define COLOR_ROB  			0x0C8176FF
#define COLOR_BLUE      	0x211CDEC8
#define COLOR_DARKPINK      0xE7AAA5A5
#define COLOR_NEWBIE        0x9DFE8080
#define COLOR_SKEMA2       	0x7E689BFF
#define COLOR_LIGHTGREEN3	0xCEF0ACFF
#define COLOR_GREEN3		0x6DB067AA
#define COLOR_CYAN			0x5EB1B1FF
#define COLOR_BLUE2			0x3E63B8FF
#define COLOR_COOLRED		0xAB0000FF
#define COLOR_SMS 			0xD5EAFFFF
#define COLOR_PET			0xD6A7F1FF

#define SetVehicleParamsCarWindows
#define GetVehicleParamsCarWindows

static gTeam[MAX_PLAYERS];

#undef MAX_PLAYERS
#define MAX_PLAYERS 151


forward DeAMXI(playerid);
public DeAMXI(playerid) {
 	AntiDeAMX();
	return true;
}

#pragma warning disable 239
#pragma warning disable 214
#define Pragma tabsize 0


#define cLocationxx 			1
#define cLocationyx 			2
#define cLocationzx 			3
#define cAnglex 				4
#define cModelx                 5
#define cColorOnex              6
#define cColorTwox              7
#define cOwnerx                 8
#define cValuex                 9
#define cLicensex               10
#define cDescriptionx           11
#define cLockx                  12
#define cTimedx                 13
#define cInscarpricex           14
#define cInsurancecarx          15
#define cKMx                    16
#define cOwnedx                 17
#define cSellx                  18
#define cModsx                  19
#define cPaintJx                20
#define cDaysx                  21
#define cHPx					22
#define cDamage1x				23
#define cDamage2x				24
#define cDamage3x				25
#define cDamage4x				26
#define cGasx					27
#define cKMLastx				28
#define cStagex 				30
#define cStageKMx				31


#define EX_SPLITLENGTH 113
#define EX_SPLITLENGTHH 128
#define MAX_TIMERS (10)
#define MAX_GROUPS (16)
#define MAX_ATMS (25)
#define MAX_SVARS (15)
#define MAX_PERSONAL_CARS (101)
#define MAX_PERSONAL_VEHICLES (20)
#define AdminOnly "You are not allowed to use this command."
#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1)) *%3*1.8)
#define                 hidePlayerDialog(%0)                    ShowPlayerDialogEx(%0, -1, 0, " ", " ", "", "")
#define GetVehicleSeats(%0) (GetVehicleModelSeats(GetVehicleModel(%0)))
timer KickEx[1000](playerid) return Kick(playerid);
#define function%0(%1) forward%0(%1); public%0(%1)
#define ATTACK_TYPE_PLAYERID 1
#define ATTACK_TYPE_IP 2
#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
#define MAX_CHANNEL 1000
#define CHECKPOINT_NONE 0
#define CHECKPOINT_LOCATE 53
#define KEY_AIM (128)
#define KEY_HANDBRAKE (128)
#define SCM SendClientMessage
#define SPECIAL_ACTION_PISSING 68
#define RL_BLACK 0
#define RL_GREEN 1
#define RL_RED 2
#define SCMTA SendClientMessageToAll

		

//new pulamea[MAX_PLAYERS];
new rovwkoninstagram[MAX_PLAYERS]; 
new PalariaProstului[MAX_PLAYERS]; 


//destroytimers
new scriptTimers[MAX_TIMERS+1];

			
new	Iterator: Admins<MAX_PLAYERS>;
new	Iterator: Helpers<MAX_PLAYERS>;
new	Iterator: Reporters<MAX_PLAYERS>;
new	Iterator: Mecanici<MAX_PLAYERS>;
new	Iterator: PlayerPaint<MAX_PLAYERS>;
new	Iterator: Contracts<MAX_PLAYERS>;
new	Iterator: Cops<MAX_PLAYERS>;
new	Iterator: Gangsters<MAX_PLAYERS>;
new	Iterator: Vips<MAX_PLAYERS>;
new	Iterator: InRoulette<MAX_PLAYERS>;





#define TEAM_CYAN 	1
#define TEAM_BLUE 	2
#define TEAM_GREEN 	3
#define TEAM_ORANGE 4
#define TEAM_COR 	5
#define TEAM_BAR 	6
#define TEAM_TAT 	7
#define TEAM_CUN 	8
#define TEAM_STR 	9
#define TEAM_HIT 	10
#define TEAM_ADMIN 	11
#define SQL_PASS ""


/*
	DIALOGS AND OTHERS
*/
enum {
	 DIALOG_GOL, DIALOG_PIN, DIALOG_LOGIN_PIN, DIALOG_VIPWHEELS, DIALOG_PIN2, DIALOG_PIN3, DIALOG_BATTLE, DIALOG_WEEK2, DIALOG_WEEK3, DIALOG_WEEK4, DIALOG_WEEK5, DIALOG_WEEK6, DIALOG_WEEK7, DIALOG_MODE, DIALOG_LOGIN1, DIALOG_LOGIN2, DIALOG_TRYLUCKY, DIALOG_PLATE, Dialog_24, DIALOG_RADIO, DIALOG_MP3, Dialog_Gym, DIALOG_REGISTER2, DIALOG_REGISTER3, DIALOG_HELP, DIALOG_HELP2, DIALOG_CARBUY4, DIALOG_JAIL, DIALOG_SIM, DIALOG_MEGA,
	 DIALOG_REGISTER4, DIALOG_CARSELL, DIALOG_SHOP, DIALOG_CHANGENAME, Dialog_gunshop, DIALOG_LOCATIONLS, DIALOG_TRANSFER, DIALOG_WANTEDON, DIALOG_LOCATIONTUNNING, DIALOG_CARBUY3, DIALOG_GO, DIALOG_FRIENDS_ADD, DIALOG_RAINBOW, DIALOG_IPHONE, DIALOG_BUYGARAGE,
	 DIALOG_LOCATION, DIALOG_COLORID, DIALOG_FWARN, DIALOG_FUNWARN, DIALOG_FPUNINVITE, DIALOG_NOUNINVITE, DIALOG_MEMBERS2, DIALOG_VEHSPAWN, DIALOG_FACTIONS, DIALOG_BAR, DIALOG_REPORT, DIALOG_SEXSHOP, DIALOG_NOSTOCK, DIALOG_FRIENDS_MANAGE, DIALOG_CLAN_TAG,
	 DIALOG_HQS, DIALOG_MEMBERS, DIALOG_CARDAMAGE, DIALOG_HUD, DIALOG_HUD1, DIALOG_HUD2, DIALOG_CUSTOMRADIO, DIALOG_VEHINFO, DIALOG_INSURANCEBUY, DIALOG_SELLCARTO, DIALOG_TRADECAR, DIALOG_CARBUY5, DIALOG_FRIENDS, DIALOG_SPECIAL, DIALOG_XCRATE, DIALOG_NGNAB, DIALOG_PAGETWO, DIALOG_SOUVENIRESHOP,
	 DIALOG_REPORTALTAPROBLEMA, DIALOG_INSURANCEBUY2, DIALOG_PET, DIALOG_PETSHOP, DIALOG_PETx, DIALOG_PETSKIN, DIALOG_VEHSPAWNCAR, DIALOG_UNSTUCK, DIALOG_RAMHOUSE, DIALOG_BUYWALKIE, DIALOG_SELLHIDDEN, DIALOG_LICENTE, DIALOG_LASTS, DIALOG_QUITGROUP, DIALOG_RENTVEH, DIALOG_RULETA_BLACK, DIALOG_RULETA_GREEN, DIALOG_RULETA_RED,
	 DIALOG_RAMBIZ, DIALOG_ATM_MENU, DIALOG_ATM_WITHDRAW, DIALOG_ATM_BALANCE, DIALOG_NAMECHANGES, DIALOG_SELLHOUSETOSTATE, DIALOG_SELLBIZTOSTATE, DIALOG_CLANMEMBERS2, DIALOG_CLANSETTINGS, DIALOG_CLANMEMBERS3, DIALOG_CARBUY8, DIALOG_FREE, DIALOG_STAFF,
	 DIALOG_CLAN, DIALOG_CLANMEMBERS, DIALOG_CLANCHECKPOINTTURF, DIALOG_QUITCLAN, DIALOG_CHOOSECLANNAME, DIALOG_RAMHQ, DIALOG_CLAN_COLOR, DIALOG_CLAN_CHANGERANK2, DIALOG_CRATES, DIALOG_TOG, DIALOG_FRIENDS_INFO, DIALOG_SHOPPREMIUM, DIALOG_WINTERSHOP, DIALOG_AMANET,
	 DIALOG_CLAN_RANK, DIALOG_CLAN_WARNS, DIALOG_CLAN_CHANGERANK, DIALOG_CHOOSECLANTAG, DIALOG_CLANVEHS, DIALOG_BUYCLANVEH, DIALOG_NEWPASS, DIALOG_HUD4, DIALOG_CARBUY, DIALOG_CARBUY2, DIALOG_QUESTS, DIALOG_CHEATS,
	 DIALOG_VIPNAMECOLOR, DIALOG_BUG, DIALOG_GEMS_VEHICLES, DIALOG_VOUCHERS, DIALOG_BUYVOUCHERS, DIALOG_ADMINSHOP, DIALOG_GOLDENSHOP, DIALOG_GPSother, DIALOG_CLOTHES, DIALOG_BUYSKIN, DIALOG_SPECIALSKIN, DIALOG_NEONTYPES, DIALOG_SOLID
}


#define MAX_TICKS 198

new housestring[200][256];

#define MAX_MINIGAMES 3
#define MAX_MAPS 5

/*
	VARIABILES
*/
new SolidNeon[MAX_VEHICLES];
new SQL = -1, blockattack, acdebugserver;
new Timer:timerspeedometer[MAX_PLAYERS], Timer:timerspectate[MAX_PLAYERS];
new Float:DMInfo[MAX_PLAYERS][3], HealTimer[MAX_PLAYERS], sarmale[MAX_PLAYERS], barcadelay[MAX_PLAYERS], santadelay[MAX_PLAYERS], jetpackdelay[MAX_PLAYERS], EngineDelay[MAX_PLAYERS], Listening[MAX_PLAYERS], TaxiCall[MAX_PLAYERS], crasher[MAX_PLAYERS], specfaction[MAX_PLAYERS],
	TaxiAccepted[MAX_PLAYERS], TaxiFare[MAX_PLAYERS], TaxiTimer[MAX_PLAYERS], TaxiMoneySpent[MAX_PLAYERS], TaxiMoneyEarned[MAX_PLAYERS], TaxiDriver[MAX_PLAYERS], BreachID[MAX_PLAYERS], SellHouseID[MAX_PLAYERS], sim[MAX_PLAYERS],
	ShowDMG[MAX_PLAYERS], FireworkTimer[MAX_PLAYERS], LiveQuestion[MAX_PLAYERS][128], TimerQuestion[MAX_PLAYERS], mutecomenzi[MAX_PLAYERS], paintkills[MAX_PLAYERS], special[MAX_PLAYERS], mega[MAX_PLAYERS], xcrate[MAX_PLAYERS], carrent[MAX_VEHICLES],
	WantName[MAX_PLAYERS][30], Text3D:Pet[MAX_PLAYERS], TypeName[MAX_PLAYERS], LastMove[MAX_PLAYERS], forcenamechange[MAX_PLAYERS], DrugTimer[MAX_PLAYERS], CarCollisions[MAX_PLAYERS], SelFriend[MAX_PLAYERS][20], BrwFriend[MAX_PLAYERS], rainbowspeed[MAX_PLAYERS],
	examcar[MAX_PLAYERS], LastBiz[MAX_PLAYERS], LastBizTime[MAX_PLAYERS], LastPlayer[MAX_PLAYERS], Selected[MAX_PLAYERS][101], Selected2[MAX_PLAYERS], cratetimer[MAX_PLAYERS], timecrate[MAX_PLAYERS],
	CarPlate[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][30], restartReason[72], CarMod[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][17], CarOwner[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][50], SelectedCar[MAX_PLAYERS], SellTradeID[MAX_PLAYERS], SellTradePrice[MAX_PLAYERS],
	SellTradeTimer[MAX_PLAYERS], SellHiddenID[MAX_PLAYERS], SellHiddenPrice[MAX_PLAYERS], Float:old_veh_pos[MAX_VEHICLES + 1][3], RepairTime[MAX_PLAYERS], pnsmoney[MAX_PLAYERS], 
	IsPlayerAFK[MAX_PLAYERS], object, waitwar[15], StageVehicle[MAX_PLAYERS], EnterInModShop[MAX_PLAYERS], PlayerEnterTime[MAX_PLAYERS], Undercover[MAX_PLAYERS], SpeedBoost[MAX_PLAYERS],
	WantedName[MAX_PLAYERS][128], WantedReason[MAX_PLAYERS], WantedPlayer[MAX_PLAYERS], WantedTimer[MAX_PLAYERS], Float:evex, Float:evey, Float:evez, fly_hack[MAX_PLAYERS], fly_warnings[MAX_PLAYERS],
	eventenabled, pickup_event, virtuallevent, interiorevent, gslsenter1, gslsenter2, gslsenter3, gslsenter4, toglc[MAX_PLAYERS], BigEar[MAX_PLAYERS], Carspawn[MAX_VEHICLES], gPlayerUsingLoopingAnim[MAX_PLAYERS], gPlayerAnimLibsPreloaded[MAX_PLAYERS],
	masini = 0, stockss = 0, factionss = 0, wantedlost[MAX_PLAYERS], Clanidoff[MAX_PLAYERS], antirem[MAX_PLAYERS], login[MAX_PLAYERS], QuestionsOn = 0, vehEngine[MAX_VEHICLES], AdminDuty[MAX_PLAYERS],
	tazer[MAX_PLAYERS], PlayerHandsup[MAX_PLAYERS], XDeaths[MAX_PLAYERS], LastDeath[MAX_PLAYERS], playerdeath[MAX_PLAYERS], bool:WeaponData[MAX_PLAYERS][13], Cash[MAX_PLAYERS], bussines = 0, refuelwait[MAX_PLAYERS],
	iGMXTick,iGMXTimer, housess = 0, turfsss = 0, Vehicless = 0, togfind[MAX_PLAYERS], HaveHelmet[MAX_PLAYERS], FactionOffer[MAX_PLAYERS], hudactivated[MAX_PLAYERS], dialogID[MAX_PLAYERS], souvenire_objects[MAX_VEHICLES][17],
	antispamcomenzi[MAX_PLAYERS], timersoo[MAX_PLAYERS], soexpire[MAX_PLAYERS], somatee[MAX_PLAYERS], somated[MAX_PLAYERS], somatename[MAX_PLAYERS][30], pizzaj[MAX_PLAYERS], vehRadio[MAX_VEHICLES], customRadio[MAX_VEHICLES][128],
	reporttext[MAX_PLAYERS][128], pizzatime[MAX_PLAYERS], pizzaprize[MAX_PLAYERS], failpizza[MAX_PLAYERS], PizzaCP[MAX_PLAYERS], targetfind[MAX_PLAYERS], InHouse[MAX_PLAYERS], InBussines[MAX_PLAYERS], timerfarmer[MAX_PLAYERS],
	InHQ[MAX_PLAYERS], WTChannel[MAX_PLAYERS], arrestcop[MAX_PLAYERS] = -1, gatelspd, gatelvpd, gatelvpd2, lvpdbar, lspdbar, UsingDrugs[MAX_PLAYERS], CP[MAX_PLAYERS], Float:LastVel[MAX_PLAYERS][3], bidhouseid, bidbusinessid, maxbid, lastplayerbid, licitatiactiva, moneyplayerbid[MAX_PLAYERS],
	MatsHolding[MAX_PLAYERS], MatsOffer[MAX_PLAYERS], MatsPrice[MAX_PLAYERS], MatsAmmo[MAX_PLAYERS], SellgunOffer[MAX_PLAYERS], SellgunPrice[MAX_PLAYERS], escapeprogress[MAX_PLAYERS], escapedat[MAX_PLAYERS], 
	SellgunMats[MAX_PLAYERS], SellgunAmmo[MAX_PLAYERS], SellgunID[MAX_PLAYERS], ofercar[MAX_PLAYERS], hiddenoffer[MAX_PLAYERS], hiddenprice[MAX_PLAYERS], LiveOffer[MAX_PLAYERS], TalkingLive[MAX_PLAYERS], ConsumingMoney[MAX_PLAYERS],
	carprice[MAX_PLAYERS], primesccar[MAX_PLAYERS], cartype[MAX_PLAYERS], CarID[MAX_PLAYERS], tradeofferer[MAX_PLAYERS], tradediff[MAX_PLAYERS], tradecars[MAX_PLAYERS], tradecars2[MAX_PLAYERS], tradetype[MAX_PLAYERS], tradetype2[MAX_PLAYERS],
	flymode[MAX_PLAYERS], adtext[MAX_PLAYERS][144], questiontext[MAX_PLAYERS][144], RegistrationStep[MAX_PLAYERS], TakingLesson[MAX_PLAYERS], UsedFind[MAX_PLAYERS], NoFuel[MAX_PLAYERS],PlayerStoned[MAX_PLAYERS],
	Tax, TaxValue, MedicCall[MAX_PLAYERS], MedicAccepted[MAX_PLAYERS], MedicTime[MAX_PLAYERS], TicketOffer[MAX_PLAYERS], TicketMoney[MAX_PLAYERS], Float:PlayerPosii[MAX_PLAYERS][6], ac_trollvehicle,
	PlayerCuffed[MAX_PLAYERS], PlayerCuffed2[MAX_PLAYERS], PlayerCuffedTime[MAX_PLAYERS], PlayerTazeTime[MAX_PLAYERS], RepairOffer[MAX_PLAYERS], arepeste[MAX_PLAYERS], pesteprice[MAX_PLAYERS], painttime,
	RepairPrice[MAX_PLAYERS], RefillOffer[MAX_PLAYERS], RefillPrice[MAX_PLAYERS], RepairCar[MAX_PLAYERS], TransferOffer[MAX_PLAYERS], TransferMoney[MAX_PLAYERS], DrugOffer[MAX_PLAYERS], DrugPrice[MAX_PLAYERS], DrugGram[MAX_PLAYERS],
	WantedPoints[MAX_PLAYERS], OnDuty[MAX_PLAYERS], gLastCar[MAX_PLAYERS], gPlayerCheckpointStatus[MAX_PLAYERS], Freezed[MAX_PLAYERS], gPlayerLogged[MAX_PLAYERS], gPlayerLogTries[MAX_PLAYERS], gNews[MAX_PLAYERS], quest_type[MAX_PLAYERS],
	gFam[MAX_PLAYERS], Spectate[MAX_PLAYERS], SpectateState[MAX_PLAYERS], CellTime[MAX_PLAYERS], HireCar[MAX_PLAYERS], HidePM[MAX_PLAYERS], PhoneOnline[MAX_PLAYERS], PhoneOnlineCalls[MAX_PLAYERS], 
	TurfsDisp[MAX_PLAYERS], Mobile[MAX_PLAYERS], gPlayerAccount[MAX_PLAYERS], gCarLock[600], Gas[MAX_VEHICLES], Refueling[MAX_PLAYERS], sanctiondelay[MAX_PLAYERS], seeGangZones[MAX_PLAYERS], ac_bullets, ac_playerbullets[MAX_PLAYERS],
	ClanDuty[MAX_PLAYERS], seeClanChat[MAX_PLAYERS], Float:Health[MAX_PLAYERS], Float:Armour[MAX_PLAYERS], intrebareaccept[MAX_PLAYERS], acwarnings[MAX_PLAYERS], damagetimer[MAX_PLAYERS],
	facerob[MAX_PLAYERS], reportstuck[MAX_PLAYERS], reportdat[MAX_PLAYERS], delaypay[MAX_PLAYERS], adatad[MAX_PLAYERS], helperduty[MAX_PLAYERS], adatn[MAX_PLAYERS], StartDate[90], togdamage[MAX_PLAYERS], last_quest[MAX_PLAYERS],
	servicedelay[MAX_PLAYERS], BuyCar[MAX_PLAYERS], diceid[MAX_PLAYERS], dicemoney[MAX_PLAYERS], delayfactions[MAX_PLAYERS], objectfireman[MAX_PLAYERS], vObject[MAX_VEHICLES],
	ac_fly, ac_allowed, ac_speedhack, ac_onplayerdeath, ac_trolltimer, ac_crasher, ac_fakedamage, ac_teleport, ac_kills[MAX_PLAYERS], togvip[MAX_PLAYERS], CarVipName[MAX_PLAYERS][MAX_PERSONAL_VEHICLES][20], radar_police[MAX_PLAYERS],
	NormalOffer[MAX_PLAYERS], NormalPrice[MAX_PLAYERS], ExtraOffer[MAX_PLAYERS], ExtraPrice[MAX_PLAYERS], PremiumOffer[MAX_PLAYERS], PremiumPrice[MAX_PLAYERS], intratwar[MAX_PLAYERS], turfvehicletimer[MAX_PLAYERS], skemawar[MAX_PLAYERS], contract_get[MAX_PLAYERS];


new rent_sultan, rent_nrg, rent_super, rent_sandking, rent_flash, rent_comet, rent_mtb;
new Actor1;


enum beforeSpectateInfo {
 	Float: pOldPos[3], pWorld, pInt, pState, pInVehicle, bool: pSpectating
};	new BeforeSpectate[MAX_PLAYERS][beforeSpectateInfo];


new Timer:deathdeletetime[MAX_PLAYERS];
new Timer:drug[MAX_PLAYERS];
new Timer:timerptad[MAX_PLAYERS];
new Timer:timerrainbow[MAX_PLAYERS];
new Timer:timer_licitatie;

//SFV
//new havecar[MAX_PLAYERS], modelcar[MAX_PLAYERS], sfvcar[MAX_PLAYERS], vehicleRank[MAX_VEHICLES];

new Text:Ruleta_TD[17],  PlayerText:Ruleta_PTD[MAX_PLAYERS][3], Text: RestartTD, inruleta[MAX_PLAYERS], ruletacolors[38], rltime, rlstarted, rlbet[MAX_PLAYERS][3];
new PlayerText:TimeLeftWar1[MAX_PLAYERS], PlayerText:LogoTD, PlayerText: TextJos[MAX_PLAYERS], PlayerText:FindTXD[MAX_PLAYERS][2], Text:Time, Text:Date, PlayerText:TextDrawSpec[MAX_PLAYERS][6], PlayerText:DamageInformer[MAX_PLAYERS][2],
	PlayerText:Fuell[MAX_PLAYERS], PlayerText:Speedd[MAX_PLAYERS], PlayerText:Odom[MAX_PLAYERS], PlayerText:carlocked[MAX_PLAYERS], PlayerText:HUD[4][MAX_PLAYERS], PlayerText:PaintTD[MAX_PLAYERS], PlayerText:TimeLeftWar2[MAX_PLAYERS], Text:Damage[2],
	PlayerText:Jailtime[MAX_PLAYERS], PlayerText:WantedText[MAX_PLAYERS], PlayerText:RentCarText[MAX_PLAYERS], PlayerText:cratetextdraw[MAX_PLAYERS][4], PlayerText:textdrawfarmer[MAX_PLAYERS], PlayerText:dmv_textdraw[MAX_PLAYERS][10],
	PlayerText: LevelTD[MAX_PLAYERS][3], PlayerText: StagePTD[MAX_PLAYERS], Text: StageTD[2];
new Float:rrx, Float:rry, Float:rrz, objstore[128], cbjstore[128], ghour = 0, gminute = 0, gsecond = 0, dollah = 100000, realtime = 1, wotime = 15, levelcost = 28000, realchat = 1,
	timeshift = -1, shifthour, levelexp = 3, pickups, Float:TeleportDest[MAX_PLAYERS][3], Float:TelePos[MAX_PLAYERS][6];

new Float:gRandomRob[11][3] = {
{2308.8533,-1715.0500,14.6496},
{1921.6538,-1115.0759,27.0883},
{351.7325,-1197.2733,76.5156},
{1182.0050,-1068.1383,29.1936},
{2435.2007,-1289.3853,25.3479},
{2248.9714,961.5317,10.8130},
{2787.9294,2222.7788,14.6615},
{1597.7314,2093.5139,11.3125},
{1029.9531,2028.0458,11.4683},
{1609.4539,2789.3052,10.8203},
{2594.5935,748.7582,11.0234}
};

new Float:gRandomRob2[10][3] = {
{1695.5579,-2125.8223,13.8101},
{2522.6125,-2018.8566,14.0744},
{2751.7439,-1962.8811,13.5469},
{2553.0874,-958.2475,82.6460},
{166.8161,-1758.7646,6.7969},
{2042.4943,732.5795,11.4609},
{2581.5403,1060.6929,11.7309},
{1435.2942,2548.9001,10.8203},
{1029.7107,1847.9226,11.4683},
{1706.7246,950.2996,10.8203}
};

new Float:gRandomJailSpawns[3][3] = {
{263.7989,85.8850,1001.0391},
{264.0302,81.2118,1001.0391},
{263.8704,77.0021,1001.0391}
};

new Float:gRandomAJailSpawns[4][3] = {
{215.5260,110.5124,1000.0156},
{219.3602,109.9994,1000.0156},
{223.3645,109.9972,1000.0156},
{227.1875,110.2887,1000.0156}
};

#define GasMax 100

new aVehicleNames[212][] =
{
	{"Landstalker"}, {"Bravura"}, {"Buffalo"}, {"Linerunner"}, {"Perrenial"}, {"Sentinel"}, {"Dumper"}, {"Firetruck"},
	{"Trashmaster"}, {"Stretch"}, {"Manana"}, {"Infernus"}, {"Voodoo"}, {"Pony"}, {"Mule"}, {"Cheetah"},
	{"Ambulance"}, {"Leviathan"}, {"Moonbeam"}, {"Esperanto"}, {"Taxi"}, {"Washington"}, {"Bobcat"}, {"Mr Whoopee"},
	{"BF Injection"}, {"Hunter"}, {"Premier"}, {"Enforcer"}, {"Securicar"}, {"Banshee"}, {"Predator"}, {"Bus"},
	{"Rhino"}, {"Barracks"}, {"Hotknife"}, {"Trailer"}, {"Previon"}, {"Coach"}, {"Cabbie"}, {"Stallion"},
	{"Rumpo"}, {"RC Bandit"}, {"Romero"}, {"Packer"}, {"Monster"}, {"Admiral"}, {"Squalo"}, {"Seasparrow"},
	{"Pizzaboy"}, {"Tram"}, {"Trailer"}, {"Turismo"}, {"Speeder"}, {"Reefer"}, {"Tropic"}, {"Flatbed"},
	{"Yankee"}, {"Caddy"}, {"Solair"}, {"Berkley's RC Van"}, {"Skimmer"}, {"PCJ-600"}, {"Faggio"}, {"Freeway"},
	{"RC Baron"}, {"RC Raider"}, {"Glendale"}, {"Oceanic"}, {"Sanchez"}, {"Sparrow"}, {"Patriot"}, {"Quad"},
	{"Coastguard"}, {"Dinghy"}, {"Hermes"}, {"Sabre"}, {"Rustler"}, {"ZR-350"}, {"Walton"}, {"Regina"},
	{"Comet"}, {"BMX"}, {"Burrito"}, {"Camper"}, {"Marquis"}, {"Baggage"}, {"Dozer"}, {"Maverick"},
	{"News Chopper"}, {"Rancher"}, {"FBI Rancher"}, {"Virgo"}, {"Greenwood"}, {"Jetmax"}, {"Hotring"}, {"Sandking"},
	{"Blista Compact"}, {"Police Maverick"}, {"Boxville"}, {"Benson"}, {"Mesa"}, {"RC Goblin"}, {"Hotring Racer A"}, {"Hotring Racer B"},
	{"Bloodring Banger"}, {"Rancher"}, {"Super GT"}, {"Elegant"}, {"Journey"}, {"Bike"}, {"Mountain Bike"}, {"Beagle"},
	{"Cropduster"}, {"Stuntplane"}, {"Tanker"}, {"Road Train"}, {"Nebula"}, {"Majestic"}, {"Buccaneer"}, {"Shamal"},
	{"Hydra"}, {"FCR-900"}, {"NRG-500"}, {"HPV-1000"}, {"Cement Truck"}, {"Tow Truck"}, {"Fortune"}, {"Cadrona"},
	{"FBI Truck"}, {"Willard"}, {"Forklift"}, {"Tractor"}, {"Combine"}, {"Feltzer"}, {"Remington"}, {"Slamvan"},
	{"Blade"}, {"Freight"}, {"Streak"}, {"Vortex"}, {"Vincent"}, {"Bullet"}, {"Clover"}, {"Sadler"},
	{"Firetruck"}, {"Hustler"}, {"Intruder"}, {"Primo"}, {"Cargobob"}, {"Tampa"}, {"Sunrise"}, {"Merit"},
	{"Utility"}, {"Nevada"}, {"Yosemite"}, {"Windsor"}, {"Monster A"}, {"Monster B"}, {"Uranus"}, {"Jester"},
	{"Sultan"}, {"Stratum"}, {"Elegy"}, {"Raindance"}, {"RC Tiger"}, {"Flash"}, {"Tahoma"}, {"Savanna"},
	{"Bandito"}, {"Freight"}, {"Trailer"}, {"Kart"}, {"Mower"}, {"Duneride"}, {"Sweeper"}, {"Broadway"},
	{"Tornado"}, {"AT-400"}, {"DFT-30"}, {"Huntley"}, {"Stafford"}, {"BF-400"}, {"Newsvan"}, {"Tug"},
	{"Trailer"}, {"Emperor"}, {"Wayfarer"}, {"Euros"}, {"Hotdog"}, {"Club"}, {"Trailer"}, {"Trailer"},
	{"Andromada"}, {"Dodo"}, {"RCCam"}, {"Launch"}, {"Police Car (LSPD)"}, {"Police Car (SFPD)"}, {"Police Car (LVPD)"}, {"Police Ranger"},
	{"Picador"}, {"S.W.A.T. Van"}, {"Alpha"}, {"Phoenix"}, {"Glendale"}, {"Sadler"}, {"Luggage Trailer A"}, {"Luggage Trailer B"},
	{"Stair Trailer"}, {"Boxville"}, {"Farm Plow"}, {"Utility Trailer"}
};

enum zInfo {
    zID, zOwned, Float:zMinX, Float:zMinY, Float:zMaxX, Float:zMaxY
};
new TurfInfo[50][zInfo],
	Turfs[50];
	
enum wInfo {
    wFaction, 
	wAttacker, 
	wTime,
};
new WarInfo[sizeof(TurfInfo)][wInfo], WarScoreF[16][sizeof(TurfInfo)], ucideri[MAX_PLAYERS][sizeof(TurfInfo)], decese[MAX_PLAYERS][sizeof(TurfInfo)],
	worstscoreat[sizeof(TurfInfo)], worstmemberat[sizeof(TurfInfo)], worstscoredf[sizeof(TurfInfo)], worstmemberdf[sizeof(TurfInfo)], bestscoreat[sizeof(TurfInfo)],
	bestmemberat[sizeof(TurfInfo)], bestscoredf[sizeof(TurfInfo)], bestmemberdf[sizeof(TurfInfo)], DeelayWar[16], InWar[16];

enum pSpec
{
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

#define 		CLAN_CHANGE_RANK_LOWER_7  			1
#define 		CLAN_CHANGE_RANK_EQUAL_7			2
#define 		MAX_CLANZONES 						20
#define 		MAX_CLAN_VEHICLES					500


enum clanInformations {
	clanID, clanSlots, clanName[50], clanTag[20], clanRankName1[32], clanRankName2[32], clanRankName3[32], clanRankName4[32], clanRankName5[32], clanRankName6[32], clanRankName7[32], clanColor[20], clanSafe
};
new clanVariables[200][clanInformations], serverClans = 0;

enum clanZonesInformations {
	clanZoneID, clanZoneClan, clanZoneObject, clanZoneTurf, clanZoneAttacked, clanZoneProcent, Float: clanZoneMinX, Float: clanZoneMinY, Float: clanZoneMaxX, Float: clanZoneMaxY, Float: clanZoneObjX, Float: clanZoneObjY, Float: clanZoneObjZ, Float: clanZoneObjRotX, Float: clanZoneObjRotY, Float: clanZoneObjRotZ
}; new clanZoneVariables[MAX_CLANZONES][clanZonesInformations], serverClanZones = 0;

enum clanVehiclesInformations {
	clanVehicleID, clanVehicleClan, clanVehicleRank, clanVehicleColor1, clanVehicleColor2, clanVehicleObject, clanVehicleModel, clanVehicleInGame, Float: clanVehicleX, Float: clanVehicleY, Float: clanVehicleZ, Float: clanVehicleA
} new clanVehiclesVariables[MAX_CLAN_VEHICLES][clanVehiclesInformations], serverClanVehicles = 0;

enum pInfo { 
	pKey[129], pPinCode, pManager, pJetpack, pPet, pPetStatus, pPetName[30], pPetLevel, pXcrate, pMoneyBag, pFragments, pGiftLevel, pRaport[7], pWitch, pReborn, pGiftPoints, pGiftOpened, pBattlepasLevel, pBattlepasQuests, pBattlepas, pBattlePassLevelToUp, pBattlePassMissions[18], pColor, pNormalName[30], pLevel, pAdmin, pHelper, pPremiumAccount, pPremiumPoints, pPhoneBlocked[MAX_PLAYERS], Float:pConnectTime, pSelected[MAX_PLAYER_NAME], pCar[MAX_PERSONAL_VEHICLES],
	pReg, pSex, pAge, pGasCan, pExp, pCash, pAccount, pCrimes, pArrested, pWantedDeaths, pPhoneBook, pPhone, pWantedLevel, pFlyMode, pSpawnChange, pInt, pTut, pGems, pClan, pCRank, pCWarns,
	pHeadValue, pJailed, pJailTime, pMats, pDrugs, pLeader, pMember, pQuestDone, pRank, pGlasses, pHats, pFACWarns, pFpunish, pCarID[MAX_PERSONAL_VEHICLES], pEmail[64], pClanTag, pLeaderWarns, pStaffWarns, pCarRainbow[MAX_PERSONAL_VEHICLES],
	pLocal, pTeam, pModel, pPnumber, pCorona, pGloburi, pPhousekey, pPbiskey, pCarLicSuspend, pGunLicSuspend, pRob, pCarPaintJ[MAX_PERSONAL_VEHICLES], pEscapePoints, pWarns, pFuel, pSleeping, pRented, pPayDay, pCarTranscendent[MAX_PERSONAL_VEHICLES],
	pSQLID, pVictim[64], pAccused[64], pCrime1[64], pCrime2[64], pCrime3[64], pStatus, pMp3, pFWorks, pHUD1, pHUD2, pHUD3, pFPS, pCarSlots, pFightStyle, pDrunkLevelLast, pWTalkie, pCarDamage3[MAX_PERSONAL_VEHICLES],
	pVirtualPD, pFactionJoin, pCredits, pPetPoints, pHiddenColor, Float:pCarLocX[MAX_PERSONAL_VEHICLES], Float:pCarLocY[MAX_PERSONAL_VEHICLES], Float:pCarLocZ[MAX_PERSONAL_VEHICLES], pCarModel[MAX_PERSONAL_VEHICLES], pSpeaker, pNeon,
	Float:pCarAngle[MAX_PERSONAL_VEHICLES], pCarColor2[MAX_PERSONAL_VEHICLES], pCarLock[MAX_PERSONAL_VEHICLES], pCarInsPrice[MAX_PERSONAL_VEHICLES], pCarIns[MAX_PERSONAL_VEHICLES], pCarColor1[MAX_PERSONAL_VEHICLES],
	pCarBuyTime[MAX_PERSONAL_VEHICLES], Float:pCarKM[MAX_PERSONAL_VEHICLES], pCarKMLast[MAX_PERSONAL_VEHICLES], Float:pCarHP[MAX_PERSONAL_VEHICLES], pCarDamage2[MAX_PERSONAL_VEHICLES], pQuests, pMiliarde, pCarSouvenrire[MAX_PERSONAL_VEHICLES],
	pCarDamage1[MAX_PERSONAL_VEHICLES], pCarDamage4[MAX_PERSONAL_VEHICLES], pCarGas[MAX_PERSONAL_VEHICLES], pVIP, pRmute, pNmute, pMiniCrate, pBigCrate, pGigantCrate, pRoll, pCarLic, pGunLic, pBoatLic,
	pCarVIP[MAX_PERSONAL_VEHICLES], pSantaHat, pPetSkin, pCarStage[MAX_PERSONAL_VEHICLES], pCarStageKM[MAX_PERSONAL_VEHICLES], pCarVipColor[MAX_PERSONAL_VEHICLES], pNormalVoucher, pExtraVoucher, pPremiumVoucher, pTokens, pGoldenAccount, pTimeCrate, pKills, pMuteTime, pFlyLic, pDaysAmanet, pCarAmanet, pHouseAmanet, pBusinessAmanet, pMoneyAmanet,
}; 	new PlayerInfo[MAX_PLAYERS][pInfo];

stock IsPlayerInArea(playerid, Float: MinX, Float: MinY, Float: MaxX, Float: MaxY) {
	new Float: X, Float: Y, Float: Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(X >= MinX && X <= MaxX && Y >= MinY && Y <= MaxY)  return true;
	return 0; }	

enum hInfo {
	hID, Float:hEntrancex, Float:hEntrancey, Float:hEntrancez, Float:hExitx, Float:hExity, Float:hExitz, hOwner[25], hDiscription[64], hValue, hPrice, hInterior,
	hInteriorType, hLock, hOwned, hRent, hRentabil, hTakings, hLevel, hVirtual, Float: hGarageX, Float: hGarageY, Float: hGarageZ, hGarage
};
new HouseInfo[200][hInfo], Text3D:HouseLabel[sizeof(HouseInfo)], HousePickup[200], Text3D:GarageLabel[sizeof(HouseInfo)], GaragePickup[200]; 

enum vehInfo {
	vehModel, vehColor1, vehColor2, vehGroup, vehRank, vehCarID, vehCarIDD, Float:vehPosX, Float:vehPosY, Float:vehPosZ, Float:vehRotation
};	new VehicleInfo[1000][vehInfo];

enum atmInfo {
	Float: fATMPos[3], Float: fATMPosRot[3], rObjectId
};	new AtmInfo[MAX_ATMS][atmInfo];

enum bInfo {
	bID, bOwned, bOwner[25], bMessage[50], Float:bEntranceX, Float:bEntranceY, Float:bEntranceZ, Float:bExitX, Float:bExitY, Float:bExitZ, bLevelNeeded, bBuyPrice, bPrice,
	bEntranceCost, bTill, bLocked, bInterior, bVirtual, bSbiz, bType
};	new BizzInfo[55][bInfo], Text3D:BizzLabel[sizeof(BizzInfo)];

new spoiler[20][0] = {
	{1000}, {1001}, {1002}, {1003}, {1014}, {1015}, {1016}, {1023}, {1058}, {1060}, {1049}, {1050}, {1138}, {1139}, {1146}, {1147}, {1158}, {1162}, {1163}, {1164}
};

new nitro[3][0] = {
	{1008}, {1009}, {1010}
};

new fbumper[23][0] = {
	{1117}, {1152}, {1153}, {1155}, {1157}, {1160}, {1165}, {1167}, {1169}, {1170}, {1171}, {1172}, {1173}, {1174}, {1175}, {1179}, {1181}, {1182}, {1185}, {1188}, {1189}, {1192}, {1193}
};

new rbumper[22][0] = {
	{1140}, {1141}, {1148}, {1149}, {1150}, {1151}, {1154}, {1156}, {1159}, {1161}, {1166}, {1168}, {1176}, {1177}, {1178}, {1180}, {1183}, {1184}, {1186}, {1187}, {1190}, {1191}
};

new exhaust[28][0] = {
	{1018}, {1019}, {1020}, {1021}, {1022}, {1028}, {1029}, {1037}, {1043}, {1044}, {1045}, {1046}, {1059}, {1064}, {1065}, {1066}, {1089}, {1092}, {1104}, {1105}, {1113}, {1114},
	{1126}, {1127}, {1129}, {1132}, {1135}, {1136}
};

new bventr[2][0] = {
	{1142}, {1144}
};

new bventl[2][0] = {
	{1143}, {1145}
};

new bscoop[4][0] = {
	{1004}, {1005}, {1011}, {1012}
};

new rscoop[17][0] = {
	{1006}, {1032}, {1033}, {1035}, {1038}, {1053}, {1054}, {1055}, {1061}, {1067}, {1068}, {1088}, {1091}, {1103}, {1128}, {1130}, {1131}
};

new lskirt[21][0] = {
	{1007}, {1026}, {1031}, {1036}, {1039}, {1042}, {1047}, {1048}, {1056}, {1057}, {1069}, {1070}, {1090}, {1093}, {1106}, {1108}, {1118}, {1119}, {1133}, {1122}, {1134}
};

new rskirt[21][0] = {
	{1017}, {1027}, {1030}, {1040}, {1041}, {1051}, {1052}, {1062}, {1063}, {1071}, {1072}, {1094}, {1095}, {1099}, {1101}, {1102}, {1107}, {1120}, {1121}, {1124}, {1137}
};

new hydraulics[1][0] = {
	{1087}
};

new vbase[1][0] = {
	{1086}
};

new rbbars[4][0] = {
	{1109}, {1110}, {1123}, {1125}
};

new fbbars[2][0] = {
	{1115}, {1116}
};

new wheels[17][0] = {
	{1025}, {1073}, {1074}, {1075}, {1076}, {1077}, {1078}, {1079}, {1080}, {1081}, {1082}, {1083}, {1084}, {1085}, {1096}, {1097}, {1098}
};

new vlights[2][0] = {
	{1013}, {1024}
};

enum vInfo {
	vID, vStock, vPrice, vModel, vSpeed, vName[255]
};
new Stock[106][vInfo];

enum Factions {
	fID, fName[128], Float:fcX, Float:fcY, Float:fcZ, Float:fceX, Float:fceY, Float:fceZ, Float:fSafePos[3], fSafePickupID, Text3D:fSafeLabelID, fMats, fDrugs, fBank, fAnn[128], fWin, fLost,
	fMembers, fMaxMembers, fMinLevel, fApplication, fInterior, fVirtual, fMapIcon, fLocked, fPickupID, fPickupIDD, Text3D:fLabelID, fRankName1[64], fRankName2[64], fRankName3[64], fRankName4[64], fRankName5[64],
	fRankName6[64], fRankName7[64]
};
new DynamicFactions[17][Factions];

new GunNames[55][] = {
	"Punch", "Brass Knuckles", "Golf Club", "Nitestick", "Knife", "Baseball Bat", "Showel", "Pool Cue",
	"Katana", "Chainsaw", "Purple Dildo", "Small White Dildo", "Long White Dildo", "Vibrator", "Flowers",
	"Cane", "Grenade", "Tear Gas Grenade", "Molotov", "Vehicle Missile", "Hydra Flare", "Jetpack",
	"Colt .45", "Silenced Colt .45", "Desert Eagle", "Shotgun", "Sawn-off", "Combat Shotgun", "Micro UZI",
	"MP5", "AK-47", "M4A1", "Tec-9", "Rifle", "Sniper Rifle", "Rocket Launcher", "HS Rocket Launcher", "Flamethrower",
	"Minigun", "Satchel Charge", "Detonator", "Spraycan", "Fire Extinguisher", "Camera", "Nightvision Goggles",
	"Thermal Goggles", "Parachute", "Fake Pistol", "", "Vehicle", "Helicopter", "Explosion", "", "Drowned", "Splat"
};	

new Peds[153][1] = {
{1},{2},{6},{8},{9},{10},{12},{13},{14},{15},{16},{18},{19},{20},{21},{22},{23},{24},{25},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37},{38},{39},{40},{41},{42},{43},{44},{45},{47},{48},{49},{50},{51},{52},{53},{54},{56},{57},{58},{60},
{62},{63},{64},{65},{66},{67},{68},{69},{75},{77},{78},{79},{80},{81},{85},{87},{88},{89},{91},{92},{94},{95},{96},{97},{99},{101},{129},{130},{131},{132},{133},{134},{135},{136},{137},{138},{139},{140},{142},{143},{145},{146},{151},{152},{154},
{156},{157},{158},{159},{160},{161},{162},{168},{170},{178},{179},{180},{182},{183},{192},{193},{196},{197},{198},{199},{200},{201},{202},{205},{207},{209},{210},{212},{213},{214},{215},{216},{229},{230},{231},{232},{233},{234},{235},{236},{237},
{238},{239},{243},{244},{245},{246},{249},{250},{251},{252},{256},{257},{260},{262},{263},{268},{298}
};

/*
	START 
*/

main() { print("status: loaded server"); print("----------------------------------"); }

function Float:GetDistanceBetweenPlayers(playerid, id) {
	new Float: x, Float: y, Float: z, Float: xx, Float: yy, Float: zz;
	if(!IsPlayerConnected(playerid) && !IsPlayerConnected(id)) return -1.00;
	GetPlayerPos(playerid, x, y, z), GetPlayerPos(id, xx, yy, zz);
	return floatsqroot(floatpower(floatabs(floatsub(x, xx)), 2) + floatpower(floatabs(floatsub(y, yy)), 2) + floatpower(floatabs(floatsub(z, zz)), 2)); }
strtok(const string[], &index) {
	new length = strlen(string), offset, result[20];
	while((index > length) && (string[index] <= ' ')) {
		index ++;
	}
	offset = index;
	while((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof result - 1))) {
		result[index - offset] = string[index];
		index ++;
	}
	result[index - offset] = (EOS);
	return result; }
stock IsKeyJustDown(key, newkeys, oldkeys) {
	if((newkeys & key) && !(oldkeys & key)) return true;
	return 0; }
stock GetClosestVehicle2(playerid, Float: distance) {
	new Float: x, Float: y, Float: z, Float: vX, Float: vY, Float: vZ, Float: temporary, vehicleid = INVALID_VEHICLE_ID;
	if(GetPlayerPos(playerid, x, y, z)) 
	{
		for(new i = 0; i != MAX_VEHICLES; i++) 
		{
			if(GetVehiclePos(i, vX, vY, vZ)) 
			{
				vX -= x, vY -= y, vZ -= z;
				temporary = vX * vX + vY * vY + vZ * vZ;
				if(temporary < distance) 
					distance = temporary, vehicleid = i;
			}
		}
		distance = floatpower(distance, 0.5);
		return vehicleid;
	}
	return INVALID_VEHICLE_ID; }
stock Float:GetDistanceBetweenPoints(Float: x, Float: y, Float: z, Float: xx, Float: yy, Float: zz) return floatsqroot(floatpower(floatabs(floatsub(x, xx)), 2) + floatpower(floatabs(floatsub(y, yy)), 2) + floatpower(floatabs(floatsub(z, zz)), 2));
new gString[1000], mesajsmek[144];	
stock SCMf(playerid, color, const string[], va_args<>) {
	va_format(mesajsmek, sizeof mesajsmek, string, va_start<3>);
	return SendClientMessage(playerid, color, mesajsmek); }
stock sendNearbyMessage(playerid, Float: range, color, const string[], va_args<>) {
	new Float: xx, Float: yy, Float: zz; va_format(mesajsmek, sizeof mesajsmek, string, va_start<4>); GetPlayerPos(playerid, xx, yy, zz);
	foreach(new x : Player) {	if(IsPlayerInRangeOfPoint(x, range, xx, yy, zz)) { SendClientMessage(x, color, mesajsmek); } }
	return 1; 
}
function LeaderChat(color,const string[]) {
	foreach(new i : Player) if (PlayerInfo[i][pLeader] >= 1 || PlayerInfo[i][pAdmin] >= 1) if(toglc[i] == 0) SendClientMessage(i, color, string);
	return 1; 
}
function restartTimer() {
    iGMXTick --;
	if(iGMXTick == 0) {
		KillTimer(iGMXTimer);
		SetTimer("GameModeInitExitFunc", 1000, 0);
		return true;
	}
	if(iGMXTick == 60) va_SendClientMessageToAll(COLOR_PRINC, "((AdmBot{ffffff}: Serverul se va restarta intr-un minut. Jucatorii nu mai pot tasta comenzi.))", iGMXTick);
	foreach(new x : Player) {
		gString[0] = (EOS);
		format(gString, 144, "SERVERUL SE VA RESTARTA IN %s~n~MOTIV: %s", CalculeazaTimp2(iGMXTick), restartReason);
		TextDrawSetString(RestartTD, gString);
		TextDrawShowForPlayer(x, RestartTD);
	}	
	return 1; 
}
function SendVip(color,const string[]) {
	foreach(new i : Vips) if (PlayerInfo[i][pVIP] >= 1 || PlayerInfo[i][pAdmin] >= 1) if(togvip[i] == 0 && gPlayerLogged[i] == 1) SendClientMessage(i, color, string);
	return 1; 
}	
stock SendAdmins(color, const string[], level, va_args<>) {
    va_format(mesajsmek, sizeof mesajsmek, string, va_start<3>);
    foreach(new i : Admins) if(gPlayerLogged[i] == 1) if (PlayerInfo[i][pAdmin] >= level) SendClientMessage(i, color, mesajsmek);
    return 1; 
} 
stock SendHelpers(color, const string[], level, va_args<>) {
    va_format(mesajsmek, sizeof mesajsmek, string, va_start<3>);
    foreach(new i : Helpers) if(gPlayerLogged[i] == 1) if (PlayerInfo[i][pHelper] >= level) SendClientMessage(i, color, mesajsmek);
    return 1; 
}
stock SendFamilyMessage(family, color, const text[], va_args<>) {
	va_format(mesajsmek, sizeof mesajsmek, text, va_start<3>);
	foreach(new x : Player) {
		if(PlayerInfo[x][pMember] == family || PlayerInfo[x][pLeader] == family) { if(!gFam[x]) SCM(x, color, mesajsmek); }
		if(specfaction[x] == family && PlayerInfo[x][pAdmin] >= 1) SCM(x, color, mesajsmek);
	}
	return 1; 
}
function pUpdateInt(playerid, varname[], varnameingame) {
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `%s` = '%d' WHERE `id` = '%d' LIMIT 1", varname, varnameingame, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", "");
	return 1; 
}
function PlayerStageVehicle(playerid) 
{
    new vehicleid, keys, Float:vx, Float:vy, Float:vz;

    if((vehicleid = GetPlayerVehicleID(playerid))) 
    {
        if(IsAnOwnableCar(vehicleid)) 
        {
            for(new i = 0; i < MAX_PERSONAL_VEHICLES; i++) 
            {
                if(PlayerInfo[playerid][pCarID][i] == vehicleid) 
                {
					if(PlayerInfo[playerid][pCarStage][i] > 0) 
					{
                    	if(Carspeed(playerid) < (PlayerInfo[playerid][pCarStageKM][i] + MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]))) 
                    	{
                            GetPlayerKeys(playerid, keys, _:vx, _:vx);
                          
                            if((keys & (0b001000 | 0b100000 | KEY_HANDBRAKE)) == 0b001000)
                             {
                            	GetVehicleVelocity(vehicleid, vx, vy, vz);

            	                if(vx * vx + vy * vy < (0.4 * 0.4)) continue;

				                vx *= 1.125;
				                vy *= 1.125;

                                SetVehicleVelocity(vehicleid, vx, vy, vz);
                            }
                        }
					}
                    break;
                }
            }
        }
    }
    return true; 
}
function pUpdateStr(playerid, varname[], varnameingame[]) {
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `%s` = '%e' WHERE `id` = '%d' LIMIT 1", varname, varnameingame, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", "");
	return 1; 
}
function pUpdateFloat(playerid, varname[], Float: varnameingame) {
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `%s` = '%f' WHERE `id` = '%d' LIMIT 1", varname, varnameingame, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", "");
	return 1; 
}
function SaveComponent(vehicleid, componentid) {
	new vid, pid;
	foreach(new x : Player) { for(new i; i < MAX_PERSONAL_VEHICLES; i++) { if(PlayerInfo[x][pCarID][i] == vehicleid) { vid = i; pid = x; } } }
	for(new i = 0; i < 20; i++) if(componentid == spoiler[i][0]) CarMod[pid][vid][0] = componentid;
	for(new i = 0; i < 23; i++) if(componentid == fbumper[i][0]) CarMod[pid][vid][2] = componentid;
	for(new i = 0; i < 22; i++) if(componentid == rbumper[i][0]) CarMod[pid][vid][3] = componentid;
	for(new i = 0; i < 28; i++) if(componentid == exhaust[i][0]) CarMod[pid][vid][4] = componentid;
	for(new i = 0; i < 21; i++) if(componentid == rskirt[i][0]) CarMod[pid][vid][10] = componentid;
	for(new i = 0; i < 17; i++) if(componentid == wheels[i][0]) CarMod[pid][vid][15] = componentid;
	for(new i = 0; i < 17; i++) if(componentid == rscoop[i][0]) CarMod[pid][vid][8] = componentid;
	for(new i = 0; i < 21; i++) if(componentid == lskirt[i][0]) CarMod[pid][vid][9] = componentid;
	for(new i = 0; i < 3; i++) if(componentid == nitro[i][0]) CarMod[pid][vid][1] = componentid;
	for(new i = 0; i < 2; i++) if(componentid == bventr[i][0]) CarMod[pid][vid][5] = componentid;
	for(new i = 0; i < 2; i++) if(componentid == bventl[i][0]) CarMod[pid][vid][6] = componentid;
	for(new i = 0; i < 4; i++) if(componentid == bscoop[i][0]) CarMod[pid][vid][7] = componentid;
	for(new i = 0; i < 1; i++) if(componentid == vbase[i][0]) CarMod[pid][vid][12] = componentid;
	for(new i = 0; i < 4; i++) if(componentid == rbbars[i][0]) CarMod[pid][vid][13] = componentid;
	for(new i = 0; i < 2; i++) if(componentid == fbbars[i][0]) CarMod[pid][vid][14] = componentid;
	for(new i = 0; i < 2; i++) if(componentid == vlights[i][0]) CarMod[pid][vid][16] = componentid;
	for(new i = 0; i < 1; i++) if(componentid == hydraulics[i][0]) CarMod[pid][vid][11] = componentid;
    gString[0] = (EOS);
    for(new mod; mod < 17; mod++) {
        mysql_format(SQL,gString, 128,"UPDATE cars SET mod%d='%d' WHERE ID='%d'",mod + 1,CarMod[pid][vid][mod],PlayerInfo[pid][pCar][vid]);
        mysql_tquery(SQL,gString);
    }		
	mysql_format(SQL,gString, 128,"UPDATE cars SET PaintJ='%d' WHERE ID='%d'",PlayerInfo[pid][pCarPaintJ][vid],PlayerInfo[pid][pCar][vid]);
    mysql_tquery(SQL,gString);   
	return 1; 
}
function MySQLCheckSpeed(vehicleid) {
	new speed; gString[0] = (EOS);
	format(gString, sizeof(gString), "SELECT * FROM `stock` WHERE `vid` = '%d'", vehicleid);
	new Cache: speedcache = mysql_query(SQL, gString);
	if(!cache_get_row_count()) {
		cache_delete(speedcache);
		return false;
	}
	speed = cache_get_field_content_int(0, "speed");
	cache_delete(speedcache);
	return speed; }
function MySQLCheckAccount(playername[]) {
	new playerID; gString[0] = (EOS);
	format(gString, sizeof(gString), "SELECT * FROM `users` WHERE `name` = '%e'", playername);
	new Cache: usercache = mysql_query(SQL, gString);
	if(!cache_get_row_count()) {
		cache_delete(usercache);
		return false;
	}
	playerID = cache_get_field_content_int(0, "id");
	cache_delete(usercache);
	return playerID; }
timer DrugEffectGone[30000](playerid) {
	if(UsingDrugs[playerid] != 1) return true;
	DrugTimer[playerid] = 30;
	UsingDrugs[playerid] = 0;
	PlayerStoned[playerid] = 0;
	PlayerInfo[playerid][pDrugs] --;
	ClearAnimations(playerid);
	stop drug[playerid];
	SetPlayerDrunkLevel(playerid, 0);
	SetPlayerHealthEx(playerid, 100);
	pUpdateInt(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
	SendClientMessage(playerid, COLOR_PURPLE, "Drugs effect has been done.");
	sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s took some drugs.", GetName(playerid));
	TogglePlayerControllable(playerid, 1);
	return 1; 
}
stock GivePlayerCash(playerid, money) {
    gString[0] = (EOS);
 
    Cash[playerid] += money;
    if(Cash[playerid] > 900000000 && money >= 1)
    {
        new inbanca = Cash[playerid] - 900000000;
        PlayerInfo[playerid][pAccount] += inbanca;
        Cash[playerid] -= inbanca;
        if(PlayerInfo[playerid][pAccount] >= 900000000)
        {
            PlayerInfo[playerid][pMiliarde] ++;
            pUpdateInt(playerid, "Miliarde", PlayerInfo[playerid][pMiliarde]);
 
            PlayerInfo[playerid][pAccount] -= 900000000;
            pUpdateInt(playerid, "Bank", PlayerInfo[playerid][pAccount]);
 
            SCMf(playerid, COLOR_PRINC, "[money changed]: cash $%s, bank $%s, miliards %d.", FormatNumber(GetPlayerCash(playerid)), FormatNumber(PlayerInfo[playerid][pAccount]), PlayerInfo[playerid][pMiliarde]);
        }
 
        gString[0] = (EOS);
 
        mysql_format(SQL, gString, 256, "UPDATE `users` SET `Bank` = '%d' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pAccount], PlayerInfo[playerid][pSQLID]);
        mysql_tquery(SQL, gString);
 
        SCM(playerid, COLOR_DARKPINK, "Deoarece ai peste $900.000.000, banii in plus au fost introdusi in banca.");
        return true;
    }  
    mysql_format(SQL, gString, 256, "UPDATE `users` SET `Money` = '%d' WHERE `id` = '%d' LIMIT 1", GetPlayerCash(playerid), PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL, gString);
    return 1; 
}
stock GetPlayerCash(playerid) return Cash[playerid];
stock ResetPlayerCash(playerid) return Cash[playerid] = 0;
stock GetOnLinePlayers() return Iter_Count(Player);	
stock NumeFactiune(id) {
	new string[50]; 
	format(string, 50, "%s", DynamicFactions[id][fName]);
	return string; }
stock CalculeazaTimp(seconds) {
	new time = seconds, ore, minute, secunde;
	ore = time / 3600; time = time % 3600; minute = time / 60; time = time % 60; secunde = time;
	gString[0] = (EOS); format(gString, sizeof(gString), "%02d:%02d:%02d", ore, minute, secunde);
	return gString; }
stock CalculeazaTimp2(seconds) {
	new time = seconds, minute, secunde;
	time = time % 3600; minute = time / 60; time = time % 60; secunde = time;
	gString[0] = (EOS); format(gString, sizeof(gString), "%02d:%02d", minute, secunde);
	return gString; }
stock ShowPlayerDialogEx(playerid, dialogid, dialogtype, title[], string[], btn1[], btn2[]) 
{
	dialogID[playerid] = dialogid;
	return ShowPlayerDialog(playerid, dialogid, dialogtype, title, string, btn1, btn2);
}	
stock IsPlayerInRangeOfPlayer(playerid, id, Float: range) {
	new Float: x, Float: y, Float: z; GetPlayerPos(id, x, y, z);
	return IsPlayerInRangeOfPoint(playerid, range, x, y, z); }
stock Text3D:CreateStreamed3DTextLabel(const string[], color, Float:posx, Float:posy, Float:posz, Float:draw_distance, virtualworld, testlos = 0) return CreateDynamic3DTextLabel(string, color, posx, posy, posz, draw_distance, INVALID_PLAYER_ID, INVALID_PLAYER_ID, testlos, virtualworld, -1, -1, 100.0);
stock PlayAudioStreamForPlayersInCar(vehicleid, url[]) {
	foreach(new x : Player) {
		if(IsPlayerInAnyVehicle(x) && GetPlayerVehicleID(x) == vehicleid) {
			PlayAudioStreamForPlayer(x, url);
		}
	} return 1; 
}
stock StopAudioStreamForPlayersInCar(vehicleid) {
	foreach(new x : Player) {
		if(IsPlayerInAnyVehicle(x) && GetPlayerVehicleID(x) == vehicleid) {
			StopAudioStreamForPlayer(x);
		}
	} return 1; 
}
FormatNumber(number)
{
	new tStr[16];
    new number2 = number;
    if(number < 0) number = number * -1;
    format(tStr, sizeof(tStr), "%d", number);
    if(strlen(tStr) < 4)
 	return tStr;
    new iPos = strlen(tStr), iCount = 1;
    while(iPos > 0)
    {
		if(iCount == 4)
		{
			iCount = 0;
			strins(tStr, ",", iPos, 1);
			iPos++;
		}
        iCount++;
        iPos--;
    }
    if(number2 < 0) format(tStr, sizeof(tStr), "-%s", tStr);
    return tStr; }
IsNumeric(const string[]) {
	for(new i = 0; i < strlen(string); i++) {
		if(string[i] > '9' || string[i] < '0')
			return false;
	} return 1; 
}
stock IsVehicleOccupied(vehicleid) {
	foreach(new x : Player) {
		if(IsPlayerInVehicle(x, vehicleid))
			return true;
	}
	return 0; }
stock playerTextDrawSetString(playerid, PlayerText: textdrawid, const text[], va_args<>) {
	new string[256]; va_format(string, sizeof string, text, va_start<3>);
	return PlayerTextDrawSetString(playerid, textdrawid, string); }   
task TwoSecondsTimer[2000]() {
	foreach(new x : Player) {
		/*
		if(PlayerInfo[x][pAdmin] >= 1 || PlayerInfo[x][pHelper] >= 1) {
			if(Spectate[x] == -1) for(new i = 1; i < 6; i++) PlayerTextDrawHide(x, TextDrawSpec[x][i]);
			new id = Spectate[x], Float:health, Float:vHealth, speed, vehicleid;
			if(IsPlayerConnected(id)) {
				GetPlayerHealth(id, health);
				if(GetPlayerState(id) == PLAYER_STATE_DRIVER || GetPlayerState(id) == PLAYER_STATE_PASSENGER) {
					vehicleid = GetPlayerVehicleID(id); speed = Carspeed(id); GetVehicleHealth(vehicleid, vHealth);
					playerTextDrawSetString(x, TextDrawSpec[x][1], "%s (~r~%d~w~) - L ~r~%d", GetName(id), id, PlayerInfo[id][pLevel]);
					playerTextDrawSetString(x, TextDrawSpec[x][2], "HEALTH:~r~ %.1f", health);
					playerTextDrawSetString(x, TextDrawSpec[x][3], "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[id][pWantedLevel], PlayerInfo[id][pJailTime]);
					playerTextDrawSetString(x, TextDrawSpec[x][4], "CAR: ~r~%d ~w~(~r~%.1f~w~ HP)", vehicleid, vHealth);
					playerTextDrawSetString(x, TextDrawSpec[x][5], "SPEED: ~g~%d KM/H", speed);
				} else {
					playerTextDrawSetString(x, TextDrawSpec[x][1], "%s (~r~%d~w~) - L ~r~%d", GetName(id), id, PlayerInfo[id][pLevel]);
					playerTextDrawSetString(x, TextDrawSpec[x][2], "HEALTH:~r~ %.1f", health);
					playerTextDrawSetString(x, TextDrawSpec[x][3], "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[id][pWantedLevel], PlayerInfo[id][pJailTime]);
					playerTextDrawSetString(x, TextDrawSpec[x][4], "");
					playerTextDrawSetString(x, TextDrawSpec[x][5], "");
				}
				for(new i = 1; i < 6; i++) PlayerTextDrawShow(x, TextDrawSpec[x][i]);
				if(GetPlayerInterior(id) != GetPlayerInterior(x)) SetPlayerInterior(x, GetPlayerInterior(id)), PlayerSpectatePlayer(x, id);
				if(GetPlayerVirtualWorld(id) != GetPlayerVirtualWorld(x)) SetPlayerVirtualWorld(x, GetPlayerVirtualWorld(id)), PlayerSpectatePlayer(x, id);
				if(SpectateState[id] && GetPlayerState(id) == PLAYER_STATE_DRIVER || SpectateState[id] == 1 && GetPlayerState(id) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(id), PlayerSpectateVehicle(x, vehicleid), SpectateState[id] = 2;
				if(SpectateState[id] == 2 && GetPlayerState(id) == PLAYER_STATE_ONFOOT) PlayerSpectatePlayer(x, id), SpectateState[id] = 1;
			}
		}
		*/

		
		gString[0] = (EOS);    
	    new vehicle = GetPlayerVehicleID(x), speed = Carspeed(x);
	    if(GetPlayerState(x) == PLAYER_STATE_DRIVER || GetPlayerState(x) == PLAYER_STATE_PASSENGER) {
	        PlayerTextDrawShow(x, Speedd[x]);
	        format(gString, 64, "Speed: ~y~%d Km/h", speed);
	        PlayerTextDrawSetString(x, Speedd[x], gString);
	        if(!IsABike(vehicle) && !IsAPlane(vehicle)) {
	            PlayerTextDrawShow(x, Fuell[x]);
	            format(gString, 64, "Fuel: ~y~%d", Gas[vehicle]);
	            PlayerTextDrawSetString(x, Fuell[x], gString);
	        }	        
	        foreach(new smecherie : Player) {
	            for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
	                if(PlayerInfo[smecherie][pCarID][v] == vehicle) {

	                    PlayerTextDrawShow(x, Odom[x]);
	                    format(gString, 64, "Odometer: ~y~%.0f KM", PlayerInfo[smecherie][pCarKM][v]);
	                    PlayerTextDrawSetString(x, Odom[x], gString);
	                    switch(PlayerInfo[smecherie][pCarLock][v]) {
	                        case 0: {
	                            PlayerTextDrawShow(x, carlocked[x]);
	                            format(gString, 64, "UNLOCKED");
	                            PlayerTextDrawSetString(x, carlocked[x], gString);
	                        }
	                        case 1: {
	                            PlayerTextDrawShow(x, carlocked[x]);
	                            format(gString, 64, "~r~LOCKED");
	                            PlayerTextDrawSetString(x, carlocked[x], gString);
	                        }
	                    }
	                }
	            }
	        }    
	    } 
	    
		new vehicleid = GetPlayerVehicleID(x), Float:health;
		if(IsPlayerInRangeOfPoint(x, 15.0, 1025.0671, -1023.7895, 32.1016) || IsPlayerInRangeOfPoint(x, 15.0, 719.9537, -457.2771, 16.3359) || IsPlayerInRangeOfPoint(x, 15.0, 487.4134, -1740.1738, 11.1370) ||
			IsPlayerInRangeOfPoint(x, 15.0, 2065.5911, -1831.4495, 13.5469) || IsPlayerInRangeOfPoint(x, 15.0, 1974.3198, 2162.7249, 11.0703) || IsPlayerInRangeOfPoint(x, 15.0, -100.1086, 1117.3312, 19.7417)) {
			if(vehicleid != INVALID_VEHICLE_ID) GetVehicleHealth(vehicleid, health);
			if(health < 999.0 && GetPlayerState(x) == 2) {
				pnsmoney[x] = GetPlayerMoney(x);
				defer AfterSpray(x);
				return true;
			}
		}
		if(GetPlayerState(x) == PLAYER_STATE_DRIVER && !IsAPlane(GetPlayerVehicleID(x)) && Carspeed(x) > 450 && PlayerInfo[x][pAdmin] < 1 && ac_speedhack == 1) SendAdmins(COLOR_RED, "%s (%d / level %d) may be using cheats (speed hack), vehicle: %s, speed: %.0d.", 1, GetName(x), x, GetPlayerScore(x), aVehicleNames[GetVehicleModel(GetPlayerVehicleID(x)) - 400], Carspeed(x));
		if(GetPlayerState(x) == PLAYER_STATE_DRIVER && !IsAPlane(GetPlayerVehicleID(x)) && Carspeed(x) > 500 && PlayerInfo[x][pAdmin] < 1 && ac_speedhack == 1) {
			SendAdmins(COLOR_PRINC, "(AntiCheat) {ffffff}%s kicked by adm bot, reason: detected with speedhack", 1, GetName(x));	
			defer KickEx(x);
			return 1;
		}
		if(EnterInModShop[x] > 0) {
			new bizzzid, string[128];
			if(IsPlayerInRangeOfPoint(x, 15.0, BizzInfo[51][bEntranceX], BizzInfo[51][bEntranceY], BizzInfo[51][bEntranceZ])) bizzzid = 51;
			if(IsPlayerInRangeOfPoint(x, 15.0, BizzInfo[38][bEntranceX], BizzInfo[38][bEntranceY], BizzInfo[38][bEntranceZ])) bizzzid = 38;
			if(IsPlayerInRangeOfPoint(x, 15.0, BizzInfo[39][bEntranceX], BizzInfo[39][bEntranceY], BizzInfo[39][bEntranceZ])) bizzzid = 39;
			BizzInfo[bizzzid][bTill] += BizzInfo[bizzzid][bEntranceCost];
			EnterInModShop[x] = 0;
			GivePlayerCash(x, - BizzInfo[bizzzid][bEntranceCost]);
			mysql_format(SQL, string, sizeof string, "UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d'", BizzInfo[bizzzid][bTill], bizzzid);
			mysql_tquery(SQL, string, "", "");
			va_GameTextForPlayer(x, "~r~-%d$", 3000, 1, BizzInfo[bizzzid][bEntranceCost]);
			return true;
		}
		antispamcomenzi[x] = 0;
		ac_playerbullets[x] = 0;
		foreach(new radar : Cops) {
			if(IsACop(radar) && radar_police[radar] == 1 && GetPVarInt(radar, "max_speed") >= 30) {
				new Float: xk, Float: y, Float: z, Float: radarx, Float: radary, Float: radarz; 
				GetPlayerPos(x, xk, y, z); GetPlayerPos(radar, radarx, radary, radarz);
				if(IsPlayerInAnyVehicle(x) && Carspeed(x) > GetPVarInt(radar, "max_speed") && IsPlayerInRangeOfPlayer(radar, x, 30.0)) {
					SCMf(radar, COLOR_CYAN, "RADAR: %s (%d) a depasit limita de viteza. Viteza: %d km/h. Limita %d km/h.", GetName(x), x, Carspeed(x), GetPVarInt(radar, "max_speed"));
					SCMf(x, COLOR_CYAN, "RADAR: Ai fost surprins conducand cu viteza de %d km/h de catre %s.", Carspeed(x), GetName(radar));
					radar_police[radar] = 0;
					DeletePVar(radar, "max_speed");
					SCMf(radar, COLOR_GREY, "Radar oprit, find activat automat pe jucatorul %s.", GetName(x));
					UsedFind[radar] = 1;
					DisablePlayerCheckpoint(radar);
					SetPlayerCheckpoint(radar, xk, y, z, 3.5);
					targetfind[radar] = x;
				}	
			} 
		}

		if(PlayerInfo[x][pAdmin] >= 1 && AdminDuty[x] >= 1)
		{
			AdminDuty[x] -= 2;
			if(AdminDuty[x] < 1)
			{
				AdminDuty[x] = 0;
				SetPlayerHealthEx(x, 100); 
				SetPlayerArmourEx(x, 0);

				SendAdmins(COLOR_PRINC, "Notice: {FFFFFF}Admin %s (%d) is now off administrative duty (300 seconds passed).", 1, GetName(x), x);
			}	
		}

		fly_work(x);
		detect_troll(x);
	}
	if(acdebugserver >= 1) acdebugserver -= 2;
	return 1; 
}
function IsAMember(playerid) {
	new member = PlayerInfo[playerid][pMember];
	if(member == 4 || member == 5 || member == 6 || member == 10) return true;
	return 0; }
function IsACop(playerid) {
	new member = PlayerInfo[playerid][pMember];
	if(member == 1 || member == 2 || member == 3 || member == 8) return true;
	return 0; }
function IsAtBank(playerid) {
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2306.5564, -16.3045, 26.7496)) return true;
	return 0; }
function GetDaysFromTimestamp(time) {
	new timee = gettime() - time, days;
	while(timee > 86399) {
		timee -= 86400;
		days ++;
	} return days; }
new gasStations[10] = { 33, 42, 43, 44, 45, 46, 47, 48, 49, 50 };
function IsAtGasStation(playerid) {
	for(new i = 0; i < 10; i++) {
		if(IsPlayerInRangeOfPoint(playerid, 15.0, BizzInfo[gasStations[i]][bEntranceX], BizzInfo[gasStations[i]][bEntranceY], BizzInfo[gasStations[i]][bEntranceZ]))  {
			return true;
		}
	}
	return 0; }
new boatVehicles[10] = { 430, 446, 452, 453, 454, 472, 473, 484, 493, 595 };
function IsABoat(carid) {
	for(new i = 0; i < 10; i++) {
		if(GetVehicleModel(carid) == boatVehicles[i]) {
			return true;
		}
	}
	return 0; }
new planeVehicles[23] = { 417, 425, 447, 460, 464, 465, 469, 476, 487, 488, 497, 501, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593 };
function IsAPlane(carid) {
	for(new i = 0; i < 23; i++) {
		if(GetVehicleModel(carid) == planeVehicles[i]) {
			return true;
		}
	} return 0; }
function IsACopCar(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && VehicleInfo[i][vehGroup] == 1) return true;
	} return 0; }
function Copcar2(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && (VehicleInfo[i][vehGroup] == 1 || VehicleInfo[i][vehGroup] == 2 || VehicleInfo[i][vehGroup] == 3 || VehicleInfo[i][vehGroup] == 8)) return true;
	} return 0; }
function IsALVPDCar(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && VehicleInfo[i][vehGroup] == 8) return true;
	} return 0; }	
function IsANgCar(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && VehicleInfo[i][vehGroup] == 3) return true;
	} return 0; }	
function IsAFbiCar(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && VehicleInfo[i][vehGroup] == 2) return true;
	} return 0; }
function IsAnAmbulance(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && VehicleInfo[i][vehGroup] == 14) return true;
	} return 0; }
function IsANewsCar(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && VehicleInfo[i][vehGroup] == 9) return true;
	} return false;
}
function IsAnTaxi(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && VehicleInfo[i][vehGroup] == 13) return true;
	} return 0; }
function IsAnUber(carid) {
	for(new i = 0; i < sizeof VehicleInfo; i++) {
		if(VehicleInfo[i][vehCarID] == carid && VehicleInfo[i][vehGroup] == 16) return true;
	} return 0; }		
function IsInHQ(playerid) {
	for(new i; i < sizeof DynamicFactions; i++) {
		if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[i][fcX], DynamicFactions[i][fcY], DynamicFactions[i][fcZ]) && PlayerInfo[playerid][pMember]) return true;
	} return 0; }
new bikeVehicles[3] = { 481, 509, 510 };
function IsABike(carid) {
	for(new i = 0; i < 3; i++) {
		if(GetVehicleModel(carid) == bikeVehicles[i]) return true;
	} return 0; }
public OnPlayerClickMap(playerid, Float: fX, Float: fY, Float: fZ) {
	if(PlayerInfo[playerid][pAdmin] > 0 && AdminDuty[playerid] >= 1) {
		if(GetPlayerState(playerid) == 2) {
			SetVehiclePos(GetPlayerVehicleID(playerid), fX, fY, fZ + 5);
			GetVehiclePos(GetPlayerVehicleID(playerid), old_veh_pos[GetPlayerVehicleID(playerid)][0], old_veh_pos[GetPlayerVehicleID(playerid)][1], old_veh_pos[GetPlayerVehicleID(playerid)][2]);
		} else SetPlayerPosFindZ(playerid, fX, fY, fZ + 5);
	}
	return 1; 
}
new LastVeh[MAX_PLAYERS];
function reseteazaVariabile(playerid) {
	PlayerInfo[playerid][pAdmin] = 0; PlayerInfo[playerid][pMember] = 0; facerob[playerid] = 0; forcenamechange[playerid] = 0; mutecomenzi[playerid] = 1; arepeste[playerid] = 0; last_quest[playerid] = -1;
	PlayerInfo[playerid][pHelper] = 0;  gLastCar[playerid] = 0; PlayerInfo[playerid][pLeader] = 0; ClanDuty[playerid] = 0; seeClanChat[playerid] = 1; BigEar[playerid] = 0; antispamcomenzi[playerid] = 1; radar_police[playerid] = 0;
	sarmale[playerid] = 0; XDeaths[playerid] = 0; Freezed[playerid] = 0; LastDeath[playerid] = 0; pnsmoney[playerid] = 0; RepairTime[playerid] = 0; LastPlayer[playerid] = -1; IsPlayerAFK[playerid] = 0; specfaction[playerid] = 0;
	gPlayerUsingLoopingAnim[playerid] = 0; TypeName[playerid] = 0; StageVehicle[playerid] = -1; HidePM[playerid] = 0; PhoneOnline[playerid] = 0; WTChannel[playerid] = 0; PlayerInfo[playerid][pClan] = 0; CP[playerid] = 0; sim[playerid] = 0;
	UsingDrugs[playerid] = 0; UsedFind[playerid] = 0; RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; pesteprice[playerid] = 0; xcrate[playerid] = 0; mega[playerid] = 0; ac_playerbullets[playerid] = 0;
	TalkingLive[playerid] = 0; LiveOffer[playerid] = 999; TakingLesson[playerid] = 0; PlayerCuffedTime[playerid] = 0; DrugPrice[playerid] = 0; paintkills[playerid] = 0; crasher[playerid] = 0; special[playerid] = 0; 
	RegistrationStep[playerid] = 0; PlayerCuffed2[playerid] = 0; RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; DrugOffer[playerid] = 999; PlayerCuffed[playerid] = 0; MedicTime[playerid] = 0; BrwFriend[playerid] = 0;
	DrugGram[playerid] = 0; carprice[playerid] = 0; primesccar[playerid] = 0; CarID[playerid] = -1; ofercar[playerid] = -1; refuelwait[playerid] = 0; PlayerInfo[playerid][pDrunkLevelLast] = 0; cratetimer[playerid] = 0; timecrate[playerid] = 0;
	OnDuty[playerid] = 0; cartype[playerid] = 0; TaxiAccepted[playerid] = -1; MedicAccepted[playerid] = -1; fly_hack[playerid] = 0; fly_warnings[playerid] = 0;
	MedicCall[playerid] = 0; TaxiCall[playerid] = 0; Unspec[playerid][sLocal] = -1; Spectate[playerid] = -1; timerfarmer[playerid] = -1; escapeprogress[playerid] = 0; damagetimer[playerid] = 0; inruleta[playerid] = 0; rlbet[playerid][0] = 0;
	DrugTimer[playerid] = 0; tradecars[playerid] = -1; tradecars2[playerid] = -1; tradetype[playerid] = -1; tradetype2[playerid] = -1; tradeofferer[playerid] = -1; tradediff[playerid] = 0; TaxiMoneyEarned[playerid] = 0; 
	ConsumingMoney[playerid] = 0; Mobile[playerid] = -1; ShowDMG[playerid] = 1; FactionOffer[playerid] = 999; SellHouseID[playerid] = -1; gNews[playerid] = 0; hiddenprice[playerid] = 0;
	gFam[playerid] = 0;	examcar[playerid] = -1; PhoneOnlineCalls[playerid] = 0; gPlayerLogged[playerid] = 0; gPlayerLogTries[playerid] = 2; hiddenoffer[playerid] = 999; gPlayerAccount[playerid] = 0; rlbet[playerid][1] = 0; rlbet[playerid][2] = 0;
	TicketMoney[playerid] = 0; TaxiMoneySpent[playerid] = 0; TurfsDisp[playerid] = 0; LastBiz[playerid] = -1; LastBizTime[playerid] = 0; PlayerInfo[playerid][pColor] = 0; escapedat[playerid] = 0; acwarnings[playerid] = 0; 
	HireCar[playerid] = -1; gPlayerAnimLibsPreloaded[playerid] = 0; TransferOffer[playerid] = 999; TaxiTimer[playerid] = 0; TransferMoney[playerid] = 0; pizzaprize[playerid] = 0; dialogID[playerid] = -1;
	targetfind[playerid] = -1; TimerQuestion[playerid] = -1; MatsHolding[playerid] = 0; MatsOffer[playerid] = -1; MatsPrice[playerid] = 0; MatsAmmo[playerid] = 0; SellgunOffer[playerid] = -1; LastVel[playerid][0] = -1;
    failpizza[playerid] = -1; SellTradeID[playerid] = -1; SellTradePrice[playerid] = 0; PizzaCP[playerid] = 0; SellTradeTimer[playerid] = 0; Undercover[playerid] = 0; LastVel[playerid][1] = -1;
	HaveHelmet[playerid] = 0; WantedTimer[playerid] = 0; FireworkTimer[playerid] = 0; AdminDuty[playerid] = 0; HealTimer[playerid] = 0; togdamage[playerid] = 1;
 	SellHiddenID[playerid] = -1; SellHiddenPrice[playerid] = 0; flymode[playerid] = 0; BreachID[playerid] = 0; login[playerid] = 0; reportdat[playerid] = 0; reportstuck[playerid] = 0; NoFuel[playerid] = 0; quest_type[playerid] = -1;
 	PlayerInfo[playerid][pFPS] = 0; LastVeh[playerid] = -1; tazer[playerid] = 0; SellgunMats[playerid] = 0; SellgunAmmo[playerid] = 0; objectfireman[playerid] = 0; SpeedBoost[playerid] = 0; LastVel[playerid][2] = -1;
	PlayerInfo[playerid][pSleeping] = 0; DeletePVar(playerid, "Help"); SellgunPrice[playerid] = 0; togfind[playerid] = 0; Listening[playerid] = -1; antirem[playerid] = 0; contract_get[playerid] = -1;
	SellgunID[playerid] = 0; pizzaj[playerid] = 0; pizzatime[playerid] = 0;  wantedlost[playerid] = 1799; Refueling[playerid] = 0; InHQ[playerid] = -1; InHouse[playerid] = -1; TaxiFare[playerid] = 0; 
	PlayerHandsup[playerid] = 0; InBussines[playerid] = -1; playerdeath[playerid] = 0; somated[playerid] = -1;	TaxiDriver[playerid] = -1; somatee[playerid] = 1; PlayerInfo[playerid][pHUD2] = 0; dicemoney[playerid] = 0;
	toglc[playerid] = 0; PlayerInfo[playerid][pHUD1] = 0; timersoo[playerid] = 0; PlayerInfo[playerid][pHUD3] = 0; adatad[playerid] = 0; FactionOffer[playerid] = 999; PlayerInfo[playerid][pWantedLevel] = 0; togvip[playerid] = 0;
 	hudactivated[playerid] = 0;	 EnterInModShop[playerid] = 0; PlayerInfo[playerid][pJailTime] = 0; PlayerInfo[playerid][pJailed] = 0; diceid[playerid] = 999; PlayerTazeTime[playerid] = 0;
	seeGangZones[playerid] = 0; WantedPoints[playerid] = 0;  Clanidoff[playerid] = 999; delaypay[playerid] = -1; servicedelay[playerid] = -1; barcadelay[playerid] = -1; jetpackdelay[playerid] = -1; santadelay[playerid] = -1; adatn[playerid] = 0; PlayerStoned[playerid] = 0; TicketOffer[playerid] = 999;  
	EngineDelay [playerid] = -1; helperduty[playerid] = 0; sanctiondelay[playerid] = 0; BuyCar[playerid] = 0; intrebareaccept[playerid] = 0; PlayerInfo[playerid][pCash] = dollah; ac_kills[playerid] = 0;
	NormalOffer[playerid] = 999; NormalPrice[playerid] = 0; PremiumOffer[playerid] = 999; PremiumPrice[playerid] = 0; intratwar[playerid] = 0; turfvehicletimer[playerid] = 0; skemawar[playerid] = 0; rainbowspeed[playerid] = 0;
	if(!antirem[playerid]) antirem[playerid] = 1;
	if(antirem[playerid] == 1) StergeChestiiConectare(playerid);
	for(new i = 1; i <= serverClanZones; i++) GangZoneHideForPlayer(playerid, clanZoneVariables[i][clanZoneTurf]);
	format(LiveQuestion[playerid], 128, "NULL");
	format(somatename[playerid], 30, "NULL");
	format(WantName[playerid], 30, "NULL");
	format(reporttext[playerid], 30, "NULL");
	format(adtext[playerid], 30, "NULL");
	format(questiontext[playerid], 30, "NULL");
	DestroyPlayerObject(playerid, objectfireman[playerid]);  
	return 1; 
}
stock StergeChestiiConectare(playerid) {
	RemoveBuildingForPlayer(playerid, 1257, 1718.6016, 1363.2109, 11.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1257, 1713.9453, 1377.9453, 11.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 628, 1682.3438, 1436.9453, 11.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 628, 1682.3438, 1458.9609, 11.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 7833, 1064.8359, 1869.7813, 13.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 7834, 1064.8359, 1869.7813, 13.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 3369, 203.6563, 2614.6172, 15.4766, 0.25);

	//casa billy
	RemoveBuildingForPlayer(playerid, 6491, 717.4844, -1357.3047, 20.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 723.2969, -1390.2422, 16.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1377.6641, 21.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1356.5859, 21.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 650.8359, -1338.2422, 21.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 677.1953, -1328.8750, 25.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 745.5859, -1381.1094, 25.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1689, 751.3359, -1368.0313, 25.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 6490, 717.4844, -1357.3047, 20.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 6516, 717.6875, -1357.2813, 18.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 696.1953, -1328.8750, 25.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 702.2344, -1328.8750, 25.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 721.2109, -1328.8750, 25.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, 732.8516, -1332.8984, 12.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1439, 732.7266, -1341.7734, 12.6328, 0.25);

	//casa crates
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1231.6406, -1389.8672, 15.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5929, 1230.8906, -1337.9844, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 5812, 1230.8906, -1337.9844, 12.5391, 0.25);


	//crateuri
	RemoveBuildingForPlayer(playerid, 3685, 1249.5547, -905.4609, 45.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 3685, 1287.6875, -900.4609, 45.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3685, 1284.2031, -871.2969, 45.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 3685, 1245.4609, -874.7031, 45.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1235.8281, -917.5234, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1231.4141, -886.9297, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1241.1953, -886.8438, 44.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1227.6094, -870.8047, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1261.9531, -913.7813, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1266.4219, -913.1797, 44.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1272.3516, -912.4531, 44.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1275.6016, -911.9609, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 3684, 1249.5547, -905.4609, 45.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1263.8828, -894.3516, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1211, 1266.0859, -906.7031, 42.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1270.9609, -896.6172, 44.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1265.0313, -897.3516, 44.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1271.8672, -892.3672, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1299.5000, -909.1406, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 3684, 1287.6875, -900.4609, 45.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 5847, 1295.8594, -895.0938, 41.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1252.2578, -885.8750, 44.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1262.9844, -882.2188, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 617, 1271.2031, -882.3984, 41.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1285.6484, -881.3125, 44.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 3684, 1245.4609, -874.7031, 45.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 3684, 1284.2031, -871.2969, 45.2734, 0.25);


	//usa cnn
	RemoveBuildingForPlayer(playerid, 1502, 365.7969, 189.6172, 1007.3750, 0.25);

	//casa zaki
	RemoveBuildingForPlayer(playerid, 13483, 2113.5781, -96.7344, 0.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 12990, 2113.5781, -96.7344, 0.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.8203, -84.4063, -0.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1369, 2104.0156, -105.2656, 1.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2122.3750, -83.3828, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.5313, -82.8906, -0.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2120.5156, -79.0859, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.4688, -69.7344, 0.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2119.4922, -73.6172, 0.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 935, 2117.8438, -67.8359, 0.1328, 0.25);

	//copaci autostrada

	RemoveBuildingForPlayer(playerid, 790, -130.3203, -1602.4922, 5.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 670, -141.8906, -1584.0156, 6.3438, 0.25);

	//stage
	RemoveBuildingForPlayer(playerid, 3573, 1798.6484, -2057.9141, 14.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1813.1953, -2046.9375, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1813.1875, -2062.6016, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1832.8750, -2079.9844, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1834.0313, -2042.7422, 12.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 4984, 1880.7109, -2112.6328, 21.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 4982, 1892.5391, -2012.8281, 21.3750, 0.25);	
	//nou hq ng
	RemoveBuildingForPlayer(playerid, 3374, -1206.1406, -1169.8359, 129.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3374, -1198.8672, -1169.8359, 129.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3374, -1191.6016, -1169.8359, 129.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3374, -1184.3281, -1169.8359, 129.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1183.7656, -1095.7969, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1186.8828, -1095.7969, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -1105.1094, -1255.3594, 129.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 708, -1084.1641, -1217.5547, 128.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -1088.4063, -1215.0625, 129.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -1088.4063, -1238.4375, 129.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -1088.4063, -1249.9219, 129.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -1088.4063, -1191.6875, 129.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -1088.4063, -1203.3750, 129.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -1088.4063, -1180.0703, 129.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 3276, -1082.4922, -1255.4375, 129.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 708, -1073.5703, -1187.2266, 128.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 691, -1073.8047, -1234.7578, 128.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 3374, -1177.0547, -1169.8359, 129.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1164.7813, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1161.2578, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1157.7344, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1154.2031, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1150.6797, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1147.1563, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1143.6328, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1140.1094, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1136.5859, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1453, -1178.0156, -1140.6406, 128.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1453, -1178.0156, -1138.7656, 128.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1152.2969, -1134.5078, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1149.1797, -1134.5078, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1139.8125, -1134.5078, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1142.9844, -1134.5078, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1136.6250, -1134.5078, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1146.1094, -1134.5078, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1155.4063, -1134.5078, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1133.0625, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1454, -1129.5391, -1156.7969, 129.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 708, -1124.4922, -1140.8984, 128.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1078.7109, -1153.1719, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1078.7109, -1157.1719, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1078.7109, -1155.1719, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 691, -1081.1484, -1162.4844, 128.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 17007, -1071.9219, -1170.2109, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1071.7656, -1152.0391, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1073.7656, -1152.0391, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1073.7656, -1158.2578, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1071.7578, -1158.2578, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1075.7734, -1152.0391, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1075.7734, -1158.2578, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1077.7734, -1152.0391, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1077.7734, -1158.2578, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1180.6563, -1095.7969, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1171.2813, -1095.7969, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1174.4609, -1095.7969, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1168.1016, -1095.7969, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1177.5859, -1095.7969, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1140.8672, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1134.6406, -1095.5391, 128.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1128.4453, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1137.7578, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1131.5703, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1125.2656, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1122.0859, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1093.9844, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1087.7578, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1078.3906, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1081.5703, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1075.2109, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1090.8750, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1084.6875, -1095.5391, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1137.7578, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1134.6406, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1125.2656, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1128.4453, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1122.0859, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1131.5703, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1140.8672, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1090.8750, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1087.7578, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1078.3906, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1081.5703, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1075.2109, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1084.6875, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3261, -1093.9844, -1084.3672, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 17008, -1067.5703, -1200.7266, 134.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1037.7891, -1184.7500, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1036.5703, -1185.9375, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1034.5625, -1185.9375, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1032.5781, -1185.9375, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1030.5703, -1185.9375, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1028.5703, -1185.9375, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1026.5625, -1185.9375, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1023.6250, -1184.8047, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1024.5625, -1185.9375, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1037.5625, -1180.7422, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1038.3047, -1182.5781, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1023.6250, -1180.8047, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 17010, -1031.4766, -1181.8125, 128.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1023.6250, -1182.8047, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1028.5703, -1179.7188, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1030.5781, -1179.7188, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1032.5625, -1179.7188, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1034.5703, -1179.7188, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1036.5703, -1179.7188, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1026.5625, -1179.7188, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1024.5625, -1179.7188, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 691, -1023.8047, -1171.0938, 128.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1065.7734, -1158.2578, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1065.7734, -1152.0391, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1067.7734, -1152.0391, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1069.7656, -1152.0391, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1069.7734, -1158.2578, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1067.7734, -1158.2578, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1063.7344, -1152.1875, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1064.7734, -1157.2344, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3260, -1064.0313, -1155.3984, 129.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 17009, -1070.8672, -1156.1641, 128.2188, 0.25);
	/// crates	
	RemoveBuildingForPlayer(playerid, 1250, 997.4141, 1707.5234, 10.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1251, 997.0469, 1710.9531, 11.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1251, 998.0938, 1755.6875, 11.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1250, 997.7266, 1759.1250, 10.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 14449, 2567.6172, -1294.6328, 1061.2500, 0.25); // masa hq mafii
	RemoveBuildingForPlayer(playerid, 1226, 1624.6875, -2190.3750, 16.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -68.3516, -1104.9922, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1415, -63.8125, -1106.4219, 0.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3593, 2407.3125, -1418.3594, 23.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1789.2109, -1369.2656, 15.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 956, 1634.1094, -2237.5313, 12.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 2060.1172, -1897.6406, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 956, 2480.8594, -1959.2734, 12.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1928.7344, -1772.4453, 12.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 956, 2139.5156, -1161.4844, 23.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1154.7266, -1460.8906, 15.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, -19.0391, -57.8359, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1776, -36.1484, -57.8750, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, -16.1172, -91.6406, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1776, -17.5469, -91.7109, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1776, -16.5313, -140.2969, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, -15.1016, -140.2266, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1776, -33.8750, -186.7656, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, -32.4453, -186.6953, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, -35.7266, -140.2266, 1003.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, 495.9688, -24.3203, 1000.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1776, 500.5625, -1.3672, 1000.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, 501.8281, -1.4297, 1000.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1775, 373.8281, -178.1406, 1000.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1977, 316.8750, -140.3516, 998.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1257, 1918.7500, 2314.3984, 11.0938, 0.25);// baracile
	RemoveBuildingForPlayer(playerid, 1257, 1918.8672, 2115.7188, 11.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1808.1250, -1859.5391, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1783.6719, -1859.5391, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
	RemoveBuildingForPlayer(playerid, 1977, 316.8750, -140.3516, 998.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2093.9297, -1762.6406, 16.4063, 0.25); // Pizza
	RemoveBuildingForPlayer(playerid, 712, 2100.8125, -1764.3750, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2105.0859, -1765.6094, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2114.7188, -1785.1797, 16.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 2128.3125, -1786.7109, 12.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 733, 778.2109, -1207.2031, 13.5391, 0.25); // Taietor de gazon
	RemoveBuildingForPlayer(playerid, 729, 731.3906, -1223.1641, 12.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 733, 717.1172, -1236.2266, 12.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 726, 680.8594, -1293.3984, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 732, 782.7969, -1304.0781, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 746.4922, -1303.4141, 11.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 760.4531, -1304.1328, 12.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 782.3438, -1277.8359, 12.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 783.0625, -1245.7969, 12.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1931.3125, 16.3750, 0.25); //Taxi LS
	RemoveBuildingForPlayer(playerid, 700, 1810.6797, -1944.6406, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1817.1797, -1944.6406, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1806.4297, -1931.6016, 16.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1901.5391, 16.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1806.4297, -1901.8281, 16.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1836.7188, -1898.8984, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1747.1875, -1846.7109, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 937.5547, -1213.8672, 18.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 5818, 954.6875, -1305.7734, 30.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1267, 953.4922, -1232.5703, 24.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 824.3438, -1155.3750, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 850.9844, -1155.3750, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 875.6094, -1155.3750, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 895.6953, -1155.3750, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 907.7813, -1155.3750, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 927.6172, -1155.3750, 23.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 656, 1096.6250, -294.4141, 72.9375, 0.25);//hitman
	RemoveBuildingForPlayer(playerid, 714, 1481.6484, -638.4844, 90.2422, 0.25);//palat piMp
	RemoveBuildingForPlayer(playerid, 659, 1503.7578, -720.7031, 91.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 659, 1492.1250, -716.1250, 93.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1340, 388.8594, -2071.6641, 7.9453, 0.25); //Garduri Fish
	RemoveBuildingForPlayer(playerid, 1491, 2543.8516, -1306.3828, 1053.6250, 0.25);// USA MAFII
	RemoveBuildingForPlayer(playerid, 1491, 2543.8359, -1303.3594, 1053.6250, 0.25);// USA MAFII
	RemoveBuildingForPlayer(playerid, 2186, 325.2656, 302.5000, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 2616, 325.8281, 302.0391, 1000.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2613, 325.2109, 306.5000, 998.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 2202, 327.2813, 302.4844, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 2309, 326.9375, 304.9922, 998.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 326.0313, 305.0313, 998.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 328.0625, 307.8672, 998.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2196, 324.6016, 308.9219, 998.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 2612, 324.4141, 309.9609, 999.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2614, 325.2344, 309.9453, 1001.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 325.2734, 308.2422, 998.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2309, 325.4531, 309.1641, 998.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 14882, 325.7266, 310.9297, 1000.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2611, 326.0625, 309.9531, 999.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 2192, 327.0391, 309.6172, 999.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 327.4609, 309.6406, 998.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 14883, 320.8672, 314.2109, 1000.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 14843, 266.3516, 81.1953, 1001.2813, 0.25);
	return 1; 
}
function resetVehicle(playerid, i) {
	PlayerInfo[playerid][pCarID][i] = 0;
	PlayerInfo[playerid][pCar][i] = -1;
	PlayerInfo[playerid][pCarModel][i] = 0;
	PlayerInfo[playerid][pCarLocX][i] = 0.0;
	PlayerInfo[playerid][pCarLocY][i] = 0.0;
	PlayerInfo[playerid][pCarLocZ][i] = 0.0;
	PlayerInfo[playerid][pCarAngle][i] = 0.0;
	PlayerInfo[playerid][pCarBuyTime][i] = 0;
	PlayerInfo[playerid][pCarColor1][i] = 1;
	PlayerInfo[playerid][pCarColor2][i] = 1;
	PlayerInfo[playerid][pCarLock][i] = 0;
	PlayerInfo[playerid][pCarInsPrice][i] = 0;
	PlayerInfo[playerid][pCarIns][i] = 0;
	PlayerInfo[playerid][pCarKM][i] = 0.0;
	PlayerInfo[playerid][pCarKMLast][i] = 0;
	PlayerInfo[playerid][pCarHP][i] = 0.0;
	PlayerInfo[playerid][pCarDamage1][i] = 0;
	PlayerInfo[playerid][pCarDamage2][i] = 0;
	PlayerInfo[playerid][pCarDamage3][i] = 0;
	PlayerInfo[playerid][pCarDamage4][i] = 0;
	PlayerInfo[playerid][pCarGas][i] = 100;
	PlayerInfo[playerid][pCarPaintJ][i] = 6;
	CarPlate[playerid][i] = ""; CarOwner[playerid][i] = "";
	for(new ix; ix < 17; ix ++) CarMod[playerid][i][ix] = 0;
	return 1; 
}
function NumIp(ip[], playerid) {
	new ips = 0;
	foreach(new i : Player) { 
		if(i == playerid) continue;
		new playerip[16]; GetPlayerIp(i, playerip, 16);
		if(strmatch(ip, playerip)) ips ++;	
	}
	return ips; }	
public OnPlayerConnect(playerid) {
	new ip[16], string[128];
	GetPlayerIp(playerid, ip, sizeof ip);
	if(NumIp(ip, playerid) >= 3) {
		Kick(playerid);
		if(NumIp(ip, playerid) >= 3) {
			format(string, sizeof string, "banip %s", ip);
			SendRconCommand(string);	
		}
		return true;
	}
	new word[30];
	new Cache: cuvinte = mysql_query(SQL, "SELECT * FROM `adv`");
	for(new i; i != cache_get_row_count(); i++) {
		cache_get_field_content(i, "word", word);
		if(strfind(GetName(playerid), word, true) != -1) {
			SendClientMessage(playerid, COLOR_CYAN, "You got kick because you have inappropriate name.");
			defer KickEx(playerid);
			break;
		}
	} 	
	cache_delete(cuvinte);
	timerspeedometer[playerid]=Timer:-1;
	timerspectate[playerid]=Timer:-1;
	if(PlayerInfo[playerid][pPetStatus] == 1 && PlayerInfo[playerid][pPet] == 1) RemovePet(playerid);
	GameTextForPlayer(playerid, "~n~~r~CHECKING BAN STATUS ~w~...", 3500, 3);
	TextDrawShowForPlayer(playerid, Time); TextDrawShowForPlayer(playerid, Date);
	reseteazaVariabile(playerid);
	SetPlayerColor(playerid, COLOR_GRAD2);
	SetPVarInt(playerid, "cinvitePlayer", INVALID_PLAYER_ID);
	ClearWanted(playerid);
	for(new i = 0; i < 13; i++) WeaponData[playerid][i] = false;
	for(new i; i < MAX_PERSONAL_VEHICLES; i++) resetVehicle(playerid, i);
	BanCheck(playerid);
	PlayerPosii[playerid][0] = 1802.5104;
	PlayerPosii[playerid][1] = -1867.9580;
	PlayerPosii[playerid][2] = 13.5777;
	textdraws(playerid);
	DeletePVar(playerid, "bidplayer");
	moneyplayerbid[playerid] = 0;
	return 1; 
} 
function ClearCrime(playerid) {
	strmid(PlayerInfo[playerid][pVictim], "********", 8, 255); pUpdateStr(playerid, "Victim", PlayerInfo[playerid][pVictim]);
	strmid(PlayerInfo[playerid][pAccused], "********", 8, 255); pUpdateStr(playerid, "Accused", PlayerInfo[playerid][pAccused]);
	strmid(PlayerInfo[playerid][pCrime1], "No Crime", 10, 255); pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
	strmid(PlayerInfo[playerid][pCrime2], "No Crime", 10, 255);	pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);
	strmid(PlayerInfo[playerid][pCrime3], "No Crime", 10, 255);	pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
	return 1; 
}
function textdraws(playerid) {

	LogoTD = CreatePlayerTextDraw(playerid, 638.755981, 436.022460, "RPG.BLACK~p~MOON~w~.RO");
	PlayerTextDrawLetterSize(playerid, LogoTD, 0.202221, 1.311287);
	PlayerTextDrawAlignment(playerid, LogoTD, 3);
	PlayerTextDrawColor(playerid, LogoTD, -1);
	PlayerTextDrawSetShadow(playerid, LogoTD, 0);
	PlayerTextDrawSetOutline(playerid, LogoTD, 1);
	PlayerTextDrawBackgroundColor(playerid, LogoTD, 59);
	PlayerTextDrawFont(playerid, LogoTD, 2);
	PlayerTextDrawSetProportional(playerid, LogoTD, 1);
	PlayerTextDrawSetShadow(playerid, LogoTD, 0);

    LevelTD[playerid][0] = CreatePlayerTextDraw(playerid, 294.444488, 437.395568, "LEVEL_1_(0%)");
	PlayerTextDrawLetterSize(playerid, LevelTD[playerid][0], 0.186222, 0.923022);
	PlayerTextDrawAlignment(playerid, LevelTD[playerid][0], 1);
	PlayerTextDrawColor(playerid, LevelTD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, LevelTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, LevelTD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, LevelTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, LevelTD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, LevelTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, LevelTD[playerid][0], 0);

	LevelTD[playerid][1] = CreatePlayerTextDraw(playerid, 268.666717, 437.893310, "box");
	PlayerTextDrawLetterSize(playerid, LevelTD[playerid][1], 0.000000, 1.422221);
	PlayerTextDrawTextSize(playerid, LevelTD[playerid][1], 367.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, LevelTD[playerid][1], 1);
	PlayerTextDrawColor(playerid, LevelTD[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, LevelTD[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, LevelTD[playerid][1], 51);
	PlayerTextDrawSetShadow(playerid, LevelTD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, LevelTD[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, LevelTD[playerid][1], 255);
	PlayerTextDrawFont(playerid, LevelTD[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, LevelTD[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, LevelTD[playerid][1], 0);

	LevelTD[playerid][2] = CreatePlayerTextDraw(playerid, 268.666717, 437.893310, "box");
	PlayerTextDrawLetterSize(playerid, LevelTD[playerid][2], 0.000000, 1.422221);
	PlayerTextDrawTextSize(playerid, LevelTD[playerid][2], 367.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, LevelTD[playerid][2], 1);
	PlayerTextDrawColor(playerid, LevelTD[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, LevelTD[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, LevelTD[playerid][2], 102);
	PlayerTextDrawSetShadow(playerid, LevelTD[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, LevelTD[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, LevelTD[playerid][2], 255);
	PlayerTextDrawFont(playerid, LevelTD[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, LevelTD[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, LevelTD[playerid][2], 0);

    carlocked[playerid] = CreatePlayerTextDraw(playerid, 515.999877 - 15, 386.248352  - 15, "unlocked");
    PlayerTextDrawLetterSize(playerid, carlocked[playerid], 0.228666, 1.425776);
    PlayerTextDrawAlignment(playerid, carlocked[playerid], 1);
    PlayerTextDrawColor(playerid, carlocked[playerid], -1);
    PlayerTextDrawSetShadow(playerid, carlocked[playerid], 0);
    PlayerTextDrawSetOutline(playerid, carlocked[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, carlocked[playerid], 255);
    PlayerTextDrawFont(playerid, carlocked[playerid], 2);
    PlayerTextDrawSetProportional(playerid, carlocked[playerid], 1);
    PlayerTextDrawSetShadow(playerid, carlocked[playerid], 0);
 
    Odom[playerid] = CreatePlayerTextDraw(playerid, 515.999877 - 15, 372.347503 - 15, "odometer: ~y~69~w~ km");
    PlayerTextDrawLetterSize(playerid, Odom[playerid], 0.228666, 1.425776);
    PlayerTextDrawAlignment(playerid, Odom[playerid], 1);
    PlayerTextDrawColor(playerid, Odom[playerid], -1);
    PlayerTextDrawSetShadow(playerid, Odom[playerid], 0);
    PlayerTextDrawSetOutline(playerid, Odom[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, Odom[playerid], 255);
    PlayerTextDrawFont(playerid, Odom[playerid], 2);
    PlayerTextDrawSetProportional(playerid, Odom[playerid], 1);
    PlayerTextDrawSetShadow(playerid, Odom[playerid], 0);
 
    Fuell[playerid] = CreatePlayerTextDraw(playerid, 515.999877 - 15, 358.446655 - 15, "fuel: ~y~666~w~");
    PlayerTextDrawLetterSize(playerid, Fuell[playerid], 0.228666, 1.425776);
    PlayerTextDrawAlignment(playerid, Fuell[playerid], 1);
    PlayerTextDrawColor(playerid, Fuell[playerid], -1);
    PlayerTextDrawSetShadow(playerid, Fuell[playerid], 0);
    PlayerTextDrawSetOutline(playerid, Fuell[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, Fuell[playerid], 255);
    PlayerTextDrawFont(playerid, Fuell[playerid], 2);
    PlayerTextDrawSetProportional(playerid, Fuell[playerid], 1);
    PlayerTextDrawSetShadow(playerid, Fuell[playerid], 0);

 
    Speedd[playerid] = CreatePlayerTextDraw(playerid, 515.999877 - 15, 344.145782 - 15, "speed: ~y~200~w~ km/h");
    PlayerTextDrawLetterSize(playerid, Speedd[playerid], 0.228666, 1.425776);
    PlayerTextDrawAlignment(playerid, Speedd[playerid], 1);
    PlayerTextDrawColor(playerid, Speedd[playerid], -1);
    PlayerTextDrawSetShadow(playerid, Speedd[playerid], 0);
    PlayerTextDrawSetOutline(playerid, Speedd[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, Speedd[playerid], 255);
    PlayerTextDrawFont(playerid, Speedd[playerid], 2);
    PlayerTextDrawSetProportional(playerid, Speedd[playerid], 1);
    PlayerTextDrawSetShadow(playerid, Speedd[playerid], 0);

	TimeLeftWar1[playerid] = CreatePlayerTextDraw(playerid, 581.433654, 272.548492, "Turf timer: 12 minutes");
	PlayerTextDrawLetterSize(playerid, TimeLeftWar1[playerid], 0.281666, 1.313777);
	PlayerTextDrawTextSize(playerid, TimeLeftWar1[playerid], 0.000000, 123.000000);
	PlayerTextDrawAlignment(playerid, TimeLeftWar1[playerid], 2);
	PlayerTextDrawColor(playerid, TimeLeftWar1[playerid], -1);
	PlayerTextDrawUseBox(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawBoxColor(playerid, TimeLeftWar1[playerid], 255);
	PlayerTextDrawSetShadow(playerid, TimeLeftWar1[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TimeLeftWar1[playerid], 255);
	PlayerTextDrawFont(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TimeLeftWar1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TimeLeftWar1[playerid], 0);

	Jailtime[playerid] = CreatePlayerTextDraw(playerid, 552.501281, 102.792854, "Released in: ~b~~h~~h~~h~30 minutes");
	PlayerTextDrawLetterSize(playerid, Jailtime[playerid], 0.238333, 1.151481);
	PlayerTextDrawTextSize(playerid, Jailtime[playerid], -0.119999, 107.170013);
	PlayerTextDrawAlignment(playerid, Jailtime[playerid], 2);
	PlayerTextDrawColor(playerid, Jailtime[playerid], -1);
	PlayerTextDrawUseBox(playerid, Jailtime[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Jailtime[playerid], 255);
	PlayerTextDrawSetShadow(playerid, Jailtime[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Jailtime[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Jailtime[playerid], 255);
	PlayerTextDrawFont(playerid, Jailtime[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Jailtime[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Jailtime[playerid], 0);

	TextDrawSpec[playerid][1] = CreatePlayerTextDraw(playerid, 224.799926, 317.333343, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][1], 0.392397, 2.219732);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][1], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][1], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][1], 1);

	TextDrawSpec[playerid][2] = CreatePlayerTextDraw(playerid, 224.800003, 336.746551, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][2], 0.434798, 2.092799);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][2], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][2], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][2], 1);

	TextDrawSpec[playerid][3] = CreatePlayerTextDraw(playerid, 225.599975, 356.159973, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][3], 0.437999, 2.182399);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][3], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][3], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][3], 1);

	TextDrawSpec[playerid][4] = CreatePlayerTextDraw(playerid, 226.400039, 375.573486, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][4], 0.408400, 2.040534);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][4], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][4], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][4], 1);

	TextDrawSpec[playerid][5] = CreatePlayerTextDraw(playerid, 226.399963, 394.240020, " ");
	PlayerTextDrawLetterSize(playerid, TextDrawSpec[playerid][5], 0.430000, 1.958400);
	PlayerTextDrawAlignment(playerid, TextDrawSpec[playerid][5], 1);
	PlayerTextDrawColor(playerid, TextDrawSpec[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, TextDrawSpec[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TextDrawSpec[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, TextDrawSpec[playerid][5], 255);
	PlayerTextDrawFont(playerid, TextDrawSpec[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, TextDrawSpec[playerid][5], 1);

	HUD[1][playerid] = CreatePlayerTextDraw(playerid,575.999633, 66.370399, " ");
	PlayerTextDrawLetterSize(playerid, HUD[1][playerid], 0.279333, 1.052443);
	PlayerTextDrawAlignment(playerid, HUD[1][playerid], 2);
	PlayerTextDrawColor(playerid, HUD[1][playerid], -1);
	PlayerTextDrawSetShadow(playerid, HUD[1][playerid], 0);
	PlayerTextDrawSetOutline(playerid, HUD[1][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, HUD[1][playerid], 51);
	PlayerTextDrawFont(playerid, HUD[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid, HUD[1][playerid], 1);

	HUD[2][playerid] = CreatePlayerTextDraw(playerid,575.666320, 43.970417, " ");
	PlayerTextDrawLetterSize(playerid, HUD[2][playerid], 0.279333, 1.052443);
	PlayerTextDrawAlignment(playerid, HUD[2][playerid], 2);
	PlayerTextDrawColor(playerid, HUD[2][playerid], -1);
	PlayerTextDrawSetShadow(playerid, HUD[2][playerid], 0);
	PlayerTextDrawSetOutline(playerid, HUD[2][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, HUD[2][playerid], 51);
	PlayerTextDrawFont(playerid, HUD[2][playerid], 1);
	PlayerTextDrawSetProportional(playerid, HUD[2][playerid], 1);

	HUD[3][playerid] = CreatePlayerTextDraw(playerid, 14.999990, 360.074401, "~r~120~n~~w~~h~Tick~n~~n~~g~50~n~~w~~h~FPS~n~~n~~p~50~n~~w~~h~PING");
	PlayerTextDrawLetterSize(playerid, HUD[3][playerid], 0.233333, 1.160297);
	PlayerTextDrawAlignment(playerid, HUD[3][playerid], 2);
	PlayerTextDrawColor(playerid, HUD[3][playerid], -1);
	PlayerTextDrawSetShadow(playerid, HUD[3][playerid], 0);
	PlayerTextDrawSetOutline(playerid, HUD[3][playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, HUD[3][playerid], 68);
	PlayerTextDrawFont(playerid, HUD[3][playerid], 2);
	PlayerTextDrawSetProportional(playerid, HUD[3][playerid], 1);
	PlayerTextDrawSetShadow(playerid, HUD[3][playerid], 0);

	RentCarText[playerid] = CreatePlayerTextDraw(playerid, 89.299835, 310.602722, "Money earned: ~g~$6999");
	PlayerTextDrawLetterSize(playerid, RentCarText[playerid], 0.283666, 1.309629);
	PlayerTextDrawAlignment(playerid, RentCarText[playerid], 2);
	PlayerTextDrawColor(playerid, RentCarText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, RentCarText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, RentCarText[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, RentCarText[playerid], 255);
	PlayerTextDrawFont(playerid, RentCarText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, RentCarText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, RentCarText[playerid], 0);

	WantedText[playerid] = CreatePlayerTextDraw(playerid, 499.666900, 122.370384, " ");
	PlayerTextDrawBackgroundColor(playerid, WantedText[playerid], 51);
	PlayerTextDrawFont(playerid, WantedText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, WantedText[playerid], 0.191331, 1.960886);
	PlayerTextDrawColor(playerid, WantedText[playerid], -1);
	PlayerTextDrawSetOutline(playerid, WantedText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, WantedText[playerid], 1);

	FindTXD[playerid][0] = CreatePlayerTextDraw(playerid, 269.333374, 357.570251, " ");
	PlayerTextDrawLetterSize(playerid, FindTXD[playerid][0], 0.193999, 1.653925);
	PlayerTextDrawAlignment(playerid, FindTXD[playerid][0], 1);
	PlayerTextDrawColor(playerid, FindTXD[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, FindTXD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, FindTXD[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, FindTXD[playerid][0], 51);
	PlayerTextDrawFont(playerid, FindTXD[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, FindTXD[playerid][0], 1);

	FindTXD[playerid][1] = CreatePlayerTextDraw(playerid, 270.333343, 371.259185, " ");
	PlayerTextDrawLetterSize(playerid, FindTXD[playerid][1], 0.203666, 1.454815);
	PlayerTextDrawAlignment(playerid, FindTXD[playerid][1], 1);
	PlayerTextDrawColor(playerid, FindTXD[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, FindTXD[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, FindTXD[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, FindTXD[playerid][1], 51);
	PlayerTextDrawFont(playerid, FindTXD[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, FindTXD[playerid][1], 1);

	TextJos[playerid] = CreatePlayerTextDraw(playerid, 307.000061, 398.222290, " ");
	PlayerTextDrawLetterSize(playerid, TextJos[playerid], 0.220666, 1.197629);
	PlayerTextDrawAlignment(playerid, TextJos[playerid], 2);
	PlayerTextDrawColor(playerid, TextJos[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TextJos[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TextJos[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TextJos[playerid], 51);
	PlayerTextDrawFont(playerid, TextJos[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TextJos[playerid], 1);

	PaintTD[playerid] = CreatePlayerTextDraw(playerid, 581.433471, 240.189300, "Paintball round starts in ~r~~h~10 seconds");
	PlayerTextDrawLetterSize(playerid, PaintTD[playerid], 0.281666, 1.313777);
	PlayerTextDrawTextSize(playerid, PaintTD[playerid], 0.000000, 123.000000);
	PlayerTextDrawAlignment(playerid, PaintTD[playerid], 2);
	PlayerTextDrawColor(playerid, PaintTD[playerid], -1);
	PlayerTextDrawUseBox(playerid, PaintTD[playerid], 1);
	PlayerTextDrawBoxColor(playerid, PaintTD[playerid], 255);
	PlayerTextDrawSetShadow(playerid, PaintTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, PaintTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, PaintTD[playerid], 255);
	PlayerTextDrawFont(playerid, PaintTD[playerid], 1);
	PlayerTextDrawSetProportional(playerid, PaintTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, PaintTD[playerid], 0);	

	textdrawfarmer[playerid] = CreatePlayerTextDraw(playerid, 577.666687, 258.029205, "Munceste inca ~r~69~w~ de secunde pentru a primi banii");
	PlayerTextDrawLetterSize(playerid, textdrawfarmer[playerid], 0.176666, 0.957036);
	PlayerTextDrawTextSize(playerid, textdrawfarmer[playerid], 0.000000, 118.000000);
	PlayerTextDrawAlignment(playerid, textdrawfarmer[playerid], 2);
	PlayerTextDrawColor(playerid, textdrawfarmer[playerid], -1);
	PlayerTextDrawUseBox(playerid, textdrawfarmer[playerid], 1);
	PlayerTextDrawBoxColor(playerid, textdrawfarmer[playerid], 255);
	PlayerTextDrawSetShadow(playerid, textdrawfarmer[playerid], 0);
	PlayerTextDrawSetOutline(playerid, textdrawfarmer[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, textdrawfarmer[playerid], 255);
	PlayerTextDrawFont(playerid, textdrawfarmer[playerid], 1);
	PlayerTextDrawSetProportional(playerid, textdrawfarmer[playerid], 1);
	PlayerTextDrawSetShadow(playerid, textdrawfarmer[playerid], 0);	

	TimeLeftWar2[playerid] = CreatePlayerTextDraw(playerid, 556.588806, 268.749938, "Turf: Juniper SF~n~The Tsar Bratva 0-5 69 Pier mobs~n~Round 6/15~n~The Tsar Bratva 5-3 69 Pier mobs~n~On Turf: The Tsar Bratva ");
    PlayerTextDrawLetterSize(playerid, TimeLeftWar2[playerid], 0.174666, 0.832592);
    PlayerTextDrawTextSize(playerid, TimeLeftWar2[playerid], 0.000000, 175.000000);
    PlayerTextDrawAlignment(playerid, TimeLeftWar2[playerid], 2);
    PlayerTextDrawColor(playerid, TimeLeftWar2[playerid], -1);
    PlayerTextDrawUseBox(playerid, TimeLeftWar2[playerid], 1);
    PlayerTextDrawBoxColor(playerid, TimeLeftWar2[playerid], 255);
    PlayerTextDrawSetShadow(playerid, TimeLeftWar2[playerid], 0);
    PlayerTextDrawSetOutline(playerid, TimeLeftWar2[playerid], 1);
    PlayerTextDrawBackgroundColor(playerid, TimeLeftWar2[playerid], 124);
    PlayerTextDrawFont(playerid, TimeLeftWar2[playerid], 1);
    PlayerTextDrawSetProportional(playerid, TimeLeftWar2[playerid], 1);
    PlayerTextDrawSetShadow(playerid, TimeLeftWar2[playerid], 0);	

	DamageInformer[playerid][0] = CreatePlayerTextDraw(playerid, 22.000007, 171.748107, "      Damage given~N~~N~ AcRoNoM (~G~57~W~~H~) / Desert Eagle (~G~+46~W~~H~) dmg     from ~g~1~w~~h~ shots fired");
	PlayerTextDrawLetterSize(playerid, DamageInformer[playerid][0], 0.269666, 1.326222);
	PlayerTextDrawAlignment(playerid, DamageInformer[playerid][0], 1);
	PlayerTextDrawColor(playerid, DamageInformer[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, DamageInformer[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, DamageInformer[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, DamageInformer[playerid][0], 100);
	PlayerTextDrawFont(playerid, DamageInformer[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, DamageInformer[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, DamageInformer[playerid][0], 0);

	DamageInformer[playerid][1] = CreatePlayerTextDraw(playerid, 22.000007, 229.449005, "      Damage taken~N~~N~ AcRoNoM (~R~57~W~~H~) / Desert Eagle (~R~+46~W~~H~) dmg     from ~R~1~w~~h~ shots fired");
	PlayerTextDrawLetterSize(playerid, DamageInformer[playerid][1], 0.269666, 1.326222);
	PlayerTextDrawAlignment(playerid, DamageInformer[playerid][1], 1);
	PlayerTextDrawColor(playerid, DamageInformer[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, DamageInformer[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, DamageInformer[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, DamageInformer[playerid][1], 100);
	PlayerTextDrawFont(playerid, DamageInformer[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, DamageInformer[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, DamageInformer[playerid][1], 0);   	

	cratetextdraw[playerid][0] = CreatePlayerTextDraw(playerid, 266.105102, 160.250045, "box");
	PlayerTextDrawLetterSize(playerid, cratetextdraw[playerid][0], 0.000000, 16.793556);
	PlayerTextDrawTextSize(playerid, cratetextdraw[playerid][0], 387.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, cratetextdraw[playerid][0], 1);
	PlayerTextDrawColor(playerid, cratetextdraw[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, cratetextdraw[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, cratetextdraw[playerid][0], 125);
	PlayerTextDrawSetShadow(playerid, cratetextdraw[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, cratetextdraw[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, cratetextdraw[playerid][0], 125);
	PlayerTextDrawFont(playerid, cratetextdraw[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, cratetextdraw[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, cratetextdraw[playerid][0], 0);
	 
	cratetextdraw[playerid][1] = CreatePlayerTextDraw(playerid, 304.524139, 160.250030, "Crates");
	PlayerTextDrawLetterSize(playerid, cratetextdraw[playerid][1], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, cratetextdraw[playerid][1], 1);
	PlayerTextDrawColor(playerid, cratetextdraw[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, cratetextdraw[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, cratetextdraw[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, cratetextdraw[playerid][1], 255);
	PlayerTextDrawFont(playerid, cratetextdraw[playerid][1], 3);
	PlayerTextDrawSetProportional(playerid, cratetextdraw[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, cratetextdraw[playerid][1], 0);
	 
	cratetextdraw[playerid][2] = CreatePlayerTextDraw(playerid, 271.258972, 177.750000, "box");
	PlayerTextDrawLetterSize(playerid, cratetextdraw[playerid][2], 0.000000, 14.076133);
	PlayerTextDrawTextSize(playerid, cratetextdraw[playerid][2], 382.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, cratetextdraw[playerid][2], 1);
	PlayerTextDrawColor(playerid, cratetextdraw[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, cratetextdraw[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, cratetextdraw[playerid][2], -16776961);
	PlayerTextDrawSetShadow(playerid, cratetextdraw[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, cratetextdraw[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, cratetextdraw[playerid][2], -16776961);
	PlayerTextDrawFont(playerid, cratetextdraw[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, cratetextdraw[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, cratetextdraw[playerid][2], 0);
	 
	cratetextdraw[playerid][3] = CreatePlayerTextDraw(playerid, 295.153747, 226.166625, "2.000.000");
	PlayerTextDrawLetterSize(playerid, cratetextdraw[playerid][3], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, cratetextdraw[playerid][3], 1);
	PlayerTextDrawColor(playerid, cratetextdraw[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, cratetextdraw[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, cratetextdraw[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, cratetextdraw[playerid][3], 255);
	PlayerTextDrawFont(playerid, cratetextdraw[playerid][3], 3);
	PlayerTextDrawSetProportional(playerid, cratetextdraw[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, cratetextdraw[playerid][3], 0);	

	dmv_textdraw[playerid][0] = CreatePlayerTextDraw(playerid, 325.666625, 136.251739, "box");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][0], 0.000000, 19.866672);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][0], 0.000000, 350.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][0], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][0], 1852731135);
	PlayerTextDrawUseBox(playerid, dmv_textdraw[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, dmv_textdraw[playerid][0], 656877567);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][0], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][0], 0);

	dmv_textdraw[playerid][1] = CreatePlayerTextDraw(playerid, 457.333312, 126.377761, "");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][1], 44.000000, 47.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][1], 1);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][1], 0);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][1], 0);
	PlayerTextDrawSetPreviewModel(playerid, dmv_textdraw[playerid][1], 1581);
	PlayerTextDrawSetPreviewRot(playerid, dmv_textdraw[playerid][1], 0.000000, 0.000000, 180.000000, 1.000000);

	dmv_textdraw[playerid][2] = CreatePlayerTextDraw(playerid, 330.333312, 146.029602, "examen");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][2], 0.406666, 1.450664);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][2], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][2], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][2], 0);

	dmv_textdraw[playerid][3] = CreatePlayerTextDraw(playerid, 326.333343, 184.192764, "Ce_faci_cand_te_explodeaza_unu_la_cnn?_(6/9)");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][3], 0.328333, 1.334519);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][3], 0.000000, 344.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][3], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, dmv_textdraw[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, dmv_textdraw[playerid][3], 8388863);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][3], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][3], 0);

	dmv_textdraw[playerid][4] = CreatePlayerTextDraw(playerid, 327.333343, 204.881958, "box");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][4], 0.000000, 11.600014);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][4], 0.000000, 109.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][4], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, dmv_textdraw[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, dmv_textdraw[playerid][4], -202);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][4], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][4], 0);

	dmv_textdraw[playerid][5] = CreatePlayerTextDraw(playerid, 211.233093, 204.881958, "box");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][5], 0.000000, 11.600014);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][5], 0.000000, 109.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][5], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, dmv_textdraw[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, dmv_textdraw[playerid][5], -202);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][5], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][5], 0);

	dmv_textdraw[playerid][6] = CreatePlayerTextDraw(playerid, 442.432678, 204.881958, "box");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][6], 0.000000, 11.600014);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][6], 0.000000, 109.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][6], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, dmv_textdraw[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, dmv_textdraw[playerid][6], -202);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][6], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][6], 0);

	dmv_textdraw[playerid][7] = CreatePlayerTextDraw(playerid, 327.666839, 207.422225, "Ii_faci_post");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][7], 0.327333, 1.276444);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][7], 2.0000, 105.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][7], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, dmv_textdraw[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, dmv_textdraw[playerid][7], 16711775);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][7], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][7], 0);
	PlayerTextDrawSetSelectable(playerid, dmv_textdraw[playerid][7], true);
	 
	dmv_textdraw[playerid][8] = CreatePlayerTextDraw(playerid, 211.666793, 207.422195, "Ii_iei_morti_an_pl");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][8], 0.327333, 1.276444);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][8], 2.0000, 105.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][8], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, dmv_textdraw[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, dmv_textdraw[playerid][8], 16711775);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][8], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, dmv_textdraw[playerid][8], true);
	 
	dmv_textdraw[playerid][9] = CreatePlayerTextDraw(playerid, 442.866394, 207.422195, "Ii_dai_cu_atentat");
	PlayerTextDrawLetterSize(playerid, dmv_textdraw[playerid][9], 0.327333, 1.276444);
	PlayerTextDrawTextSize(playerid, dmv_textdraw[playerid][9], 2.0000, 105.000000);
	PlayerTextDrawAlignment(playerid, dmv_textdraw[playerid][9], 2);
	PlayerTextDrawColor(playerid, dmv_textdraw[playerid][9], -1);
	PlayerTextDrawUseBox(playerid, dmv_textdraw[playerid][9], 1);
	PlayerTextDrawBoxColor(playerid, dmv_textdraw[playerid][9], 16711775);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, dmv_textdraw[playerid][9], 1);
	PlayerTextDrawBackgroundColor(playerid, dmv_textdraw[playerid][9], 255);
	PlayerTextDrawFont(playerid, dmv_textdraw[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, dmv_textdraw[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, dmv_textdraw[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, dmv_textdraw[playerid][9], true);

    Ruleta_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 207.647109, 317.166748, "Loading roulette stats...");
    PlayerTextDrawLetterSize(playerid, Ruleta_PTD[playerid][0], 0.217882, 0.923332);
    PlayerTextDrawAlignment(playerid, Ruleta_PTD[playerid][0], 2);
    PlayerTextDrawColor(playerid, Ruleta_PTD[playerid][0], -1);
    PlayerTextDrawSetShadow(playerid, Ruleta_PTD[playerid][0], 0);
    PlayerTextDrawSetOutline(playerid, Ruleta_PTD[playerid][0], 1);
    PlayerTextDrawBackgroundColor(playerid, Ruleta_PTD[playerid][0], 255);
    PlayerTextDrawFont(playerid, Ruleta_PTD[playerid][0], 2);
    PlayerTextDrawSetProportional(playerid, Ruleta_PTD[playerid][0], 1);
    PlayerTextDrawSetShadow(playerid, Ruleta_PTD[playerid][0], 0);
 
    Ruleta_PTD[playerid][1] = CreatePlayerTextDraw(playerid, 332.451049, 316.566711, "Loading roulette stats...");
    PlayerTextDrawLetterSize(playerid, Ruleta_PTD[playerid][1], 0.217882, 0.923332);
    PlayerTextDrawAlignment(playerid, Ruleta_PTD[playerid][1], 2);
    PlayerTextDrawColor(playerid, Ruleta_PTD[playerid][1], -1);
    PlayerTextDrawSetShadow(playerid, Ruleta_PTD[playerid][1], 0);
    PlayerTextDrawSetOutline(playerid, Ruleta_PTD[playerid][1], 1);
    PlayerTextDrawBackgroundColor(playerid, Ruleta_PTD[playerid][1], 255);
    PlayerTextDrawFont(playerid, Ruleta_PTD[playerid][1], 2);
    PlayerTextDrawSetProportional(playerid, Ruleta_PTD[playerid][1], 1);
    PlayerTextDrawSetShadow(playerid, Ruleta_PTD[playerid][1], 0);
 
    Ruleta_PTD[playerid][2] = CreatePlayerTextDraw(playerid, 449.458190, 316.566711, "Loading roulette stats...");
    PlayerTextDrawLetterSize(playerid, Ruleta_PTD[playerid][2], 0.217882, 0.923332);
    PlayerTextDrawAlignment(playerid, Ruleta_PTD[playerid][2], 2);
    PlayerTextDrawColor(playerid, Ruleta_PTD[playerid][2], -1);
    PlayerTextDrawSetShadow(playerid, Ruleta_PTD[playerid][2], 0);
    PlayerTextDrawSetOutline(playerid, Ruleta_PTD[playerid][2], 1);
    PlayerTextDrawBackgroundColor(playerid, Ruleta_PTD[playerid][2], 255);
    PlayerTextDrawFont(playerid, Ruleta_PTD[playerid][2], 2);
    PlayerTextDrawSetProportional(playerid, Ruleta_PTD[playerid][2], 1);
    PlayerTextDrawSetShadow(playerid, Ruleta_PTD[playerid][2], 0);

    StagePTD[playerid] = CreatePlayerTextDraw(playerid, 320.666595, 316.933685, "");
	PlayerTextDrawLetterSize(playerid, StagePTD[playerid], 0.256000, 1.454815);
	PlayerTextDrawAlignment(playerid, StagePTD[playerid], 2);
	PlayerTextDrawColor(playerid, StagePTD[playerid], -1);
	PlayerTextDrawSetShadow(playerid, StagePTD[playerid], 0);
	PlayerTextDrawSetOutline(playerid, StagePTD[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, StagePTD[playerid], 100);
	PlayerTextDrawFont(playerid, StagePTD[playerid], 2);
	PlayerTextDrawSetProportional(playerid, StagePTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, StagePTD[playerid], 0);		
	return 1; 
}	

function GetWeekDay() {
	new year, month, day, weekday, chestie, chestie2; getdate(year, month, day);
	if(month <= 2) {
		month += 12;
		-- year;
	}
	chestie = year % 100;
	chestie2 = year / 100;
	switch((day + (month + 1) * 26 / 10 + chestie + chestie / 4 + chestie2 / 4 - 2 * chestie2) % 7) {
		case 0: weekday = 1;
		case 1: weekday = 2;
		case 2: weekday = 3;
		case 3: weekday = 4;
		case 4: weekday = 5;
		case 5: weekday = 6;
		case 6: weekday = 7;
	} return weekday; }
stock GetDistancePlayerVeh(playerid, vehicleid) {
	new Float: pos1, Float: pos2, Float: pos3, Float: pos4, Float: pos5, Float: pos6, Float: pos7;
	GetPlayerPos(playerid, pos1, pos2, pos3); GetVehiclePos(vehicleid, pos4, pos5, pos6);
	pos7 = floatsqroot((pos4 - pos1) * (pos4 - pos1) + (pos5 - pos2) * (pos5 - pos2) + (pos6 - pos3) * (pos6 - pos3));
	return floatround(pos7); }
stock doesVehicleExist(vehicleid) {
    if(GetVehicleModel(vehicleid) >= 400) return true;
	return 0; }
stock GetClosestVehicle(playerid, exception = INVALID_VEHICLE_ID) {
	new Float: distance, target = -1;
	for(new i; i < MAX_VEHICLES; i++) 
		if(doesVehicleExist(i) && i != exception && (target < 0 || distance > GetDistancePlayerVeh(playerid, i))) {
			target = i;
			distance = GetDistancePlayerVeh(playerid, i);
		}
	return target; }
static const disconnectReasons[3][] = { 
	{"crash"}, {"disconnect"}, {"banned/kicked"}
};

public OnPlayerDisconnect(playerid, reason) {	

	if(timerspeedometer[playerid] != Timer:-1) stop timerspeedometer[playerid];
	if(timerspectate[playerid] != Timer:-1) stop timerspectate[playerid];
	if(licitatiactiva >= 1 && lastplayerbid == playerid && GetPVarInt(playerid, "bidplayer") == 1)
	{
		GivePlayerCash(playerid, moneyplayerbid[playerid]);
		DeletePVar(playerid, "bidplayer");

		moneyplayerbid[playerid] = 0;
		lastplayerbid = 999;
		maxbid = 0;

		va_SendClientMessageToAll(COLOR_PRINC, "[BID]: %s s-a deconectat in timpul licitatiei.", GetName(playerid));
		SendClientMessageToAll(COLOR_PRINC, "[BID]: Licitatia s-a resetat, puteti licita folosind comanda /bid.");

		stop timer_licitatie;

		timer_licitatie = defer timer_bid();
	}	

	if(Iter_Contains(InRoulette, playerid)) Iter_Remove(InRoulette, playerid);

	if(GetPVarInt(playerid, "start_rainbow") >= 1) 
	{
		DeletePVar(playerid, "start_rainbow");
		stop timerrainbow[playerid];
		rainbowspeed[playerid] = 0;
	}
	cmd_unrentveh(playerid);
	if(Iter_Contains(Vips, playerid)) Iter_Remove(Vips, playerid);
	if(Iter_Contains(Gangsters, playerid)) Iter_Remove(Gangsters, playerid);
	if(Iter_Contains(Cops, playerid)) Iter_Remove(Cops, playerid);
	if(Iter_Contains(PlayerPaint, playerid)) Iter_Remove(PlayerPaint, playerid);
	if(Iter_Contains(Contracts, playerid)) Iter_Remove(Contracts, playerid);
	if(adatad[playerid] >= 1) stop timerptad[playerid];
    if(PlayerInfo[playerid][pAdmin] >= 1) { Iter_Remove(Admins, playerid), SendAdmins(0x7dcce0FF, "(/quit):{ffffff} %s left the game.", 1, GetName(playerid)), SendHelpers(0x7dcce0FF, "Quitbot: Admin %s left the game.", 1, GetName(playerid)); }    
    if(PlayerInfo[playerid][pHelper] >= 1) { Iter_Remove(Helpers, playerid), SendAdmins(0x7dcce0FF, "(/quit):{ffffff} Helper %s left the game.", 1, GetName(playerid)), SendHelpers(0x7dcce0FF, "Quitbot: Helper %s left the game.", 1, GetName(playerid)); }	
    if(PlayerInfo[playerid][pMember] == 15) Iter_Remove(Mecanici, playerid);
    if(PlayerInfo[playerid][pMember] == 9) Iter_Remove(Reporters, playerid);
	pUpdateInt(playerid, "PayDay", PlayerInfo[playerid][pPayDay]);
	if(PlayerInfo[playerid][pJailTime] >= 1) pUpdateInt(playerid, "JailTime", PlayerInfo[playerid][pJailTime]);
	if(somated[playerid] != -1) {
		if(sarmale[playerid] == 0 && PlayerInfo[playerid][pWantedLevel] > 0) {
			foreach(new x : Cops) {
				if(IsACop(x) && CrimInRange(50.0, playerid, x) && OnDuty[x]) {
					new price = PlayerInfo[playerid][pWantedLevel] * 1000;
					GameTextForPlayer(x, "Running Suspect Bonus !", 5000, 1);
					SCMf(x, COLOR_DBLUE, "Your received %s$ for catching  %s.", FormatNumber(PlayerInfo[playerid][pWantedLevel] * 1000), GetName(playerid));
					sarmale[playerid] = 1;
					WantedPoints[playerid] = 0;
					PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pWantedLevel] * 150; pUpdateInt(playerid, "JailTime", PlayerInfo[playerid][pJailTime]);
					PlayerInfo[playerid][pJailed] = 1; pUpdateInt(playerid, "Jailed", PlayerInfo[playerid][pJailed]);
					PlayerInfo[playerid][pWantedDeaths] ++; pUpdateInt(playerid, "WantedDeaths", PlayerInfo[playerid][pWantedDeaths]);
					PlayerInfo[playerid][pWantedLevel] = 0; pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
					ClearCrime(playerid);
					strmid(PlayerInfo[playerid][pCrime1], "No Crime", 10, 255); pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
					strmid(PlayerInfo[playerid][pCrime2], "No Crime", 10, 255); pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);
					strmid(PlayerInfo[playerid][pCrime3], "No Crime", 10, 255); pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
					strmid(PlayerInfo[playerid][pVictim], "********", 8, 255); pUpdateStr(playerid, "Victim", PlayerInfo[playerid][pVictim]);
					strmid(PlayerInfo[playerid][pAccused], "********", 8, 255); pUpdateStr(playerid, "Accused", PlayerInfo[playerid][pAccused]);
					GivePlayerCash(playerid, price);
					SendFamilyMessage(1, COLOR_LIGHTBLUE, "Dispatch: %s has been disconnected with wanted and will be in jail for %d seconds, over.", GetName(playerid), PlayerInfo[playerid][pJailTime]);
					SendFamilyMessage(2, COLOR_LIGHTBLUE, "Dispatch: %s has been disconnected with wanted and will be in jail for %d seconds, over.", GetName(playerid), PlayerInfo[playerid][pJailTime]);
					SendFamilyMessage(3, COLOR_LIGHTBLUE, "Dispatch: %s has been disconnected with wanted and will be in jail for %d seconds, over.", GetName(playerid), PlayerInfo[playerid][pJailTime]);
					SendFamilyMessage(8, COLOR_LIGHTBLUE, "Dispatch: %s has been disconnected with wanted and will be in jail for %d seconds, over.", GetName(playerid), PlayerInfo[playerid][pJailTime]);
					gString[0] = (EOS);
					mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Raport1` = `Raport1` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[x][pSQLID]);
					mysql_tquery(SQL, gString, "", "");	
				}
			}
		} else if(PlayerInfo[playerid][pWantedLevel] < 1) {
			strmid(PlayerInfo[playerid][pVictim], "Unknown", 7, 255); pUpdateStr(playerid, "Victim", PlayerInfo[playerid][pVictim]);
			if(strmatch(PlayerInfo[playerid][pCrime1], "No Crime")) strmid(PlayerInfo[playerid][pCrime1], "disconnect during a chase", 25, 255), pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
			else if(strmatch(PlayerInfo[playerid][pCrime2], "No Crime")) strmid(PlayerInfo[playerid][pCrime2], "disconnect during a chase", 25, 255), pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);
			else if(strmatch(PlayerInfo[playerid][pCrime3], "No Crime")) strmid(PlayerInfo[playerid][pCrime3], "disconnect during a chase", 25, 255), pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
			else if(strmatch(PlayerInfo[playerid][pCrime1], "No Crime") && strmatch(PlayerInfo[playerid][pCrime2], "No Crime") && strmatch(PlayerInfo[playerid][pCrime3], "Fara Crima")) { }
			else {
				//PlayerInfo[playerid][pWantedLevel] = PlayerInfo[playerid][pWantedLevel] + 2; pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
				strmid(PlayerInfo[playerid][pCrime1], "disconnect during a chase", 25, 255); pUpdateStr(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
				strmid(PlayerInfo[playerid][pCrime2], "No Crime", 10, 255); pUpdateStr(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);
				strmid(PlayerInfo[playerid][pCrime3], "No Crime", 10, 255); pUpdateStr(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
				SendFamilyMessage(1, COLOR_DBLUE, "Dispatch: %s s-a deconectat in timpul unei urmariri.", GetName(playerid));
				SendFamilyMessage(2, COLOR_DBLUE, "Dispatch: %s s-a deconectat in timpul unei urmariri.", GetName(playerid));
				SendFamilyMessage(3, COLOR_DBLUE, "Dispatch: %s s-a deconectat in timpul unei urmariri.", GetName(playerid));
				SendFamilyMessage(8, COLOR_DBLUE, "Dispatch: %s s-a deconectat in timpul unei urmariri.", GetName(playerid));
			}
		}
	}
	if(PlayerInfo[playerid][pPetStatus] == 1 && PlayerInfo[playerid][pPet] == 1) RemovePet(playerid);
	new year, month, day, hour, minute, second; gettime(hour, minute, second); getdate(year, month, day);
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `lastOn` = '%d-%02d-%02d %02d:%02d:%02d' WHERE `id` = '%d' LIMIT 1", year, month, day, hour, minute, second, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", "");
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Status` = '0' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", "");
	sendNearbyMessage(playerid, 50.0, COLOR_GENANNOUNCE, "%s has disconnected from the server (%s).", GetName(playerid), disconnectReasons[reason]);
	PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
	PlayerTextDrawHide(playerid, TimeLeftWar2[playerid]);
	PlayerTextDrawHide(playerid, RentCarText[playerid]);
	PlayerTextDrawHide(playerid, WantedText[playerid]);
	if(PlayerInfo[playerid][pMember] > 0) SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, "%s from your group has disconnected (%s).", GetName(playerid), disconnectReasons[reason]);	
	reseteazaVariabile(playerid);
	DespawnCar(playerid);
	for(new i = 0; i < 5; i++) RemovePlayerAttachedObject(playerid, i);
	for(new i = 1; i < 4; i++) PlayerTextDrawHide(playerid, HUD[i][playerid]);
	if(TaxiAccepted[playerid] != -1) SCMf(TaxiAccepted[playerid], COLOR_PRINC, "Taxi driver %s has left the game.", PlayerInfo[playerid][pNormalName]), TaxiAccepted[playerid] = -1, targetfind[playerid] = -1, UsedFind[playerid] = 0;
	if(MedicAccepted[playerid] != -1) SCMf(MedicAccepted[playerid], COLOR_PRINC, "Medic %s has left the game.", PlayerInfo[playerid][pNormalName]), MedicAccepted[playerid] = -1, targetfind[playerid] = -1, UsedFind[playerid] = 0;
	if(HireCar[playerid] > 0) HireCar[playerid] = -1;
	if(CarCollisions[playerid]) CarCollisions[playerid] = 0, DisableRemoteVehicleCollisions(playerid, false);
	if(TaxiFare[playerid] > 0 && PlayerInfo[playerid][pMember] == 13) {
		TaxiFare[playerid] = 0; TaxiMoneyEarned[playerid] = 0;
		PlayerTextDrawHide(playerid, RentCarText[playerid]);
		foreach(new x : Player) {
			if(TaxiDriver[x] == playerid) {
				TaxiDriver[x] = -1;
				TaxiTimer[x] = 0;
				TaxiMoneySpent[x] = 0;
				PlayerTextDrawHide(x, RentCarText[x]);
			}
		}
	}
	if(PlayerInfo[playerid][pFlyMode] > 0) PlayerInfo[playerid][pFlyMode] = 0;
	if(TakingLesson[playerid]) {
		StopBlinkNeons(examcar[playerid]);
		DestroyVehicle(examcar[playerid]); DisableRemoteVehicleCollisions(playerid, false); DisablePlayerRaceCheckpoint(playerid);
		examcar[playerid] = -1; TakingLesson[playerid] = 0;
	}
	if(Mobile[playerid] != -1 && Mobile[playerid] != INVALID_PLAYER_ID) {
		SetPlayerSpecialAction(Mobile[playerid], SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		PlayerInfo[playerid][pSpeaker] = 0;
		CellTime[playerid] = 0; CellTime[Mobile[playerid]] = 0;
		Mobile[Mobile[playerid]] = -1; Mobile[playerid] = -1;
	}
	foreach(new x : Player) {
		if(targetfind[x] == playerid) {
			targetfind[x] = -1; UsedFind[x] = 0;
			DisablePlayerCheckpoint(x);
			GameTextForPlayer(x, "~r~Your target left the game", 5000, 1);
			for(new i = 0; i < 2; i++) PlayerTextDrawHide(x, FindTXD[x][i]);
		}
		if(PlayerInfo[x][pPhoneBlocked][playerid]) PlayerInfo[x][pPhoneBlocked][playerid] = 0;
		if(PlayerInfo[playerid][pPhoneBlocked][x]) PlayerInfo[playerid][pPhoneBlocked][x] = 0;
	} 
	gString[0] = (EOS);
    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s has disconnected [cash: $%s] [bank: $%s] [PP: %d] [Level: %d] [hours: %.2f]')", PlayerInfo[playerid][pSQLID], GetName(playerid), FormatNumber(GetPlayerCash(playerid)), FormatNumber(PlayerInfo[playerid][pAccount]), PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pLevel], Float: PlayerInfo[playerid][pConnectTime]);
    mysql_tquery(SQL, gString, "", "");	
    format(gString, 128, "SELECT * FROM `friends` WHERE `fid` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
    new pid, gpid = -1;
    for(new i, j = cache_get_row_count (); i != j; ++i) {
        pid = cache_get_field_content_int(i, "pid");
        foreach(new xi : Player){
            if(PlayerInfo[xi][pSQLID] == pid){
                gpid = xi; break;
            }
        }
        if(gpid != -1) SCMf(gpid, COLOR_PRINC, "* Prietenul tau %s s-a deconectat de pe server.", GetName(playerid));   
        gpid = -1;
    }
    return true;
}
function SetPlayerSpawn(playerid) {
	if(Iter_Contains(PlayerPaint, playerid)) {
		SetPlayerHealthEx(playerid, 100); SetPlayerArmourEx(playerid, 0);
		paintspawn(playerid);
		GivePlayerWeaponEx(playerid, 31, 1000); GivePlayerWeaponEx(playerid, 24, 100);
		GivePlayerWeaponEx(playerid, 16, 1); GivePlayerWeaponEx(playerid, 41, 300);
		return true;
	}
   	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 10) intratwar[playerid] = 0; 	
	InHQ[playerid] = -1; 
	InHouse[playerid] = -1; InBussines[playerid] = -1;
	SetPlayerToTeamColor(playerid); SetPlayerVirtualWorld(playerid, 0); StopAudioStreamForPlayer(playerid);
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	if(!PlayerInfo[playerid][pTut]) {
		gNews[playerid] = 1; RegistrationStep[playerid] = 1; SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 9994); TogglePlayerControllable(playerid, false);
		SetPlayerPosEx(playerid, 1742.9814, -1863.0938, 16.2048);
		//InterpolateCameraPos(playerid, 917.423278, -1767.536865, 26.339736, 914.833496, -1430.521240, 24.417026, 10000);
		//InterpolateCameraLookAt(playerid, 917.385925, -1762.540649, 26.529075, 914.819824, -1425.521484, 24.369432, 10000);
		InterpolateCameraPos(playerid, 1012.425048, -1399.460693, 29.498086, 1117.878906, -1399.585571, 24.798904, 23000);
		InterpolateCameraLookAt(playerid, 1017.416992, -1399.502929, 29.217304, 1122.878295, -1399.627807, 24.736726, 23000);
	
        SCM(playerid, COLOR_PRINC, "---------------------------------");
		ShowPlayerDialogEx(playerid, DIALOG_REGISTER2, DIALOG_STYLE_LIST, "Choose your gender of your character", "Male\nFemale", "Choose", "");

		return true;
	}	
	if(BeforeSpectate[playerid][pSpectating]) {
		if(BeforeSpectate[playerid][pState] == PLAYER_STATE_DRIVER) PutPlayerInVehicleEx(playerid, BeforeSpectate[playerid][pInVehicle], 0);
		else if(BeforeSpectate[playerid][pState] == PLAYER_STATE_PASSENGER)  PutPlayerInVehicleEx(playerid, BeforeSpectate[playerid][pInVehicle], random(3) + 1);
		else SetPlayerPos(playerid, BeforeSpectate[playerid][pOldPos][0], BeforeSpectate[playerid][pOldPos][1], BeforeSpectate[playerid][pOldPos][2]);
		BeforeSpectate[playerid][pSpectating] = false;
		SetPlayerInterior(playerid, BeforeSpectate[playerid][pInt]);
		SetPlayerVirtualWorld(playerid, BeforeSpectate[playerid][pWorld]);
		return true;
	}
	switch(PlayerInfo[playerid][pJailed]) {
		case 1: {
			new rand = random(sizeof gRandomJailSpawns);
			SetPlayerInterior(playerid, 6);
			SetPlayerWantedLevel(playerid, 0);
			TogglePlayerControllable(playerid, false);
			PlayerTextDrawHide(playerid, WantedText[playerid]);
			defer UnFreezeStation(playerid);
			SetPlayerVirtualWorld(playerid, (PlayerInfo[playerid][pVirtualPD] == 3) ? (3) : (0));
			SetPlayerPosEx(playerid, gRandomJailSpawns[rand][0], gRandomJailSpawns[rand][1], gRandomJailSpawns[rand][2]);
			return true;
		}
		case 2: {
			new rand = random(sizeof gRandomAJailSpawns);
			SetPlayerInterior(playerid, 10);
			TogglePlayerControllable(playerid, false);
			PlayerTextDrawHide(playerid, WantedText[playerid]);
			defer UnFreezeStation(playerid);
			SetPlayerPosEx(playerid, gRandomAJailSpawns[rand][0], gRandomAJailSpawns[rand][1], gRandomAJailSpawns[rand][2]);
			return true;
		}
	}
	if(PlayerInfo[playerid][pPhousekey] != 999 && PlayerInfo[playerid][pSpawnChange]) {
		new house = PlayerInfo[playerid][pPhousekey];
		SetPlayerInterior(playerid, HouseInfo[house][hInterior]);
		SetPlayerVirtualWorld(playerid, HouseInfo[house][hVirtual]);
		SetPlayerPosEx(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity], HouseInfo[house][hExitz]);
		PlayerInfo[playerid][pLocal] = house;
		PlayerInfo[playerid][pInt] = HouseInfo[house][hInterior];		
		//if(strlen(housestring[InHouse[playerid]]) > 0) StopAudioStreamForPlayer(playerid), PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
		return true;
	}
	if(PlayerInfo[playerid][pMember] == 0) {
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 269.5700);
		SetPlayerPosEx(playerid, 1675.7025,1447.7917,10.7866);
		return true;
	}
	if(PlayerInfo[playerid][pMember] == 8) {
		InHQ[playerid] = 8;
		PlayerInfo[playerid][pInt] = 6;
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 3);
		SetPlayerPosEx(playerid, 246.8886, 64.7381, 1003.6406);
		return true; 
	}
	if(PlayerInfo[playerid][pMember] != 0) {
		new gid = PlayerInfo[playerid][pMember];
		InHQ[playerid] = gid;
		PlayerInfo[playerid][pInt] = DynamicFactions[gid][fInterior];
		SetPlayerInterior(playerid, DynamicFactions[gid][fInterior]);
		SetPlayerVirtualWorld(playerid, DynamicFactions[gid][fVirtual]);
		SetPlayerPosEx(playerid, DynamicFactions[gid][fcX], DynamicFactions[gid][fcY], DynamicFactions[gid][fcZ]);
		return true;
	}
	if((gTeam[playerid]) == 3) {
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 269.5700);
		SetPlayerPosEx(playerid, 1675.7025,1447.7917,10.7866);
		return true;
	} 	
	return 1; 
}
stock weapName(weaponid) {
	new weaponname[25]; GetWeaponName(weaponid, weaponname, 25);
	return weaponname; }
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float: fX, Float: fY, Float:fZ)  {
	ac_playerbullets[playerid] ++;
	if(ac_playerbullets[playerid] >= 20 && ac_bullets >= 1 && GetPlayerWeapon(playerid) != 38 && PlayerInfo[playerid][pFPS] >= 1 && GetPlayerWeapon(playerid) != 32)
	{
		SendAdmins(COLOR_RED, "%s (level %d) may be using cheats (vehicle bugger/rapid fire) - %d fire.", 1, GetName(playerid), PlayerInfo[playerid][pLevel], ac_playerbullets[playerid]);
	}
	switch(hittype) {
		case 1: {
			foreach(new x : Player) {
				if(Spectate[x] == playerid) DMInfo[playerid][0] = fX, DMInfo[playerid][1] = fY; DMInfo[playerid][2] = fZ;
			}
		}
		case 2: {
			foreach(new x : Player) {
				if(Spectate[x] == playerid && PlayerInfo[x][pAdmin] >= 1 && ShowDMG[x]) SCMf(x, COLOR_DARKPINK, "DMG: %s did damage to vehicle %d using a %s.", GetName(playerid), hitid, weapName(weaponid));
			}
		}
	}
	return 1; 
}  	
public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart) {
	new faction1 = PlayerInfo[playerid][pMember], faction2 = PlayerInfo[damagedid][pMember], skemadamage[128];
	if(amount > 70 && PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pMember] != 11 && ac_fakedamage == 1) {
		//SendAdmins(COLOR_PRINC1, "Kick: %s was kicked by AdmBot, reason: fake damage.", 1, GetName(playerid));	
		SendAdmins(COLOR_PRINC1, "(cheats) %s -  fake damage.", 1, GetName(playerid));	
		SendAdmins(COLOR_PRINC1, "(cheats) %s -  fake damage.", 1, GetName(playerid));
		SendAdmins(COLOR_PRINC1, "(cheats) %s -  fake damage.", 1, GetName(playerid));
		SendAdmins(COLOR_PRINC1, "(cheats) %s -  fake damage.", 1, GetName(playerid));

		//Kick(playerid);
	}
	if(togdamage[playerid] == 0) {
		format(skemadamage, 128, "Damage given~N~~N~ %s (~G~%d~W~~H~) / %s (~G~+%f~W~~H~) dmg", GetName(damagedid), damagedid, GunNames[weaponid], Float: amount);
		TextDrawShowForPlayer(playerid, Damage[1]);
		PlayerTextDrawSetString(playerid, DamageInformer[playerid][0], skemadamage);
		PlayerTextDrawShow(playerid, DamageInformer[playerid][0]);
		damagetimer[playerid] = 5;
	}
	if(togdamage[damagedid] == 0) {
		format(skemadamage, 128, "Damage taken~N~~N~ %s (~R~%d~W~~H~) / %s (~R~+%f~W~~H~) dmg", GetName(playerid), playerid, GunNames[weaponid], Float: amount);
		TextDrawShowForPlayer(damagedid, Damage[0]);
		PlayerTextDrawSetString(damagedid, DamageInformer[damagedid][1], skemadamage);
		PlayerTextDrawShow(damagedid, DamageInformer[damagedid][1]);
		damagetimer[damagedid] = 5;		
	}
	for(new i = 0; i < sizeof TurfInfo; i++) {
		if(IsPlayerInTurf(playerid, i) && IsAMember(playerid) && IsAMember(damagedid)) {
			if(WarInfo[i][wFaction] == faction1 && WarInfo[i][wAttacker] == faction2 || WarInfo[i][wFaction] == faction2 && WarInfo[i][wAttacker] == faction1) PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
		}
	}
	if(damagedid == INVALID_PLAYER_ID) { }
	if(weaponid == WEAPON_SNIPER) {
		amount = 100.0;
	}
	if(Iter_Contains(PlayerPaint, playerid)) PlayerPlaySound(playerid, 17802, 0.0, 0.0, 0.0);
	if(playerdeath[damagedid] == 0) {
		new Float: HP, Float: AP ;
		GetPlayerHealthEx(damagedid,HP); GetPlayerArmourEx(damagedid,AP);
		if (AP >= amount) { SetPlayerArmourEx (damagedid, AP - amount); }
		else if (AP <= 0) {
			new Float: remainHP = HP - amount;
			SetPlayerHealthEx (damagedid, remainHP);
			if (remainHP <= 1) {
				OnPlayerDeath(damagedid, playerid, weaponid);
				SetPlayerHealthEx (damagedid, 0.0);
				playerdeath[damagedid] = 1;
			}
		} else {
			new Float: remainHP = HP + (AP - amount);
			SetPlayerArmourEx (damagedid, 0.0);
			SetPlayerHealthEx (damagedid, remainHP);
			if (remainHP <= 1) {
				OnPlayerDeath(damagedid, playerid, weaponid);
				SetPlayerHealthEx (damagedid, 0.0);
				playerdeath[damagedid] = 1;
			}
		}
		if(PlayerCuffed[damagedid] == 1) {
			amount = 0;
			return false;
		}
		if(PlayerInfo[damagedid][pSleeping] == 1) {
			amount = 0;
			return false;
		}
		if(weaponid == WEAPON_SILENCED && tazer[playerid] && IsACop(playerid)) {
			if(IsACop(damagedid)) return false;
			if(PlayerCuffed[damagedid]) return false;
			if(PlayerInfo[playerid][pSleeping])  return false; 
			if(GetDistanceBetweenPlayers(playerid, damagedid) > 15) return false;
			PlayerCuffed[damagedid] = 1;
			PlayerCuffedTime[damagedid] = 8;
			TogglePlayerControllable(damagedid, false);
			sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s tazed %s for 8 seconds.", GetName(playerid), GetName(damagedid));
		}
	}
	foreach(new x : Player) if(Spectate[x] == playerid && PlayerInfo[x][pAdmin] >= 1 && ShowDMG[x]) SCMf(x, COLOR_DARKPINK, "DMG: %s did %f damage to %s using a %s. [bodypart: %d]", GetName(playerid), amount, GetName(damagedid), weapName(weaponid), bodypart);
	return 1; 
}
stock GetName(playerid) {
	new name[MAX_PLAYER_NAME]; GetPlayerName(playerid, name, sizeof name);
	return name; }
public OnPlayerDeath(playerid, killerid, reason) {
	if(killerid != INVALID_PLAYER_ID) { ac_kills[killerid] ++; ac_kills[playerid] ++; }

	if(Undercover[playerid] == 1) PlayerTextDrawHide(playerid, Jailtime[playerid]);
	if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6) intratwar[playerid] = 0;
	if(killerid != INVALID_PLAYER_ID && ac_kills[killerid] >= 10 && ac_onplayerdeath == 1) {
		SendAdmins(COLOR_RED, "Kick: %s was kicked by AdmBot, reason: troll kill #1.", 1, GetName(killerid));			
		Kick(killerid);
		return false;
	}
	if(ac_kills[playerid] >= 10 && ac_onplayerdeath == 1) {
		SendAdmins(COLOR_RED, "Kick: %s was kicked by AdmBot, reason: troll kill #2.", 1, GetName(playerid));			
		Kick(playerid);
		return false;
	}
    if(facerob[playerid] >= 1) {
        facerob[playerid] = 0;
        DisablePlayerCheckpoint(playerid);
        SCM(playerid, COLOR_ROB, "Rob failed.");
    }

    foreach(new x : Admins)
    {
    	SendDeathMessageToPlayer(x, killerid, playerid, reason);	
    }

	if(gPlayerLogged[playerid]== 0) return false;
    if(killerid != INVALID_PLAYER_ID) if(gPlayerLogged[killerid]== 0) return false;
    if(killerid != INVALID_PLAYER_ID) if(Iter_Contains(PlayerPaint, killerid)) {
    	paintkills[killerid] ++;
    	SCMf(playerid, COLOR_GENANNOUNCE, "You have been killed by %s.", GetName(killerid));
    	SCMf(killerid, COLOR_GENANNOUNCE, "You have killed %s. You now have %d kills.", GetName(playerid), paintkills[killerid]);

    	foreach(new i : PlayerPaint) 
    	{
    		SendDeathMessageToPlayer(i, killerid, playerid, reason);
    	}	

    	SpawnPlayer(playerid);
    }
    Listening[playerid]= -1;
    gString[0]= (EOS);
    DisablePlayerCheckpoint(playerid); DisablePlayerRaceCheckpoint(playerid);
    CP[playerid]= 0; UsedFind[playerid]= 0; gPlayerUsingLoopingAnim[playerid]= 0; PlayerInfo[playerid][pLocal]= 255;
    playerdeath[playerid]= 0; PlayerEnterTime[playerid]+= 221;
    if(killerid != INVALID_PLAYER_ID) {
        mysql_format(SQL, gString, sizeof gString, "INSERT INTO `kill_logs` (`playerid` , `killerid` , `reason` , `playername` , `killername` , `distance`) VALUES ('%d', '%d', '%d', '%s', '%s', '%0.2f')", PlayerInfo[playerid][pSQLID], PlayerInfo[killerid][pSQLID], reason, GetName(playerid), GetName(killerid), GetDistanceBetweenPlayers(playerid, killerid));
        mysql_tquery(SQL, gString);
        new faction1 = PlayerInfo[playerid][pMember], faction2 = PlayerInfo[killerid][pMember];
        for(new i = 1; i < sizeof TurfInfo; i++) {
            if(IsPlayerInTurf(killerid, i) && IsAMember(playerid) && IsAMember(killerid)) {
                if((WarInfo[i][wFaction]== faction1 && WarInfo[i][wAttacker]== faction2) || (WarInfo[i][wFaction]== faction2 && WarInfo[i][wAttacker]== faction1)) {
                    if(faction2 == WarInfo[i][wAttacker]|| faction2 == WarInfo[i][wFaction]) WarScoreF[faction2][i]++;
                    ucideri[killerid][i]++; decese[playerid][i]++; gString[0]= (EOS);
                    SCMf(playerid, COLOR_GENANNOUNCE, "Ai fost omorat de %s (%d) cu un %s de la distanta de %0.2fm.", GetName(killerid), killerid, weapName(reason), GetDistanceBetweenPlayers(playerid, killerid));
                    SCMf(killerid, COLOR_GENANNOUNCE, "L-ai omorat pe %s (%d) cu un %s de la distanta de %0.2fm.", GetName(playerid), playerid, weapName(reason), GetDistanceBetweenPlayers(playerid, killerid));
                    foreach(new x : Gangsters) { if(IsAMember(x) && (WarInfo[i][wFaction]== PlayerInfo[x][pMember]|| WarInfo[i][wAttacker]== PlayerInfo[x][pMember])) SendDeathMessageToPlayer(x, killerid, playerid, reason); }
                    if(faction2 == WarInfo[i][wAttacker]&& (ucideri[killerid][i]- decese[killerid][i]) > bestscoreat[i]) bestscoreat[i]= ucideri[killerid][i]- decese[killerid][i], bestmemberat[i]= killerid;
                    if(faction2 == WarInfo[i][wFaction]&& (ucideri[killerid][i]- decese[killerid][i]) > bestscoredf[i]) bestscoredf[i]= ucideri[killerid][i]- decese[killerid][i], bestmemberdf[i]= killerid;
                    if(faction1 == WarInfo[i][wAttacker]&& (ucideri[playerid][i]- decese[playerid][i]) < worstscoreat[i]) worstscoreat[i]= ucideri[playerid][i]- decese[playerid][i], worstscoreat[i]= playerid;
                    if(faction1 == WarInfo[i][wFaction]&& (ucideri[playerid][i]- decese[playerid][i]) < worstscoredf[i]) worstscoredf[i]= ucideri[playerid][i]- decese[playerid][i], worstscoredf[i]= playerid;
                    if(faction1 == 4 || faction1 == 6) SetPlayerVirtualWorld(playerid, 1);
                    else SetPlayerVirtualWorld(playerid, 0);
                    SpawnPlayer(playerid);
                    PlayerInfo[killerid][pKills] ++; pUpdateInt(killerid, "Kills", PlayerInfo[killerid][pKills]);
                }
            }
        }
    }
    if(PlayerInfo[playerid][pWantedLevel]>= 1) {
        new count, copkill = 0;
        if((PlayerInfo[playerid][pMember]!= 1 && PlayerInfo[playerid][pMember]!= 2 && PlayerInfo[playerid][pMember]!= 3 && PlayerInfo[playerid][pMember]!= 8)) {
            foreach(new x : Cops) {
                if(IsACop(x) && CrimInRange(50.0, playerid, x) && OnDuty[x]) {
                    if(!OnDuty[x]) return 1;
                    gString[0]= (EOS);
                    count ++;
                    copkill = 1;
                    ConsumingMoney[x]= 1;
                    DynamicFactions[PlayerInfo[x][pMember]][fBank]+= PlayerInfo[playerid][pWantedLevel]* 1000;
                    mysql_format(SQL, gString, sizeof gString, "UPDATE `factions` SET `Bank` = '%d' WHERE `ID` = '%d'", DynamicFactions[PlayerInfo[x][pMember]][fBank], PlayerInfo[x][pMember]);
                    mysql_tquery(SQL, gString);
					save_raport(x, 1);
                    SCMf(x, COLOR_DBLUE, "Ai primit %s$ bonus pentru prinderea lui %s.", FormatNumber(PlayerInfo[playerid][pWantedLevel]* 1000), GetName(playerid));
                    GivePlayerCash(x, PlayerInfo[playerid][pWantedLevel]* 1000);
                    GameTextForPlayer(x, "Running Suspect bonus!", 5000, 1);
                    PlayerPlaySound(x, 1058, 0.0, 0.0, 0.0);
                }
            }
            if(copkill) {
                SendFamilyMessage(1, COLOR_LIGHTBLUE, "Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.", GetName(playerid), GetName(killerid), PlayerInfo[playerid][pWantedLevel]* 150);
                SendFamilyMessage(2, COLOR_LIGHTBLUE, "Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.", GetName(playerid), GetName(killerid), PlayerInfo[playerid][pWantedLevel]* 150);
                SendFamilyMessage(3, COLOR_LIGHTBLUE, "Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.", GetName(playerid), GetName(killerid), PlayerInfo[playerid][pWantedLevel]* 150);
                SendFamilyMessage(8, COLOR_LIGHTBLUE, "Dispatch: %s has been killed by %s and will be in jail for %d seconds, over.", GetName(playerid), GetName(killerid), PlayerInfo[playerid][pWantedLevel]* 150);
                SCMf(playerid, COLOR_LIGHTRED, "Because you got killed, you lost %s$ and you will be taken to jail. You are no longer a criminal.", FormatNumber(PlayerInfo[playerid][pWantedLevel]* 1000));
                ClearCrime(playerid);
                TogglePlayerControllable(playerid, false);
                defer UnFreezeStation(playerid);
                GivePlayerCash(playerid, - PlayerInfo[playerid][pWantedLevel]* 1000);
                WantedPoints[playerid]= 0;
                PlayerInfo[playerid][pJailed]= 1, pUpdateInt(playerid, "Jailed", 1);
                PlayerInfo[playerid][pJailTime]= PlayerInfo[playerid][pWantedLevel]* 200; pUpdateInt(playerid, "JailTime", PlayerInfo[playerid][pJailTime]);
                PlayerInfo[playerid][pWantedLevel]= 0, pUpdateInt(playerid, "WantedLevel", 0);
                PlayerInfo[playerid][pWantedDeaths]++, pUpdateInt(playerid, "WantedDeaths", PlayerInfo[playerid][pWantedDeaths]);
            }
        }
    }
    if(TakingLesson[playerid]) {
        DestroyVehicle(examcar[playerid]); examcar[playerid]= -1;
        DisablePlayerRaceCheckpoint(playerid); DisableRemoteVehicleCollisions(playerid, false);
    }
	if(killerid != INVALID_PLAYER_ID) if(PlayerInfo[playerid][pHeadValue] > 0 && PlayerInfo[killerid][pMember] == 11 && contract_get[killerid] == playerid) {
	    if(Undercover[killerid] == 0) SendFamilyMessage(11, COLOR_BLUE, "%s failed to complete the contract on %s, reason: not undercover.", GetName(killerid), GetName(playerid));
	    else if(PhoneOnline[killerid] == 0) SendFamilyMessage(11, COLOR_BLUE, "%s failed to complete the contract on %s, reason: phone turned on.", GetName(killerid), GetName(playerid));
	    else if(GetDistanceBetweenPlayers(playerid, killerid) < 100 && reason != WEAPON_KNIFE) SendFamilyMessage(11, COLOR_BLUE, "%s failed to complete the contract on %s, reason: distance.", GetName(killerid), GetName(playerid)); 
	    else {
	        GivePlayerCash(killerid, PlayerInfo[playerid][pHeadValue]);

	        new log[128];

	        format(log, sizeof log, "%s win $%s because killed %s (hitman)", GetName(killerid), FormatNumber(PlayerInfo[playerid][pHeadValue]), GetName(playerid));

	        SendFamilyMessage(11, COLOR_BLUE, "%s has succesfully completed the contract on %s for %s$, distance: %0.2fm.", GetName(killerid), GetName(playerid), FormatNumber(PlayerInfo[playerid][pHeadValue]), GetDistanceBetweenPlayers(playerid, killerid));
			save_raport(killerid, 1);
	    }
	    contract_get[killerid] = -1; togfind[killerid] = 0;
	    PlayerInfo[playerid][pHeadValue] = 0; pUpdateInt(playerid, "HeadValue", 0); 
	} 
	if(gTeam[playerid] == 3 || gTeam[playerid] == 2 || gTeam[playerid] == 4 || gTeam[playerid] == 5 || gTeam[playerid] == 11) {
	    if(killerid != INVALID_PLAYER_ID) if(gTeam[killerid] == 3 || gTeam[killerid] == 4 && gTeam[killerid] == 5 || (gTeam[killerid] == 1)) {
	        if(PlayerInfo[playerid][pJailed]) return 1;
	        if(!IsACop(playerid) && !ClanDuty[playerid] && !IsACop(killerid) && !Iter_Contains(PlayerPaint, playerid)) {
	            SCMf(playerid, COLOR_DARKPINK, "Ai fost atacat de %s. Foloseste comanda /call 112 pentru a raporta incidentul.", GetName(killerid));
	            strmid(WantedName[playerid], GetName(killerid), 30, 255);
	            WantedReason[playerid] = reason; WantedTimer[playerid] = 60; WantedPlayer[playerid] = killerid;
	        }
	    }
	} 
    if(gPlayerUsingLoopingAnim[playerid]) gPlayerUsingLoopingAnim[playerid]= 1;
    if(PlayerCuffed2[playerid]) PlayerCuffed2[playerid]= 0, RemovePlayerAttachedObject(playerid, 1), SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
    if(gPlayerCheckpointStatus[playerid]> 4 && gPlayerCheckpointStatus[playerid]< 11) gPlayerCheckpointStatus[playerid]= CHECKPOINT_NONE, DisablePlayerCheckpoint(playerid);
    if(Mobile[playerid]!= -1) SCM(Mobile[playerid], COLOR_GRAD2, "The linie just went dead.."), CellTime[Mobile [playerid]] = 0, CellTime[playerid]= 0, Mobile[Mobile[playerid]] = -1, Mobile[playerid]= -1;
    if(!XDeaths[playerid]) LastDeath[playerid]= gettime();
    for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, FindTXD[playerid][i]);
    foreach(new x : Player) {
		if(killerid != INVALID_PLAYER_ID) if(Spectate[x]== killerid) { SCMf(x, COLOR_RED, "%s was killed by %s, reason: %s, distance: %0.2fm.", GetName(playerid), GetName(killerid), weapName(reason), GetDistanceBetweenPlayers(playerid, killerid)); }    	
        if(PlayerInfo[x][pAdmin]>= 1 && Spectate[x]!= -1 && GetDistanceBetweenPlayers(playerid, Spectate[x]) <= 100.0) {
            if(killerid != INVALID_PLAYER_ID) if(Spectate[x]!= killerid) SCMf(x, COLOR_RED, "%s was killed by %s, reason: %s.", GetName(playerid), GetName(killerid), weapName(reason));
            stop deathdeletetime[x];
            if(killerid != INVALID_PLAYER_ID) SendDeathMessageToPlayer(x, killerid, playerid, reason);
            deathdeletetime[x]= defer DeleteDeathMessage(playerid);
        }
    } return 1; 
}
new legalmods[48][22] = {
    {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
    {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000}, {415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
    {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000}, {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
    {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000}, {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000}, {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000}, {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
    {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000}, {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000}, {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
    {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000}, {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
    {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000}, {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000}, {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000}, {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
    {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000}, {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
    {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000}, {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
    {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026}, {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
    {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000}, {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
    {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
    {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
    {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000}, {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000} };
public OnVehicleMod(playerid, vehicleid, componentid) {
	if(GetPlayerInterior(playerid) == 0 && !PlayerInfo[playerid][pAdmin]) {
		SendAdmins(COLOR_PRINC1, "%s has been kicked by AdmBot, reason: Vehicle Tunning.", 1, GetName(playerid));
		defer KickEx(playerid); return true;
	}
	if(!islegalcarmod(GetVehicleModel(vehicleid), componentid)) {
		BanEx(playerid, "Request"); return true;
	}
	if(IsAnOwnableCar(vehicleid)) {
		SaveComponent(vehicleid, componentid);
        for(new slot; slot < MAX_PERSONAL_VEHICLES; slot++) {
            if(PlayerInfo[playerid][pCarID][slot] == vehicleid) defer ModPVehicle(playerid, vehicleid);
        }
	}
	return 1; 
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid) {
	if(IsAnOwnableCar(vehicleid)) { foreach(new x : Player) { for(new i; i < MAX_PERSONAL_VEHICLES; i++) { if(PlayerInfo[x][pCarID][i] == vehicleid) PlayerInfo[x][pCarPaintJ][i] = paintjobid; } } }
	return 1; 
}
stock iswheelmodel(modelid) {
	new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
	for(new i = 0, j = sizeof wheelmodels; i != j; i++) { if(modelid == wheelmodels[i]) return 1; 
	}
	return 0; }
stock IllegalCarNitroIde(carmodel) {
	new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
	for(new i = 0, j = sizeof illegalvehs; i != j; i++) { if(carmodel == illegalvehs[i]) return 1; 
	}
	return 0; }
stock islegalcarmod(vehicleid, componentid) {
	if((iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) { if(!IllegalCarNitroIde(vehicleid)) return 1; 
	}
	else { for(new i = 0, j = sizeof legalmods; i != j; i++) { if(legalmods[i][0] == vehicleid) { for(new z = 1; z < 22; z++) { if(legalmods[i][z] == componentid) return 1; 
	} } } }
	return 0; }

timer AfterSpray[3000](playerid)
{
	new carid = GetPlayerVehicleID(playerid), Float:health, businessid;

	gString[0] = (EOS);
	GetVehicleHealth(carid, health);

	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1025.0671, -1023.7895, 32.1016)) businessid = 36;
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 719.9537, -457.2771, 16.3359)) businessid = 34;
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 487.4134, -1740.1738, 11.1370)) businessid = 37;
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 2065.5911, -1831.4495, 13.5469)) businessid = 35;
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 1974.3198, 2162.7249, 11.0703)) businessid = 40;
	if(IsPlayerInRangeOfPoint(playerid, 15.0, -100.1086, 1117.3312, 19.7417)) businessid = 41;

	if(health == 1000.0)
	{
		Cash[playerid] -= BizzInfo[businessid][bEntranceCost];
		BizzInfo[businessid][bTill] += BizzInfo[businessid][bEntranceCost];
		ChangeVehicleColor(PlayerInfo[playerid][pCarID][carid], PlayerInfo[playerid][pCarColor1][carid], PlayerInfo[playerid][pCarColor2][carid]);

		mysql_format(SQL, gString, 144, "UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d' LIMIT 1", BizzInfo[businessid][bTill], businessid);
		mysql_tquery(SQL, gString);

		va_GameTextForPlayer(playerid, "~r~-%d$", 5000, 1, BizzInfo[businessid][bEntranceCost]);

		return true;
	}

	return true;
}

public OnPlayerSpawn(playerid) {
	foreach(new pone : PlayerPaint) {
        if(!IsPlayerConnected(pone)) continue;
        foreach(new ptwo : PlayerPaint) {
            if(!IsPlayerConnected(ptwo)) continue;
            if(pone != ptwo){
                SetPlayerMarkerForPlayer(pone, ptwo, GetPlayerColor(ptwo));
                SetPlayerMarkerForPlayer(ptwo, pone, GetPlayerColor(pone));
            }
        }
    }
    if(PlayerInfo[playerid][pPet] != 0 && PlayerInfo[playerid][pPetStatus] != 0) AttachPet(playerid);
    if(escapedat[playerid] == 2) {
    	SCM(playerid, -1, "Escape failed."); 
    	escapedat[playerid] = 0;	
    }
   	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 10) intratwar[playerid] = 0; 
	if(Undercover[playerid] == 1) PlayerTextDrawHide(playerid, Jailtime[playerid]);	
	if(facerob[playerid] >= 1) {
		facerob[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		SCM(playerid, COLOR_ROB, "Rob failed.");
	}
	new str1[40];
    SetPlayerHealthEx(playerid, 100); SetPlayerArmourEx(playerid, 0);  
    SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
    if(PlayerInfo[playerid][pWantedLevel] >= 1) {
        PlayerTextDrawShow(playerid, WantedText[playerid]);
        format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
		PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
	}
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	tazer[playerid] = 0;
	if(!gPlayerAnimLibsPreloaded[playerid]) {
   		PreloadAnimLib(playerid,"BOMBER"); PreloadAnimLib(playerid,"RAPPING"); PreloadAnimLib(playerid,"SHOP");
   		PreloadAnimLib(playerid,"BEACH"); PreloadAnimLib(playerid,"SMOKING"); PreloadAnimLib(playerid,"FOOD");
    	PreloadAnimLib(playerid,"ON_LOOKERS"); PreloadAnimLib(playerid,"DEALER"); PreloadAnimLib(playerid,"MISC");
    	PreloadAnimLib(playerid,"SWEET"); PreloadAnimLib(playerid,"RIOT"); PreloadAnimLib(playerid,"PED");
    	PreloadAnimLib(playerid,"POLICE"); PreloadAnimLib(playerid,"CRACK"); PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT"); PreloadAnimLib(playerid,"PARK"); PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD"); gPlayerAnimLibsPreloaded[playerid] = 1;
	}
	gTeam[playerid] = PlayerInfo[playerid][pTeam];
	if(gTeam[playerid] == 4) gTeam[playerid] = 4;
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
		gTeam[playerid] = 2; PlayerInfo[playerid][pTeam] = 2;
	}
	if(gPlayerLogged[playerid] == 0) {
		defer KickEx(playerid);
		return true;
	}
 	SetPlayerSpawn(playerid);
	playerdeath[playerid] = 0;
	Undercover[playerid] = 0;
	SetPlayerTeam(playerid,4);
	StopAudioStreamForPlayer(playerid);	PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
	if(!IsACop(playerid)) SetPlayerToTeamColor(playerid);
	if(IsACop(playerid) && OnDuty[playerid] < 1) SetPlayerColor(playerid, -1);
	if(OnDuty[playerid] >= 1 && PlayerInfo[playerid][pMember] >= 1) {
		switch(PlayerInfo[playerid][pMember]) {
			case 1: {
				GivePlayerWeaponEx(playerid, 24, 500); GivePlayerWeaponEx(playerid, 3, 1); GivePlayerWeaponEx(playerid, 41, 500);
				GivePlayerWeaponEx(playerid, 29, 1000); GivePlayerWeaponEx(playerid, 31, 1000); SetPlayerArmourEx(playerid, 100);
				switch(PlayerInfo[playerid][pRank]) {
					case 1: SetPlayerSkin(playerid, 71); 
					case 2: SetPlayerSkin(playerid, 284);
					case 3: SetPlayerSkin(playerid, 281);
					case 4: SetPlayerSkin(playerid, 266);
					case 5: SetPlayerSkin(playerid, 283);
					case 6..7: SetPlayerSkin(playerid, 267);
				}
				SetPlayerToTeamColor(playerid);
			}
			case 2: {
				GivePlayerWeaponEx(playerid, 24, 500); GivePlayerWeaponEx(playerid, 3, 1); GivePlayerWeaponEx(playerid, 41, 500);
				GivePlayerWeaponEx(playerid, 29, 1000); GivePlayerWeaponEx(playerid, 31, 1000); SetPlayerArmourEx(playerid, 100);
				switch(PlayerInfo[playerid][pRank]) {
					case 1: SetPlayerSkin(playerid, 163);
					case 2: SetPlayerSkin(playerid, 164);
					case 3..4: SetPlayerSkin(playerid, 166); 
					case 5: SetPlayerSkin(playerid, 286);
					case 6..7: SetPlayerSkin(playerid, 295);
				}
				SetPlayerToTeamColor(playerid);
			}
			case 3: {
				GivePlayerWeaponEx(playerid, 24, 500); GivePlayerWeaponEx(playerid, 3, 1); GivePlayerWeaponEx(playerid, 41, 500);
				GivePlayerWeaponEx(playerid, 29, 1000); GivePlayerWeaponEx(playerid, 31, 1000); SetPlayerArmourEx(playerid, 100);
				OnDuty[playerid] = 1;
				switch(PlayerInfo[playerid][pRank]) {
					case 1: SetPlayerSkin(playerid, 287); 
					case 2: SetPlayerSkin(playerid, 287);
					case 3: SetPlayerSkin(playerid, 284);
					case 4: SetPlayerSkin(playerid, 285);
					case 5: SetPlayerSkin(playerid, 283);
					case 6..7: SetPlayerSkin(playerid, 288);
				}
				SetPlayerToTeamColor(playerid);
			}			
			case 4: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1: SetPlayerSkin(playerid, 114);
					case 2: SetPlayerSkin(playerid, 116);
					case 3..5: SetPlayerSkin(playerid, 115);
					case 6..7: SetPlayerSkin(playerid, 113); 
				}	
				SetPlayerToTeamColor(playerid);
			}
			case 5: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1: SetPlayerSkin(playerid, 106);
					case 2..3: SetPlayerSkin(playerid, 271);
					case 4..5: SetPlayerSkin(playerid, 269);
					case 6..7: SetPlayerSkin(playerid, 270);
				}
			}
			case 6: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1: SetPlayerSkin(playerid, 108);
					case 2..3: SetPlayerSkin(playerid, 110);
					case 4..5: SetPlayerSkin(playerid, 109);
					case 6..7: SetPlayerSkin(playerid, 292);
				}
			}
			case 8: {
				GivePlayerWeaponEx(playerid, 24, 500); GivePlayerWeaponEx(playerid, 3, 1); GivePlayerWeaponEx(playerid, 41, 500);
				GivePlayerWeaponEx(playerid, 29, 1000); GivePlayerWeaponEx(playerid, 31, 1000); SetPlayerArmourEx(playerid, 100);
				switch(PlayerInfo[playerid][pRank]) {
					case 1: SetPlayerSkin(playerid, 71); 
					case 2: SetPlayerSkin(playerid, 284);
					case 3: SetPlayerSkin(playerid, 281);
					case 4: SetPlayerSkin(playerid, 266);
					case 5: SetPlayerSkin(playerid, 283);
					case 6..7: SetPlayerSkin(playerid, 267);
				}
				SetPlayerToTeamColor(playerid);
			}			
			case 9: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1..2: SetPlayerSkin(playerid, 188);
					case 3: SetPlayerSkin(playerid, 17);
					case 4..5: SetPlayerSkin(playerid, 187);
					case 6..7: SetPlayerSkin(playerid, 147);
				}
			}
			case 10: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1:	SetPlayerSkin(playerid, 185);
					case 2: SetPlayerSkin(playerid, 102);
					case 3..5: SetPlayerSkin(playerid, 104);
					case 6..7: SetPlayerSkin(playerid, 296);
				}
			}
			case 11: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1:	SetPlayerSkin(playerid, 208);
					case 2..3: SetPlayerSkin(playerid, 186); 
					case 4..7: SetPlayerSkin(playerid, 294);
				}
			}
			case 13: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1..2: SetPlayerSkin(playerid, 253);
					case 3..4: SetPlayerSkin(playerid, 255);
					case 5: SetPlayerSkin(playerid, 61);
					case 6..7: SetPlayerSkin(playerid, 228);
				}
			}
			case 14: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1: SetPlayerSkin(playerid, 276);
					case 2:	SetPlayerSkin(playerid, 275);
					case 3: SetPlayerSkin(playerid, 275);
					case 4: SetPlayerSkin(playerid, 274);
					case 5: SetPlayerSkin(playerid, 70);
					case 6..7: SetPlayerSkin(playerid, 228);
				}
			}
			case 15: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1..2: SetPlayerSkin(playerid, 8);
					case 3..5: SetPlayerSkin(playerid, 42);
					case 6..7: SetPlayerSkin(playerid, 50);
				}
			}
			case 16: {
				switch(PlayerInfo[playerid][pRank]) {
					case 1..2: SetPlayerSkin(playerid, 253);
					case 3..4: SetPlayerSkin(playerid, 255);
					case 5: SetPlayerSkin(playerid, 61);
					case 6..7: SetPlayerSkin(playerid, 228);
				}
			}						
		}		
	}	
	if(PlayerInfo[playerid][pPhousekey] != 999 && PlayerInfo[playerid][pSpawnChange] == 1 && GetPlayerInterior(playerid) >= 1) { 
		PlayerInfo[playerid][pLocal] = PlayerInfo[playerid][pPhousekey];
		PlayerInfo[playerid][pInt] = HouseInfo[PlayerInfo[playerid][pPhousekey]][hInterior];
	}
	UsingDrugs[playerid] = 0;
	PlayerStoned[playerid] = 0;
	SetPlayerDrunkLevel(playerid, 0);
	skemawar[playerid] = 0;
	return 1; 
}	
function Factionlog(factionid,psql,lsql,action[]) {
	gString[0] = (EOS);
	new escape[256];
	mysql_real_escape_string(action, escape);
	mysql_format(SQL,gString,300,"INSERT INTO factionlog (`factionid`,`player`,`leader`,`action`) VALUES ('%d','%d','%d','%s')",factionid,psql,lsql,escape);
	mysql_tquery(SQL,gString);
	return 1; 
}
CMD:pet(playerid, params[])  {
	new PetStatus[20];
	PetStatus = (PlayerInfo[playerid][pPetStatus] != 0 ? ("{1AAB07}Mounted") : ("{ff0000}Sleeping")); pUpdateInt(playerid, "PetStatus", 1);

	if(PlayerInfo[playerid][pPet] == 0) 
		return SCM(playerid, COLOR_PRINC, "(Pet): {FFFFFF}Nu detii un animal de companie.");

	gString[0] = (EOS);

	format(gString, 200, "Option\tValue\nStatus\t%s\nNume pet\t{26B309}%s\nBeneficii pet (click)\nAvanseaza pet\t%d/%d pet points\nTip pet (click)", PetStatus, PlayerInfo[playerid][pPetName], PlayerInfo[playerid][pPetPoints], PlayerInfo[playerid][pPetLevel] * 100);
	ShowPlayerDialogEx(playerid, DIALOG_PET, DIALOG_STYLE_TABLIST_HEADERS, "Pet Menu", gString, "Select", "Exit");
	return 1; 
}
function RemovePet(playerid) 
{
	//printf("%d pet destroy 3dtextid %s's",Pet[playerid],PlayerInfo[playerid][pNormalName]);
	PlayerInfo[playerid][pPetStatus] = 0;
	DestroyDynamic3DTextLabel(Pet[playerid]);
	RemovePlayerAttachedObject(playerid, 9);
	return 1; 
}

function AttachPet(playerid)
{
	if(PlayerInfo[playerid][pPetStatus] == 1) RemovePet(playerid);
	PlayerInfo[playerid][pPetStatus] = 1;

	switch(PlayerInfo[playerid][pPetSkin]) {
		case 19079: SetPlayerAttachedObject(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.330000, -0.100000, -0.129999, 0.000000, 0.000000, 0.000000, 0.800000, 1.000000, 1.000000);
		case 1607: SetPlayerAttachedObject(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.349999, -0.061524, -0.140000, 0.000000, 100.000000, 0.000000, 0.090000, 0.050000, 0.050000);
		case 1609: SetPlayerAttachedObject(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.360000, 0.000000, -0.129999, 0.000000, 100.000000, 0.000000, 0.100000, 0.100000, 0.100000);
		case 1608: SetPlayerAttachedObject(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.360000, -0.061524, -0.140000, 0.000000, 100.000000, 0.000000, 0.050000, 0.029999, 0.050000);
		case 1371: SetPlayerAttachedObject(playerid, 9, PlayerInfo[playerid][pPetSkin], 1, 0.400000, 0.000000, -0.140000, 0.000000, 100.000000, 160.000000, 0.150000, 0.150000, 0.150000);
	}

	gString[0] = (EOS);
    format(gString, 128, "{fff000}Lvl. %d {00ff00}%s", PlayerInfo[playerid][pPetLevel], PlayerInfo[playerid][pPetName]);
    Pet[playerid] = CreateDynamic3DTextLabel(gString, COLOR_WHITE, 357.120239, 1.712298, 349.232513, 20.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Pet[playerid], E_STREAMER_ATTACH_OFFSET_Z, 0); Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Pet[playerid], E_STREAMER_ATTACH_OFFSET_X, 0) ;
	return 1; 
}

function ViewPet(playerid) {
	
	gString[0] = (EOS);


	SCM(playerid, COLOR_GREEN, "---------------------------------------------------------------------------------");
	format(gString, 144, "(InfoPet){ffffff} Nivel animal de companie: %d/20 | Pet Points: %d/%d", PlayerInfo[playerid][pPetLevel], PlayerInfo[playerid][pPetPoints], PlayerInfo[playerid][pPetLevel] * 100); SCM(playerid, COLOR_PRINC, gString);
	SCM(playerid, COLOR_PRINC, "(beneficies){ffffff} animal de companie pe umar..");
	SCM(playerid, COLOR_PRINC, "(beneficies){ffffff} skin special in </specialskin>");
	SCM(playerid, COLOR_PRINC, "(InfoPet){ffffff} PetPoints-urile se pot acumula momentan, doar la payday-uri.");
	SCM(playerid, COLOR_GREEN, "---------------------------------------------------------------------------------");
	return 1; 
}

public OnPlayerEnterCheckpoint(playerid) {
	if(!IsPlayerInRangeOfPoint(playerid, 100, PlayerPosii[playerid] [0], PlayerPosii[playerid] [1], PlayerPosii[playerid] [2]) && PlayerInfo[playerid][pAdmin] < 1 && ac_teleport == 1 && CP[playerid] != 43) {
		acwarnings[playerid] ++;	
		if(acwarnings[playerid] >= 5) {
			//SendAdmins(COLOR_SKEMA2, "Kick: %s was kicked by AdmBot, reason: teleport to checkpoint #1.", 1, GetName(playerid));	
			SendAdmins(COLOR_SKEMA2, "(cheats) - %s - teleport to checkpoint #1.", 1, GetName(playerid));		
			SendAdmins(COLOR_SKEMA2, "(cheats) - %s - teleport to checkpoint #1.", 1, GetName(playerid));
			SendAdmins(COLOR_SKEMA2, "(cheats) - %s - teleport to checkpoint #1.", 1, GetName(playerid));

			//Kick(playerid);
			return true;
		}	
		if(acwarnings[playerid] < 5) SendAdmins(COLOR_RED, "%s (%d, level %d) may be using teleport hack on job (%d warnings).", 1, GetName(playerid), playerid, PlayerInfo[playerid][pLevel], acwarnings[playerid]);
		return true;
	}		
	new lol = GetPlayerVehicleID(playerid), towedcar = GetVehicleTrailer(GetPlayerVehicleID(playerid));
	if(TaxiAccepted[playerid] != -1) {
		SCM(playerid, -1, "You have reached your destination.");
		TaxiAccepted[playerid] = -1; DisablePlayerCheckpoint(playerid); targetfind[playerid] = -1; UsedFind[playerid] = 0;
	} else if(MedicAccepted[playerid] != -1) {
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination!");
		MedicAccepted[playerid] = -1; DisablePlayerCheckpoint(playerid); targetfind[playerid] = -1; UsedFind[playerid] = 0;
	}		
	if(CP[playerid] == 34) {
	    if(IsTrailerAttachedToVehicle(lol) == 0) return SCM(playerid, COLOR_WHITE, "You don't have a car attached.");
	    DisablePlayerCheckpoint(playerid); CP[playerid] = 0;
	    SetVehicleToRespawn(towedcar);
	    new money = 50000 + random(50000);
	    GivePlayerCash(playerid, money);
	    SCMf(playerid, COLOR_PRINC, "(Faction): {ffffff}Ai tractat vehiculul si ai primit $%s.", FormatNumber(money));
	    SendFamilyMessage(15, COLOR_LIGHTBLUE, "* %s trailed a new vehicle.", GetName(playerid));
	    gString[0] = (EOS);
	    mysql_format(SQL, gString, 256, "UPDATE `users` SET `Raport1` = `Raport1` + '1' WHERE `id` = '%D' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	    mysql_tquery(SQL, gString);
	    save_raport(playerid, 1);
	    barcadelay[playerid] = 120;
	} else if(CP[playerid] == 43) {
		CP[playerid] = 0; DisablePlayerCheckpoint(playerid);
		PlayerTextDrawHide(playerid, FindTXD[playerid][0]); PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination.");
	} else if(CP[playerid] == 1012) {
		CP[playerid] = 0; DisablePlayerCheckpoint(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your vehicle.");
	} else if(facerob[playerid] == 1 && CP[playerid] == 114) {
		new skemabani = 700000 + random(300000);
		DisablePlayerCheckpoint(playerid); 
		facerob[playerid] = 2; CP[playerid] = 0;
		GivePlayerCash(playerid, skemabani);
		SCMf(playerid, COLOR_ROB, "(+) Money earned from the rob: $%s.", FormatNumber(skemabani));
		new rando = random(sizeof(gRandomRob2));
		SetPlayerCheckpoint(playerid, gRandomRob2[rando][0],gRandomRob2[rando][1],gRandomRob2[rando][2], 4.0);	
		CP[playerid] = 115;		
	} else if(facerob[playerid] == 2 && CP[playerid] == 115) {
		new skemabani = 700000 + random(300000);
		DisablePlayerCheckpoint(playerid);
		facerob[playerid] = 0; CP[playerid] = 0;
		GivePlayerCash(playerid, skemabani);
		SCMf(playerid, COLOR_ROB, "(+) Money earned from the rob: $%s.", FormatNumber(skemabani));
	} else if(CP[playerid] == 100 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, 1071.4825,-1849.6860,13.3920, 4.0);
		CP[playerid] = 101;
	} else if(CP[playerid] == 101 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, 1038.0876,-1799.4539,13.6948, 4.0);
		CP[playerid] = 102;
	} else if(CP[playerid] == 102 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, 1040.1986,-1699.4667,13.3828, 4.0);
		CP[playerid] = 103;
	} else if(CP[playerid] == 103 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, 1039.9738,-1581.6879,13.3828, 4.0);
		CP[playerid] = 104;
	} else if(CP[playerid] == 104 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, 1159.1439,-1574.9174,13.2734, 4.0);
		CP[playerid] = 105;
	} else if(CP[playerid] == 105 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, 1288.1953,-1574.7928,13.3828, 4.0);
		CP[playerid] = 106;
	} else if(CP[playerid] == 106 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, 1294.6948,-1721.7155,13.3906, 4.0);
		CP[playerid] = 107;
	} else if(CP[playerid] == 107 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, 1294.8810,-1843.2440,13.3828, 4.0);
		CP[playerid] = 108;
	} else if(CP[playerid] == 108 && IsPlayerInVehicle(playerid, examcar[playerid])) {
		DestroyVehicle(examcar[playerid]); DisablePlayerCheckpoint(playerid);
		StopBlinkNeons(examcar[playerid]);
		PlayerInfo[playerid][pCarLic] = 50; pUpdateInt(playerid, "CarLic", 50);
		TakingLesson[playerid] = 0; DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1; CP[playerid] = 0;
		SCM(playerid, COLOR_WHITE, "Exam finished! You can now drive any car!");
	} 

	else if(CP[playerid] == 500)
	{
		if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu poti intra in checkpoint deoarece te afli intr-un vehicul.");

		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;

		new casa = 1 + random(49); gString[0] = (EOS);

		PlayerInfo[playerid][pRented] = casa;
		PlayerInfo[playerid][pSpawnChange] = 1;
		PlayerInfo[playerid][pPhousekey] = casa;

		mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Rented` = '%d', `SpawnChange` = '1', `House` = '%d' WHERE `id` = '%d' LIMIT 1", casa, casa, PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString);

		SCM(playerid, -1, "Daca ai intrebari legate de joc, foloseste /n si helperii vor incerca sa te ajute.");
	    SCM(playerid, -1, "Poti folosi si /help pentru comenzi de baza.");
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}Ai primit chirie la casa %d de pe server. Poti folosi comanda /unrentroom pentru a renunta la ea.", casa);

		new randphone;

		do 
		{
			randphone = 10000 + random(89999);
			PlayerInfo[playerid][pPnumber] = randphone;
		}				

		while(NumberUsed(playerid));

		pUpdateInt(playerid, "PhoneNr", PlayerInfo[playerid][pPnumber]);

		PlayerInfo[playerid][pCredits] += 300;
		pUpdateInt(playerid, "CreditsF", PlayerInfo[playerid][pCredits]);

		PlayerInfo[playerid][pPhoneBook] = 1;
		pUpdateInt(playerid, "Phonebook", PlayerInfo[playerid][pPhoneBook]);					

		GivePlayerCash(playerid, 250000);
		RemovePlayerAttachedObject(playerid, 9);
		DestroyVehicle(Carspawn[LastVeh[playerid]]);
		Carspawn[LastVeh[playerid]] = 0;

		SCMf(playerid, COLOR_PRINC, "Ai transportat drogurile si ai primit un telefon (%d), o carte de credit, o agenda telefonica, $250,000 si o masina imprumut.", randphone);

		SpawnPlayer(playerid);
	}

	else if(CP[playerid] == 6868)	{
		DisablePlayerCheckpoint(playerid); CP[playerid] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "You have reached your destination.");
	} else {
		switch (gPlayerCheckpointStatus[playerid]) {
			case CHECKPOINT_LOCATE: {
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			}
		}		
	}	
	return 1; 
}
public OnPlayerExitedMenu(playerid) {
	new Menu:CurrentMenu = GetPlayerMenu(playerid);
	if(!IsValidMenu(CurrentMenu)) return true;
	ShowMenuForPlayer(CurrentMenu, playerid);
	TogglePlayerControllable(playerid,1);
	return 1; 
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger) {
	if(IsPlayerInAnyVehicle(playerid) && ac_trolltimer == 1 && PlayerInfo[playerid][pAdmin] < 1) return checkTroll(playerid, 1);
	LastVeh[playerid] = vehicleid;
	return 1; 
}	
public OnPlayerStateChange(playerid, newstate, oldstate) {
    new string[144], vehicleid = GetPlayerVehicleID(playerid);
    if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER) StopAudioStreamForPlayer(playerid), Listening[playerid] = -1;
    if(oldstate == PLAYER_STATE_DRIVER) StopAudioStreamForPlayer(playerid);
    if((newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT) || (newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_ONFOOT) || (newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_PASSENGER) ||
    (newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)) {
        if(crasher[playerid] >= 1 && PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pLevel] < 5 && ac_crasher == 1) {
			//SendAdmins(COLOR_PRINC1, "Kick: %s was kicked by AdmBot, reason: possible crasher #7.", 1, GetName(playerid));	
			SendAdmins(COLOR_PRINC1, "(cheats) %s absolut crasher.", 1, GetName(playerid));		
			SendAdmins(COLOR_PRINC1, "(cheats) %s absolut crasher.", 1, GetName(playerid));	
			SendAdmins(COLOR_PRINC1, "(cheats) %s absolut crasher.", 1, GetName(playerid));		
        	//Kick(playerid);
        }	
        crasher[playerid] = 1;
    } 
   	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER && timerfarmer[playerid] >= 1) {
   		SetVehicleToRespawn(LastVeh[playerid]);
   		timerfarmer[playerid] = -1;
   		PlayerTextDrawHide(playerid, textdrawfarmer[playerid]);
   	}

   	if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
   	{
		if(GetPVarInt(playerid, "start_rainbow") >= 1) 
		{
			DeletePVar(playerid, "start_rainbow");
			stop timerrainbow[playerid];
			rainbowspeed[playerid] = 0;

			SCM(playerid, COLOR_PRINC, "Rainbow dezactivat.");   
		}			
   	}
   	if(newstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_DRIVER) {
   		if(timerspeedometer[playerid] != Timer:-1) stop timerspeedometer[playerid];
   		timerspeedometer[playerid] = repeat FunctionSpeedometer(playerid);
   	}

    switch(newstate) {
        case PLAYER_STATE_DRIVER: {
        	if(LastVeh[playerid] != GetPlayerVehicleID(playerid) && ac_trolltimer == 1) SendAdmins(COLOR_RED, "(AntiCheat):{ffffff}%s (%d, level %d) may be using troll hack - vehicle %d.", 1, GetName(playerid), playerid, PlayerInfo[playerid][pLevel], LastVeh[playerid]);	
        	LastVeh[playerid] = GetPlayerVehicleID(playerid);		       	
            for(new i = 1; i <= serverClanVehicles; i++) {
                if(clanVehiclesVariables[i][clanVehicleClan] > 0 && GetPlayerVehicleID(playerid) == clanVehiclesVariables[i][clanVehicleInGame]) {
                    if(PlayerInfo[playerid][pClan] != clanVehiclesVariables[i][clanVehicleClan])
                        return SCMf(playerid, -1, "Nu poti conduce acest vehicul deoarece nu faci parte din clanul %s.", clanVariables[clanVehiclesVariables[i][clanVehicleClan]][clanName]), RemovePlayerFromVehicleEx(playerid);
                    if(PlayerInfo[playerid][pClan] == clanVehiclesVariables[i][clanVehicleClan] && PlayerInfo[playerid][pCRank] < clanVehiclesVariables[i][clanVehicleRank])
                        return SCMf(playerid, -1, "Nu poti conduce acest vehicul deoarece nu faci ai rankul %d", clanVehiclesVariables[i][clanVehicleRank]), RemovePlayerFromVehicleEx(playerid);
                    SCMf(playerid, -1, "Poti conduce acest vehicul deoarece faci parte din clanul %s si ai rankul %d.", clanVariables[clanVehiclesVariables[i][clanVehicleClan]][clanName], PlayerInfo[playerid][pCRank]);
                }
            }
            SetPlayerArmedWeapon(playerid, 0);
            StopAudioStreamForPlayer(playerid);
            switch(vehRadio[vehicleid]) {
                case 1: PlayAudioStreamForPlayer(playerid, "http://redtimes.eu/radiored.mp3");
                case 2: PlayAudioStreamForPlayer(playerid, "http://live.radiobandit.ro:8000");         
                case 3: PlayAudioStreamForPlayer(playerid, "http://radiotaraf.com/live.m3u");          
                case 4: PlayAudioStreamForPlayer(playerid, "http://live.radiohot.ro:8000/");           
                case 5: PlayAudioStreamForPlayer(playerid, "http://dance.radiogangsta.ro:8800");           
                case 6: PlayAudioStreamForPlayer(playerid, "http://live.radiogangsta.ro:8800");        
                case 7: PlayAudioStreamForPlayer(playerid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");          
                case 8: PlayAudioStreamForPlayer(playerid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");           
                case 9: PlayAudioStreamForPlayer(playerid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");        
                case 10: PlayAudioStreamForPlayer(playerid, "http://www.listenlive.eu/bbcradio1.m3u");          
                case 11: PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");           
                case 12: PlayAudioStreamForPlayer(playerid, "http://www.radio-hit.ro/asculta.m3u");         
                case 13: PlayAudioStreamForPlayer(playerid, "http://live.radioclubmix.ro:9999");        
                case 14: PlayAudioStreamForPlayer(playerid, "http://80.86.106.136/listen.pls");         
                case 15: PlayAudioStreamForPlayer(playerid, "http://www.radiozu.ro/live.m3u");          
                case 16: PlayAudioStreamForPlayer(playerid, "http://livemp3.radiopopular.ro:7777");         
                case 17: PlayAudioStreamForPlayer(playerid, "http://radio.trap.fm/listen128.pls");          
                case 18: PlayAudioStreamForPlayer(playerid, "http://radiotequila.ro/hiphop.m3u");           
                case 19: PlayAudioStreamForPlayer(playerid, customRadio[vehicleid]);        
            }
            Listening[playerid] = vehRadio[vehicleid]-1;
            new newcar = GetPlayerVehicleID(playerid);
            GetVehiclePos(newcar, old_veh_pos[newcar][0], old_veh_pos[newcar][1], old_veh_pos[newcar][2]);
            if(!IsABoat(newcar)) PlayerEnterTime[playerid] = GetTickCount();
            TelePos[playerid][0] = 0.0; TelePos[playerid][1] = 0.0;
            new engine,lights,alarm,doors,bonnet,boot,objective;
            if(vehEngine[newcar] == 0) {
                GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);        
            } else if(vehEngine[newcar] == 1) {
                GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(newcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);         
            }
            if(Gas[newcar] == 0) {
                TogglePlayerControllable(playerid, 0);
                NoFuel[playerid] = 1;
            }
           	if(PlayerInfo[playerid][pCarLic] < 1) {
                if(IsABike(newcar) || IsAPlane(newcar) || GetVehicleModel(newcar) == 462 || IsABoat(newcar)) { }
                else {
                    if(TakingLesson[playerid] == 1) { }
                    else {
                        SCM(playerid, -1, "You don't have a driving license.");
                        RemovePlayerFromVehicle(playerid); TogglePlayerControllable(playerid, 1);
                        defer UnFreezeStation(playerid);
                    }
                }  
            }            
            if(IsABoat(newcar)) {
                if(PlayerInfo[playerid][pBoatLic] < 1) {
                    if(TakingLesson[playerid] == 2) { }
                    else {
                        SCM(playerid, -1, "You don't have a boat license.");
                        RemovePlayerFromVehicle(playerid); TogglePlayerControllable(playerid, 1);
                    }
                }
            } else if(IsAPlane(newcar)) {
                if(PlayerInfo[playerid][pFlyLic] < 1) {
                    if(TakingLesson[playerid] == 2) { }
                    else {
                        SCM(playerid, -1, "You don't have a flying license.");
                        RemovePlayerFromVehicle(playerid); TogglePlayerControllable(playerid, 1);
                    }
                }
            } 
            for(new x = 0; x < sizeof(VehicleInfo); x++) {
                if(VehicleInfo[x][vehCarID] == newcar) {
                    if(VehicleInfo[x][vehGroup] != 0 && VehicleInfo[x][vehGroup] != 30 && VehicleInfo[x][vehGroup] != 8 && VehicleInfo[x][vehGroup] != 2 && VehicleInfo[x][vehGroup] != 3 && VehicleInfo[x][vehGroup] != 1) {
                        if(PlayerInfo[playerid][pMember] == VehicleInfo[x][vehGroup] && OnDuty[playerid] == 1) { }
                        else {
                            if(AdminDuty[playerid] >= 1) {
                                SCMf(playerid, COLOR_PRINC, ">> {ffffff}This %s (model %d, ID %d) is locked to group %s (%d).",aVehicleNames[GetVehicleModel(VehicleInfo[x][vehCarID]) - 400],GetVehicleModel(VehicleInfo[x][vehCarID]),VehicleInfo[x][vehCarID],DynamicFactions[VehicleInfo[x][vehGroup]][fName],VehicleInfo[x][vehGroup]);
                            } else {
                                RemovePlayerFromVehicle(playerid);
                                SCMf(playerid, COLOR_PRINC, ">> {ffffff}Nu faci parte din factiunea %s sau nu esti on duty.",DynamicFactions[VehicleInfo[x][vehGroup]][fName]);
                            }
                            return true;
                        }
                    }
                    if(VehicleInfo[x][vehRank] != 1) {
                        if(PlayerInfo[playerid][pRank] < VehicleInfo[x][vehRank]) {
                            if(PlayerInfo[playerid][pRank] < VehicleInfo[x][vehRank] && OnDuty[playerid] == 1) {
                                if(AdminDuty[playerid] >= 1) {
                                    SCMf(playerid, -1,"This %s (model %d, ID %d) is locked to group %s (%d).",aVehicleNames[GetVehicleModel(VehicleInfo[x][vehCarID]) - 400],GetVehicleModel(VehicleInfo[x][vehCarID]),VehicleInfo[x][vehCarID],DynamicFactions[VehicleInfo[x][vehGroup]][fName],VehicleInfo[x][vehGroup]);
                                } else {
                                    RemovePlayerFromVehicle(playerid);
                                    SCMf(playerid, -1,"You need rank %d to drive this car.",VehicleInfo[x][vehRank]);
                                }
                                return true;
                            }
                            return true;
                        }
                    }
                }  
            }
            if(IsABike(newcar)) {
                TogglePlayerControllable(playerid, 1); vehEngine[vehicleid] = 1;
                GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
                SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);          
            }
            if(IsACopCar(newcar)) {
                if(IsACop(playerid))  {
                    if(OnDuty[playerid] != 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
                }
                else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Los Santos Police Department."); }          
            }
            if(IsAFbiCar(newcar)) {
                if(IsACop(playerid))  {
                    if(OnDuty[playerid] != 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
                }
                else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Federal Bureau of Investigations."); }
            }
            if(IsALVPDCar(newcar)) {
                if(IsACop(playerid))  {
                    if(OnDuty[playerid] != 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
                }
                else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Las Venturas Police Department."); }
            }            
            if(IsANgCar(newcar)) {
                if(IsACop(playerid))  {
                    if(OnDuty[playerid] != 1) { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "You are not on duty."); }
                }
                else { RemovePlayerFromVehicle(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group National Guard."); }
            }            
            if(IsAnOwnableCar(newcar)) {
                foreach(new i : Player) {
                    for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
                        if(PlayerInfo[i][pCarID][v] == newcar) {
                            if(PlayerInfo[i][pCarIns][v] == 0) {
                                if(i == playerid) {
                                    format(string, sizeof(string), "Do you want to pay $%s to repair your car?", FormatNumber(PlayerInfo[i][pCarInsPrice][v]));
                                    ShowPlayerDialogEx(playerid, DIALOG_CARDAMAGE, DIALOG_STYLE_MSGBOX, "Pay for insurance!", string, "Pay", "Cancel");
                                } else {
                                    RemovePlayerFromVehicle(playerid);
                                    SendClientMessage(playerid, COLOR_WHITE, "Can't drive this car until the owner pay the insurance.");
                                }
                            }
                        }
                    }
                }
            }
            if(IsAnOwnableCar(newcar)) {
                foreach(new i : Player) {
                    for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
                        if(PlayerInfo[i][pCarID][v] == newcar) {
                        	if(PlayerInfo[i][pCarVIP][v] < 1) 
                        		SCMf(playerid, -1,"This %s (ID %d) is owned by %s | Age: %d days | Odometer: %.0f km | Insurance: $%d (%d points) | Colors: %d, %d",aVehicleNames[PlayerInfo[i][pCarModel][v] - 400],PlayerInfo[i][pCar][v],PlayerInfo[i][pNormalName],GetDaysFromTimestamp(PlayerInfo[i][pCarBuyTime][v]),PlayerInfo[i][pCarKM][v],PlayerInfo[i][pCarInsPrice][v],PlayerInfo[i][pCarIns][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v]);
                       		if(PlayerInfo[i][pCarVIP][v] >= 1) 
                       			SCMf(playerid, -1,"This %s (ID %d) is owned by %s | Age: %d days | Odometer: %.0f km | Insurance: $%d (%d points) | Colors: %d, %d [VIP]",aVehicleNames[PlayerInfo[i][pCarModel][v] - 400],PlayerInfo[i][pCar][v],PlayerInfo[i][pNormalName],GetDaysFromTimestamp(PlayerInfo[i][pCarBuyTime][v]),PlayerInfo[i][pCarKM][v],PlayerInfo[i][pCarInsPrice][v],PlayerInfo[i][pCarIns][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v]);                      			
                        	
                        	if(PlayerInfo[i][pCarStage][v] >= 1 && PlayerInfo[i][pCarRainbow][v] < 1)
                        	{
                        		SCMf(playerid, COLOR_NEWBIE, "[stage %d/3]", PlayerInfo[i][pCarStage][v]);
                        	}
                        	if(PlayerInfo[i][pCarStage][v] >= 1 && PlayerInfo[i][pCarRainbow][v] >= 1)
                        	{
                        		SCMf(playerid, COLOR_NEWBIE, "[stage %d/3] [rainbow]", PlayerInfo[i][pCarStage][v]);
                        	}  
                        	if(PlayerInfo[i][pCarStage][v] < 1 && PlayerInfo[i][pCarRainbow][v] >= 1)
                        	{
                        		SCM(playerid, COLOR_NEWBIE, "[rainbow]");
                        	}                          	                      			
                        }
                    }
                }
            }                   
        }
        case PLAYER_STATE_ONFOOT: {
            PlayerTextDrawHide(playerid, Fuell[playerid]);
            PlayerTextDrawHide(playerid, Speedd[playerid]);
            PlayerTextDrawHide(playerid, Odom[playerid]);
            PlayerTextDrawHide(playerid, carlocked[playerid]);

            if(pizzaj[playerid] == 1) failpizza[playerid] = 120;
            if(CP[playerid] == 340 || CP[playerid] == 341 || CP[playerid] == 342 || CP[playerid] == 343 || CP[playerid] == 344 || CP[playerid] == 345 || CP[playerid] == 346 || CP[playerid] == 347) DisablePlayerCheckpoint(playerid), CP[playerid] = 0;  
            if(CP[playerid] == 34) { CP[playerid] = 0; DisablePlayerCheckpoint(playerid); }
            if(TaxiTimer[playerid] > 0 && TaxiDriver[playerid] != -1) {
            	new taximetrist = TaxiDriver[playerid];
                PlayerTextDrawHide(playerid, RentCarText[playerid]); 
                PlayerTextDrawHide(playerid, RentCarText[taximetrist]);
                sendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "* %s gets off the cab and pays $%s to %s.", GetName(playerid), FormatNumber(TaxiMoneySpent[playerid]), GetName(TaxiDriver[playerid]));          
                TaxiTimer[playerid] = 0; TaxiMoneySpent[playerid] = 0; TaxiDriver[playerid] = -1;
                save_raport(taximetrist, 1);
	            gString[0] = (EOS);
	            mysql_format(SQL, gString, 256, "UPDATE `users` SET `Raport1` = `Raport1` + '1' WHERE `name` = '%s'", PlayerInfo[taximetrist][pNormalName]);
	            mysql_tquery(SQL, gString);
            }
            if(TaxiFare[playerid] > 0) {
                TaxiFare[playerid] = 0; TaxiMoneyEarned[playerid] = 0; PlayerTextDrawHide(playerid, RentCarText[playerid]);
                foreach(new x : Player) if(TaxiDriver[x] == playerid) { TaxiDriver[x] = -1; TaxiMoneySpent[x] = 0; TaxiTimer[x] = 0; PlayerTextDrawHide(x, RentCarText[x]); }
            }
            TelePos[playerid][0] = 0.0; TelePos[playerid][1] = 0.0;
        }
        case PLAYER_STATE_WASTED: {
            StopAudioStreamForPlayer(playerid);
            if(PlayerInfo[playerid][pWantedLevel] >= 1) {
                new copkill = 0, price = PlayerInfo[playerid][pWantedLevel] * 1000;
                if(!IsACop(playerid)) {
                    foreach(new i : Cops) {
                        if(IsACop(i) && CrimInRange(50.0, playerid, i) && OnDuty[i] == 1) {
                            SCMf(i, COLOR_DBLUE, "Ai primit $%d bonus pentru prinderea suspectului %s.", price, GetName(playerid));
                            GameTextForPlayer(i, "Running Suspect bonus!", 5000, 1);
                            GivePlayerCash(i, price);
                            ConsumingMoney[i] = 1; DynamicFactions[PlayerInfo[i][pMember]][fBank] += price; copkill = 1;
                            gString[0] = (EOS);
                            mysql_format(SQL, gString, 256, "UPDATE `factions` SET `Bank` = '%d' WHERE `ID` = '%d' LIMIT 1", DynamicFactions[PlayerInfo[i][pMember]][fBank], PlayerInfo[i][pMember]);
                            mysql_tquery(SQL, gString);   
                            mysql_format(SQL, gString, 256, "UPDATE `users` SET `Raport1` = `Raport1` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[i][pSQLID]);
                            mysql_tquery(SQL, gString);
                            save_raport(i, 1); 
                        }
                    }
                    if(copkill == 1) {
                        PlayerInfo[playerid][pJailTime] = (PlayerInfo[playerid][pWantedLevel])*(300);
                        SCMf(playerid, COLOR_LIGHTRED, "Because you got killed, you lost $%s and you will be taken to jail. You are no longer a criminal.", FormatNumber(price));
                        PlayerInfo[playerid][pJailed] = 1; PlayerInfo[playerid][pWantedLevel] = 0; PlayerInfo[playerid][pWantedDeaths] ++; WantedPoints[playerid] = 0;
                        GivePlayerCash(playerid, -price);
                        SendFamilyMessage(1, COLOR_LIGHTBLUE, "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.", PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pJailTime]);
                        SendFamilyMessage(2, COLOR_LIGHTBLUE, "Dispatch: %s has been killed by No One and will be in jail for %d seconds, over.", PlayerInfo[playerid][pNormalName],PlayerInfo[playerid][pJailTime]);
                        pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]); pUpdateInt(playerid, "Jailed", PlayerInfo[playerid][pJailed]); pUpdateInt(playerid, "JailTime",PlayerInfo[playerid][pJailTime]);
                        ClearCrime(playerid); TogglePlayerControllable(playerid, 0);
                        defer UnFreezeStation(playerid);                                               
                    }
                }

            }
        }
        case PLAYER_STATE_PASSENGER: {
            new randomtime = 10 + random(7), gun, tmp;
            if(vehRadio[vehicleid] > 0) {
                StopAudioStreamForPlayer(playerid);
                switch(vehRadio[vehicleid]) {
                    case 1: PlayAudioStreamForPlayer(playerid, "http://redtimes.eu/radiored.mp3");
                    case 2: PlayAudioStreamForPlayer(playerid, "http://live.radiobandit.ro:8000"); 
                    case 3: PlayAudioStreamForPlayer(playerid, "http://radiotaraf.com/live.m3u");  
                    case 4: PlayAudioStreamForPlayer(playerid, "http://live.radiohot.ro:8000/");  
                    case 5: PlayAudioStreamForPlayer(playerid, "http://dance.radiogangsta.ro:8800"); 
                    case 6: PlayAudioStreamForPlayer(playerid, "http://live.radiogangsta.ro:8800"); 
                    case 7: PlayAudioStreamForPlayer(playerid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");  
                    case 8: PlayAudioStreamForPlayer(playerid, "http://7639.live.streamtheworld.com:80/977_MIX_SC"); 
                    case 9: PlayAudioStreamForPlayer(playerid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");  
                    case 10: PlayAudioStreamForPlayer(playerid, "http://www.listenlive.eu/bbcradio1.m3u");    
                    case 11: PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");
                    case 12: PlayAudioStreamForPlayer(playerid, "http://www.radio-hit.ro/asculta.m3u");
                    case 13: PlayAudioStreamForPlayer(playerid, "http://live.radioclubmix.ro:9999"); 
                    case 14: PlayAudioStreamForPlayer(playerid, "http://80.86.106.136/listen.pls");  
                    case 15: PlayAudioStreamForPlayer(playerid, "http://www.radiozu.ro/live.m3u");    
                    case 16: PlayAudioStreamForPlayer(playerid, "http://livemp3.radiopopular.ro:7777");
                    case 17: PlayAudioStreamForPlayer(playerid, "http://radio.trap.fm/listen128.pls");  
                    case 18: PlayAudioStreamForPlayer(playerid, "http://radiotequila.ro/hiphop.m3u");
                    case 19: PlayAudioStreamForPlayer(playerid, customRadio[vehicleid]);
                }
                Listening[playerid] = vehRadio[vehicleid]-1;
            }
            if(IsAnTaxi(vehicleid) && PlayerInfo[playerid][pMember] != 13) {
                foreach(new i : Player) {
                    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0 && PlayerInfo[i][pMember] == 13) {
                        if(TaxiFare[i] < 1) return true;
                        TaxiTimer[playerid] = randomtime; TaxiMoneyEarned[i] += TaxiFare[i]; TaxiDriver[playerid] = i; TaxiMoneySpent[playerid] += TaxiFare[i];
                        GivePlayerCash(i, TaxiFare[i]); GivePlayerCash(playerid, -TaxiFare[i]);
                        gString[0] = (EOS);
                        format(gString, 64, "money spent so far: ~g~$%d", TaxiMoneySpent[playerid]);
                        PlayerTextDrawSetString(playerid, RentCarText[playerid], gString);
                        PlayerTextDrawShow(playerid, RentCarText[playerid]);
                        format(gString, 64, "money earned: ~g~$%d", TaxiMoneyEarned[i]);
                        PlayerTextDrawSetString(i, RentCarText[i], gString);
                        PlayerTextDrawShow(i, RentCarText[i]);
                    }
                }
            }
            if(IsAnUber(vehicleid) && PlayerInfo[playerid][pMember] != 16) {
                foreach(new i : Player) {
                    if(GetPlayerVehicleID(i) == vehicleid && GetPlayerVehicleSeat(i) == 0 && PlayerInfo[i][pMember] == 16) {
                        if(TaxiFare[i] < 1) return true;
                        TaxiTimer[playerid] = randomtime; TaxiMoneyEarned[i] += TaxiFare[i]; TaxiDriver[playerid] = i; TaxiMoneySpent[playerid] += TaxiFare[i];
                        GivePlayerCash(i, TaxiFare[i]); GivePlayerCash(playerid, -TaxiFare[i]);
                        gString[0] = (EOS);
                        format(gString, 64, "money spent so far: ~g~$%d", TaxiMoneySpent[playerid]);
                        PlayerTextDrawSetString(playerid, RentCarText[playerid], gString);
                        PlayerTextDrawShow(playerid, RentCarText[playerid]);
                        format(gString, 64, "money earned: ~g~$%d", TaxiMoneyEarned[i]);
                        PlayerTextDrawSetString(i, RentCarText[i], gString);
                        PlayerTextDrawShow(i, RentCarText[i]);
                    }
                }
            }             
            GetPlayerWeaponData(playerid, 5, gun, tmp);
            #pragma unused tmp
            if(gun) SetPlayerArmedWeapon(playerid, gun);
            else SetPlayerArmedWeapon(playerid, 0);
            return true;
        }
    }
    return 1; 
}
function CarTow(carid) {
	foreach(new i : Player) if(IsPlayerInVehicle(i, carid)) return false;
	return 1; 
}
function LocateCar(car,playerid) {
    new Float:x,Float:y,Float:z,Float:xx,Float:yy,Float:zz,Float: distance;
	GetVehiclePos(car, x, y, z);
	GetPlayerPos(playerid, xx, yy, zz);
	SetPlayerCheckpoint(playerid, x, y, z, 4);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOCATE;
	distance = GetDistanceBetweenPoints(xx,yy,zz,x,y,z);
	SCMf(playerid, COLOR_PRINC, "Follow the checkpoint to get your car. Distance: %.0fm.", distance);
	CP[playerid] = 43;
	return 1; 
}
public OnPlayerExitVehicle(playerid, vehicleid) {
    StopAudioStreamForPlayer(playerid);
	if(IsAnOwnableCar(vehicleid)) {
		for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
			if(PlayerInfo[playerid][pCarID][v] == vehicleid) SetVehicleParamsForPlayer(vehicleid,playerid,0,0);
		}
	}
    if(TakingLesson[playerid] == 1) {
        TakingLesson[playerid] = 0;
	    DisablePlayerRaceCheckpoint(playerid);
	    StopBlinkNeons(examcar[playerid]);
        DestroyVehicle(examcar[playerid]);
		DisableRemoteVehicleCollisions(playerid, 0);
		examcar[playerid] = -1;
		SendClientMessage(playerid, COLOR_WHITE, "Ai picat examenul pentru ca ai coborat din masina.");
    }
    if(CP[playerid] == 34) {
	    CP[playerid] = 0;
		SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));
		SetVehicleToRespawn(vehicleid);
		RemovePlayerFromVehicle(playerid);
	    DisablePlayerCheckpoint(playerid);
	}

	return 1; 
}
public OnPlayerRequestSpawn(playerid) {
	if(gPlayerLogged[playerid] < 1) return SendClientMessage(playerid, COLOR_SKEMA2, "You need to log in first.");
    return 1; 
}
public OnPlayerRequestClass(playerid, classid) {
	//if(gPlayerLogged[playerid] == 1) SpawnPlayer(playerid);
	//SendClientMessage(playerid, -1, "Debug 4");
	if (RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1) {
 		SetPlayerInterior(playerid,0);
		SetPlayerPosEx(playerid, 1742.9814,-1863.0938,16.2048);
		//InterpolateCameraPos(playerid, 917.423278, -1767.536865, 26.339736, 914.833496, -1430.521240, 24.417026, 10000);
		//InterpolateCameraLookAt(playerid, 917.385925, -1762.540649, 26.529075, 914.819824, -1425.521484, 24.369432, 10000);
		InterpolateCameraPos(playerid, 1012.425048, -1399.460693, 29.498086, 1117.878906, -1399.585571, 24.798904, 23000);
		InterpolateCameraLookAt(playerid, 1017.416992, -1399.502929, 29.217304, 1122.878295, -1399.627807, 24.736726, 23000);
	
        TogglePlayerControllable(playerid, 0);
		if (gPlayerAccount[playerid] != 0) {
			PlayAudioStreamForPlayer(playerid, "http://redtimes.eu/oviishafu.mp3"); 
			//PlayAudioStreamForPlayer(playerid, "http://redtimes.eu/xmas.mp3");
            SendClientMessage(playerid, COLOR_PRINC, "SERVER: {FFFFFF}Welcome to RedTimes.");
			SendClientMessage(playerid, COLOR_PRINC, "SERVER: {FFFFFF}You already have a registered account, please enter your password into the dialog box.");
			ShowPlayerDialogEx(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the RedTimes RPG Server.\n\nPlease enter your password below!","Login","Cancel");
		}
		else {
			for(new i = 1; i <= serverClans; i++) {
				if(strfind(GetName(playerid), clanVariables[i][clanTag], true) != -1) {
					SCMf(playerid, COLOR_PRINC, "Nu poti folosi acest nume deoarece contine nu tag de clan: %s.", clanVariables[i][clanTag]);
					defer KickEx(playerid);
					break;
				}
			}
			if(strlen(GetName(playerid)) > 17 && PlayerInfo[playerid][pTut] < 1) {
				SCM(playerid, -1, "Numele tau trebuie sa contina maxim 18 caractere.");
				defer KickEx(playerid);
				return true;
			}
			gPlayerAccount[playerid] = 0; WTChannel[playerid] = 0;
			PlayAudioStreamForPlayer(playerid, "http://redtimes.eu/oviishafu.mp3"); 
			SendClientMessage(playerid, COLOR_PRINC, "SERVER: {FFFFFF}Welcome to RedTimes RPG.");
			SendClientMessage(playerid, COLOR_PRINC, "SERVER: {FFFFFF}You aren't registered yet. Please enter your desired password in the dialog box to register.");
			ShowPlayerDialogEx(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"SERVER: Registration","Welcome to the RedTimes RPG Server.\n\nPlease enter your desired password below!","Register","Cancel");

		}
		login[playerid] = 60;
	}
	else if(IsPlayerNPC(playerid)) return true;
	return 1; 
}
function SetPlayerCriminal(playerid,declare,reason[]) {
	PlayerInfo[playerid][pCrimes] ++; pUpdateInt(playerid, "Crimes", PlayerInfo[playerid][pCrimes]);
	new points = WantedPoints[playerid], ini, string[124], yesno, y,m,d,h,mi, turner[25];
	ini = PlayerInfo[playerid][pWantedLevel];
	if(declare == -1) {
		format(turner, sizeof turner, "Unknown");
		strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
		pUpdateInt(playerid, "Victim", PlayerInfo[playerid][pVictim]);
	} else {
		if(IsPlayerConnected(declare)) {
			GetPlayerName(declare, turner, sizeof turner);
			strmid(PlayerInfo[playerid][pVictim], turner, 0, strlen(turner), 255);
			pUpdateInt(playerid, "Victim", PlayerInfo[playerid][pVictim]);
		}
	}
	getdate(y,m,d);
	gettime(h,mi);
	if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0) {
		format(string, sizeof string, "%s", reason);
		strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
		pUpdateInt(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
	}
	else if(strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0) {
		format(string, sizeof string, "%s", reason);
		strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
		pUpdateInt(playerid, "Crime2", PlayerInfo[playerid][pCrime2]);
	}
	else if(strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) {
		format(string, sizeof string, "%s", reason);
		strmid(PlayerInfo[playerid], string, 0, strlen(string), 255);
		pUpdateInt(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);
	}
	else if(strcmp(PlayerInfo[playerid][pCrime1], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[playerid][pCrime3], "Fara Crima", true) == 0) { }
	else {
		format(string, sizeof string, "%s", reason);
		strmid(PlayerInfo[playerid][pCrime1], string, 0, strlen(string), 255);
		pUpdateInt(playerid, "Crime1", PlayerInfo[playerid][pCrime1]);
		format(string, sizeof string, "Fara Crima");
		strmid(PlayerInfo[playerid][pCrime2], string, 0, strlen(string), 255);
		strmid(PlayerInfo[playerid][pCrime3], string, 0, strlen(string), 255);	
		pUpdateInt(playerid, "Crime2", PlayerInfo[playerid][pCrime2]); pUpdateInt(playerid, "Crime3", PlayerInfo[playerid][pCrime3]);			
	}	
	if(points > 0) {
		if(points >= 1 && points <= 3 && PlayerInfo[playerid][pWantedLevel] != 1) {
			PlayerInfo[playerid][pWantedLevel] = 1; yesno = 1;
		} else if(points >= 4 && points <= 5 && PlayerInfo[playerid][pWantedLevel] != 2) {
			PlayerInfo[playerid][pWantedLevel] = 2; yesno = 1;
		} else if(points >= 6 && points <= 7 && PlayerInfo[playerid][pWantedLevel] != 3) {
			PlayerInfo[playerid][pWantedLevel] = 3; yesno = 1;
		} else if(points >= 8 && points <= 9 && PlayerInfo[playerid][pWantedLevel] != 4) {
			PlayerInfo[playerid][pWantedLevel] = 4; yesno = 1;
		} else if(points >= 10 && points <= 11 && PlayerInfo[playerid][pWantedLevel] != 5) {
			PlayerInfo[playerid][pWantedLevel] = 5; yesno = 1;
		} else if(points >= 12 && points <= 13 && PlayerInfo[playerid][pWantedLevel] != 6) {
			PlayerInfo[playerid][pWantedLevel] = 6; yesno = 1;
		}
		pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
		wantedlost[playerid] = 900;
		if(yesno) {
			ini = PlayerInfo[playerid][pWantedLevel] - ini;
			SendFamilyMessage(1, COLOR_DBLUE, "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.", GetName(playerid), playerid, reason, turner, ini, PlayerInfo[playerid][pWantedLevel]);
			SendFamilyMessage(2, COLOR_DBLUE, "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.", GetName(playerid), playerid, reason, turner, ini, PlayerInfo[playerid][pWantedLevel]);
			SCMf(playerid, COLOR_SKEMA2, "You committed a crime: %s, reported by: %s. W: +%d. New wanted level: %d.", reason, turner, ini, PlayerInfo[playerid][pWantedLevel]);
		}
	}
	return 1; 
}
task TenSecondsTimer[10000]() {
	foreach(new i : Player) {
		if(IsPlayerConnected(i) && gPlayerLogged[i] != 0) {
			switch(PlayerInfo[i][pWantedLevel]) {
				case 0: {
					SetPlayerWantedLevel(i, 0);
					PlayerTextDrawHide(i, WantedText[i]);
				}
				case 1: SetPlayerWantedLevel(i,1);
				case 2:	SetPlayerWantedLevel(i,2);
				case 3: SetPlayerWantedLevel(i,3);
				case 4: SetPlayerWantedLevel(i,4);
				case 5: SetPlayerWantedLevel(i,5);
				case 6: SetPlayerWantedLevel(i,6);
				default: {
					if(PlayerInfo[i][pWantedLevel] > 6) PlayerInfo[i][pWantedLevel] = 6;			
				}
			}
			if(PlayerInfo[i][pWantedLevel] >= 1) {
				PlayerTextDrawShow(i, WantedText[i]);
				format(gString, 64, "WANTED SCADE IN: ~r~%d MINUTE",wantedlost[i]/60+1);
				PlayerTextDrawSetString(i, WantedText[i], gString);
			}
			if(IsACop(i)) {
				foreach(new j : Player) {
					if(PlayerInfo[j][pWantedLevel] >= 1) SetPlayerMarkerForPlayer(i, j, (0xFF2B5D72 & 0xFFFFFF00));
				}
			}
			if(delayfactions[i] > 0) delayfactions[i] -= 10;
			new Float:vehx, Float:vehy, Float:vehz, cars;
	        for(new vh = 1; vh < MAX_VEHICLES; vh++) {
	        	if(GetVehicleModel(vh) <= 0) continue;
	            GetVehiclePos(vh, vehx, vehy, vehz);
	            if(GetDistanceBetweenPoints(PlayerPosii[i][0], PlayerPosii[i][1], PlayerPosii[i][2], vehx, vehy, vehz) < 5) cars++;
	        }
	        if(cars >= 7 && ac_allowed == 1 && PlayerInfo[i][pLevel] < 3) SendAdmins(COLOR_SKEMA2, "%s (%d / level %d) has %d cars in range (max 7 allowed - troll hack). #6", 1, GetName(i), i, PlayerInfo[i][pLevel], cars);	
			ac_kills[i] = 0;	
		}
	}
	checkpanel();
	return 1; 
}	
timer DeleteDeathMessage[30000](playerid) {
	if(InWar[PlayerInfo[playerid][pMember]] != 1) {
		for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
		stop deathdeletetime[playerid];
	}
	else {
		stop deathdeletetime[playerid];
	}
	return 1; 
}	
task SetPlayerUnjail[1000]() {

    if(rlstarted){
        if(rltime == 0){
            rlstarted = 0;
            rltime = 15;
            foreach(new ix:InRoulette){
                if(inruleta[ix]){
                    new coef;
                    switch(ruletacolors[4]){
                        case RL_RED: SCM(ix, -1, "The roulette landed on red!"), coef = 2;
                        case RL_GREEN: SCM(ix, -1, "The roulette landed on green!"), coef = 14;
                        case RL_BLACK: SCM(ix, -1, "The roulette landed on black!"), coef = 2;
                    }
                    if(rlbet[ix][ruletacolors[4]] != 0){
                        new money = rlbet[ix][ruletacolors[4]] * coef; //daca pica pe verde * 14, celelalte *2
                        SCMf(ix, COLOR_GREEN, "(+) You've won $%s at the roulette!", FormatNumber(money)); // in caz ca castiga la verde, sa ii arate fix cat a castigat
                        GivePlayerCash(ix, money); pUpdateInt(ix, "Money", GetPlayerCash(ix));
                    }
                    else {
                        if(rlbet[ix][0] + rlbet[ix][1] + rlbet[ix][2] != 0) SCMf(ix, COLOR_SKEMA, "(-) You've lost $%s at the roulette. Try again next time :(", FormatNumber(rlbet[ix][0] + rlbet[ix][1] + rlbet[ix][2]));
                    }
                    rlbet[ix][0] = 0; rlbet[ix][1] = 0; rlbet[ix][2] = 0;
                }
            }
        }
        for(new ya; ya < 9; ya++){
            switch(ruletacolors[ya]){
                case RL_RED: TextDrawBoxColor(Ruleta_TD[2 + ya], 0xFF0000FF);
                case RL_GREEN: TextDrawBoxColor(Ruleta_TD[2 + ya], 0x00FF00FF);
                case RL_BLACK: TextDrawBoxColor(Ruleta_TD[2 + ya], 0x000000FF);
            }
            foreach(new i: InRoulette) if(inruleta[i]) TextDrawShowForPlayer(i, Ruleta_TD[2 + ya]);
        }
        new zero = ruletacolors[0];
        for(new a; a < 37; a++){
            ruletacolors[a] = ruletacolors[a + 1];
        }
        ruletacolors[37] = zero;
        rltime -= 1;
       
    }
    else{
        rltime -= 1;
        gString[0] = EOS;
        format(gString, 64, "Rolls in ~y~%d~w~ seconds", rltime);
        TextDrawSetString(Ruleta_TD[12], gString);
        if(rltime == 0){
            TextDrawSetString(Ruleta_TD[12], "Rolling...");
            rlstarted = 1;
            rltime = 10 + random(10);
        }
    }

	new attackers, defenders, count = 0, warid, atscore, defscore, winner, id, id2, hour, minute, second; gettime(hour, minute, second);
	for(new i = 1; i < sizeof Turfs; i++) {
		attackers = WarInfo[i][wAttacker]; defenders = WarInfo[i][wFaction];
		if(WarInfo[i][wTime] > 0) {
			WarInfo[i][wTime] --;
			foreach(new x : Gangsters) { 
				if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
					playerTextDrawSetString(x, TimeLeftWar2[x], "~w~Turf id: %d~n~%s %d - %d %s~n~War Time: %s~n~Kills: %d Deaths: %d", i, NumeFactiune(attackers), WarScoreF[attackers][i], WarScoreF[defenders][i], NumeFactiune(defenders), CalculeazaTimp2(WarInfo[i][wTime]), ucideri[x][i], decese[x][i]);
					PlayerTextDrawShow(x, TimeLeftWar2[x]);
				}	 
			}
			if(WarInfo[i][wTime] == 1) {
				atscore = WarScoreF[attackers][i]; defscore = WarScoreF[defenders][i];
				foreach(new x : Gangsters) { if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) GangZoneStopFlashForPlayer(x, Turfs[i]); }
				if(atscore > defscore) winner = 1;
				else winner = 2;
				if(atscore == defscore || atscore < defscore) winner = 2;
				switch(winner) {
				    case 1: TurfInfo[i][zOwned] = WarInfo[i][wAttacker];
				    case 2: TurfInfo[i][zOwned] = WarInfo[i][wFaction];
				}
				foreach(new x : Player) {
				    if(TurfsDisp[x] == 1) {
						if(TurfInfo[i][zOwned] == 5) GangZoneShowForPlayerEx(x, Turfs[i], 0x40863CAA); //Grove Street
						if(TurfInfo[i][zOwned] == 6) GangZoneShowForPlayerEx(x, Turfs[i], 0xBD1CDEC8); //Ballas
				    }
				}
				format(gString, sizeof gString, "INSERT INTO `wars` (`Attacker`, `Defender`, `Atscore`, `Defscore`, `Result`) VALUES ('%d', '%d', '%d', '%d', '%d')", attackers, defenders, atscore, defscore, winner);
				new Cache: warcache = mysql_query(SQL, gString);
				warid = cache_insert_id(); cache_delete(warcache);
				if(winner == 1) {
					mysql_format(SQL, gString, sizeof gString, "UPDATE `turfs` SET `Owned` = '%d' WHERE `ID` = '%d'", TurfInfo[i][zOwned], i);
					mysql_tquery(SQL, gString, "", "");
				}
				id = CalculateBestScore(i); id2 = CalculateWorstScore(i);
				va_SendClientMessageToAll(COLOR_SKEMA, "(War): {FFFFFF}Gruparea mafiota %s a %s teritoriul #%d %s de mafia %s.", (winner == 1) ? (NumeFactiune(WarInfo[i][wAttacker])) : (NumeFactiune(WarInfo[i][wFaction])), (winner == 1) ? ("cucerit") : ("aparat"), i, (winner == 1) ? ("detinut") : ("atacat"), (winner == 1) ? (NumeFactiune(WarInfo[i][wFaction])) : (NumeFactiune(WarInfo[i][wAttacker])));
				SendFamilyMessage(attackers, COLOR_GREEN, "------------ [war overview #%d] ------------", warid);
				SendFamilyMessage(defenders, COLOR_GREEN, "------------ [war overview #%d] ------------", warid);
				SendFamilyMessage(attackers, COLOR_GREEN, "Score: %s %d - %d %s.", (winner == 1) ? (NumeFactiune(WarInfo[i][wAttacker])) : (NumeFactiune(WarInfo[i][wFaction])), (winner == 1) ? (atscore) : (defscore), (winner == 1) ? (defscore) : (atscore), (winner == 1) ? (NumeFactiune(WarInfo[i][wFaction])) : (NumeFactiune(WarInfo[i][wAttacker])));
				SendFamilyMessage(defenders, COLOR_GREEN, "Score: %s %d - %d %s.", (winner == 1) ? (NumeFactiune(WarInfo[i][wAttacker])) : (NumeFactiune(WarInfo[i][wFaction])), (winner == 1) ? (atscore) : (defscore), (winner == 1) ? (defscore) : (atscore), (winner == 1) ? (NumeFactiune(WarInfo[i][wFaction])) : (NumeFactiune(WarInfo[i][wAttacker])));
				SendFamilyMessage(attackers, COLOR_GREEN, "Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", GetName(id), ucideri[id][i] - decese[id][i], ucideri[id][i], decese[id][i], GetName(id2), ucideri[id2][i] - decese[id2][i], ucideri[id2][i], decese[id2][i]);
				SendFamilyMessage(defenders, COLOR_GREEN, "Best score: %s with a score of %d (%d kills, %d deaths). Worst score: %s with a score of %d (%d kills, %d deaths).", GetName(id), ucideri[id][i] - decese[id][i], ucideri[id][i], decese[id][i], GetName(id2), ucideri[id2][i] - decese[id2][i], ucideri[id2][i], decese[id2][i]);
				foreach(new x : Gangsters) {
					if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
						for(new j = 0; j != 5; j++) SendDeathMessageToPlayer(x, 1001, 1001, 1001);
						SCMf(x, COLOR_GREEN, "Your personal score: %d (%d kills, %d deaths).", ucideri[x][i] - decese[x][i], ucideri[x][i], decese[x][i]);
						PlayerTextDrawHide(x, TimeLeftWar2[x]);
					}
				}
				WarScoreF[attackers][i] = 0; WarScoreF[defenders][i] = 0; InWar[attackers] = 0; InWar[defenders] = 0; waitwar[attackers] = 60; waitwar[defenders] = 60;
				foreach(new x : Gangsters) {
					if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
						SCM(x, COLOR_SKEMA, "Ai fost transferat in VW-ul 0.");
						if(GetPlayerInterior(x) < 1) SetPlayerVirtualWorld(x, 0);
						mysql_format(SQL, gString, sizeof gString, "INSERT INTO `warlogs` (`PlayerID`,`WarID`,`Kills`,`Deaths`,`Faction`) VALUES ('%d','%d','%d','%d','%d')", PlayerInfo[x][pSQLID], warid, ucideri[x][i], decese[x][i], PlayerInfo[x][pMember]);
						mysql_tquery(SQL, gString, "", "");
						ucideri[x][i] = 0; decese[x][i] = 0;
					}
				}
				if(winner == 1) {
					foreach(new x : Player) {
						if(TurfsDisp[x] == 1) {
							GangZoneHideForPlayerEx(x, Turfs[i]);
							if(attackers == 4) GangZoneShowForPlayerEx(x, Turfs[i], 0xCC000099);
							if(attackers == 5) GangZoneShowForPlayerEx(x, Turfs[i], 0x40863CAA);
							if(attackers == 6) GangZoneShowForPlayerEx(x, Turfs[i], 0x2F2F2F99);
							if(attackers == 6) GangZoneShowForPlayerEx(x, Turfs[i], 0x88572499);
						}
					} DeelayWar[WarInfo[i][wFaction]] = 300; DeelayWar[WarInfo[i][wAttacker]] = 600;
				}
				if(winner == 2) DeelayWar[WarInfo[i][wFaction]] = 300, DeelayWar[WarInfo[i][wAttacker]] = 600;
				WarInfo[i][wTime] = 0; WarInfo[i][wFaction] = 0; WarInfo[i][wAttacker] = 0; worstscoreat[i] = 0; worstmemberat[i] = 999;
				bestscoreat[i] = 0; bestmemberat[i] = 999; worstscoredf[i] = 0; worstmemberdf[i] = 999; bestscoredf[i] = 0; bestmemberdf[i] = 999;
			}
			if(WarInfo[i][wTime] > 2) {
				foreach(new x : Gangsters) {
					if(IsPlayerInTurf(x, i) && IsPlayerInAnyVehicle(x)) {
						if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
							if(skemawar[x] < 1) {
								SCM(x, COLOR_SKEMA, "Ai intrat in zona de war, vehiculul se va respawna peste 20 de secunde.");
								SetVehicleVirtualWorld(GetPlayerVehicleID(x), 1024);
								turfvehicletimer[x] = 20;
								skemawar[x] = 1;
							}	
						}
					}					
					if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
						if(WarInfo[i][wAttacker] == 5) GangZoneFlashForPlayer(x, Turfs[i], 0x66857399);
						else if(WarInfo[i][wAttacker] == 6) GangZoneFlashForPlayer(x, Turfs[i], 0x88572499);
					}
					if(IsPlayerInTurf(x, i) && PlayerInfo[x][pMember] == attackers) count ++;
					if(IsPlayerInTurf(x, i)) {
						if(intratwar[x] == 0) {
							if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
								SetPlayerVirtualWorld(x, 1024);
								intratwar[x] = 1;
							}
						}
					}
					if(IsPlayerInAnyVehicle(x)) {
						if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
							for(new skema = 0; skema < 23; skema++) {
								if(GetVehicleModel(GetPlayerVehicleID(x)) == planeVehicles[skema]) {
									RemovePlayerFromVehicle(x);	RemovePlayerFromVehicleEx(x);
									SCM(x, COLOR_SKEMA, "Nu te poti deplasa cu un elicopter in timpul warului.");
								}
							}
						}			
					}
				}
				if(count < 1) {
					if(waitwar[attackers] > 0) waitwar[attackers] --;
					if(!waitwar[attackers]) {
						waitwar[attackers] = 0; atscore = WarScoreF[attackers][i]; defscore = WarScoreF[defenders][i];
						foreach(new x : Gangsters) { if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) GangZoneStopFlashForPlayer(x, Turfs[i]); }
						if(atscore > defscore) winner = 1;
						else winner = 2;
						if(atscore == defscore) winner = 2;
						format(gString, sizeof gString, "INSERT INTO `wars` (`Attacker`,`Defender`,`Atscore`,`Defscore`,`Result`) VALUES ('%d','%d','%d','%d','3')", attackers, defenders, atscore, defscore);
						new Cache: warcache = mysql_query(SQL, gString);
						warid = cache_insert_id(); cache_delete(warcache); id = CalculateBestScore(i); id2 = CalculateWorstScore(i);
						SendFamilyMessage(attackers, COLOR_GREEN, "[WAR] %s failed to win turf %d owned by %s because they left the turf.", NumeFactiune(WarInfo[i][wAttacker]), i, NumeFactiune(WarInfo[i][wFaction]));
						SendFamilyMessage(defenders, COLOR_GREEN, "[WAR] %s failed to win turf %d owned by %s because they left the turf.", NumeFactiune(WarInfo[i][wAttacker]), i, NumeFactiune(WarInfo[i][wFaction]));
						SendFamilyMessage(attackers, COLOR_GREEN, "------------ [war overview #%d] ------------", warid);
						SendFamilyMessage(defenders, COLOR_GREEN, "------------ [war overview #%d] ------------", warid);
						SendFamilyMessage(attackers, COLOR_GREEN, "Score: %s %d - %d %s.", (winner == 1) ? (NumeFactiune(WarInfo[i][wAttacker])) : (NumeFactiune(WarInfo[i][wFaction])), (winner == 1) ? (atscore) : (defscore), (winner == 1) ? (defscore) : (atscore), (winner == 1) ? (NumeFactiune(WarInfo[i][wFaction])) : (NumeFactiune(WarInfo[i][wAttacker])));
						SendFamilyMessage(defenders, COLOR_GREEN, "Score: %s %d - %d %s.", (winner == 1) ? (NumeFactiune(WarInfo[i][wAttacker])) : (NumeFactiune(WarInfo[i][wFaction])), (winner == 1) ? (atscore) : (defscore), (winner == 1) ? (defscore) : (atscore), (winner == 1) ? (NumeFactiune(WarInfo[i][wFaction])) : (NumeFactiune(WarInfo[i][wAttacker])));
						SendFamilyMessage(attackers, COLOR_GREEN, "Best Score: %s with a score of %d (%d kills, %d deaths). Worst Score: %s with a score of %d (%d kills, %d deaths).", GetName(id), ucideri[id][i] - decese[id][i], ucideri[id][i], decese[id][i], GetName(id2), ucideri[id2][i] - decese[id2][i], ucideri[id2][i], decese[id2][i]);
						SendFamilyMessage(defenders, COLOR_GREEN, "Best Score: %s with a score of %d (%d kills, %d deaths). Worst Score: %s with a score of %d (%d kills, %d deaths).", GetName(id), ucideri[id][i] - decese[id][i], ucideri[id][i], decese[id][i], GetName(id2), ucideri[id2][i] - decese[id2][i], ucideri[id2][i], decese[id2][i]);
						foreach(new x : Gangsters) {
							if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
								for(new j = 0; j != 5; j++) SendDeathMessageToPlayer(x, 1001, 1001, 1001);
								SCMf(x, COLOR_GREEN, "Your personal score: %d (%d kills, %d deaths).", ucideri[x][i] - decese[x][i], ucideri[x][i], decese[x][i]);
								PlayerTextDrawHide(x, TimeLeftWar2[x]);
							}
						}
						WarScoreF[defenders][i] = 0; WarScoreF[attackers][i] = 0; InWar[attackers] = 0; InWar[defenders] = 0;
						foreach(new x : Gangsters) {
							if(PlayerInfo[x][pMember] == attackers || PlayerInfo[x][pMember] == defenders) {
								SCM(x, COLOR_SKEMA, "Ai fost transferat in VW-ul 0.");
								if(GetPlayerInterior(x) < 1) SetPlayerVirtualWorld(x, 0);
								mysql_format(SQL, gString, sizeof gString, "INSERT INTO `warlogs` (`PlayerID`,`WarID`,`Kills`,`Deaths`,`Faction`) VALUES ('%d','%d','%d','%d','%d')", PlayerInfo[x][pSQLID], warid, ucideri[x][i], decese[x][i], PlayerInfo[x][pMember]);
								mysql_tquery(SQL, gString, "", "");
								ucideri[x][i] = 0; decese[x][i] = 0;
							}
						}
						DeelayWar[WarInfo[i][wFaction]] = 300; DeelayWar[WarInfo[i][wAttacker]] = 600; WarInfo[i][wTime] = 0; WarInfo[i][wFaction] = 0; WarInfo[i][wAttacker] = 0; worstscoreat[i] = 0; worstmemberat[i] = 999;
						bestscoreat[i] = 0; bestmemberat[i] = 999; worstscoredf[i] = 0; worstmemberdf[i] = 999; bestscoredf[i] = 0; bestmemberdf[i] = 999;
					}
				} else waitwar[attackers] = 60;
			}
		}
	}
	foreach(new x : Player) {		
		if(cratetimer[x] >= 1) {
			cratetimer[x] --;
			loadcratetextdraw(x);
			if(cratetimer[x] == 0) cratecastig(x);
		}
		if(PlayerInfo[x][pJailed] > 0) {
			if(PlayerInfo[x][pJailTime] > 0 && gPlayerLogged[x]) {
				PlayerInfo[x][pJailTime] --;
				PlayerTextDrawShow(x, Jailtime[x]);
				playerTextDrawSetString(x, Jailtime[x], "ELIBERAT IN: ~r~%d MINUTE" , PlayerInfo[x][pJailTime] / 60 + 1);
			}
			if(PlayerInfo[x][pJailTime] < 1) {
				PlayerInfo[x][pJailTime] = 0;
				if(PlayerInfo[x][pJailed]) SetPlayerInterior(x, 6), SetPlayerPosEx(x, 255.8422,88.9269,1002.4453);
				if(PlayerInfo[x][pJailed] == 2) SetPlayerInterior(x, 0), SetPlayerVirtualWorld(x, 0), SetPlayerPosEx(x, 1801.5995, -1865.9557, 13.5720);
				PlayerInfo[x][pJailed] = 0; pUpdateInt(x, "Jailed", 0); pUpdateInt(x, "JailTime", 0);
				SCM(x, COLOR_WHITE, "Your time is up. You have been released from the prison.");
				SetPlayerSpecialAction(x, SPECIAL_ACTION_NONE); RemovePlayerAttachedObject(x, 1); PlayerTextDrawHide(x, Jailtime[x]);
				SetPlayerSkin(x, PlayerInfo[x][pModel]); ClearCrime(x); SetPlayerToTeamColor(x); TogglePlayerControllable(x, true);
			}
		}
		if(IsPlayerInAnyVehicle(x)) {
			if(IsPlayerInRangeOfPoint(x, 50.0, BizzInfo[34][bEntranceX], BizzInfo[34][bEntranceY], BizzInfo[34][bEntranceZ]) || IsPlayerInRangeOfPoint(x, 50.0, BizzInfo[35][bEntranceX], BizzInfo[35][bEntranceY], BizzInfo[35][bEntranceZ]) || IsPlayerInRangeOfPoint(x, 50.0, BizzInfo[36][bEntranceX], BizzInfo[36][bEntranceY], BizzInfo[36][bEntranceZ]) ||
				IsPlayerInRangeOfPoint(x, 50.0, BizzInfo[37][bEntranceX], BizzInfo[37][bEntranceY], BizzInfo[37][bEntranceZ]) || IsPlayerInRangeOfPoint(x, 50.0, BizzInfo[40][bEntranceX], BizzInfo[40][bEntranceY], BizzInfo[40][bEntranceZ]) || IsPlayerInRangeOfPoint(x, 50.0, BizzInfo[41][bEntranceX], BizzInfo[41][bEntranceY], BizzInfo[41][bEntranceZ])) {
				if(!CarCollisions[x]) CarCollisions[x] = 1, DisableRemoteVehicleCollisions(x, true);
			} else {
				if(CarCollisions[x]) CarCollisions[x] = 0, DisableRemoteVehicleCollisions(x, false);
			}
		}
		if(HealTimer[x] > 0) HealTimer[x] --;
		if(timersoo[x] > 0) timersoo[x] --;
		if(soexpire[x] > 0) {
			soexpire[x] --;
			if(!soexpire[x] && somated[x] != -1) somated[x] = -1, somatename[x] = "NULL";
		}
		if(WantedTimer[x] > 0) {
			WantedTimer[x] --;
			if(!WantedTimer[x]) ClearWanted(x);
		}		
		if(sanctiondelay[x] > 0) sanctiondelay[x] --;
		if(EngineDelay [x] > 0) EngineDelay [x]--;
		if(barcadelay [x] > 0) barcadelay [x] --;
		if(delaypay [x] > 0) delaypay [x] --;
		if(servicedelay[x] > 0) servicedelay[x] --;
		if(mutecomenzi[x] > 0) mutecomenzi[x] --;
		if(crasher[x] > 0) crasher[x] --;
		if(refuelwait[x] > 0) {
			refuelwait[x] --;
			if(refuelwait[x] < 1) Fillup(x);
		}
		if(login[x] > 0) {
			login[x] --;
			if(!login[x]) SendAdmins(COLOR_PRINC, "%s was kicked by AdmBot because it did not connect in 60 seconds.", 1, GetName(x)), defer KickEx(x);
		}
		if(TaxiTimer[x] > 0) {
			TaxiTimer[x] --;
			if(!TaxiTimer[x]) {
				TaxiTimer[x] = random(7) + 10; GivePlayerCash(x, -TaxiFare[TaxiDriver[x]]); GivePlayerCash(TaxiDriver[x], TaxiFare[TaxiDriver[x]]);
				TaxiMoneySpent[x] += TaxiFare[TaxiDriver[x]]; TaxiMoneyEarned[TaxiDriver[x]] += TaxiFare[TaxiDriver[x]];
				playerTextDrawSetString(x, RentCarText[x], "money spent: ~g~%s$", FormatNumber(TaxiMoneySpent[x])); PlayerTextDrawShow(x, RentCarText[x]);
				playerTextDrawSetString(TaxiDriver[x], RentCarText[TaxiDriver[x]], "money earned: ~g~%s$", FormatNumber(TaxiMoneyEarned[TaxiDriver[x]])); PlayerTextDrawShow(TaxiDriver[x], RentCarText[TaxiDriver[x]]);
				if(GetPlayerCash(x) < 1000) {
					TaxiMoneySpent[x] = 0; TaxiDriver[x] = -1; PlayerTextDrawHide(x, RentCarText[x]); TaxiTimer[x] = 0; RemovePlayerFromVehicle(x);
					gString[0] = (EOS);
					mysql_format(SQL, gString, sizeof gString, "UPDATE `users` SET `Raport1` = `Raport1` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[TaxiDriver[x]][pSQLID]);
					mysql_tquery(SQL, gString, "", ""); 					
					PlayerTextDrawHide(TaxiDriver[x], RentCarText[TaxiDriver[x]]);
				}
			}
		}
		if(TaxiFare[x] > 0 && !IsPlayerInAnyVehicle(x)) {
			TaxiFare[x] = 0; TaxiMoneyEarned[x] = 0; PlayerTextDrawHide(x, RentCarText[x]);
			foreach(new y : Player) { if(TaxiDriver[y] == x) { TaxiDriver[y] = -1; TaxiTimer[y] = 0; TaxiMoneySpent[y] = 0; PlayerTextDrawHide(y, RentCarText[y]); } }
		}
		if(gPlayerLogged[x]) {
			new something;
			if(!IsPlayerInRangeOfPoint(x, 3.0, 1219.0502, -1812.7823, 16.5938) && !IsPlayerInRangeOfPoint(x, 3.0, 328.3534, -1513.1687, 36.0391)) something = 1;
			if(something) {
				new something2 = 0;
				for(new xy; xy < MAX_ATMS; xy ++) { if(IsPlayerInRangeOfPoint(x, 3.0, AtmInfo[xy][fATMPos][0], AtmInfo[xy][fATMPos][1], AtmInfo[xy][fATMPos][2])) {	playerTextDrawSetString(x, TextJos[x], "Type ~r~/atm~w~ to withdraw money from the ATM."); PlayerTextDrawShow(x, TextJos[x]); something2 = 1; } }
				if(!something2) PlayerTextDrawHide(x, TextJos[x]);
			}
		}
		if(FireworkTimer[x] > 0) FireworkTimer[x] --;
		if(LastBizTime[x] > 0) {
			LastBizTime[x] --;
			if(!LastBizTime[x]) LastBiz[x] = -1;
		}
		if(TimerQuestion[x] > 0) {
			TimerQuestion[x] --;
			if(!TimerQuestion[x]) {
				TimerQuestion[x] = -1; format(LiveQuestion[x], 128, "NULL");
			}
		}
		if(PlayerInfo[x][pHUD1] != 0) {
			new Float: hp; GetPlayerHealth(x, hp);
			if(PlayerInfo[x][pHUD1] == 1) PlayerTextDrawColor(x, HUD[1][x], 0xC0C0C0FF);
			else if(PlayerInfo[x][pHUD1] == 2) PlayerTextDrawColor(x, HUD[1][x], 0xFF0000FF);
			else if(PlayerInfo[x][pHUD1] == 3) PlayerTextDrawColor(x, HUD[1][x], 0x00FF00FF);
			else if(PlayerInfo[x][pHUD1] == 4) PlayerTextDrawColor(x, HUD[1][x], 0x0000FFFF);
			else if(PlayerInfo[x][pHUD1] == 5) PlayerTextDrawColor(x, HUD[1][x], 0xFFFF00FF);
			playerTextDrawSetString(x, HUD[1][x], "%.0f", hp); PlayerTextDrawShow(x, HUD[1][x]);
		}
		if(PlayerInfo[x][pHUD2] != 0) {
			new Float: armour; GetPlayerArmour(x, armour);
			if(PlayerInfo[x][pHUD2] == 1) PlayerTextDrawColor(x, HUD[2][x], 0xC0C0C0FF);
			else if(PlayerInfo[x][pHUD2] == 2) PlayerTextDrawColor(x, HUD[2][x], 0xFF0000FF);
			else if(PlayerInfo[x][pHUD2] == 3) PlayerTextDrawColor(x, HUD[2][x], 0x00FF00FF);
			else if(PlayerInfo[x][pHUD2] == 4) PlayerTextDrawColor(x, HUD[2][x], 0x0000FFFF);
			else if(PlayerInfo[x][pHUD2] == 5) PlayerTextDrawColor(x, HUD[2][x], 0xFFFF00FF);
			playerTextDrawSetString(x, HUD[2][x], "%.0f", armour); PlayerTextDrawShow(x, HUD[2][x]);
			if(armour < 1) PlayerTextDrawHide(x, HUD[2][x]);
		}
		if(PlayerInfo[x][pHUD3] != 0) { 
			if(PlayerInfo[x][pAdmin] >= 1) {
				playerTextDrawSetString(x, HUD[3][x], "~r~%d~n~~w~~h~TICK~n~~n~~g~%d~n~~w~~h~db~n~~n~~p~%d~n~~w~~h~PING",GetServerTickRate(), mysql_unprocessed_queries(), GetPlayerPing(x));
				PlayerTextDrawShow(x, HUD[3][x]); 
			}
		}
		if(GetPlayerDrunkLevel(x) < 100) SetPlayerDrunkLevel(x, 2000);
		else {
			if(PlayerInfo[x][pDrunkLevelLast] != GetPlayerDrunkLevel(x)) {
				new framerates = PlayerInfo[x][pDrunkLevelLast] - GetPlayerDrunkLevel(x);
				if((framerates > 0) && (framerates < 200)) PlayerInfo[x][pFPS] = framerates;
				PlayerInfo[x][pDrunkLevelLast] = GetPlayerDrunkLevel(x);
			}
		}		
		if(DrugTimer[x] > 0) DrugTimer[x] --;
		if(SellTradeTimer[x] > 0) {
			SellTradeTimer[x] --;
			if(!SellTradeTimer[x]) {
				foreach(new xy : Player) { if(x == tradeofferer[xy]) tradeofferer[xy] = -1, tradediff[xy] = 0, tradetype[xy] = -1, tradetype2[xy] = -1, tradecars[xy] = -1, tradecars2[xy] = -1; }
				SellTradeTimer[x] = 0; SCM(x, COLOR_WHITE, "The sell/trade offer has expired.");
			}
		}
		if(PlayerInfo[x][pSleeping] == 1) SetPlayerHealthEx(x, 100);
		if(IsPlayerInAnyVehicle(x)) {
			if(IsAnOwnableCar(GetPlayerVehicleID(x))) {
				foreach(new xyz : Player) {
					for(new vehicle; vehicle < MAX_PERSONAL_VEHICLES; vehicle ++) {
						if(PlayerInfo[xyz][pCarID][vehicle] == GetPlayerVehicleID(x) && GetPlayerState(x) == PLAYER_STATE_DRIVER && !IsPlayerAFK[x]) {
							new Float: distance, kmd;
							if(IsPlayerInRangeOfPoint(x, 10.0, 617.5361, -1.9900, 1000.6635) || IsPlayerInRangeOfPoint(x, 10.0, 1041.6093, -1019.4713, 31.8327) || IsPlayerInRangeOfPoint(x, 10.0, 2385.9341, 1049.5715, 10.5474) || IsPlayerInRangeOfPoint(x, 10.0, -1936.0393, 244.7725, 34.1890) ||
							    IsPlayerInRangeOfPoint(x, 10.0, -2722.2681, 216.9585, 4.1897) || IsPlayerInRangeOfPoint(x, 10.0, 615.2837, -124.2390, 997.7005) || IsPlayerInRangeOfPoint(x, 10.0, 2644.9446, -2043.7083, 13.3856) || IsPlayerInRangeOfPoint(x, 10.0, 616.7852, -74.8150, 997.7812)) GetVehiclePos(GetPlayerVehicleID(x), old_veh_pos[GetPlayerVehicleID(x)][0], old_veh_pos[GetPlayerVehicleID(x)][1], old_veh_pos[GetPlayerVehicleID(x)][2]);
							distance = GetPlayerDistanceFromPoint(x, old_veh_pos[GetPlayerVehicleID(x)][0], old_veh_pos[GetPlayerVehicleID(x)][1], old_veh_pos[GetPlayerVehicleID(x)][2]); PlayerInfo[xyz][pCarKM][vehicle] += distance / 1000;
							GetVehiclePos(GetPlayerVehicleID(x), old_veh_pos[GetPlayerVehicleID(x)][0], old_veh_pos[GetPlayerVehicleID(x)][1], old_veh_pos[GetPlayerVehicleID(x)][2]); kmd = floatround(PlayerInfo[xyz][pCarKM][vehicle], floatround_round);
							if(kmd % 1000 == 0 && PlayerInfo[xyz][pCarKMLast][vehicle] != kmd) { PlayerInfo[xyz][pCarKMLast][vehicle] = kmd; PlayerInfo[xyz][pCarInsPrice][vehicle] += 1000; cUpdate(xyz, vehicle, cInscarpricex); cUpdate(xyz, vehicle, cKMLastx); }
						}
					}
				}
			}
		}				
		if(PlayerInfo[x][pWantedLevel] > 0) {
			wantedlost[x] --;
			if(wantedlost[x] <= 0) {
				wantedlost[x] = 900; PlayerInfo[x][pWantedLevel] --; pUpdateInt(x, "WantedLevel", PlayerInfo[x][pWantedLevel]);
				SCM(x, COLOR_LIGHTBLUE, "Ai scapat de unul dintre punctele de wanted.");
				SendFamilyMessage(1, COLOR_DBLUE, "%s (%d) lost one wanted point because it ran 15 minutes.", GetName(x), x);
				SendFamilyMessage(2, COLOR_DBLUE, "%s (%d) lost one wanted point because it ran 15 minutes.", GetName(x), x);
				SendFamilyMessage(3, COLOR_DBLUE, "%s (%d) lost one wanted point because it ran 15 minutes.", GetName(x), x);
				SendFamilyMessage(8, COLOR_DBLUE, "%s (%d) lost one wanted point because it ran 15 minutes.", GetName(x), x);
				if(PlayerInfo[x][pWantedLevel] <= 0) ClearCrime(x);
			}
		}
		if(RepairTime[x] > 0) RepairTime[x] --;
		if(PlayerInfo[x][pMuteTime] >= 1)
		{
			PlayerInfo[x][pMuteTime] --;

			if(PlayerInfo[x][pMuteTime] < 1)
			{
				PlayerInfo[x][pMuteTime] = 0;
				pUpdateInt(x, "MuteTime", 0);

				SCMf(x, COLOR_GREY, "(mute): {ffffff}ai primit unmute automat.");
			}
		}
		if(PlayerInfo[x][pRmute] > 0) {
			PlayerInfo[x][pRmute] --;
			if(PlayerInfo[x][pRmute] <= 0) PlayerInfo[x][pRmute] = 0, pUpdateInt(x, "Rmute", 0);
		}
		if(PlayerInfo[x][pNmute] > 0) {
			PlayerInfo[x][pNmute] --;
			if(PlayerInfo[x][pNmute] <= 0) PlayerInfo[x][pNmute] = 0, pUpdateInt(x, "Nmute", 0);
		}			
		if(targetfind[x] >= 0 && UsedFind[x] == 1) {
			new target;
			target = targetfind[x];
			if(InBussines[target] >= 1) {
				new j; 
				j = InBussines[target];
				SetPlayerCheckpoint(x,BizzInfo[j][bEntranceX], BizzInfo[j][bEntranceY], BizzInfo[j][bEntranceZ],4);
			}
			else if(InHouse[target] >= 1) {
				new j;
				j = InHouse[target];
				SetPlayerCheckpoint(x,HouseInfo[j][hEntrancex],HouseInfo[j][hEntrancey],HouseInfo[j][hEntrancez],4);	
			}
			else if(InHQ[target] >= 1) SetPlayerCheckpoint(x, DynamicFactions[InHQ[target]][fceX], DynamicFactions[InHQ[target]][fceY], DynamicFactions[InHQ[target]][fceZ], 4); 
			else {
				new Float: floatx, Float: floaty, Float: floatz; GetPlayerPos(target, floatx, floaty, floatz);
				SetPlayerCheckpoint(x, floatx, floaty, floatz, 4.0);	
			}
			PlayerTextDrawShow(x, FindTXD[x][0]); PlayerTextDrawShow(x, FindTXD[x][1]);
			new skemafind[64];
			format(skemafind, 64, "target: ~r~%s ~w~(%d)", GetName(targetfind[x]), targetfind[x]);
			PlayerTextDrawSetString(x, FindTXD[x][0], skemafind);
			format(skemafind, 64, "distance: ~r~%.0fm", GetDistanceBetweenPlayers(x, targetfind[x]));
			PlayerTextDrawSetString(x, FindTXD[x][1], skemafind);
		}	
		if(IsABoat(GetPlayerVehicleID(x)) && PlayerInfo[x][pBoatLic] < 1 && GetPlayerState(x) == 2 && TakingLesson[x] != 2) RemovePlayerFromVehicleEx(x);
		else if(IsAPlane(GetPlayerVehicleID(x)) && PlayerInfo[x][pFlyLic] < 1 && GetPlayerState(x) == 2) {
			if(TakingLesson[x] == 1 || TakingLesson[x] == 2) { }
			else RemovePlayerFromVehicleEx(x);
		} else {
			if(PlayerInfo[x][pCarLic] < 1 && IsPlayerInAnyVehicle(x) && GetPlayerState(x) == 2) {
				if(TakingLesson[x] == 1) { }
			}
		}
		if(PlayerTazeTime[x] >= 1) {
			PlayerTazeTime[x] ++;
			if(PlayerTazeTime[x] == 15) PlayerTazeTime[x] = 0;
			else { new Float: ang; GetPlayerFacingAngle(x, ang); SetPlayerFacingAngle(x, ang + 90);	}
		}
		if(PlayerStoned[x] >= 2) {
			new Float: ang; GetPlayerFacingAngle(x, ang);
			if(IsPlayerInAnyVehicle(x)) {
				if(GetPlayerState(x) == 2) SetVehicleZAngle(GetPlayerVehicleID(x), ang + 15), SetPlayerDrunkLevel(x, 5000);
			} else SetPlayerDrunkLevel(x, 5000);
		}
		if(PlayerCuffed[x]) {
			if(PlayerCuffedTime[x] <= 0) TogglePlayerControllable(x, true), PlayerCuffed[x] = 0, PlayerCuffedTime[x] = 0, PlayerTazeTime[x] = 1;
			else PlayerCuffedTime[x] --;
		}
		if(PlayerCuffed[x] == 2) {
			if(PlayerCuffedTime[x] <= 0) GameTextForPlayer(x, "~r~~h~You broke the Cuffs, you are free.", 2500, 3), TogglePlayerControllable(x, true), PlayerCuffed[x] = 0, PlayerCuffedTime[x] = 0;
			else PlayerCuffedTime[x] --;
		}
		if(Cash[x] != GetPlayerMoney(x) && GetPlayerMoney(x) - Cash[x] != 0) ResetPlayerMoney(x), GivePlayerMoney(x, Cash[x]);
		if(GetPlayerCameraMode(x) == 53) {
			new Float: px, Float: py, Float: pz;
			GetPlayerCameraPos(x, px, py, pz);
			if(pz < -50000 || pz > 50000) {
				if(PlayerInfo[x][pAdmin] < 1 && ac_trolltimer == 1) SendAdmins(COLOR_SKEMA2, "%s (%d / level %d) may be using cheats (troll hack). #2", 1, GetName(x), x, PlayerInfo[x][pLevel]);
			}	
		}
		if(gPlayerLogged[x] && !IsPlayerInArea(x, -4298.7334, -3909.0200, 3579.6602, 3971.8860) && GetPlayerDistanceFromPoint(x, PlayerPosii[x][0], PlayerPosii[x][1], PlayerPosii[x][2]) > 50) {
			if(PlayerInfo[x][pAdmin] < 1 && ac_trolltimer == 1) SendAdmins(COLOR_SKEMA2, "%s (%d / level %d) may be using cheats (troll hack). #3", 1, GetName(x), x, PlayerInfo[x][pLevel]);
		}					
		GetPlayerPos(x, PlayerPosii[x][0], PlayerPosii[x][1], PlayerPosii[x][2]);				
		if(PlayerPosii[x][0] == PlayerPosii[x][3] && PlayerPosii[x][1] == PlayerPosii[x][4] && PlayerPosii[x][2] == PlayerPosii[x][5]) {
			if(LastMove[x] >= 20) IsPlayerAFK[x] ++;
			else LastMove[x] ++;
		} else IsPlayerAFK[x] = 0, LastMove[x] = 0;
		PlayerPosii[x][3] = PlayerPosii[x][0]; PlayerPosii[x][4] = PlayerPosii[x][1]; PlayerPosii[x][5] = PlayerPosii[x][2];
		if(IsPlayerAFK[x] < 40 && GetPlayerAnimationIndex(x) != 1189 && GetPlayerAnimationIndex(x) != 378) PlayerInfo[x][pPayDay] ++;
		if(damagetimer[x] >= 1) {
			damagetimer[x] --;
			if(damagetimer[x] < 1) {
				TextDrawHideForPlayer(x, Damage[0]); TextDrawHideForPlayer(x, Damage[1]);
				PlayerTextDrawHide(x, DamageInformer[x][0]); PlayerTextDrawHide(x, DamageInformer[x][1]);
			}
		}
		if(turfvehicletimer[x] >= 1) {
			turfvehicletimer[x] --;
			if(turfvehicletimer[x] == 0) {
				SetVehicleToRespawn(LastVeh[x]);
				SCM(x, COLOR_SKEMA, "Vehiculul a fost respawnat.");
				skemawar[x] = 0;
			}
		}	
     	new totalbet;
        //black
        gString[0] = EOS;
        foreach(new better:InRoulette){
            if(inruleta[better]) totalbet += rlbet[better][RL_BLACK];
        }
        format(gString, 128, "BLACK (48 PRECENT)~n~Total: ~g~$%s~w~~n~Yours: ~g~$%s", FormatNumber(totalbet), FormatNumber(rlbet[x][RL_BLACK]));
        PlayerTextDrawSetString(x, Ruleta_PTD[x][RL_BLACK], gString);
        //green
        totalbet = 0;  
        gString[0] = EOS;
        foreach(new better:InRoulette){
            if(inruleta[better]) totalbet += rlbet[better][RL_GREEN];
        }
        format(gString, 128, "GREEN (2 PRECENT)~n~Total: ~g~$%s~w~~n~Yours: ~g~$%s", FormatNumber(totalbet), FormatNumber(rlbet[x][RL_GREEN]));
        PlayerTextDrawSetString(x, Ruleta_PTD[x][RL_GREEN], gString);
        //red
        totalbet = 0;  
        gString[0] = EOS;
        foreach(new better:InRoulette){
            if(inruleta[better]) totalbet += rlbet[better][RL_RED];
        }
        format(gString, 128, "RED (48 PRECENT)~n~Total: ~g~$%s~w~~n~Yours: ~g~$%s", FormatNumber(totalbet), FormatNumber(rlbet[x][RL_RED]));
        PlayerTextDrawSetString(x, Ruleta_PTD[x][RL_RED], gString);	
	} new day, month, year; getdate(year, month, day);
	format(gString, sizeof gString, "%s%d.%s%d.%s%d", ((day < 10) ? ("0") : ("")), day, ((month < 10) ? ("0") : ("")), month, (year < 10) ? ("0") : (""), year); TextDrawSetString(Date, gString);
	format(gString, sizeof gString, "%s%d:%s%d", (hour < 10) ? ("0") : (""), hour, (minute < 10) ? ("0") : (""), minute); TextDrawSetString(Time, gString);
	if(DeelayWar[4] > 0) DeelayWar[4] --;
	if(DeelayWar[5] > 0) DeelayWar[5] --;
	if(DeelayWar[6] > 0) DeelayWar[6] --;
	if(DeelayWar[10] > 0) DeelayWar[10] --;
    if(painttime != -1) {
        painttime --;
        foreach(new smecher : PlayerPaint) showpainttd(smecher);
        if(painttime == 0) {
            foreach(new smecherie : PlayerPaint) {
            	SCM(smecherie, COLOR_SKEMA, "Round over!");
            	SCMf(smecherie, COLOR_SKEMA, "Your score: %d", paintkills[smecherie]);
                SetPlayerPosEx(smecherie, 1412.0887,-1699.8264,13.5395);
                SetPlayerInterior(smecherie, 0); SetPlayerVirtualWorld(smecherie, 0);
                ResetPlayerWeaponsEx(smecherie); ResetPlayerWeapons(smecherie);
                paintkills[smecherie] = 0; painttime = -1;
                PlayerTextDrawHide(smecherie, PaintTD[smecherie]); 
                SetPlayerSkin(smecherie, PlayerInfo[smecherie][pModel]);
                for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(smecherie, 1001, 1001, 1001);
            }
            Iter_Clear(PlayerPaint);
        }
        if(painttime == 180) {
            foreach(new suntsmecher2 : PlayerPaint) {
                SpawnPlayer(suntsmecher2);
                SCM(suntsmecher2, COLOR_SKEMA, "The round has started!");
            }
        }
    }     
	return 1; 
}	
function NumberUsed(playerid) {
	gString[0] = (EOS);
	format(gString, 256, "SELECT * FROM `users` WHERE `PhoneNr` = '%d'", PlayerInfo[playerid][pPnumber]);
	new Cache: result = mysql_query(SQL, gString);
	if(cache_get_row_count() > 0) { 
		cache_delete(result);
		return true;
	}
	cache_delete(result);
	return 0; }
task CheckGas[60000]() {
	foreach(new i : Player) {
		new engine,lights,alarm,doors,bonnet,boot,objective,vehicle = GetPlayerVehicleID(i),Float:carhealth;
   	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
			if(Gas[vehicle] >= 1) {
	   		    if(vehEngine[vehicle] == 1) {
					if(IsAPlane(vehicle) || IsABoat(vehicle) || IsABike(vehicle)) { Gas[vehicle]++; }
	              	Gas[vehicle]--;
					if(IsAnOwnableCar(vehicle)) {
						foreach(new s : Player) {
							for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
								if(PlayerInfo[s][pCarID][v] == vehicle) {
									if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicle) {
										GetVehicleHealth(vehicle, carhealth);
										GetVehicleDamageStatus(vehicle, PlayerInfo[s][pCarDamage1][v], PlayerInfo[s][pCarDamage2][v], PlayerInfo[s][pCarDamage3][v], PlayerInfo[s][pCarDamage4][v]);
										PlayerInfo[s][pCarHP][v] = carhealth; PlayerInfo[s][pCarGas][v] = Gas[vehicle];
										cUpdate(s, v, cHPx); cUpdate(s, v, cDamage1x); cUpdate(s, v, cDamage2x); cUpdate(s, v, cDamage3x);
										cUpdate(s, v, cDamage4x); cUpdate(s, v, cGasx); cUpdate(s, v, cKMx);
									}
								}
							}
						}
					}
				}
	   		}
   			else {
              	NoFuel[i] = 1;
              	TogglePlayerControllable(i, 0);
	        	GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~No fuel in vehicle.",1500,3);
	        	vehEngine[vehicle] = 0;
    			GetVehicleParamsEx(vehicle,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(vehicle,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
      	    	SetPVarInt(i, "Engine", 0);
			}
		}
	}	
	new tmphour,tmpminute,tmpsecond,hour,minn,sec,da,mo,ye;
	gettime(hour,minn,sec);
	gettime(tmphour, tmpminute, tmpsecond);
	getdate(ye, mo, da);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23)) {
		ghour = tmphour;
		PayDay();
		if(hour == 23) mysql_tquery(SQL,"UPDATE users SET ClanTime = ClanTime+1 WHERE Clan > 0");			
		if(hour == 7) {
			mysql_tquery(SQL, "UPDATE `users` SET `BattlePassMissions` = '0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0'");
			mysql_tquery(SQL, "UPDATE `users` SET `Quests` = '0'");
			mysql_tquery(SQL, "UPDATE `users` SET `FactionTime` = `FactionTime` + '1' WHERE `Member` > '0'");
			mysql_tquery(SQL, "UPDATE `users` SET `Quests` = '0'");
			mysql_tquery(SQL, "UPDATE `users` SET `DaysAmanet` -= 1 WHERE `DaysAmanet` >= 1");
			//mysql_tquery(SQL, "UPDATE `users` SET `Corona` = '0'");
			mysql_tquery(SQL, "UPDATE `users` SET `Questdone` = '0'");
		}	
		if(hour == 23) 	mysql_tquery(SQL, "UPDATE `users` SET `BanDays` = `BanDays` - '1' WHERE `BanDays` > '0'");
		if(hour == 19 || hour == 20 || hour == 21 || hour == 22) SetWorldTime(hour);
		else SetWorldTime(hour);
	}	
	return 1; 
}
public OnEnterExitModShop(playerid, enterexit, interiorid) {
	if(enterexit == 0) {
		if(IsPlayerInRangeOfPoint(playerid,10.0,617.5360,-1.9900,1000.6647) && GetPlayerCash(playerid) >= BizzInfo[38][bEntranceCost]) return EnterInModShop[playerid] = 1;
		if(IsPlayerInRangeOfPoint(playerid,10.0,616.7844,-74.8150,997.7675) && GetPlayerCash(playerid) >= BizzInfo[39][bEntranceCost]) return EnterInModShop[playerid] = 1;
	}
	return 1; 
}
function Fillup(playerid) {
    new VID,
    	FillUp,
		Incarcare = GasMax - Gas[VID];
    VID = GetPlayerVehicleID(playerid);
    FillUp = GasMax - Gas[VID]; FillUp = FillUp * 500;
    if(Gas[VID] >= 100) { FillUp = 0; }
	if(Refueling[playerid] == 1) {
		if(GetPlayerCash(playerid) >= FillUp) {
			Gas[VID] += Incarcare;
		    SCMf(playerid, COLOR_GREEN, "Ai platit $%s pentru a face plinul la masina.",FormatNumber(FillUp));
		    Gas[GetPlayerVehicleID(playerid)] = 100;
            TogglePlayerControllable(playerid, 1);
			GivePlayerCash(playerid, - FillUp);
			Refueling[playerid] = 0;
			gString[0] = (EOS);
			if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[33][bEntranceX],BizzInfo[33][bEntranceY],BizzInfo[33][bEntranceZ])) {
				BizzInfo[33][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='33' LIMIT 1",BizzInfo[33][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[42][bEntranceX],BizzInfo[42][bEntranceY],BizzInfo[42][bEntranceZ])) {
				BizzInfo[42][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='42' LIMIT 1",BizzInfo[42][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[43][bEntranceX],BizzInfo[43][bEntranceY],BizzInfo[43][bEntranceZ])) {
				BizzInfo[43][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='43' LIMIT 1",BizzInfo[43][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[44][bEntranceX],BizzInfo[44][bEntranceY],BizzInfo[44][bEntranceZ])) {
				BizzInfo[44][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='44' LIMIT 1",BizzInfo[44][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[45][bEntranceX],BizzInfo[45][bEntranceY],BizzInfo[45][bEntranceZ])) {
				BizzInfo[45][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='45' LIMIT 1",BizzInfo[45][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[46][bEntranceX],BizzInfo[46][bEntranceY],BizzInfo[46][bEntranceZ])) {
				BizzInfo[46][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='46' LIMIT 1",BizzInfo[46][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[47][bEntranceX],BizzInfo[47][bEntranceY],BizzInfo[47][bEntranceZ])) {
				BizzInfo[47][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='47' LIMIT 1",BizzInfo[47][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[48][bEntranceX],BizzInfo[48][bEntranceY],BizzInfo[48][bEntranceZ])) {
				BizzInfo[48][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='48' LIMIT 1",BizzInfo[48][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[49][bEntranceX],BizzInfo[49][bEntranceY],BizzInfo[49][bEntranceZ])) {
				BizzInfo[49][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='49' LIMIT 1",BizzInfo[49][bTill]);
				mysql_tquery(SQL,gString);
			}
			else if(IsPlayerInRangeOfPoint(playerid,25.0,BizzInfo[50][bEntranceX],BizzInfo[50][bEntranceY],BizzInfo[50][bEntranceZ])) {
				BizzInfo[50][bTill] += FillUp;
	    		mysql_format(SQL,gString,184,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='50' LIMIT 1",BizzInfo[50][bTill]);
				mysql_tquery(SQL,gString);
			}
		}
	   	else {
			SCM(playerid, -1, "* Not enough Money to refill.");
	   	}
 	}
	return 1; 
}
function ShowStats(playerid, targetid) {
	if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid)) {
		new skema[30], drank[10], expamount,Float:ptime = PlayerInfo[targetid][pConnectTime], pretlevel = PlayerInfo[targetid][pLevel]*levelcost, vehicles, biztext[20], housetext[20];
		
		switch(PlayerInfo[targetid][pPremiumAccount]) {
			case 0:drank = "No";
			case 1:drank = "Yes";
		}
		switch(PlayerInfo[targetid][pGoldenAccount]) {
			case 0:skema = "No"; 
			case 1:skema = "Yes";
		}
		if(PlayerInfo[targetid][pPbiskey] == 255) format(biztext, sizeof biztext, "No");
		else if(PlayerInfo[targetid][pPbiskey] < 255) format(biztext, sizeof biztext, "Yes");
		if(PlayerInfo[targetid][pPhousekey] == 999) format(housetext, sizeof housetext, "No");
		else if(PlayerInfo[targetid][pPhousekey] < 998) format(housetext, sizeof housetext, "Yes");
		if(PlayerInfo[targetid][pLevel] == 1 || PlayerInfo[targetid][pLevel] == 2 || PlayerInfo[targetid][pLevel] == 3 || PlayerInfo[targetid][pLevel] == 4) expamount = PlayerInfo[targetid][pLevel]*2;
		else if(PlayerInfo[targetid][pLevel] >= 5) expamount = PlayerInfo[targetid][pLevel]*levelexp;
		SCM(playerid, -1, "");
		SCMf(playerid, COLOR_PRINC, "General: {ffffff}(%d) %s | Playing hours: %.2f | Phone no: %d | Warns: %d/3", targetid, GetName(targetid), ptime, PlayerInfo[targetid][pPnumber], PlayerInfo[targetid][pWarns]);
		SCMf(playerid, COLOR_PRINC, "Account: {ffffff}Level: %d | Respect points: %d/%d | Next level price: $%s", PlayerInfo[targetid][pLevel], PlayerInfo[targetid][pExp], expamount, FormatNumber(pretlevel));	
		SCMf(playerid, COLOR_PRINC, "Economy: {ffffff}Cash Money: %s | Bank Money: %s | Bank Miliards: %d", FormatNumber(GetPlayerCash(targetid)), FormatNumber(PlayerInfo[targetid][pAccount]), PlayerInfo[targetid][pMiliarde]);	
		if(PlayerInfo[targetid][pMember] >= 1) SCMf(playerid, COLOR_PRINC, "Group: {ffffff}Member: %s | Rank: %d | Faction Warns: %d/3 | Faction Punish: %d/20 | Premium: %s (%d points) | Legendary: %s", NumeFactiune(PlayerInfo[targetid][pMember]), PlayerInfo[targetid][pRank], PlayerInfo[targetid][pFACWarns], PlayerInfo[targetid][pFpunish], drank, PlayerInfo[targetid][pPremiumPoints], skema);
		else SCMf(playerid, COLOR_PRINC, "Stats: {ffffff}Group: None | Faction Punish: %d/20 | Premium: %s (%d points) | Legendary: %s", PlayerInfo[targetid][pFpunish], drank, PlayerInfo[targetid][pPremiumPoints], skema);
		SCMf(playerid, COLOR_PRINC, "Others: {ffffff}Rob points: %d/10 | Escape Points: %d | Credit: %d$ | Roll Points: %d ", PlayerInfo[targetid][pRob], PlayerInfo[targetid][pEscapePoints], PlayerInfo[targetid][pCredits], PlayerInfo[targetid][pRoll]);
		SCMf(playerid, COLOR_PRINC, "Others: {ffffff}Materials: %d | Drugs: %d | Fireworks: %d | Hiddens: %d", PlayerInfo[targetid][pMats], PlayerInfo[targetid][pDrugs], PlayerInfo[targetid][pFWorks], PlayerInfo[targetid][pHiddenColor]);
		for(new v; v < PlayerInfo[targetid][pCarSlots]; v++) {
			if(PlayerInfo[targetid][pCar][v] != -1) vehicles++;
		}
		SCMf(playerid, COLOR_PRINC, "Proprieties: {ffffff}%d/%d vehicles | House: %s | Business: %s | StaffWarns: %d | Leader warns: %d", vehicles, PlayerInfo[targetid][pCarSlots], housetext, biztext, PlayerInfo[targetid][pStaffWarns], PlayerInfo[targetid][pLeaderWarns]);	
		if(PlayerInfo[targetid][pAdmin] >= 1 || PlayerInfo[targetid][pHelper] >= 1) SCMf(playerid, COLOR_PRINC, "Staff: {ffffff}Virtual World: %d | Interior: %d ", GetPlayerVirtualWorld(targetid), GetPlayerInterior(targetid));	
	}
}	
function SetPlayerToTeamColor(playerid) {
  	SetPlayerColor(playerid,COLOR_WHITE);
  	switch(PlayerInfo[playerid][pMember]) {
  		case 1: { SetPlayerColor(playerid, 0x0049D0FF); }
  		case 2: { SetPlayerColor(playerid, 0x005AFFFF); }
  		case 3: { SetPlayerColor(playerid, 0x00006AFF); }
  		case 4: { SetPlayerColor(playerid, 0x18EBD6C8); }
  		case 5: { SetPlayerColor(playerid, 0x40863CAA); }
  		case 6: { SetPlayerColor(playerid, 0xFFAE00C8); }
  		case 8: { SetPlayerColor(playerid, 0x0049D0FF); }
  		case 9: { SetPlayerColor(playerid, 0xEFC6FFFF); }
  		case 10: { SetPlayerColor(playerid, 0xBD1CDEC8); }
  		case 11: { SetPlayerColor(playerid, 0x7E3937FF); }
  		case 12: { SetPlayerColor(playerid, 0x00ff94FF); }
  		case 13: { SetPlayerColor(playerid, COLOR_YELLOW); }
  		case 14: { SetPlayerColor(playerid, 0xf86448FF); }
  		case 15: { SetPlayerColor(playerid, 0x82edb4FF); }
  		case 16: { SetPlayerColor(playerid, 0x4C991EFF); }
    }
    return 1; 
}
public OnGameModeExit() {
	new timers;
	gString[0] = (EOS);
	mysql_format(SQL, gString, 128, "UPDATE `users` SET `Status` = '0'");
	mysql_tquery(SQL, gString);
	mysql_close(SQL);
	while(timers < MAX_TIMERS) KillTimer(scriptTimers[timers]),timers++;
	return 1; 
}
function LoadBizz() {
    new locked[20];
	bussines = cache_num_rows();
	for(new i = 1; i <= bussines; i++) {
		gString[0] = (EOS);
        new b = i - 1;
		BizzInfo[i][bID]                            = cache_get_field_content_int(b, "ID");
        BizzInfo[i][bOwned]							= cache_get_field_content_int(b, "Owned");
        cache_get_field_content(b, "Owner", BizzInfo[i][bOwner], SQL, 130);
        cache_get_field_content(b, "Message", BizzInfo[i][bMessage], SQL, 130);
   	    BizzInfo[i][bEntranceX]                     = cache_get_field_content_float(b, "EntranceX");
    	BizzInfo[i][bEntranceY]                     = cache_get_field_content_float(b, "EntranceY");
        BizzInfo[i][bEntranceZ]                     = cache_get_field_content_float(b, "EntranceZ");
        BizzInfo[i][bExitX]                         = cache_get_field_content_float(b, "ExitX");
        BizzInfo[i][bExitY]                         = cache_get_field_content_float(b, "ExitY");
        BizzInfo[i][bExitZ]                         = cache_get_field_content_float(b, "ExitZ");
        BizzInfo[i][bLevelNeeded]                   = cache_get_field_content_int(b, "LevelNeeded");
        BizzInfo[i][bBuyPrice]                      = cache_get_field_content_int(b, "BuyPrice");
        BizzInfo[i][bEntranceCost]                  = cache_get_field_content_int(b, "EntranceCost");
        BizzInfo[i][bTill]                          = cache_get_field_content_int(b, "Till");
        BizzInfo[i][bLocked]                        = cache_get_field_content_int(b, "Locked");
        BizzInfo[i][bInterior]                      = cache_get_field_content_int(b, "Interior");
        BizzInfo[i][bVirtual]                       = cache_get_field_content_int(b, "Virtual");
		BizzInfo[i][bSbiz]							= cache_get_field_content_int(b, "Sbiz");
		BizzInfo[i][bType]							= cache_get_field_content_int(b, "Type");
		BizzInfo[i][bPrice]							= cache_get_field_content_int(b, "Prices");
		if(BizzInfo[i][bLocked] == 1) format(locked, sizeof(locked), "\n(locked)");
		if(BizzInfo[i][bOwned] == 0) {
			DestroyDynamic3DTextLabel(BizzLabel[i]);
			format(gString, 256,"{7E689B}%s \n{EEEEEE}Business {7E689B}#%d \n{7E689B}This Business is for sale(/buybusiness) ! \n {EEEEEE}Price: {7E689B}%s \n{EEEEEE}Level: {7E689B}%d %s",BizzInfo[i][bMessage],i,FormatNumber(BizzInfo[i][bBuyPrice]),BizzInfo[i][bLevelNeeded],locked);
			BizzLabel[i] = CreateDynamic3DTextLabel(gString, 0x0053CFD1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			CreateDynamicPickup(1239, 1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]);
			pickups++;
		}
		else if(BizzInfo[i][bOwned] == 1) {
			DestroyDynamic3DTextLabel(BizzLabel[i]);
			if(BizzInfo[i][bPrice] > 0) format(gString, 256,"{7E689B}%s \n{EEEEEE}Business {7E689B}#%d \n{EEEEEE}Owner: {7E689B}%s \n{EEEEEE}Fee: {7E689B}$%s \n{EEEEEE}Price: {7E689B}$%s %s",BizzInfo[i][bMessage],i,BizzInfo[i][bOwner],FormatNumber(BizzInfo[i][bEntranceCost]),FormatNumber(BizzInfo[i][bPrice]),locked);
			else format(gString, 256,"{7E689B}%s \n{EEEEEE}Business {7E689B}#%d \n{EEEEEE}Owner: {7E689B}%s \n{EEEEEE}Fee: {7E689B}$%s %s",BizzInfo[i][bMessage],i,BizzInfo[i][bOwner],FormatNumber(BizzInfo[i][bEntranceCost]),locked);
			BizzLabel[i] = CreateDynamic3DTextLabel(gString, 0x0068CFD1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			CreateDynamicPickup(1239, 1, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]);
			pickups++;
		}
		switch(BizzInfo[i][bType]) {
			case 1: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],52,0,-1,-1,-1,750.0);
			case 2: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],18,0,-1,-1,-1,750.0);
			case 3: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],49,0,-1,-1,-1,750.0);
			case 4: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],38,0,-1,-1,-1,750.0);
			case 5: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],25,0,-1,-1,-1,750.0);
			case 6: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],17,0,-1,-1,-1,750.0);
			case 7: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],10,0,-1,-1,-1,750.0);
			case 8: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],54,0,-1,-1,-1,750.0);
			case 9: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],29,0,-1,-1,-1,750.0);
			case 10: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],51,0,-1,-1,-1,750.0);
			case 11: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],45,0,-1,-1,-1,750.0);
			case 12: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],27,0,-1,-1,-1,750.0);
			case 13: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],63,0,-1,-1,-1,750.0);
			case 14: CreateDynamicMapIcon(BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ],14,0,-1,-1,-1,750.0);
		}
	}
	printf("[LOADING] %d businesses loaded.", bussines);
} 
function LoadTurfs() {
	new idx,Cache: ab = mysql_query(SQL, "SELECT * FROM `turfs`");
	for(new i; i < cache_get_row_count(); i++)
	{
		idx++;
		TurfInfo[idx][zID]							 	= cache_get_field_content_int(i, "ID");
	 	TurfInfo[idx][zOwned] 							= cache_get_field_content_int(i, "Owned");
	 	TurfInfo[idx][zMinX] 							= cache_get_field_content_float(i, "MinX");
	 	TurfInfo[idx][zMinY] 							= cache_get_field_content_float(i, "MinY");
	 	TurfInfo[idx][zMaxX] 							= cache_get_field_content_float(i, "MaxX");
	 	TurfInfo[idx][zMaxY] 							= cache_get_field_content_float(i, "MaxY");
		turfsss++;
	}
	cache_delete(ab);
	return 1; 
}
function LoadDynamicFactions() {
	factionss = cache_num_rows();
    for(new i = 1; i <= factionss; i++) {
    	gString[0] = (EOS);
		new f = i - 1;
		DynamicFactions[i][fID]                 = cache_get_field_content_int(f, "ID");
        cache_get_field_content(f, "Name", DynamicFactions[i][fName], SQL, 130);
		DynamicFactions[i][fcX]                 = cache_get_field_content_float(f, "X");
   	    DynamicFactions[i][fcY]                 = cache_get_field_content_float(f, "Y");
    	DynamicFactions[i][fcZ]                 = cache_get_field_content_float(f, "Z");
    	DynamicFactions[i][fceX]                = cache_get_field_content_float(f, "eX");
   	    DynamicFactions[i][fceY]                = cache_get_field_content_float(f, "eY");
    	DynamicFactions[i][fceZ]                = cache_get_field_content_float(f, "eZ");
    	DynamicFactions[i][fSafePos][0]			= cache_get_field_content_float(f, "SafePos1");
    	DynamicFactions[i][fSafePos][1]			= cache_get_field_content_float(f, "SafePos2");
    	DynamicFactions[i][fSafePos][2]			= cache_get_field_content_float(f, "SafePos3");
    	DynamicFactions[i][fMats]               = cache_get_field_content_int(f, "Mats");
    	DynamicFactions[i][fInterior]           = cache_get_field_content_int(f, "Interior");
    	DynamicFactions[i][fVirtual]            = cache_get_field_content_int(f, "Virtual");
    	DynamicFactions[i][fMapIcon]            = cache_get_field_content_int(f, "MapIcon");
    	DynamicFactions[i][fLocked]            	= cache_get_field_content_int(f, "Locked");
    	DynamicFactions[i][fDrugs]              = cache_get_field_content_int(f, "Drugs");
    	DynamicFactions[i][fBank]               = cache_get_field_content_int(f, "Bank");
    	DynamicFactions[i][fPickupIDD]          = cache_get_field_content_int(f, "PickupID");
        cache_get_field_content(f, "Anunt", DynamicFactions[i][fAnn], SQL, 130);
    	DynamicFactions[i][fWin]                = cache_get_field_content_int(f, "Win");
    	DynamicFactions[i][fLost]               = cache_get_field_content_int(f, "Lost");
    	DynamicFactions[i][fMaxMembers]         = cache_get_field_content_int(f, "MaxMembers");
		DynamicFactions[i][fMinLevel]         	= cache_get_field_content_int(f, "MinLevel");
    	DynamicFactions[i][fApplication]        = cache_get_field_content_int(f, "Application");
		cache_get_field_content(f, "Rank1", DynamicFactions[i][fRankName1], SQL, 130);
		cache_get_field_content(f, "Rank2", DynamicFactions[i][fRankName2], SQL, 130);
		cache_get_field_content(f, "Rank3", DynamicFactions[i][fRankName3], SQL, 130);
		cache_get_field_content(f, "Rank4", DynamicFactions[i][fRankName4], SQL, 130);
		cache_get_field_content(f, "Rank5", DynamicFactions[i][fRankName5], SQL, 130);
		cache_get_field_content(f, "Rank6", DynamicFactions[i][fRankName6], SQL, 130);
		cache_get_field_content(f, "Rank7", DynamicFactions[i][fRankName7], SQL, 130);
		switch(DynamicFactions[i][fLocked]) {
	    	case 0: format(gString, 300, "%s's HQ", DynamicFactions[i][fName]);
	    	case 1: format(gString, 300, "%s's HQ\n\n(locked)", DynamicFactions[i][fName]);
	    }
	   	DynamicFactions[i][fPickupID] = CreateDynamicPickup(DynamicFactions[i][fPickupIDD], 23, DynamicFactions[i][fceX], DynamicFactions[i][fceY], DynamicFactions[i][fceZ], 0, -1, -1, 10);
		DynamicFactions[i][fLabelID] = CreateDynamic3DTextLabel(gString, COLOR_PRINC, DynamicFactions[i][fceX], DynamicFactions[i][fceY], DynamicFactions[i][fceZ], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 25.0);
		if(DynamicFactions[i][fMapIcon] != 0) CreateDynamicMapIcon(DynamicFactions[i][fceX],DynamicFactions[i][fceY],DynamicFactions[i][fceZ],DynamicFactions[i][fMapIcon],0,-1,-1,-1,750.0); //Bank
		format(gString, 300, "%s\nGroup Safe", DynamicFactions[i][fName]);
		DynamicFactions[i][fSafePickupID] = CreateDynamicPickup(1274, 23, DynamicFactions[i][fSafePos][0], DynamicFactions[i][fSafePos][1], DynamicFactions[i][fSafePos][2], DynamicFactions[i][fVirtual], DynamicFactions[i][fInterior], -1, 50);
		DynamicFactions[i][fSafeLabelID] = CreateDynamic3DTextLabel(gString, COLOR_PRINC, DynamicFactions[i][fSafePos][0], DynamicFactions[i][fSafePos][1], DynamicFactions[i][fSafePos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DynamicFactions[i][fVirtual], DynamicFactions[i][fInterior], -1, 20.0);
	}
	printf("[LOADING] %d groups loaded.", factionss);
	return 1; 
}
function LoadStock() {
	stockss = cache_num_rows();
    for(new i = 1; i <= stockss; i++)
    {
		new s = i - 1;
		Stock[i][vID]                               = cache_get_field_content_int(s, "ID");
		Stock[i][vStock]                            = cache_get_field_content_int(s, "Stock");
		Stock[i][vPrice]                            = cache_get_field_content_int(s, "Price");
		Stock[i][vModel]                            = cache_get_field_content_int(s, "vid");
		Stock[i][vSpeed]                            = cache_get_field_content_int(s, "speed");
		cache_get_field_content(s, "Car", Stock[i][vName], SQL, 130);
	}
	printf("[LOADING] %d models loaded.", stockss);
}
function LoadAtms() {
	new atms = cache_num_rows();
	for(new i = 1; i <= atms; i++)
	{
		new s = i - 1;
		AtmInfo[i][fATMPos][0]						= cache_get_field_content_float(s, "atmPosX");
		AtmInfo[i][fATMPos][1]						= cache_get_field_content_float(s, "atmPosY");
		AtmInfo[i][fATMPos][2]						= cache_get_field_content_float(s, "atmPosZ");
		AtmInfo[i][fATMPosRot][0]					= cache_get_field_content_float(s, "atmPosRotX");
		AtmInfo[i][fATMPosRot][1]					= cache_get_field_content_float(s, "atmPosRotY");
		AtmInfo[i][fATMPosRot][2]					= cache_get_field_content_float(s, "atmPosRotZ");
		AtmInfo[i][rObjectId] = CreateDynamicObject(2618, AtmInfo[i][fATMPos][0], AtmInfo[i][fATMPos][1], AtmInfo[i][fATMPos][2], AtmInfo[i][fATMPosRot][0], AtmInfo[i][fATMPosRot][1], AtmInfo[i][fATMPosRot][2], -1, -1, -1, 500.0);
	}
}
function LoadUsers() {
	new players = cache_num_rows();
	printf("[LOADING] Players registered: %d",players);
}
function DespawnCar(playerid) {
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[playerid][pCarID][v] != 0) {
			if(strlen(CarVipName[playerid][v]) > 0)
			{
				if(vObject[PlayerInfo[playerid][pCarID][v]]) DestroyDynamicObject(vObject[PlayerInfo[playerid][pCarID][v]]);
				vObject[PlayerInfo[playerid][pCarID][v]] = 0;
			}

			for(new x; x < 5; x++)
			{
				if(souvenire_objects[PlayerInfo[playerid][pCarID][v]][x]) DestroyObject(souvenire_objects[PlayerInfo[playerid][pCarID][v]][x]);
				souvenire_objects[PlayerInfo[playerid][pCarID][v]][x] = 0;
			}			
			StopBlinkNeons(PlayerInfo[playerid][pCarID][v]);
			if(vObject[PlayerInfo[playerid][pCarID][v]]) DestroyDynamicObject(vObject[PlayerInfo[playerid][pCarID][v]]);			
			vObject[PlayerInfo[playerid][pCarID][v]]=0;
			DestroyVehicle(PlayerInfo[playerid][pCarID][v]);
			PlayerInfo[playerid][pCarID][v] = 0;
		}
	}
	return 1; 
}
timer ModPVehicle[1000](playerid, idcar) {
	LoadCar(playerid);
	for(new d; d < 17; d++) {
		if(CarMod[playerid][idcar][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][idcar],CarMod[playerid][idcar][d]);
	}
	ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarPaintJ][idcar]);
	return 1; 
}
function LoadCarID(playerid) {
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++) {
		PlayerInfo[playerid][pCarID][idd] = 0; PlayerInfo[playerid][pCar][idd] = -1; PlayerInfo[playerid][pCarModel][idd] = 0;
		PlayerInfo[playerid][pCarLocX][idd] = 0.0; PlayerInfo[playerid][pCarLocY][idd] = 0.0; PlayerInfo[playerid][pCarLocZ][idd] = 0.0;
		PlayerInfo[playerid][pCarAngle][idd] = 0.0; PlayerInfo[playerid][pCarBuyTime][idd] = 0; PlayerInfo[playerid][pCarColor1][idd] = 1;
		PlayerInfo[playerid][pCarColor2][idd] = 1; PlayerInfo[playerid][pCarLock][idd] = 0; PlayerInfo[playerid][pCarInsPrice][idd] = 0;
		PlayerInfo[playerid][pCarIns][idd] = 0; PlayerInfo[playerid][pCarKM][idd] = 0.0; PlayerInfo[playerid][pCarKMLast][idd] = 0;
		PlayerInfo[playerid][pCarHP][idd] = 0.0; PlayerInfo[playerid][pCarDamage1][idd] = 0; PlayerInfo[playerid][pCarDamage2][idd] = 0;
		PlayerInfo[playerid][pCarDamage3] = 0; PlayerInfo[playerid][pCarDamage4] = 0; PlayerInfo[playerid][pCarGas][idd] = 100; 
		PlayerInfo[playerid][pCarPaintJ][idd] = 6;
		PlayerInfo[playerid][pCarVIP][idd] = 0;
		PlayerInfo[playerid][pCarVipColor][idd]	= 0;	
		CarPlate[playerid][idd] = ""; CarOwner[playerid][idd] = "";
		CarVipName[playerid][idd] = "";
		for(new s; s < 17; s++) CarMod[playerid][idd][s] = 0;
	}
	gString[0] = (EOS);
	new count;
	format(gString, 256, "SELECT * FROM `cars` WHERE `Owner`='%s'", PlayerInfo[playerid][pNormalName]);
	new Cache: xd = mysql_query(SQL, gString);
	for(new i, j = cache_get_row_count (); i != j; ++i) {
		if(count < MAX_PERSONAL_VEHICLES) PlayerInfo[playerid][pCar][count] = cache_get_field_content_int(i, "ID");
		count++;
	}
	cache_delete(xd);
	LoadCar(playerid);
	return 1; 
}
function LoadCar(playerid) {
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++) {
		PlayerInfo[playerid][pCarModel][idd] = 0; PlayerInfo[playerid][pCarLocX][idd] = 0.0; PlayerInfo[playerid][pCarLocY][idd] = 0.0;
		PlayerInfo[playerid][pCarLocZ][idd] = 0.0; PlayerInfo[playerid][pCarAngle][idd] = 0.0; PlayerInfo[playerid][pCarBuyTime][idd] = 0;
		PlayerInfo[playerid][pCarColor1][idd] = 1; PlayerInfo[playerid][pCarColor2][idd] = 1; PlayerInfo[playerid][pCarLock][idd] = 0;
		PlayerInfo[playerid][pCarInsPrice][idd] = 0; PlayerInfo[playerid][pCarIns][idd] = 0; PlayerInfo[playerid][pCarKM][idd] = 0.0;
		PlayerInfo[playerid][pCarKMLast][idd] = 0; PlayerInfo[playerid][pCarHP][idd] = 0.0; PlayerInfo[playerid][pCarDamage1][idd] = 0; 
		PlayerInfo[playerid][pCarDamage2][idd] = 0; PlayerInfo[playerid][pCarDamage3][idd] = 0; PlayerInfo[playerid][pCarDamage4][idd] = 0;
		PlayerInfo[playerid][pCarGas][idd] = 100; PlayerInfo[playerid][pCarPaintJ][idd] = 6;
		PlayerInfo[playerid][pCarTranscendent][idd] = 0;
		CarPlate[playerid][idd] = ""; CarOwner[playerid][idd] = "";
		PlayerInfo[playerid][pCarVIP][idd] = 0; PlayerInfo[playerid][pCarVipColor][idd] = 0; CarVipName[playerid][idd] = "";		
		for(new s; s < 17; s++) CarMod[playerid][idd][s] = 0;
		PlayerInfo[playerid][pCarSouvenrire][idd] = 0;	
	}
	gString[0] = (EOS);
	new string[20];
	for(new idd; idd < MAX_PERSONAL_VEHICLES; idd++) {
		format(gString, 256, "SELECT * FROM `cars` WHERE `ID`='%d'", PlayerInfo[playerid][pCar][idd]);
		new Cache: result = mysql_query(SQL, gString);
		if(cache_get_row_count() > 0) {
			PlayerInfo[playerid][pCarModel][idd] 		= cache_get_field_content_int(0, "Model");
			PlayerInfo[playerid][pCarLocX][idd] 		= cache_get_field_content_float(0, "Locationx");
			PlayerInfo[playerid][pCarLocY][idd] 		= cache_get_field_content_float(0, "Locationy");
			PlayerInfo[playerid][pCarLocZ][idd] 		= cache_get_field_content_float(0, "Locationz");
			PlayerInfo[playerid][pCarAngle][idd] 		= cache_get_field_content_float(0, "Angle");
			PlayerInfo[playerid][pCarBuyTime][idd]		= cache_get_field_content_int(0, "BuyTime");
			PlayerInfo[playerid][pCarColor1][idd] 		= cache_get_field_content_int(0, "ColorOne");
			PlayerInfo[playerid][pCarColor2][idd] 		= cache_get_field_content_int(0, "ColorTwo");
			PlayerInfo[playerid][pCarLock][idd] 		= cache_get_field_content_int(0, "Lockk");
			PlayerInfo[playerid][pCarInsPrice][idd] 	= cache_get_field_content_int(0, "Inscarprice");
			PlayerInfo[playerid][pCarIns][idd] 			= cache_get_field_content_int(0, "Insurancecar");
			PlayerInfo[playerid][pCarKM][idd] 			= cache_get_field_content_float(0, "KM");
			PlayerInfo[playerid][pCarKMLast][idd]		= cache_get_field_content_int(0, "LastKM");
			PlayerInfo[playerid][pCarHP][idd] 			= cache_get_field_content_float(0, "HP");
			PlayerInfo[playerid][pCarDamage1][idd] 		= cache_get_field_content_int(0, "Damage1");
			PlayerInfo[playerid][pCarDamage2][idd] 		= cache_get_field_content_int(0, "Damage2");
			PlayerInfo[playerid][pCarDamage3][idd] 		= cache_get_field_content_int(0, "Damage3");
			PlayerInfo[playerid][pCarDamage4][idd] 		= cache_get_field_content_int(0, "Damage4");
			PlayerInfo[playerid][pCarGas][idd] 			= cache_get_field_content_int(0, "Gas");
			PlayerInfo[playerid][pCarPaintJ][idd] 		= cache_get_field_content_int(0, "PaintJ");
			PlayerInfo[playerid][pCarVIP][idd]			= cache_get_field_content_int(0, "VIP");
			PlayerInfo[playerid][pCarVipColor][idd]		= cache_get_field_content_int(0, "VipColor");	
			PlayerInfo[playerid][pCarRainbow][idd]		= cache_get_field_content_int(0, "RainBow");
			PlayerInfo[playerid][pCarSouvenrire][idd]	= cache_get_field_content_int(0, "Souvenire");
			PlayerInfo[playerid][pCarStage][idd] 		= cache_get_field_content_int(0, "Stage");
			PlayerInfo[playerid][pCarStageKM][idd] 		= cache_get_field_content_int(0, "StageKM");
			PlayerInfo[playerid][pCarTranscendent][idd]	= cache_get_field_content_int(0, "Transcendent");
			cache_get_field_content(0, "VipText", CarVipName[playerid][idd]);			
			cache_get_field_content(0, "License", CarPlate[playerid][idd], SQL, 30);
			cache_get_field_content(0, "Owner", CarOwner[playerid][idd], SQL, 50);
			for(new s=1; s <= 17; s++) {
				format(string, sizeof string, "mod%d",s);
				new ids = s-1;
				CarMod[playerid][idd][ids] = cache_get_field_content_int(0, string);
			}		
		}
		cache_delete(result);
	}
}

function LoadProperty() {
	housess = cache_num_rows();
	for(new i = 1; i <= housess; i++)
    {
		new h = i - 1;
		HouseInfo[i][hID]                           = cache_get_field_content_int(h, "ID");
   	    HouseInfo[i][hEntrancex]                    = cache_get_field_content_float(h, "Entrancex");
    	HouseInfo[i][hEntrancey]                    = cache_get_field_content_float(h, "Entrancey");
        HouseInfo[i][hEntrancez]                    = cache_get_field_content_float(h, "Entrancez");
        HouseInfo[i][hExitx]                        = cache_get_field_content_float(h, "Exitx");
        HouseInfo[i][hExity]                        = cache_get_field_content_float(h, "Exity");
        HouseInfo[i][hExitz]                        = cache_get_field_content_float(h, "Exitz");
        cache_get_field_content(h, "Owner", HouseInfo[i][hOwner], SQL, 130);
        cache_get_field_content(h, "Discription", HouseInfo[i][hDiscription], SQL, 130);
        HouseInfo[i][hValue]						= cache_get_field_content_int(h, "Value");
		HouseInfo[i][hPrice]						= cache_get_field_content_int(h, "Prices");
        HouseInfo[i][hInterior]                     = cache_get_field_content_int(h, "Interior");
		HouseInfo[i][hInteriorType]                 = cache_get_field_content_int(h, "InteriorType");
        HouseInfo[i][hLock]                         = cache_get_field_content_int(h, "Lockk");
        HouseInfo[i][hOwned]                        = cache_get_field_content_int(h, "Owned");
        HouseInfo[i][hRent]                         = cache_get_field_content_int(h, "Rent");
        HouseInfo[i][hRentabil]                     = cache_get_field_content_int(h, "Rentabil");
        HouseInfo[i][hTakings]                      = cache_get_field_content_int(h, "Takings");
        HouseInfo[i][hLevel]                        = cache_get_field_content_int(h, "Level");
        HouseInfo[i][hVirtual]                      = cache_get_field_content_int(h, "Virtual");
        HouseInfo[i][hGarage]                      	= cache_get_field_content_int(h, "Garage");
        HouseInfo[i][hGarageX]                      = cache_get_field_content_int(h, "GarageX");
        HouseInfo[i][hGarageY]                      = cache_get_field_content_int(h, "GarageY");
        HouseInfo[i][hGarageZ]                      = cache_get_field_content_int(h, "GarageZ");                
	}
	for(new i = 1; i <= housess; i++)
	{
		OnPropTextdrawUpdate(1, i);
	}
	printf("[LOADING] %d houses loaded.", housess);
	printf("[LOADING] %d turfs loaded.", turfsss);
}
function LoadVehicles() {
	Vehicless = cache_num_rows();
	new str[30];
	for(new i = 0; i < Vehicless; i++)
	{
		new c = i;
		VehicleInfo[i][vehModel]					= cache_get_field_content_int(c, "Model");
		VehicleInfo[i][vehColor1]					= cache_get_field_content_int(c, "Color1");
		VehicleInfo[i][vehColor2]					= cache_get_field_content_int(c, "Color2");
		VehicleInfo[i][vehGroup]					= cache_get_field_content_int(c, "Group");
		VehicleInfo[i][vehRank]						= cache_get_field_content_int(c, "Rank");
		VehicleInfo[i][vehRotation]					= cache_get_field_content_float(c, "Rotation");
		VehicleInfo[i][vehPosX]						= cache_get_field_content_float(c, "PosX");
		VehicleInfo[i][vehPosY]						= cache_get_field_content_float(c, "PosY");
		VehicleInfo[i][vehPosZ]						= cache_get_field_content_float(c, "PosZ");
		VehicleInfo[i][vehCarIDD]					= cache_get_field_content_int(c, "ID");
		if(VehicleInfo[i][vehColor1] < 0) VehicleInfo[i][vehColor1] = random(126);
		if(VehicleInfo[i][vehColor2] < 0) VehicleInfo[i][vehColor2] = random(126);
		if(VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 411 || VehicleInfo[i][vehGroup] == 2 && VehicleInfo[i][vehModel] == 541 || VehicleInfo[i][vehGroup] == 1 && VehicleInfo[i][vehModel] == 411 || VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 468 || VehicleInfo[i][vehGroup] == 8 && VehicleInfo[i][vehModel] == 470) {
			VehicleInfo[i][vehCarID] = CreateVehicle(VehicleInfo[i][vehModel], VehicleInfo[i][vehPosX], VehicleInfo[i][vehPosY], VehicleInfo[i][vehPosZ], VehicleInfo[i][vehRotation], VehicleInfo[i][vehColor1], VehicleInfo[i][vehColor2], 1800, 1);
		}
		else {
			VehicleInfo[i][vehCarID] = CreateVehicle(VehicleInfo[i][vehModel], VehicleInfo[i][vehPosX], VehicleInfo[i][vehPosY], VehicleInfo[i][vehPosZ], VehicleInfo[i][vehRotation], VehicleInfo[i][vehColor1], VehicleInfo[i][vehColor2], 1800);
		}
		if(VehicleInfo[i][vehGroup] == 0) {
			format(str,sizeof(str),"ETT %d",i+1);
			SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
		}
		else if(VehicleInfo[i][vehGroup] > 0) {
			if(VehicleInfo[i][vehGroup] > 9) {
				format(str,sizeof(str),"F%d %d",VehicleInfo[i][vehGroup],i+1);
				SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
			}
			else if(VehicleInfo[i][vehGroup] < 10) {
				format(str,sizeof(str),"F0%d %d",VehicleInfo[i][vehGroup],i+1);
				SetVehicleNumberPlate(VehicleInfo[i][vehCarID],str);
			}
		}
		if(VehicleInfo[i][vehGroup] == 8 || VehicleInfo[i][vehGroup] == 2 || VehicleInfo[i][vehGroup] == 1) {
			if(VehicleInfo[i][vehModel] == 411) {
				object = CreateObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AttachObjectToVehicle(object, VehicleInfo[i][vehCarID],  0.010000, -0.060000, 0.689999, 0.000000, 0.000000, 0.000000);
			}
		}		
		if(VehicleInfo[i][vehGroup] == 13 && VehicleInfo[i][vehModel] == 560) {
            object = CreateObject(19308, 0, 0, 0, 0, 0, 0);
            AttachObjectToVehicle(object, VehicleInfo[i][vehCarID], 0.000000, -0.189999, 0.919999, 0.000000, 0.000000, 0.000000);
        }		
	}
	printf("[LOADING] %d vehicles loaded.", Vehicless);
	return 1; 
}	
function LoadSystems() {
	mysql_tquery(SQL, "SELECT * FROM `factions`", "LoadDynamicFactions", "");
	mysql_tquery(SQL, "SELECT * FROM `vehicles`", "LoadVehicles", "");
	mysql_tquery(SQL, "SELECT * FROM `houses`", "LoadProperty", "");
	LoadTurfs();
	for(new i = 0; i < sizeof(TurfInfo); i++)
	{
     	Turfs[i] = GangZoneCreateEx(TurfInfo[i][zMinX],TurfInfo[i][zMinY],TurfInfo[i][zMaxX],TurfInfo[i][zMaxY],TurfInfo[i][zID],1.0);
	}
	mysql_tquery(SQL, "SELECT * FROM `clans` ORDER BY `clanID` ASC", "LoadClanVariables", "");
	mysql_tquery(SQL, "SELECT * FROM `clanzones` ORDER BY `zoneID` ASC", "LoadClanZonesVariables", "");
	mysql_tquery(SQL, "SELECT * FROM `clanvehicles` ORDER BY `clanVehicleID` ASC", "LoadClanVehicles", "");
	mysql_tquery(SQL, "SELECT * FROM `bizz`", "LoadBizz", "");
	mysql_tquery(SQL, "SELECT * FROM `stock`", "LoadStock", "");
	mysql_tquery(SQL, "SELECT * FROM `cars`", "LoadCar", "");
	mysql_tquery(SQL, "SELECT * FROM `users`", "LoadUsers", "");
	mysql_tquery(SQL, "SELECT * FROM `atms`", "LoadAtms", "");
	mysql_tquery(SQL, "UPDATE `users` SET `Status`='0'", "", "");
}
stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid) {
	if(IsPlayerConnected(playerid)) {
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi) return true;
	}
	return false;
}		
// ONGAMEMODEINIT
public OnGameModeInit() {
	//mysql_log(LOG_ALL);
	mysql_log(LOG_ERROR | LOG_WARNING);
	print("---------- SERVER START ----------");
	SQL = mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS);
	SetNameTagDrawDistance(30);
	EnableStuntBonusForAll(0);
	ShowPlayerMarkers(2);
	LimitPlayerMarkerRadius(5.0);

	AddStaticPickup(1239, 23, 2313.5137,-1347.6245,24.0227);
	Create3DTextLabel("{7E689B}amanet\n{ffffff}Press {7E689B}F {ffffff}to enter", -1, 2313.5137,-1347.6245,24.0227, 25.0, 0, 1);
	Create3DTextLabel("{7E689B}amanet\n{ffffff}Use {7E689B}/amanet {ffffff}to open dialog", -1, -2238.1331,128.5863,1035.4141, 25.0, 0, 1);

    //Create3DTextLabel("{ffffff}type\n{ff0000}/buysanta{ffffff} to buy a santa hat (-$20,000,000)", -1, 854.2154,-1652.1752,13.5547, 25.0, 0, 1);

    ruletacolors[0] = RL_RED; ruletacolors[2] = RL_RED; ruletacolors[4] = RL_GREEN; ruletacolors[6] = RL_RED; ruletacolors[8] = RL_RED;
    ruletacolors[10] = RL_RED; ruletacolors[12] = RL_RED; ruletacolors[14] = RL_RED; ruletacolors[16] = RL_RED; ruletacolors[18] = RL_RED;
    ruletacolors[20] = RL_RED; ruletacolors[22] = RL_RED; ruletacolors[24] = RL_RED; ruletacolors[26] = RL_RED; ruletacolors[28] = RL_RED;
    ruletacolors[30] = RL_RED; ruletacolors[32] = RL_RED; ruletacolors[34] = RL_RED; ruletacolors[36] = RL_RED;
   
    ruletacolors[1] = RL_BLACK; ruletacolors[3] = RL_BLACK; ruletacolors[5] = RL_BLACK; ruletacolors[7] = RL_BLACK; ruletacolors[9] = RL_BLACK;
    ruletacolors[11] = RL_BLACK; ruletacolors[13] = RL_BLACK; ruletacolors[15] = RL_BLACK; ruletacolors[17] = RL_BLACK; ruletacolors[19] = RL_GREEN;
    ruletacolors[21] = RL_BLACK; ruletacolors[23] = RL_BLACK; ruletacolors[25] = RL_BLACK; ruletacolors[27] = RL_BLACK; ruletacolors[29] = RL_BLACK;
    ruletacolors[31] = RL_BLACK; ruletacolors[33] = RL_BLACK; ruletacolors[35] = RL_BLACK; ruletacolors[37] = RL_BLACK;
   
    rltime = 15;
    rlstarted = 0;     
    bidhouseid = 0; bidbusinessid = 0; 
    maxbid = 0; lastplayerbid = 999; licitatiactiva = 0;	
	blockattack = 0;
	painttime = -1;
	ac_allowed = 1; ac_speedhack = 1; ac_onplayerdeath = 1; ac_trolltimer = 1; ac_bullets = 1;
	ac_crasher = 1; ac_fakedamage = 1; ac_teleport = 1; acdebugserver = 0; ac_fly = 1; 
	rent_sultan = 10; rent_nrg = 10; rent_super = 10;
	rent_sandking = 10; rent_flash = 10; rent_comet = 10; rent_mtb = 10;
	ac_trollvehicle = 1;
 	Iter_Clear(PlayerPaint);
	new hour,mins,sec;
	gettime(hour, mins, sec);
	SetWorldTime(hour);
	SendRconCommand("weather 18");
	for(new c=0;c<MAX_VEHICLES;c++) Gas[c] = GasMax;
	LoadTextdraws();
	LoadSystems();
	LoadAllDynamicObjects();
	LoadAllObjects();
	new Year, Month, Day, Hour, Minute, Second;
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	format(StartDate, sizeof(StartDate), "%02d/%02d/%d %02d:%02d:%02d", Day, Month, Year, Hour, Minute, Second);	
	SetGameModeText(SERVER_VERSION);
	SendRconCommand("mapname LS - LV");
	format(objstore, sizeof(objstore), "MOLE: I got nothing, check back with me later.");
	format(cbjstore, sizeof(cbjstore), "HQ: There is nothing in your Vicinity, Out.");
    Create3DTextLabel("Gate 1\nType /opengate 1 to open",0xFFFFFFFF,1767.5348,-1581.2784,1742.5024,5.0, 0, 1);
	Create3DTextLabel("Driving School!\n \nType /exam\nto start the test!",0xFFFF00D1,2200.7825,1393.9137,11.0625, 15.0, 0, 0);
	CreateStreamed3DTextLabel("LS DealerShip!\n\nPress <Y> to buy a car",0xFFFFFFFF,944.7363,-14.3670,1000.9297,15.0,0);
    Create3DTextLabel("{7E689B}Get Drugs\nType /getdrugs to get drugs",0xFFFFFFFF,316.1940,1117.5341,1083.8828,20.0, 0, 1);
	Create3DTextLabel("{7E689B}Materials Pickup!\n\nType /getmats as an Arms Dealer\nto collect materials",COLOR_WHITE,597.5396,-1246.9562,18.2512,20.0, 0, 1);
	Create3DTextLabel("{7E689B}Paramedic Roof | Press F",COLOR_WHITE,1584.8812,1797.7262,10.8280,20.0, 0, 1);
	Create3DTextLabel("{7E689B}Paramedic Roof | Press F",COLOR_WHITE,1585.8629,1793.7830,30.4688,20.0, 0, 1);
	Create3DTextLabel("{7E689B}FBI Roof | Press F",COLOR_WHITE,611.0679,-583.4949,18.2109,20.0, 0, 1);
	Create3DTextLabel("{7E689B}/garage",COLOR_WHITE,1292.7828,6.8377,1001.0078,20.0, 0, 1);
    Create3DTextLabel("{7E689B}LSPD | /elevator",0xFFFFFFFF,1564.8662,-1666.4962,28.3956,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}LVPD Roof | /elevator",0xFFFFFFFF,2339.3237,2461.2197,38.6837,20.0, 0, 1);
    Create3DTextLabel("{26C4EC}Restricted to faction(Las Venturas Police Department)\nLVPD Roof | /elevator",0xFFFFFFFF,2340.2810,2456.5625,14.9688,20.0, 0, 1);
	Create3DTextLabel("{26C4EC}Restricted to faction(Las Venturas Police Department)\nLVPD Staff HQ",COLOR_WHITE,242.4025,66.4760,1003.6406,20.0, 3, 1);
  	Create3DTextLabel("{7E689B}Restricted to faction(Los Santos Police Department)\nLSPD Roof | /elevator",0xFFFFFFFF,1568.5891,-1690.3262,5.8906,20.0, 0, 1);
    Create3DTextLabel("{7E689B}Los Santos Police Department\n Processing Entrance\n \n(/arrest)",0xFFFFFFFF,1526.3739,-1678.0635,5.8906,20.0, 0, 1);
 	Create3DTextLabel("Paintball !\n\nType /paint\nto enter the paintball arena!\n\n{7E689B}Entrance: $50.000",0xFFFF00CC,1412.0887,-1699.8264,13.5395,10.0, 0, 1);
	Create3DTextLabel("{7E689B}Restricted to faction(Los Santos Police Department)\nLSPD Staff HQ",COLOR_WHITE,242.4025,66.4760,1003.6406,20.0, 0, 1);
	Create3DTextLabel("{0068CF}CNN Market\npress <f> to enter", -1, 1102.4135,-1458.0602,15.7969,20.0,0,1);
	Create3DTextLabel("{0068CF}press <f> to exit", -1, 934.3943,8.3999,1000.9901,20.0,0,1);
	Create3DTextLabel("{7E689B}Place licenses\n{ffffff}Type /buylicenses", -1, 872.3621,-1645.5623,13.5469, 20.0, 0, 1);
	Create3DTextLabel("{7E689B}Type /buyparachute\n{ffffff}to buy (-100,000)", -1, -2231.9773,-1734.4346,480.8744, 20.0, 0, 1);
	Create3DTextLabel("{7E689B}Fence 1\nType /hit", -1, 285.2640,1877.5803,17.6406, 20.0, 1, 1); // escape
	Create3DTextLabel("{7E689B}Fence 2\nType /hit", -1, 213.7711,1799.1077,17.6406, 20.0, 1, 1); // escape
	Create3DTextLabel("{7E689B}Fence 3\nType /hit", -1, 177.6988,1940.9779,18.0813, 20.0, 1, 1); // escape
	Create3DTextLabel("{7E689B}Fence 4\nType /hit", -1, 97.0143,1888.0488,17.8985, 20.0, 1, 1); // escape
	Create3DTextLabel("{f6ff4d}Lowest Crate\n{ffffff}Type /buycrate", -1, 1236.8131,-869.3061,42.8828, 25.0, 0, 1);
	Create3DTextLabel("{4dff7a}Middle Crate\n{ffffff}Type /buycrate", -1, 1242.9139,-867.8486,42.8828, 25.0, 0, 1);
	Create3DTextLabel("{ff8d03}Millenium Crate\n{ffffff}Type /buycrate", -1, 1248.2958,-866.6432,42.8828, 25.0, 0, 1);
	Create3DTextLabel("{7E689B}Roll place\n{ffffff}Type /roll", -1, 1285.4689,-862.0477,43.0937, 25.0, 0);
	Create3DTextLabel("{ad0303}Magistrate Crate\n{ffffff}Type /buycrate", -1, 1254.3928,-865.2795,42.8828, 25.0, 0, 1);
	CreateStreamed3DTextLabel("{FFCC33}(Giftbox)\n{ffffff}Type {FFCC33}/giftinfo {ffffff}to see info\n{ffffff}Type {FFCC33}/getgift {ffffff}to open a giftbox", 0xFFFFFFFF,1266.8634,-887.7623,42.8828+0.25,8.0,0);
	Create3DTextLabel("{7E689B}Personal Station\n{ffffff}Type /fillveh", -1, 2043.3727, -69.1192, 3.0387, 25.0, 0);
	Create3DTextLabel("{7E689B}Repair PNS\n{ffffff}Use [/fix] to repair", -1, 2028.4213, -195.8341, 1.7757, 25.0, 0);
	Create3DTextLabel("{7E689B}Lucky Place\n{ffffff}Type /trylucky", -1, 884.3581,-1645.5508,13.5469, 25.0, 0);
	Create3DTextLabel("{7E689B}press <f>\n{ffffff}to enter", -1,258.2692,90.7536,1002.4453, 03.0, 0);
	Create3DTextLabel("{7E689B}press <f>\n{ffffff}to exit", -1,262.7982,90.8923,1000.8385, 03.0, 0);
	Create3DTextLabel("{7E689B}press <f>", -1,322.1614, 302.4355, 999.0797, 3.0, 0);
	Create3DTextLabel("{7E689B}press <f>", -1,270.3159, 80.5530, 1000.9152, 3.0, 0);
	Create3DTextLabel("{7E689B}press <f>", -1,1525.1204,-1683.4482,5.8906, 5.0, 0); 
	Create3DTextLabel("{7E689B}press <f>", -1,246.3885,88.0081,1003.6406, 5.0, 0);
	Create3DTextLabel("{ffffff}staff hq (locked)\npress f ", -1,1022.6699,-983.9812,42.7132, 5.0, 0);
	Create3DTextLabel("{7E689B}Type </sellcar> to sell", -1,338.1959,-1522.3083,33.2143, 5.0, 0);
	Create3DTextLabel("{7E689B}press <f> to enter", -1,327.7480,-1512.0653,36.0325, 5.0, 0);
	Create3DTextLabel("Type [/ad] to place an ad with your product! (-$5,000)", -1,361.8299,173.6462,1008.3828, 7.0, 0);
	Create3DTextLabel("{7E689B}Repair Car\n{ffffff}enter to repair the car", -1, 1024.9012,-1030.2419,32.0643, 25.0, 0);
	CreateDynamic3DTextLabel("{7E689B}Quests Place\n{ffffff}Use {7E689B}/getquest {ffffff}to get quest\nUse {7E689B}/myquest {ffffff}to view your quest", -1, 1329.0900,-1557.5757,13.5469, 20.0); //tutorialblanao
	CreateDynamic3DTextLabel("Stage Setup\nPress {FF0000}Y{FFFFFF} to setup", -1, 1791.0586,-2032.2661,15.4568, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1, -1, -1, -1, 100.0);
	CreateDynamic3DTextLabel("Stage Setup\nPress {FF0000}Y{FFFFFF} to setup", -1, 1796.7007,-2031.8474,15.4568, 20.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1, -1, -1, -1, 100.0);
	new actorid = CreateActor(103, 1742.9257,-1846.9408,13.5788,181.1492);
	SetActorInvulnerable(actorid);
	SetActorVirtualWorld(actorid, 1337);
	ApplyActorAnimation(actorid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
	Create3DTextLabel("{7E689B}Vorovskoy Mir", -1, 1742.9257+1.0,-1846.9408+1.0,13.5788+1.0, 20.0, 1337, 1);

	Actor1 = CreateActor(195, 884.3581,-1645.5508,13.5469,170.0125);
	SetActorVirtualWorld(Actor1, 0);
	SetActorInvulnerable(1, true);

	Actor1 = CreateActor(189, 872.3621,-1645.5623,13.5469,179.5379);
	SetActorVirtualWorld(Actor1, 0);
	SetActorInvulnerable(1, true);

	Actor1 = CreateActor(119, 359.7139,173.6045,1008.3893,268.1822);
	SetActorVirtualWorld(Actor1, 0);
	SetActorInvulnerable(1, true);

	Actor1 = CreateActor(24, 946.9576,-14.8122,1000.9297,83.4542);
	SetActorVirtualWorld(Actor1, 0);
	SetActorInvulnerable(1, true);

	Actor1 = CreateActor(3, 338.1959,-1522.3083,33.2143,240.8425);
	SetActorVirtualWorld(Actor1, 0);
	SetActorInvulnerable(1, true);

	Actor1 = CreateActor(126, -2231.9773,-1734.4346,480.8744,64.7512);
	SetActorVirtualWorld(Actor1, 0);
	SetActorInvulnerable(1, true);

    gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime) {
		SetWorldTime(wotime);
	}
    DisableInteriorEnterExits();
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
	for(new i; i < 6; i++) {
	}
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
	}
    ManualVehicleEngineAndLights();
	// Pickups
	AddStaticPickup(1239, 23, -2238.0801,128.5865,1035.4141);
	AddStaticPickup(1239, 23, 1557.5881,990.5818,10.8203);
	AddStaticPickup(1239, 23, 527.4523,-1285.5564,17.2422); // rentcar ls
	AddStaticPickup(1239, 23, 2115.4949,1395.0531,10.8203); // rentcar lv
	AddStaticPickup(1239, 23, 258.5805,90.8133,1002.4453); // LSPD1
	AddStaticPickup(1239, 23, 262.7647,90.8086,1001.0391); // LSPD2
	AddStaticPickup(1239, 23, 2115.4949,1395.0531,10.8203); // LSPD3
	AddStaticPickup(1239, 23, 322.2269,302.3588,999.1484); // LSPD4 
	AddStaticPickup(1239, 23, 246.3734,88.0090,1003.6406); // LSPD jos   
	AddStaticPickup(1239, 23, 269.9687,80.5510,1001.0391); 
	AddStaticPickup(1239, 23, 1525.1187,-1683.4827,5.8906);
	AddStaticPickup(1239, 23, 1102.4135,-1458.0602,15.7969);  
	AddStaticPickup(1239, 23, 390.7682,173.7686,1008.3828); 
	AddStaticPickup(1239, 23, 361.8299,173.6462,1008.3828);
	AddStaticPickup(1239, 23, 327.7480,-1512.0653,36.0325); // pickup intrare ds
	AddStaticPickup(1239, 23, 1236.8131,-869.3061,42.8828); //crate
	AddStaticPickup(1239, 23, 1242.9139,-867.8486,42.8828); //crate
	AddStaticPickup(1239, 23, 1248.2958,-866.6432,42.8828); //crate
	AddStaticPickup(1239, 23, 1254.3928,-865.2795,42.8828); //crate 
	AddStaticPickup(1239, 23, 1285.4689,-862.0477,43.0937); //roll
	AddStaticPickup(1318, 23, 1022.6699,-983.9812,42.7132); //staff hq afara
	AddStaticPickup(1318, 23, 140.2225,1365.9218,1083.8594); //staff hq interior


	Create3DTextLabel("{7E689B}Rent Vehicle\n\n{ffffff}Type /rentveh\nto rent a vehicle", -1, 2115.4949,1395.0531,10.8203, 20.0, 0, 1); // rent car lv
	Create3DTextLabel("{7E689B}Rent Vehicle\n\n{ffffff}Type /rentveh\nto rent a vehicle", -1, 527.4523,-1285.5564,17.2422, 20.0, 0, 1); // rent car ls

	AddStaticPickup(1242, 23, 1527.5,-12.1,1002.0); 					// binco armor
	AddStaticPickup(1239, 23, 2200.7825,1393.9137,11.0625); 		// Driving License	
	gslsenter1 = CreatePickup(1318, 23, 305.9341,-141.7895,1004.0547, -1);
	gslsenter2 = CreatePickup(1318, 23, 300.1486,-141.8312,1004.0625, -1);
	gslsenter3 = CreatePickup(1318, 23, 304.0917,-141.7523,1004.0625, -1);
	gslsenter4 = CreatePickup(1318, 23, 298.9318,-141.8459,1004.0547, -1);
	AddStaticPickup(1314, 23, 2282.1289,2425.7620,3.4692);				// Lvpd arrest	
	AddStaticPickup(1277, 23, 2562.1135,-1034.3384,69.8692); // startquest
	///AddStaticPickup(1254, 23, 1329.0900,-1557.5757,13.5469, -1); // quests 
	AddStaticPickup(1239, 23, 1769.7780,-1866.7313,13.5711); 			// buy licenses
	AddStaticPickup(1314, 23, 1526.3739,-1678.0635,5.8906);				// Lspd arrest
	AddStaticPickup(1239, 23, 1756.4181,-1577.8954,1742.5309);			// exit jail
	AddStaticPickup(1239, 23, 1762.0028,-1584.4185,1742.5264);			// mdc jail
	AddStaticPickup(1239, 23, 2770.4629,-1628.3237,12.1775); 			// MATSCOLLECT
	AddStaticPickup(1239, 23, 2065.4844,-1584.0730,13.4821); 			// BUYIRON
	AddStaticPickup(1239, 23, 5.7771,-3989.8794,1003.5266); 			// STATION LS BUY
	AddStaticPickup(1318, 23, 2139.2612,-1697.9432,15.0784); 			// CRACK HOUSE
	AddStaticPickup(1254, 23, 1412.0887,-1699.8264,13.5395);       	    // PAINTBALL LS
	CreateDynamicPickup(1247, 23, 242.4025,66.4760,1003.6406,-1,-1,-1,100.0); // LSPD STAFF HQ
	CreateDynamicPickup(1279, 23, 316.1940,1117.5341,1083.8828,-1,-1,-1,100.0);
	CreateDynamicPickup(1277, 23, 944.7222,-14.4644,1000.9297,-1,-1,-1,100.0);  // DS PiCKUP
	CreateDynamicPickup(1239, 23, 1564.8662,-1666.4962,28.3956,-1,-1,-1,100.0); // LSPD Roff(sus)
	CreateDynamicPickup(1239, 23, 1568.5825,-1690.2802,5.8906,-1,-1,-1,100.0); // LSPD Roff(jos)
	CreateDynamicPickup(1318, 23, 1584.8812,1797.7262,10.8280, -1, -1,-1,100.0); // PARAMEDIC ELEVATOR
	CreateDynamicPickup(1318, 23, 1585.8629,1793.7830,30.4688, -1, -1,-1,100.0);
	CreateDynamicPickup(1318, 23, 611.0679,-583.4949,18.2109, -1, -1,-1,100.0); // FBI ELEVATOR
	CreateDynamicPickup(1318, 23, 613.0522,-568.1258,26.1432, -1, -1,-1,100.0);
	CreateDynamicPickup(1239, 23, 2340.2810,2456.5625,14.9688,-1,-1,-1,100.0); // LVPD Roff(jos)
	CreateDynamicPickup(1239, 23, 2339.3237,2461.2197,38.6837,-1,-1,-1,100.0); // LVPD Roff(sus)	
    // MAPICON
    CreateDynamicMapIcon(328.3534,-1513.1687,36.0391,55,0,-1,-1,-1,750.0);	// BuyCar Los Santos
	CreateDynamicMapIcon(1510.3986,-1059.5723,25.0625,35,0,-1,-1,-1,750.0);	// Event Arena	

	SetTimer("betUpdate", 20000, 1);
	SetTimer("teamStart", 2000, 1);
	//Timer
	if (realtime)
	{
		new tmphour,
			tmpminute,
			tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		new worldt = tmphour;
		SetWorldTime(worldt);
	}
	//Y_Timers Load
	scriptTimers[0] = SetPlayerUnjail();
	scriptTimers[1] = TwoSecondsTimer();
	scriptTimers[2] = TenSecondsTimer();
	scriptTimers[3] = CheckGas();
	scriptTimers[4] = timer_ac();
	SendRconCommand("language RO / EN");
	return 1; 
}
function LoadAllObjects() {

	CreateDynamicObject(1368, 1680.96143, 1434.41333, 10.48581,   0.00000, 0.00000, 127.61999);
	CreateDynamicObject(1368, 1677.94080, 1438.63025, 10.48581,   0.00000, 0.00000, 127.61999);
	CreateDynamicObject(1368, 1677.91174, 1456.79749, 10.45077,   0.00000, 0.00000, 52.56003);
	CreateDynamicObject(1368, 1681.01465, 1460.79773, 10.45077,   0.00000, 0.00000, 52.56003);
	CreateDynamicObject(622, 1699.77759, 1505.16064, 9.19011,   0.00000, 0.00000, -141.77992);
	CreateDynamicObject(645, 1691.89355, 1474.31592, 9.12775,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 1694.20398, 1400.86194, 9.72410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 1690.16235, 1409.10315, 9.72410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1256, 1439.58728, 2616.61597, 10.94630,   0.00000, 0.00000, 90.12005);
	CreateDynamicObject(1256, 1427.40198, 2616.61792, 10.94630,   0.00000, 0.00000, 90.12005);
	CreateDynamicObject(3569, 1076.42322, 1885.95642, 12.11896,   0.00000, 0.00000, -180.00006);
	CreateDynamicObject(3569, 1082.89685, 1885.77661, 12.11896,   0.00000, 0.00000, -180.00006);
	CreateDynamicObject(3569, 1091.36011, 1886.12427, 12.11896,   0.00000, 0.00000, -180.00006);
	CreateDynamicObject(5244, 1057.33594, 1863.86914, 12.10090,   0.00000, 0.00000, -268.56046);
	CreateDynamicObject(3168, 1116.39880, 1848.27917, 9.71756,   0.00000, 0.00000, -75.18000);
	CreateDynamicObject(1280, 1100.52527, 1843.59937, 10.17339,   0.00000, 0.00000, -89.87997);
	CreateDynamicObject(1280, 1103.56116, 1843.54761, 10.17339,   0.00000, 0.00000, -89.87997);
	CreateDynamicObject(11745, 192.32211, 2618.49878, 16.42704,   0.00000, 0.00000, 67.08002);
	CreateDynamicObject(11745, -326.05371, 2216.08228, 42.87830,   2.52000, -12.72002, 2.22000);
	CreateDynamicObject(11745, -774.92212, 2425.32202, 156.23814,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11745, -221.96593, 1406.92798, 69.05543,   0.00000, 0.00000, -70.92001);
	CreateDynamicObject(11745, 247.06258, 1386.77979, 22.44649,   0.00000, 0.00000, 0.00000);



	//gratii ajail
	new gratia1, gratia2, gratia3, gratia4, gratia5, gratia6, gratia7, gratia8;
	gratia1 = CreateObject(19302, 228.28619, 112.66590, 999.23529,   0.00000, 0.00000, 180.48010);
	gratia2 = CreateObject(19302, 226.50360, 112.64810, 999.23529,   0.00000, 0.00000, 0.90020);
	gratia3 = CreateObject(19302, 222.62360, 112.64810, 999.23529,   0.00000, 0.00000, 359.64001);
	gratia4 = CreateObject(19302, 224.36360, 112.64810, 999.23529,   0.00000, 0.00000, 538.79919);
	gratia5 = CreateObject(19302, 220.38361, 112.64810, 999.23529,   0.00000, 0.00000, 539.69940);
	gratia6 = CreateObject(19302, 218.66360, 112.64810, 999.23529,   0.00000, 0.00000, 359.33963);
	gratia7 = CreateObject(19302, 216.44360, 112.64810, 999.23529,   0.00000, 0.00000, 538.73865);
	gratia8 = CreateObject(19302, 214.72360, 112.64810, 999.23529,   0.00000, 0.00000, 359.45889);
	SetObjectMaterial(gratia1, 0, 19302, "gratia1", "gratia1", 0xFFFFFFFF);
	SetObjectMaterial(gratia2, 0, 19302, "gratia2", "gratia2", 0xFFFFFFFF);
	SetObjectMaterial(gratia3, 0, 19302, "gratia3", "gratia3", 0xFFFFFFFF);
	SetObjectMaterial(gratia4, 0, 19302, "gratia4", "gratia4", 0xFFFFFFFF);
	SetObjectMaterial(gratia5, 0, 19302, "gratia5", "gratia5", 0xFFFFFFFF);
	SetObjectMaterial(gratia6, 0, 19302, "gratia6", "gratia6", 0xFFFFFFFF);
	SetObjectMaterial(gratia7, 0, 19302, "gratia7", "gratia7", 0xFFFFFFFF);
	SetObjectMaterial(gratia8, 0, 19302, "gratia8", "gratia8", 0xFFFFFFFF);	

	// autostrada
	new string1[64], string2[64];
    new highway1 = CreateDynamicObject(19980, 111.763733, -1689.266479, 8.317540, 0.000000, 0.000000, 104.040024);
    SetDynamicObjectMaterial(highway1, 513, 1380, "", "");
    new highwaytext1 = CreateDynamicObject(19327, 111.78800, -1689.26709, 10.95050,   0.00000, 0.00000, 104.04000);
    format(string1, sizeof(string1), "LS - SF\nHighway");
    SetDynamicObjectMaterialText(highwaytext1, 0, string1, OBJECT_MATERIAL_SIZE_256x128, "Arial", 20, 1, 0xFFFFFFFF, 0, 1);
 
    new highway2 = CreateDynamicObject(19980, -1754.833496, -595.210449, 15.396020, 0.000000, 0.000000, -172.380005);
    SetDynamicObjectMaterial(highway2, 513, 1380, "", "");
    new highwaytext2 = CreateDynamicObject(19327, -1754.83936, -595.17090, 17.98980,   0.02000, 0.00000, -172.38000);
    format(string2, sizeof(string2), "SF - LS\nHighway");
    SetDynamicObjectMaterialText(highwaytext2, 0, string2, OBJECT_MATERIAL_SIZE_256x128, "Arial", 20, 1, 0xFFFFFFFF, 0, 1);
    CreateObject(3330, -334.20941, -1377.76538, 23.31979,   8.00000, 0.00000, 52.55990);
    CreateObject(18788, -334.41669, -1376.67615, 34.82640,   -1.78000, -10.00000, 138.67990);
    CreateObject(18794, -304.61664, -1402.50012, 26.15117,   -1.79000, 0.00000, 138.67990);
    CreateObject(3330, -290.43976, -1415.34680, 15.04020,   0.00000, 0.00000, 52.55991);
    CreateObject(18788, -364.14639, -1350.68042, 38.27360,   -1.78000, 0.00000, 138.67990);
    CreateObject(3330, -367.15787, -1348.28748, 26.74817,   0.00000, 0.00000, 56.87993);
    CreateObject(18788, -274.53119, -1428.62695, 26.13460,   1.79000, 0.00000, -40.62000);
    CreateObject(18788, -394.01294, -1324.41467, 38.27360,   -1.78000, 0.00000, 138.67990);
    CreateObject(3330, -402.68106, -1317.51868, 27.21159,   0.00000, 0.00000, 48.71994);
    CreateObject(18788, -244.27969, -1454.56567, 26.13460,   1.79000, 0.00000, -40.62000);
    CreateObject(3330, -241.09752, -1457.53589, 15.04020,   0.00000, 0.00000, 52.55991);
    CreateObject(18794, -423.96481, -1298.09436, 38.28350,   -1.79000, 0.00000, 138.67990);
    CreateObject(18788, -213.92999, -1480.58789, 26.13460,   1.79000, 0.00000, -40.62000);
    CreateObject(3330, -438.00290, -1285.71545, 31.58980,   5.00000, 0.00000, 44.75990);
    CreateObject(3330, -198.39827, -1494.40808, 15.04020,   0.00000, 0.00000, 52.55991);
    CreateObject(18795, -453.48209, -1272.58081, 48.63330,   -1.70000, -15.00000, 138.67990);
    CreateObject(18788, -183.74805, -1506.46130, 26.13460,   1.79000, 0.00000, -40.62002);
    CreateObject(18788, -475.30289, -1239.98193, 55.53620,   2.38000, -5.00000, 124.03980);
    CreateObject(3330, -162.26913, -1527.17139, 15.04020,   0.00000, 0.00000, 42.95990);
    CreateObject(3330, -480.27203, -1231.83130, 44.87267,   0.00000, 0.00000, 29.99993);
    CreateObject(18795, -156.04240, -1533.25134, 26.13940,   1.79000, 0.00000, -48.00000);
    CreateObject(3330, -142.50220, -1559.28503, 14.60620,   0.00000, 0.00000, 28.61990);
    CreateObject(18795, -497.28821, -1206.90808, 57.25690,   2.38000, 0.00000, 123.42000);
    CreateObject(18788, -138.16110, -1569.00305, 24.94030,   1.79000, 3.00000, -64.08000);
    CreateObject(3330, -507.71597, -1173.92322, 44.87267,   0.00000, 0.00000, 13.25992);
    CreateObject(3330, -123.31890, -1600.19312, 9.05627,   10.00000, 0.00000, 27.41990);
    CreateObject(18788, -120.83070, -1604.32568, 19.77390,   1.79000, 12.00000, -64.08000);
    CreateObject(18795, -509.67001, -1168.90686, 57.04430,   2.38000, 0.00000, 107.52000);
    CreateObject(18794, -103.50640, -1639.57825, 10.43580,   -1.80000, 0.00000, 115.62000);
    CreateObject(18795, -511.99191, -1129.45264, 56.82430,   2.38000, 0.00000, 94.08000);
    CreateObject(3330, -101.21880, -1644.68579, 0.63180,   0.00000, 0.00000, 25.37991);
    CreateObject(3330, -503.86731, -1093.45605, 44.87267,   0.00000, 0.00000, -13.02008);
    CreateObject(18795, -504.49060, -1089.98889, 56.60430,   2.38000, 0.00000, 79.25990);
    CreateObject(3330, -74.01918, -1687.76147, -0.58910,   0.00000, 0.00000, 44.21995);
    CreateObject(18791, -72.13600, -1689.91858, 10.74559,   1.90000, 0.00000, -43.68000);
    CreateObject(18788, -487.51260, -1053.72534, 56.40510,   2.30000, 0.00000, 65.41990);
    CreateObject(3330, -476.05173, -1028.09509, 44.87267,   0.00000, 0.00000, -21.90007);
    CreateObject(18788, -470.90530, -1017.41278, 56.40510,   2.30000, 0.00000, 65.41990);
    CreateObject(3330, -37.13431, -1712.05688, -0.58910,   0.00000, 0.00000, 67.85996);
    CreateObject(18788, -454.37418, -981.30640, 56.40510,   2.30000, 0.00000, 65.41990);
    CreateObject(18791, -1.41800, -1721.80969, 10.76390,   1.90000, 0.00000, -4.86000);
    CreateObject(3330, -1.49137, -1721.03894, -0.58910,   0.00000, 0.00000, 93.77998);
    CreateObject(3330, -449.98868, -973.96863, 45.07695,   0.00000, 0.00000, 20.69987);
    CreateObject(3330, 39.51279, -1716.81836, -0.58910,   0.00000, 0.00000, 104.16000);
    CreateObject(18795, -437.65881, -944.92590, 56.19790,   -2.30000, 0.00000, -99.90000);
    CreateObject(18788, 56.99710, -1712.58374, 10.46340,   1.80000, 0.00000, 14.22000);
    CreateObject(3330, 77.59505, -1707.74402, -0.58910,   0.00000, 0.00000, 104.16003);
    CreateObject(18795, -430.78311, -905.47443, 55.98490,   -2.40000, 0.00000, -85.02000);
    CreateObject(18788, 95.58330, -1702.74780, 9.04150,   1.80000, 4.10000, 14.22000);
    CreateObject(19980, 111.76373, -1689.26648, 8.31754,   0.00000, 0.00000, 104.04002);
    CreateObject(19425, 114.05714, -1693.44031, 8.47100,   -40.00000, 1.40000, -74.94014);
    CreateObject(19425, 114.86170, -1696.63721, 8.37900,   -40.00000, 2.30000, -74.94010);
    CreateObject(19425, 115.63240, -1699.84314, 8.27900,   -40.00000, 2.30000, -74.94010);
    CreateObject(19425, 116.16390, -1702.04395, 8.20900,   -40.00000, 2.30000, -74.94010);
    CreateObject(3330, -433.03192, -881.16632, 45.07695,   0.00000, 0.00000, 5.87988);
    CreateObject(18788, -433.78320, -866.70422, 58.32513,   2.42000, -7.00000, 93.91990);
    CreateObject(18788, -436.40131, -827.06708, 60.74770,   2.42000, 0.00000, 94.03990);
    CreateObject(3330, -437.45209, -810.41772, 49.74304,   0.00000, 0.00000, 4.61987);
    CreateObject(18795, -439.45010, -787.29028, 60.51570,   -2.48900, -0.02000, -70.44000);
    CreateObject(18795, -452.85403, -749.54376, 60.27710,   -2.48900, -0.02000, -55.67998);
    CreateObject(3330, -458.60843, -741.96082, 49.74304,   0.00000, 0.00000, 30.53989);
    CreateObject(18795, -475.49261, -716.51611, 60.03830,   -2.48900, -0.02000, -40.62000);
    CreateObject(18795, -506.10141, -690.53558, 59.79390,   -2.48900, -0.02000, -25.14000);
    CreateObject(3330, -519.65051, -684.73749, 48.68742,   0.00000, 0.00000, 61.49994);
    CreateObject(18795, -542.37048, -673.42188, 59.56020,   -2.48900, -0.02000, -10.56000);
    CreateObject(18788, -580.14502, -664.53363, 59.57150,   2.42000, 0.00000, 164.23990);
    CreateObject(3330, -594.48566, -660.91925, 48.09739,   0.00000, 0.00000, 74.75993);
    CreateObject(18788, -618.37732, -653.74091, 59.57150,   2.42000, 0.00000, 164.23990);
    CreateObject(18788, -656.58197, -642.96838, 59.57150,   2.42000, 0.00000, 164.23990);
    CreateObject(3330, -669.38904, -639.87653, 47.99587,   0.00000, 0.00000, 74.75993);
    CreateObject(18788, -694.98462, -632.12341, 59.57150,   2.42000, 0.00000, 164.23990);
    CreateObject(3330, -717.90045, -625.37335, 47.99587,   0.00000, 0.00000, 74.75993);
    CreateObject(18788, -733.09534, -621.36206, 59.57150,   2.42000, 0.00000, 164.23990);
    CreateObject(3330, -760.94531, -613.06818, 47.99587,   0.00000, 0.00000, 72.11993);
    CreateObject(18795, -770.77332, -610.61292, 59.58900,   2.41000, 0.00000, -196.14011);
    CreateObject(18795, -805.44562, -590.35364, 59.16260,   -2.41000, 0.00000, -374.76001);
    CreateObject(3330, -817.74530, -587.91266, 47.33039,   0.00000, 0.00000, 72.11993);
    CreateObject(18795, -843.41467, -579.28082, 58.93250,   -2.43000, 0.00000, -362.87991);
    CreateObject(3330, -861.32062, -578.31201, 47.33039,   0.00000, 0.00000, 88.31990);
    CreateObject(18788, -883.11823, -577.27600, 58.93170,   2.42000, 0.00000, 177.13989);
    CreateObject(18788, -922.79437, -575.28949, 58.93170,   2.42000, 0.00000, 177.13989);
    CreateObject(3330, -928.14471, -575.14288, 47.33039,   0.00000, 0.00000, 88.31996);
    CreateObject(18788, -962.58618, -573.29041, 58.93170,   2.42000, 0.00000, 177.13989);
    CreateObject(1257, 261.02219, -1539.33704, 32.41950,   0.00000, 0.00000, -34.38000);
    CreateObject(1257, 378.06552, -1489.50562, 32.17630,   0.00000, 0.00000, 128.28003);
    CreateObject(970, 352.48499, -2050.70313, 7.29520,   0.00000, 0.00000, 0.00000);
    CreateObject(970, 382.19919, -2042.00671, 7.32180,   0.00000, 0.00000, 0.00000);
    CreateObject(970, 378.70398, -2045.08789, 7.32180,   0.00000, 0.00000, -91.98001);
    CreateObject(970, 378.51715, -2050.44434, 7.32180,   0.00000, 0.00000, -92.76000);
    CreateObject(18788, -1002.50153, -571.30060, 58.93170,   2.42000, 0.00000, 177.13989);
    CreateObject(3330, -1010.45459, -571.24030, 47.33039,   0.00000, 0.00000, 88.31996);
    CreateObject(19327, 0.00000, 0.00000, 0.00000,   0.00000, 0.00000, 0.00000);
    CreateObject(18788, -1041.81604, -570.06128, 58.93170,   2.42000, 0.00000, 179.17981);
    CreateObject(3330, -1075.16187, -570.83130, 47.14582,   0.00000, 0.00000, 97.79993);
    CreateObject(18795, -1081.64990, -570.87097, 58.71430,   -2.43000, 0.00000, -341.99951);
    CreateObject(18795, -1119.09692, -583.88770, 58.51730,   -2.43000, 0.00000, -324.83939);
    CreateObject(3330, -1135.21936, -595.27618, 46.88285,   0.00000, 0.00000, 111.36000);
    CreateObject(18788, -1151.76489, -606.78931, 58.50300,   2.35000, 0.00000, 214.87981);
    CreateObject(18788, -1184.46216, -629.58765, 58.50300,   2.35000, 0.00000, 214.87981);
    CreateObject(3330, -1212.66907, -650.19000, 47.14582,   0.00000, 0.00000, 125.03993);
    CreateObject(18795, -1217.25598, -652.70410, 58.29910,   -2.43000, 0.00000, -309.65900);
    CreateObject(18795, -1242.90039, -683.09930, 57.61910,   2.43000, 2.00000, -490.73901);
    CreateObject(18788, -1273.27112, -703.39764, 56.10917,   1.35000, 2.00000, 212.77989);
    CreateObject(18795, -1290.65198, -714.57855, 56.49889,   1.20000, -1.80000, -507.35941);
    CreateObject(3330, -1290.58411, -713.34747, 46.92437,   0.00000, 0.00000, 128.33994);
    CreateObject(18795, -1328.36279, -727.25146, 56.41837,   1.20000, 1.80000, -520.49933);
    CreateObject(3330, -1336.79126, -727.44995, 45.52198,   0.00000, 0.00000, 103.19995);
    CreateObject(18788, -1368.05676, -730.16376, 55.01079,   1.75000, 2.00000, 183.61971);
    CreateObject(18788, -1407.46814, -732.71344, 53.61487,   2.75000, 2.00000, 183.61971);
    CreateObject(3330, -1414.66711, -734.16925, 42.54232,   0.00000, 0.00000, 92.21994);
    CreateObject(18788, -1446.93750, -735.28394, 52.22329,   3.75000, 2.00000, 183.61971);
    CreateObject(18788, -1486.54736, -737.93170, 50.84765,   4.75000, 2.00000, 183.61971);
    CreateObject(3330, -1505.19373, -739.22632, 39.11148,   0.00000, 0.00000, 91.79997);
    CreateObject(18788, -1526.24756, -740.59216, 49.45855,   5.75000, 2.00000, 183.61971);
    CreateObject(18795, -1565.80884, -743.69092, 48.08665,   6.65000, 2.00000, -535.13928);
    CreateObject(3330, -1583.21704, -740.51080, 35.94190,   0.00000, 0.00000, 63.60002);
    CreateObject(18795, -1604.99463, -736.46680, 45.43750,   6.20000, 4.11000, -551.69891);
    CreateObject(18795, -1638.39209, -717.45013, 41.50610,   -7.02000, -4.50000, -739.21613);
    CreateObject(3330, -1643.94482, -716.33423, 30.04866,   0.00000, 0.00000, 65.69999);
    CreateObject(18795, -1674.92944, -704.01538, 36.34915,   7.16000, 10.56000, -563.17932);
    CreateObject(18795, -1706.64624, -681.25250, 28.24930,   5.26000, 11.60000, -575.49933);
    CreateObject(3330, -1708.05200, -677.39301, 15.79085,   0.00000, 0.00000, 49.86006);
    CreateObject(18795, -1731.39954, -650.89752, 20.44776,   2.26000, 9.80000, -592.49933);
    CreateObject(19425, -1738.36047, -593.89014, 15.74790,   -25.16000, -2.14000, 0.00000);
    CreateObject(19425, -1738.35144, -593.69464, 15.55490,   -65.16000, -1.14000, 0.00000);
    CreateObject(2000, -1739.00305, -592.59735, 14.01404,   0.00000, 0.00000, 0.00000);
    CreateObject(19425, -1740.63721, -593.90497, 15.67325,   -25.16000, -1.74000, 0.00000);
    CreateObject(19425, -1741.47131, -593.85840, 15.56876,   -25.16000, -1.14000, 0.00000);
    CreateObject(19425, -1743.76440, -593.91278, 15.57529,   -25.16000, -1.48000, 0.00000);
    CreateObject(18795, -1744.33667, -614.28772, 15.75846,   -1.36000, 3.44000, -613.83893);
    CreateObject(19425, -1746.94458, -593.98071, 15.51668,   -15.16000, -1.00000, 0.00000);
    CreateObject(19425, -1750.14331, -593.98334, 15.52615,   -15.16000, 1.00000, 0.00000);
    CreateObject(19425, -1751.19897, -593.99463, 15.51655,   -15.16000, 1.00000, 0.00000);
    CreateObject(19980, -1754.83350, -595.21045, 15.39602,   0.00000, 0.00000, -172.38000);
    CreateObject(790, -1160.58350, -888.41791, 123.23160,   0.00000, 0.00000, 0.00000);
    CreateObject(790, -1137.62646, -888.18732, 125.17080,   0.00000, 0.00000, 0.00000);
    CreateObject(790, -1100.44263, -889.76208, 129.31039,   0.00000, 0.00000, 0.00000);
    CreateObject(790, -1064.70947, -888.82861, 131.12450,   0.00000, 0.00000, 0.00000);

	CreateObject(790, -1738.06006, -889.78998, 79.58000,   3.14000, 0.00000, 2.42000);
	CreateObject(790, -1739.34998, -881.46002, 79.58000,   3.14000, 0.00000, 2.42000);
	CreateObject(790, -1739.34998, -881.46002, 79.58000,   3.14000, 0.00000, 2.42000);
	CreateObject(785, -1777.09998, -976.66998, 64.09000,   0.00000, 0.00000, 0.00000);
	CreateObject(4825, 3163.13989, -1600.69995, 0.76000,   0.00000, 0.00000, 179.10001);
	CreateObject(987, 3098.29004, -1643.53003, 3.22000,   0.00000, 0.00000, 90.12000);
	CreateObject(987, 3098.55005, -1631.68005, 3.19000,   0.00000, 0.00000, 90.12000);
	CreateObject(987, 3098.53003, -1619.72998, 3.15000,   0.00000, 0.00000, 90.12000);
	CreateObject(987, 3098.61011, -1580.16003, 3.32000,   0.00000, 0.00000, -90.72000);
	CreateObject(987, 3098.75000, -1568.23999, 3.37000,   0.00000, 0.00000, -90.72000);
	CreateObject(987, 3098.91992, -1556.31995, 3.36000,   0.00000, 0.00000, -90.72000);
	CreateObject(987, 3111.10010, -1556.87000, -0.15000,   0.00000, 0.00000, 178.08000);
	CreateObject(987, 3123.02002, -1556.94995, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3134.98999, -1557.05005, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3146.93994, -1557.16003, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3158.85010, -1557.22998, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3170.70996, -1557.31006, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3182.62988, -1557.52002, -0.15000,   0.00000, 0.00000, 179.03999);
	CreateObject(987, 3194.56006, -1557.72998, -0.15000,   0.00000, 0.00000, 179.03999);
	CreateObject(987, 3206.54004, -1557.92004, -0.15000,   0.00000, 0.00000, 179.03999);
	CreateObject(987, 3204.81006, -1569.68994, -0.15000,   0.00000, 0.00000, 89.28000);
	CreateObject(987, 3204.65991, -1581.60999, -0.15000,   0.00000, 0.00000, 89.28000);
	CreateObject(987, 3204.58008, -1587.57996, -0.15000,   0.00000, 0.00000, 89.28000);
	CreateObject(987, 3110.29004, -1643.63000, -0.59000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3122.16992, -1643.68994, -0.54000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3134.04004, -1643.81006, -0.56000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3145.95996, -1643.89001, -0.53000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3157.88989, -1643.95996, -0.53000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3169.83008, -1644.04004, -0.55000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3181.85010, -1644.16003, -0.56000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3193.79004, -1644.23999, -0.54000,   0.00000, 0.00000, 539.70001);
	CreateObject(987, 3205.70996, -1644.31006, -0.57000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3203.96997, -1644.17004, -0.34000,   0.00000, 0.00000, 89.28000);
	CreateObject(987, 3204.12988, -1632.27002, -0.40000,   0.00000, 0.00000, 89.28000);
	CreateObject(16117, 3134.62988, -1557.07996, -12.16000,   0.00000, 0.00000, 0.00000);
	CreateObject(16117, 3108.20996, -1567.34998, -11.94000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3125.54004, -1576.80005, -12.15000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3100.85010, -1624.59998, -12.20000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3125.60010, -1616.90002, -12.25000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3098.30005, -1612.35999, -12.18000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3147.01001, -1617.48999, -12.18000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3166.47998, -1615.06995, -11.94000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3146.96997, -1617.38000, -12.20000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3182.11011, -1618.57996, -11.94000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3185.72998, -1642.59998, -12.58000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3184.96997, -1603.44995, -12.17000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3184.97998, -1585.80005, -12.23000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3184.95996, -1603.43005, -12.16000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3198.97998, -1562.25000, -11.93000,   0.00000, 0.00000, 369.95999);
	CreateObject(16117, 3184.96997, -1603.44995, -12.17000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3179.17993, -1562.83997, -12.15000,   0.00000, 0.00000, 369.95999);
	CreateObject(16117, 3191.92993, -1561.83997, -11.93000,   0.00000, 0.00000, 369.95999);
	CreateObject(16117, 3104.97998, -1579.55005, -12.24000,   0.00000, 0.00000, 95.52000);
	CreateObject(16117, 3108.44995, -1571.83997, -12.23000,   0.00000, 0.00000, 95.52000);
	CreateObject(16117, 3089.40991, -1619.20996, -12.20000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3203.82007, -1550.47998, -12.52000,   0.00000, 0.00000, 369.95999);
	CreateObject(18807, 2999.23999, -1548.38000, 11.67000,   0.00000, 0.00000, 319.32001);
	CreateObject(18791, 3060.97998, -1593.56006, 2.91000,   0.00000, 0.00000, -20.70000);
	CreateObject(18788, 2936.26001, -1493.52002, 8.55000,   0.00000, -13.00000, 318.34000);
	CreateObject(18788, 2956.82007, -1511.73999, 15.34000,   0.00000, -17.00000, 319.00000);
	CreateObject(3268, 276.66000, 1955.77002, 16.63000,   3.14000, 0.00000, 0.00000);
	CreateObject(790, -1738.06006, -889.78998, 79.58000,   3.14000, 0.00000, 2.42000);
	CreateObject(790, -1739.34998, -881.46002, 79.58000,   3.14000, 0.00000, 2.42000);
	CreateObject(790, -1739.34998, -881.46002, 79.58000,   3.14000, 0.00000, 2.42000);
	CreateObject(785, -1777.09998, -976.66998, 64.09000,   0.00000, 0.00000, 0.00000);
	CreateObject(987, 3098.29004, -1643.53003, 3.22000,   0.00000, 0.00000, 90.12000);
	CreateObject(987, 3098.55005, -1631.68005, 3.19000,   0.00000, 0.00000, 90.12000);
	CreateObject(987, 3098.53003, -1619.72998, 3.15000,   0.00000, 0.00000, 90.12000);
	CreateObject(987, 3098.61011, -1580.16003, 3.32000,   0.00000, 0.00000, -90.72000);
	CreateObject(987, 3098.72998, -1568.26001, 3.37000,   0.00000, 0.00000, -90.72000);
	CreateObject(987, 3098.91992, -1556.31995, 3.36000,   0.00000, 0.00000, -90.72000);
	CreateObject(987, 3111.10010, -1556.87000, -0.15000,   0.00000, 0.00000, 178.08000);
	CreateObject(987, 3123.02002, -1556.94995, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3134.98999, -1557.05005, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3146.93994, -1557.16003, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3158.85010, -1557.22998, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3170.70996, -1557.31006, -0.15000,   0.00000, 0.00000, 179.64000);
	CreateObject(987, 3182.62988, -1557.52002, -0.15000,   0.00000, 0.00000, 179.03999);
	CreateObject(987, 3194.56006, -1557.72998, -0.15000,   0.00000, 0.00000, 179.03999);
	CreateObject(987, 3206.54004, -1557.92004, -0.15000,   0.00000, 0.00000, 179.03999);
	CreateObject(987, 3204.81006, -1569.68994, -0.15000,   0.00000, 0.00000, 89.28000);
	CreateObject(987, 3204.65991, -1581.60999, -0.15000,   0.00000, 0.00000, 89.28000);
	CreateObject(987, 3204.58008, -1587.57996, -0.15000,   0.00000, 0.00000, 89.28000);
	CreateObject(987, 3110.29004, -1643.63000, -0.59000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3122.16992, -1643.68994, -0.54000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3134.04004, -1643.81006, -0.56000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3145.95996, -1643.89001, -0.53000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3157.88989, -1643.95996, -0.53000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3169.83008, -1644.04004, -0.55000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3181.85010, -1644.16003, -0.56000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3193.79004, -1644.23999, -0.54000,   0.00000, 0.00000, 539.70001);
	CreateObject(987, 3205.70996, -1644.31006, -0.57000,   0.00000, 0.00000, 539.64001);
	CreateObject(987, 3203.96997, -1644.17004, -0.34000,   0.00000, 0.00000, 89.28000);
	CreateObject(987, 3204.12988, -1632.27002, -0.40000,   0.00000, 0.00000, 89.28000);
	CreateObject(4826, 3206.17993, -1601.42004, 12.81000,   0.00000, 0.00000, 179.10001);
	CreateObject(16117, 3134.62988, -1557.07996, -12.16000,   0.00000, 0.00000, 0.00000);
	CreateObject(16117, 3108.20996, -1567.34998, -11.94000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3125.54004, -1576.80005, -12.15000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3100.85010, -1624.59998, -12.20000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3125.60010, -1616.90002, -12.25000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3098.30005, -1612.35999, -12.18000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3147.01001, -1617.48999, -12.18000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3166.47998, -1615.06995, -11.94000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3146.96997, -1617.38000, -12.20000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3182.11011, -1618.57996, -11.94000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3185.72998, -1642.59998, -12.58000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3184.96997, -1603.44995, -12.17000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3184.97998, -1585.80005, -12.23000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3184.95996, -1603.43005, -12.16000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3198.97998, -1562.25000, -11.93000,   0.00000, 0.00000, 369.95999);
	CreateObject(16117, 3184.96997, -1603.44995, -12.17000,   0.00000, 0.00000, 238.32001);
	CreateObject(16117, 3179.17993, -1562.83997, -12.15000,   0.00000, 0.00000, 369.95999);
	CreateObject(16117, 3191.92993, -1561.83997, -11.93000,   0.00000, 0.00000, 369.95999);
	CreateObject(16117, 3104.97998, -1579.55005, -12.24000,   0.00000, 0.00000, 95.52000);
	CreateObject(16117, 3108.44995, -1571.83997, -12.23000,   0.00000, 0.00000, 95.52000);
	CreateObject(16117, 3089.40991, -1619.20996, -12.20000,   0.00000, 0.00000, 131.64000);
	CreateObject(16117, 3203.82007, -1550.47998, -12.52000,   0.00000, 0.00000, 369.95999);
	CreateObject(18807, 2999.23999, -1548.38000, 11.67000,   0.00000, 0.00000, 319.32001);
	CreateObject(18791, 3060.97998, -1593.56006, 2.91000,   0.00000, 0.00000, -20.70000);
	CreateObject(18788, 2936.26001, -1493.52002, 8.55000,   0.00000, -13.00000, 318.34000);
	CreateObject(18788, 2956.82007, -1511.73999, 15.34000,   0.00000, -17.00000, 319.00000);
	CreateObject(705, 3180.17993, -1588.39001, 3.25000,   0.00000, 0.00000, 0.00000);
	CreateObject(705, 3180.52002, -1612.98999, 3.25000,   0.00000, 0.00000, 0.00000);
	CreateObject(710, 3170.38843, -1568.52991, 3.24000,   0.00000, 0.00000, 0.00000);
	CreateObject(710, 3152.18091, -1568.85352, 3.24000,   0.00000, 0.06000, 0.00000);
	CreateObject(710, 3130.66919, -1569.21973, 3.24000,   0.00000, 0.00000, 0.00000);
	CreateObject(710, 3108.81372, -1568.45300, 3.24000,   0.00000, 0.00000, 0.00000);
	CreateObject(710, 3106.93799, -1631.73132, 3.24000,   0.00000, 0.00000, 0.00000);
	CreateObject(710, 3125.19751, -1631.50476, 3.24000,   0.00000, 0.00000, 0.00000);
	CreateObject(710, 3143.62524, -1631.67310, 3.24000,   0.00000, 0.00000, 0.00000);
	CreateObject(710, 3158.46631, -1631.57910, 3.24000,   0.00000, 0.00000, 0.00000);

	return 1; 
}
function LoadAllDynamicObjects() {

	//gratie bomb armed
	CreateDynamicObject(971, 1843.27356, -1855.32104, 12.03768,   0.00000, 0.00000, 90.40073);

	//casa plaja
	CreateDynamicObject(19551, 833.35675, -1324.76501, 12.33600,   -0.06000, -0.06000, 359.91479);
	CreateDynamicObject(19551, 708.42712, -1347.81445, 12.31770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6301, 717.48438, -1362.77344, 12.46171,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6324, 632.57813, -1443.09375, 13.22749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6301, 717.48566, -1362.78369, 12.42059,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 787.27783, -1342.31384, 12.19392,   0.00000, 0.00000, 89.91694);
	CreateDynamicObject(987, 787.00140, -1366.07300, 12.19392,   0.00000, 0.00000, 89.91694);
	CreateDynamicObject(987, 786.86786, -1378.04102, 12.19392,   0.00000, 0.00000, 89.91694);
	CreateDynamicObject(987, 775.14996, -1385.01599, 12.19392,   0.00000, 0.00000, 1.02801);
	CreateDynamicObject(987, 787.14355, -1384.98865, 12.19392,   0.00000, 0.00000, 89.91694);
	CreateDynamicObject(987, 763.18286, -1385.05042, 12.19392,   0.00000, 0.00000, 0.52400);
	CreateDynamicObject(987, 751.22333, -1384.90417, 12.19392,   0.00000, 0.00000, 359.92200);
	CreateDynamicObject(987, 703.45868, -1384.71375, 12.19392,   0.00000, 0.00000, 359.41794);
	CreateDynamicObject(987, 691.49988, -1384.70447, 12.19392,   0.00000, 0.00000, 359.92200);
	CreateDynamicObject(987, 679.52020, -1384.69617, 12.19392,   0.00000, 0.00000, 359.92200);
	CreateDynamicObject(987, 667.56055, -1384.66736, 12.19392,   0.00000, 0.00000, 359.92200);
	CreateDynamicObject(987, 655.59656, -1384.57837, 12.19392,   0.00000, 0.00000, 359.92200);
	CreateDynamicObject(987, 647.96704, -1372.85828, 12.19392,   0.00000, 0.00000, 269.58780);
	CreateDynamicObject(987, 647.49408, -1384.65674, 12.19392,   0.00000, 0.00000, 359.92200);
	CreateDynamicObject(987, 648.07861, -1360.93994, 12.19392,   0.00000, 0.00000, 269.99387);
	CreateDynamicObject(987, 648.06213, -1349.02649, 12.19392,   0.00000, 0.00000, 269.99387);
	CreateDynamicObject(987, 648.06439, -1337.12524, 12.19392,   0.00000, 0.00000, 269.99387);
	CreateDynamicObject(987, 659.76575, -1329.81140, 12.19390,   0.00000, 0.00000, 180.44115);
	CreateDynamicObject(987, 647.89288, -1329.62170, 12.19390,   0.00000, 0.00000, 269.99390);
	CreateDynamicObject(987, 671.68622, -1329.81287, 12.19390,   0.00000, 0.00000, 180.44115);
	CreateDynamicObject(987, 683.65015, -1329.69482, 12.19390,   0.00000, 0.00000, 180.44115);
	CreateDynamicObject(987, 695.60406, -1329.73474, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(987, 707.56549, -1329.83936, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(987, 719.50592, -1329.93054, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(987, 731.43237, -1330.01990, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(987, 743.37463, -1330.09241, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(987, 755.33673, -1330.12305, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(987, 767.32080, -1330.15051, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(987, 779.30188, -1330.29480, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(987, 787.05402, -1330.42932, 12.19390,   0.00000, 0.00000, 179.83513);
	CreateDynamicObject(8556, 732.06696, -1377.94946, 16.68324,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 707.50250, -1384.62463, 12.17712,   0.00000, 0.00000, 359.41794);
	CreateDynamicObject(987, 745.40222, -1384.85095, 12.19392,   0.00000, 0.00000, 359.92200);
	CreateDynamicObject(970, 728.79987, -1379.66992, 14.34625,   0.00000, 0.00000, 359.28275);
	CreateDynamicObject(970, 735.41107, -1379.75305, 13.52083,   0.00000, 0.00000, 359.28275);
	CreateDynamicObject(970, 735.41107, -1379.75305, 14.28561,   0.00000, 0.00000, 359.28275);
	CreateDynamicObject(968, 726.49078, -1379.51526, 12.90838,   5.82000, 13.20000, 185.57822);
	CreateDynamicObject(3498, 726.63220, -1379.64514, 12.29626,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 744.78906, -1381.31702, 12.75720,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.73602, -1377.19299, 12.75720,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.67493, -1373.05188, 13.53320,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.67493, -1373.05188, 12.75720,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.67493, -1373.05188, 14.33672,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.67493, -1373.05188, 15.08144,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.67493, -1373.05188, 15.82706,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.67493, -1373.05188, 16.63155,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.73602, -1377.19299, 13.53711,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.73602, -1377.19299, 14.33702,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.73602, -1377.19299, 15.09696,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.73602, -1377.19299, 15.87689,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.73602, -1377.19299, 16.67683,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.73602, -1377.19299, 17.41677,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.78906, -1381.31702, 13.53708,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.78906, -1381.31702, 14.31703,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.78906, -1381.31702, 15.05701,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.78906, -1381.31702, 15.79699,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.78906, -1381.31702, 16.59697,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 744.78906, -1381.31702, 17.32409,   0.00000, 0.00000, 90.59090);
	CreateDynamicObject(970, 719.34760, -1374.53467, 16.74735,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.51263, -1378.65820, 17.55655,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.34760, -1374.53467, 13.54234,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.34760, -1374.53467, 14.34434,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.34760, -1374.53467, 15.14635,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.34760, -1374.53467, 15.94735,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.34760, -1374.53467, 12.73934,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.68903, -1382.78027, 15.95753,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.51263, -1378.65820, 13.55553,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.51263, -1378.65820, 14.35653,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.51263, -1378.65820, 15.15654,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.51263, -1378.65820, 15.95654,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.51263, -1378.65820, 16.75654,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.51263, -1378.65820, 12.75153,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.68903, -1382.78027, 12.75153,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.68903, -1382.78027, 13.55553,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.68903, -1382.78027, 14.35752,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 719.68903, -1382.78027, 15.15753,   0.00000, 0.00000, 272.52600);
	CreateDynamicObject(970, 735.41107, -1379.75305, 12.73824,   0.00000, 0.00000, 359.28275);
	CreateDynamicObject(970, 728.79987, -1379.66992, 12.73824,   0.00000, 0.00000, 359.28275);
	CreateDynamicObject(970, 728.79987, -1379.66992, 13.54425,   0.00000, 0.00000, 359.28275);
	CreateDynamicObject(3498, 737.29248, -1379.78674, 12.29626,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 737.39099, -1379.80469, 12.90838,   5.82000, 13.20000, 0.00000);
	CreateDynamicObject(18784, 734.03790, -1375.07397, 10.16920,   0.00000, 0.00000, 269.89828);
	CreateDynamicObject(11490, 666.40839, -1357.92981, 10.97840,   0.00000, 0.00000, 90.00173);
	CreateDynamicObject(18784, 730.35535, -1375.05530, 10.16920,   0.00000, 0.00000, 269.89828);
	CreateDynamicObject(9833, 747.86383, -1380.33594, 14.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 715.98724, -1379.83374, 14.94043,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 735.84631, -1330.79297, 12.68593,   0.00000, 0.00000, 89.80053);
	CreateDynamicObject(1280, 718.13062, -1330.64307, 12.68593,   0.00000, 0.00000, 89.80053);
	CreateDynamicObject(1280, 723.93469, -1330.76001, 12.68593,   0.00000, 0.00000, 89.80053);
	CreateDynamicObject(1280, 729.94000, -1330.77539, 12.68593,   0.00000, 0.00000, 89.80053);
	CreateDynamicObject(11490, 771.40002, -1356.80530, 10.97840,   0.00000, 0.00000, 269.82507);
	CreateDynamicObject(1226, 695.54688, -1323.65625, 16.31250,   356.85840, 0.00000, -1.61443);
	CreateDynamicObject(1215, 669.05798, -1347.21948, 12.80057,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 669.06549, -1375.13696, 12.80057,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 669.09540, -1368.97522, 12.80057,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 670.21332, -1363.19092, 12.80057,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 670.11908, -1352.94360, 12.80057,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 768.72443, -1367.45410, 12.64883,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 768.74170, -1345.85449, 12.64883,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 767.70593, -1351.77197, 12.64883,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 767.55981, -1361.98499, 12.64883,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 785.82263, -1383.64673, 11.82406,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 650.17780, -1331.40881, 11.82406,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 649.71307, -1383.24780, 11.82406,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(645, 784.89954, -1332.39612, 11.82406,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18653, 743.92157, -1373.42688, 11.46813,   0.00000, 0.00000, 60.60058);
	CreateDynamicObject(18653, 719.92035, -1373.86462, 11.46813,   0.00000, 0.00000, 135.53734);
	CreateDynamicObject(14537, 704.00000, 3268.00000, -1337.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14537, 704.00000, 1306.00000, -1337.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 787.08478, -1354.14050, 12.19392,   0.00000, 0.00000, 89.91694);
	CreateDynamicObject(14537, 706.24603, -1337.20520, 14.34115,   0.00000, 0.00000, 0.00000);



	//obiecte craciun spawn
	//CreateDynamicObject(19076, 857.32086, -1659.53601, 12.58004,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19054, 857.26605, -1658.42883, 13.02731,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19054, 858.16003, -1659.51624, 13.02731,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19054, 856.42249, -1659.56421, 13.02731,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19054, 857.25171, -1660.71082, 13.02731,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(2115, 853.39941, -1652.73242, 12.45399,   0.00000, 0.00000, 89.92796);
	//CreateDynamicObject(19066, 853.77319, -1651.52234, 13.25513,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19066, 853.78949, -1653.02380, 13.25513,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19066, 853.78882, -1652.80359, 13.25513,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19066, 853.78613, -1652.58337, 13.25513,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19066, 853.78345, -1652.36316, 13.25513,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19066, 853.78101, -1652.16296, 13.25513,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19066, 853.77856, -1651.96277, 13.25513,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19066, 853.77612, -1651.76257, 13.25513,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19894, 853.12061, -1651.67078, 13.25524,   0.00000, 0.00000, 269.14581);
	//CreateDynamicObject(19894, 853.14795, -1652.95203, 13.25524,   0.00000, 0.00000, 269.14581);
	//CreateDynamicObject(19894, 853.13342, -1652.27136, 13.25524,   0.00000, 0.00000, 269.14581);
	//CreateDynamicObject(19632, 853.30011, -1651.57263, 12.51641,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19632, 853.34503, -1652.77625, 12.51641,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19632, 853.33002, -1652.37439, 12.51641,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19632, 853.31506, -1651.97351, 12.51641,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19059, 853.07532, -1652.98889, 15.92784,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19060, 853.14697, -1652.01294, 15.98214,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19061, 853.13428, -1651.03198, 15.90237,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19062, 852.85944, -1650.06055, 15.85620,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19063, 853.04352, -1649.14331, 15.85620,   0.00000, 0.00000, 0.00000);


	////brazi craciun globali
	//CreateDynamicObject(19076, 910.56183, -1625.72009, 12.54906,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 910.91693, -1420.57092, 12.37762,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 1129.09729, -1489.34546, 21.74823,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 1184.60681, -1338.49646, 12.64657,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 1517.35840, -1657.71863, 12.54831,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19054, 1516.35217, -1657.75671, 12.94932,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19054, 1517.37976, -1656.83313, 12.94932,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19054, 1518.53076, -1657.79590, 12.94932,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19054, 1517.38696, -1658.82654, 12.94932,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 1809.72156, -1895.97034, 12.57315,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 2227.94116, -1143.53699, 24.79546,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 2490.50415, -1668.48401, 12.34627,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 1032.56458, -311.83591, 72.98953,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 650.83752, -592.80780, 15.39404,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 2295.78491, 2405.60010, 9.81987,   0.00000, 0.00000, 0.00000);

	//casa crates
	/*CreateDynamicObject(987, 1217.24780, -1291.81726, 12.30110,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1228.94458, -1291.99207, 12.30110,   0.00000, 0.00000, 179.58980);
	CreateDynamicObject(987, 1244.90894, -1315.72034, 12.30110,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.85229, -1327.70776, 12.30110,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.81177, -1339.67920, 12.30110,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.89075, -1351.67065, 12.30110,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.94800, -1363.61169, 12.30110,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.91760, -1375.59985, 12.30110,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1245.00806, -1384.09192, 12.30110,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1216.88220, -1372.34021, 12.30110,   0.00000, 0.00000, 270.72574);
	CreateDynamicObject(987, 1216.75366, -1360.40747, 12.30110,   0.00000, 0.00000, 270.72574);
	CreateDynamicObject(987, 1216.75940, -1348.47815, 12.30110,   0.00000, 0.00000, 270.11966);
	CreateDynamicObject(987, 1216.80103, -1336.49402, 12.30110,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1216.84558, -1324.58459, 12.30110,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1216.91516, -1312.61719, 12.30110,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1217.17944, -1300.64172, 12.30110,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1244.90002, -1303.71790, 12.30110,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1245.00745, -1292.12915, 12.30110,   0.00000, 0.00000, 179.58980);
	CreateDynamicObject(987, 1233.03247, -1292.00562, 12.30110,   0.00000, 0.00000, 179.58980);
	CreateDynamicObject(970, 1242.41541, -1384.21289, 13.04677,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1238.27112, -1384.20642, 13.04677,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1218.97241, -1384.36975, 13.04677,   0.00000, 0.00000, 0.60200);
	CreateDynamicObject(3749, 1230.57092, -1382.16760, 17.45854,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1218.97241, -1384.36975, 13.89148,   0.00000, 0.00000, 0.60200);
	CreateDynamicObject(970, 1218.97241, -1384.36975, 14.76604,   0.00000, 0.00000, 0.60200);
	CreateDynamicObject(970, 1218.97241, -1384.36975, 15.62783,   0.00000, 0.00000, 0.60200);
	CreateDynamicObject(970, 1218.97241, -1384.36975, 16.44796,   0.00000, 0.00000, 0.60200);
	CreateDynamicObject(970, 1242.41541, -1384.21289, 13.86630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1242.41541, -1384.21289, 14.52108,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1242.41541, -1384.21289, 15.19837,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1242.41541, -1384.21289, 15.87649,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1242.41541, -1384.21289, 16.59598,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17070, 1233.59131, -1319.73511, 12.43024,   0.00000, 0.00000, 92.59364);
	CreateDynamicObject(1226, 1219.17493, -1373.40540, 15.86908,   0.00000, 0.00000, 178.28055);
	CreateDynamicObject(1226, 1241.51550, -1374.37170, 15.86908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1241.60681, -1368.57861, 15.86908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1241.85339, -1359.35999, 15.86908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1242.08899, -1346.77710, 15.86908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1241.64392, -1335.49902, 15.86908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1226, 1219.25159, -1334.84888, 15.86908,   0.00000, 0.00000, 178.28055);
	CreateDynamicObject(1226, 1219.16345, -1343.87830, 15.86908,   0.00000, 0.00000, 178.28055);
	CreateDynamicObject(1226, 1219.06921, -1358.42542, 15.86908,   0.00000, 0.00000, 178.28055);
	CreateDynamicObject(1214, 1243.95776, -1332.09167, 12.03238,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(1214, 1243.94128, -1308.51868, 12.03238,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(1214, 1243.96606, -1318.61060, 12.03238,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(1214, 1243.80225, -1325.52222, 12.03238,   0.00000, 0.00000, 0.20100);
	CreateDynamicObject(1281, 1220.93347, -1304.62305, 13.27593,   0.00000, 0.00000, 65.37701);
	CreateDynamicObject(3677, 1230.47363, -1301.10413, 18.37415,   0.00000, 0.00000, 268.85294);*/


	//casa crates 
	CreateDynamicObject(987, 1217.24780, -1291.81726, 11.61504,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1244.90894, -1315.72034, 11.49810,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.85229, -1327.70776, 11.59810,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.81177, -1339.67920, 11.49810,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.89075, -1351.67065, 11.48799,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.94800, -1363.61169, 11.37975,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1244.91760, -1375.59985, 11.27153,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1245.00806, -1384.09192, 11.17674,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1216.88220, -1372.34021, 11.59911,   0.00000, 0.00000, 270.72574);
	CreateDynamicObject(987, 1216.75366, -1360.40747, 11.62432,   0.00000, 0.00000, 270.72574);
	CreateDynamicObject(987, 1216.75940, -1348.47815, 11.68889,   0.00000, 0.00000, 270.11966);
	CreateDynamicObject(987, 1216.80103, -1336.49402, 11.66232,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1216.84558, -1324.58459, 11.62239,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1216.91516, -1312.61719, 11.62666,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1217.17944, -1300.64172, 11.74337,   0.00000, 0.00000, 269.81863);
	CreateDynamicObject(987, 1244.90002, -1303.71790, 11.59810,   0.00000, 0.00000, 89.91886);
	CreateDynamicObject(987, 1228.76306, -1292.09192, 11.56616,   0.00000, 0.00000, 179.58980);
	CreateDynamicObject(1226, 1241.52551, -1366.76978, 15.86908,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1220.23657, -1307.22900, 12.66403,   0.00000, 0.00000, 65.37701);
	CreateDynamicObject(3677, 1230.72168, -1303.13025, 17.16210,   0.00000, 0.00000, 270.46857);
	CreateDynamicObject(19543, 1237.67285, -1320.92517, 11.82338,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1237.92065, -1383.32947, 11.82338,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1222.93030, -1383.30151, 11.82338,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1252.87476, -1382.89832, 11.82338,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1252.43469, -1320.60522, 11.82338,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18784, 1235.73975, -1374.94299, 9.91015,   0.00000, 0.00000, 270.63290);
	CreateDynamicObject(18784, 1244.59314, -1299.75964, 9.91874,   0.12000, 0.36000, 89.23914);
	CreateDynamicObject(18784, 1224.73242, -1299.63000, 9.91874,   0.00000, 0.00000, 90.24492);
	CreateDynamicObject(987, 1245.00745, -1292.12915, 11.56616,   0.00000, 0.00000, 179.58980);
	CreateDynamicObject(987, 1233.13342, -1291.98743, 11.56616,   0.00000, 0.00000, 179.58980);
	CreateDynamicObject(8556, 1230.43665, -1364.80774, 15.92294,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8556, 1230.70032, -1377.52344, 16.12494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18784, 1225.83496, -1375.01672, 9.91015,   0.00000, 0.00000, 270.63290);
	CreateDynamicObject(970, 1233.44763, -1379.61023, 12.26513,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1243.07007, -1379.56628, 12.27144,   0.00000, 0.00000, 358.43723);
	CreateDynamicObject(970, 1233.44763, -1379.61023, 13.90676,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1233.44763, -1379.61023, 13.08304,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1243.07007, -1379.56628, 13.01095,   0.00000, 0.00000, 358.43723);
	CreateDynamicObject(970, 1243.07007, -1379.56628, 13.75402,   0.00000, 0.00000, 358.43723);
	CreateDynamicObject(3498, 1220.75952, -1378.33813, 13.42982,   -0.30000, 0.06000, 0.00000);
	CreateDynamicObject(968, 1225.78076, -1378.30298, 12.93830,   5.82000, 13.20000, 189.86360);
	CreateDynamicObject(970, 1228.00000, 870.00000, -1379.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1218.86865, -1378.35852, 12.27212,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1227.99976, -1378.47229, 13.05011,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1227.99976, -1378.47229, 13.86981,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1240.92102, -1379.37378, 13.42982,   -0.30000, 0.06000, 0.00000);
	CreateDynamicObject(968, 1235.46472, -1379.58545, 12.33429,   5.82000, 13.20000, 0.00000);
	CreateDynamicObject(970, 1227.99976, -1378.47229, 12.26763,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1218.86865, -1378.35852, 13.06849,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1218.86865, -1378.35852, 13.82735,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3498, 1225.96680, -1378.36804, 13.42982,   -0.30000, 0.06000, 0.00000);
	CreateDynamicObject(3498, 1235.27222, -1379.52075, 13.42982,   -0.30000, 0.06000, 0.00000);
	CreateDynamicObject(19543, 1222.69373, -1320.86401, 11.82338,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1244.30493, -1344.47961, 12.14042,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1244.25696, -1314.22095, 12.14042,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1244.10608, -1326.33484, 12.14042,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1297, 1217.80383, -1321.61877, 14.51965,   0.00000, 0.00000, 177.91969);
	CreateDynamicObject(1297, 1217.58167, -1348.50269, 14.51965,   0.00000, 0.00000, 177.91969);
	CreateDynamicObject(1297, 1217.45496, -1345.49988, 14.51965,   0.00000, 0.00000, 177.91969);
	CreateDynamicObject(1297, 1217.74194, -1324.62476, 14.51965,   0.00000, 0.00000, 177.91969);
	CreateDynamicObject(673, 1221.45117, -1329.55225, 11.49691,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1220.97546, -1337.90564, 11.49691,   0.00000, 0.00000, 0.00000);



	//crateuri
	CreateDynamicObject(970, 1269.66699, -913.90070, 42.34300,   0.00000, 0.00000, 9.17720);
	CreateDynamicObject(970, 1266.87317, -912.13727, 42.33190,   0.00000, 0.00000, 275.60751);
	CreateDynamicObject(970, 1266.46289, -908.01825, 42.33190,   0.00000, 0.00000, 275.60751);
	CreateDynamicObject(970, 1266.04102, -903.91809, 42.33190,   0.00000, 0.00000, 275.60751);
	CreateDynamicObject(970, 1265.63379, -899.81775, 42.33190,   0.00000, 0.00000, 275.60751);
	CreateDynamicObject(970, 1270.29626, -895.07813, 42.33190,   0.00000, 0.00000, 275.70752);
	CreateDynamicObject(970, 1265.25537, -895.69281, 42.33190,   0.00000, 0.00000, 275.60751);
	CreateDynamicObject(970, 1270.69470, -899.19946, 42.33190,   0.00000, 0.00000, 275.70752);
	CreateDynamicObject(970, 1271.10193, -903.29993, 42.33190,   0.00000, 0.00000, 275.70752);
	CreateDynamicObject(970, 1271.53149, -907.41815, 42.33190,   0.00000, 0.00000, 275.70752);
	CreateDynamicObject(970, 1271.95129, -911.45697, 42.33190,   0.00000, 0.00000, 275.70752);
	CreateDynamicObject(1232, 1264.94543, -894.68781, 42.48903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1270.55139, -894.19318, 42.48903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1271.63599, -906.10272, 42.48903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1266.19971, -907.39697, 42.48903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19054, 1266.80237, -886.82281, 42.48557,   0.00000, 0.00000, 5.80459);
	CreateDynamicObject(13757, 1250.80688, -833.03552, 63.39484,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1299.15381, -898.32202, 42.66430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1235.49109, -900.27252, 42.66430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1288.00256, -899.14734, 42.66430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1281.18408, -906.30084, 42.66430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1256.51367, -912.68689, 42.66430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1256.39294, -903.41302, 42.66430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1237.44531, -908.27942, 42.66430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1246.39795, -875.39825, 44.19710,   0.00000, 0.00000, 26.02214);
	CreateDynamicObject(3434, 1284.90710, -857.35547, 41.80195,   0.00000, 0.00000, 7.54900);
	CreateDynamicObject(3524, 1285.09460, -860.14618, 43.22094,   0.00000, 0.00000, 8.26095);
	CreateDynamicObject(19474, 1285.34521, -860.78735, 42.45045,   0.00000, 0.00000, 278.88571);
	CreateDynamicObject(1895, 1285.24414, -860.38367, 43.98919,   0.00000, 0.00000, 7.14285);
	CreateDynamicObject(1851, 1286.29248, -861.05768, 43.06693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1851, 1284.34204, -861.06793, 43.06693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1851, 1284.83716, -860.85663, 43.06693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1851, 1285.44861, -861.20367, 43.06693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1851, 1285.90015, -860.61591, 43.06693,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1270.02930, -891.51868, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1269.22351, -882.62561, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1264.74731, -892.07874, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1233.70020, -886.95428, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3861, 1236.49194, -867.60187, 42.72250,   0.00000, 0.00000, 12.41477);
	CreateDynamicObject(3861, 1253.85254, -863.62347, 42.72250,   0.00000, 0.00000, 12.43920);
	CreateDynamicObject(19124, 1255.71216, -864.46747, 41.88248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1235.05127, -869.20679, 41.88248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1235.34583, -887.27966, 42.28355,   0.00000, 0.00000, 97.19216);
	CreateDynamicObject(1280, 1298.89526, -880.02124, 42.28355,   0.00000, 0.00000, 95.97911);
	CreateDynamicObject(1280, 1256.71887, -884.48102, 42.28355,   0.00000, 0.00000, 97.19216);
	CreateDynamicObject(1280, 1251.70935, -885.05164, 42.28355,   0.00000, 0.00000, 97.19216);
	CreateDynamicObject(1280, 1246.57153, -885.80042, 42.28355,   0.00000, 0.00000, 97.19216);
	CreateDynamicObject(1280, 1240.77966, -886.49597, 42.28355,   0.00000, 0.00000, 97.19216);
	CreateDynamicObject(1328, 1259.56445, -884.23743, 42.29988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 1238.13708, -887.01514, 42.29988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 1243.68823, -886.27948, 42.29988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 1249.19421, -885.47302, 42.29988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 1254.19434, -884.86707, 42.29988,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1280.38806, -890.58447, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1254.08850, -884.13428, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1243.61890, -885.67883, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1262.25781, -883.88751, 42.28355,   0.00000, 0.00000, 95.97911);
	CreateDynamicObject(1280, 1270.76404, -883.00397, 42.28355,   0.00000, 0.00000, 95.97911);
	CreateDynamicObject(1280, 1277.15857, -882.37433, 42.28355,   0.00000, 0.00000, 95.97911);
	CreateDynamicObject(1280, 1283.41260, -881.76605, 42.28355,   0.00000, 0.00000, 95.97911);
	CreateDynamicObject(1280, 1288.45081, -881.19879, 42.28355,   0.00000, 0.00000, 95.97911);
	CreateDynamicObject(1280, 1293.48450, -880.63129, 42.28355,   0.00000, 0.00000, 95.97911);
	CreateDynamicObject(1328, 1296.16943, -880.39355, 42.28257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 1274.09302, -882.78522, 42.28257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 1280.33618, -882.04529, 42.28257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 1285.85266, -881.52429, 42.28257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 1290.85950, -880.97046, 42.28257,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3861, 1242.49365, -866.16595, 42.72250,   0.00000, 0.00000, 12.43920);
	CreateDynamicObject(3861, 1248.14526, -864.90131, 42.72250,   0.00000, 0.00000, 12.43920);
	CreateDynamicObject(19124, 1244.39856, -867.06842, 41.88248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1246.76917, -866.47284, 41.88248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1250.08154, -865.78619, 41.88248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1252.42822, -865.19318, 41.88248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1241.09680, -867.75592, 41.88248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1238.43652, -868.54303, 41.88248,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19893, 1249.30017, -865.12854, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1235.50610, -868.34088, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1236.33850, -868.45618, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1237.04980, -868.01129, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1237.62219, -868.15210, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1241.53064, -867.06042, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1242.38672, -867.03052, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1243.59399, -866.64117, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1247.07678, -865.67773, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(19893, 1248.16333, -865.79742, 42.36683,   0.00000, 0.00000, 11.94767);
	CreateDynamicObject(970, 1270.29626, -895.07813, 42.33190,   0.00000, 0.00000, 275.70752);
	CreateDynamicObject(970, 1262.88550, -892.25354, 42.33190,   0.00000, 0.00000, 5.75699);
	CreateDynamicObject(970, 1265.07776, -894.09198, 42.33190,   0.00000, 0.00000, 275.60751);
	CreateDynamicObject(970, 1270.11377, -893.41498, 42.33190,   0.00000, 0.00000, 274.69839);
	CreateDynamicObject(970, 1276.07703, -890.78693, 42.33190,   0.00000, 0.00000, 5.94117);
	CreateDynamicObject(970, 1280.16357, -890.34131, 42.33190,   0.00000, 0.00000, 5.94117);
	CreateDynamicObject(970, 1284.30420, -889.91168, 42.33190,   0.00000, 0.00000, 5.94117);
	CreateDynamicObject(970, 1288.43042, -889.46301, 42.33190,   0.00000, 0.00000, 5.94117);
	CreateDynamicObject(970, 1292.51782, -889.06641, 42.33190,   0.00000, 0.00000, 5.74017);
	CreateDynamicObject(970, 1296.62256, -888.68103, 42.33190,   0.00000, 0.00000, 5.74017);
	CreateDynamicObject(970, 1300.74500, -888.27368, 42.33190,   0.00000, 0.00000, 5.74017);
	CreateDynamicObject(970, 1301.87231, -879.36194, 42.33190,   0.00000, 0.00000, 5.74017);
	CreateDynamicObject(970, 1301.83923, -888.15533, 42.33190,   0.00000, 0.00000, 5.74017);
	CreateDynamicObject(970, 1297.77051, -879.77185, 42.33190,   0.00000, 0.00000, 5.74017);
	CreateDynamicObject(970, 1297.77051, -879.77185, 42.33190,   0.00000, 0.00000, 5.74017);
	CreateDynamicObject(970, 1293.63989, -880.18878, 42.34067,   0.00000, 0.00000, 5.81999);
	CreateDynamicObject(970, 1289.54041, -880.61536, 42.34067,   0.00000, 0.00000, 5.81999);
	CreateDynamicObject(970, 1277.16858, -881.85107, 42.34067,   0.00000, 0.00000, 6.55519);
	CreateDynamicObject(970, 1281.29626, -881.43103, 42.34067,   0.00000, 0.00000, 5.81999);
	CreateDynamicObject(970, 1281.29626, -881.43103, 42.34067,   0.00000, 0.00000, 5.81999);
	CreateDynamicObject(970, 1285.42114, -881.04297, 42.34067,   0.00000, 0.00000, 5.81999);
	CreateDynamicObject(970, 1273.06030, -882.32550, 42.34067,   0.00000, 0.00000, 6.55519);
	CreateDynamicObject(970, 1271.25635, -882.51172, 42.34067,   0.00000, 0.00000, 6.55519);
	CreateDynamicObject(3515, 1233.67847, -891.42590, 42.58065,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3515, 1300.46936, -884.29889, 42.58065,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1272.01074, -891.21918, 42.33190,   0.00000, 0.00000, 5.75699);
	CreateDynamicObject(970, 1258.78369, -892.66815, 42.33190,   0.00000, 0.00000, 5.75699);
	CreateDynamicObject(970, 1254.68994, -893.11548, 42.33190,   0.00000, 0.00000, 6.91367);
	CreateDynamicObject(970, 1250.57898, -893.61566, 42.33190,   0.00000, 0.00000, 6.91367);
	CreateDynamicObject(970, 1246.47205, -894.13519, 42.33190,   0.00000, 0.00000, 6.91367);
	CreateDynamicObject(970, 1242.36987, -894.67401, 42.33190,   0.00000, 0.00000, 6.91367);
	CreateDynamicObject(970, 1232.26990, -896.04205, 42.33190,   0.00000, 0.00000, 7.62272);
	CreateDynamicObject(970, 1238.23840, -895.23358, 42.33190,   0.00000, 0.00000, 7.62272);
	CreateDynamicObject(970, 1234.12488, -895.78119, 42.33190,   0.00000, 0.00000, 7.62272);
	CreateDynamicObject(970, 1261.95947, -883.51099, 42.32850,   0.00000, 0.00000, 5.72500);
	CreateDynamicObject(970, 1257.88171, -883.94318, 42.32850,   0.00000, 0.00000, 6.13104);
	CreateDynamicObject(970, 1249.69727, -884.96680, 42.32850,   0.00000, 0.00000, 7.04718);
	CreateDynamicObject(970, 1253.77307, -884.44269, 42.32850,   0.00000, 0.00000, 7.04718);
	CreateDynamicObject(970, 1245.60510, -885.49530, 42.32850,   0.00000, 0.00000, 7.04718);
	CreateDynamicObject(970, 1241.49500, -886.00745, 42.32850,   0.00000, 0.00000, 7.04718);
	CreateDynamicObject(970, 1237.41516, -886.52039, 42.32850,   0.00000, 0.00000, 7.55119);
	CreateDynamicObject(970, 1233.43445, -887.06146, 42.32850,   0.00000, 0.00000, 7.55119);
	CreateDynamicObject(970, 1230.43103, -887.46033, 42.32850,   0.00000, 0.00000, 7.55119);
	CreateDynamicObject(638, 1260.72107, -859.14166, 42.53909,   0.00000, 0.00000, 5.87119);
	CreateDynamicObject(638, 1269.29248, -881.01666, 42.53909,   0.00000, 0.00000, 5.87119);
	CreateDynamicObject(638, 1263.44836, -881.82434, 42.53909,   0.00000, 0.00000, 7.20159);
	CreateDynamicObject(638, 1266.76660, -857.85400, 42.53909,   0.00000, 0.00000, 5.87119);
	CreateDynamicObject(638, 1267.47534, -864.51978, 42.53909,   0.00000, 0.00000, 5.87119);
	CreateDynamicObject(638, 1261.60498, -865.86298, 42.53909,   0.00000, 0.00000, 5.87119);
	CreateDynamicObject(638, 1268.57007, -874.32166, 42.53909,   0.00000, 0.00000, 5.87119);
	CreateDynamicObject(638, 1262.68713, -875.12933, 42.53909,   0.00000, 0.00000, 7.20159);
	CreateDynamicObject(970, 1266.83960, -861.19598, 42.32580,   0.00000, 0.00000, 277.00803);
	CreateDynamicObject(970, 1261.44543, -862.45355, 42.32580,   0.00000, 0.00000, 277.00803);
	CreateDynamicObject(970, 1263.40564, -878.42902, 42.34660,   0.00000, 0.00000, 276.17700);
	CreateDynamicObject(970, 1268.62610, -877.66290, 42.34660,   0.00000, 0.00000, 276.17700);
	CreateDynamicObject(19124, 1263.84692, -883.16974, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1294.31628, -889.13507, 42.18542,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14540, -2650.60938, 1414.99219, 905.88281,   3.14159, 0.00000, 1.57080);
	CreateDynamicObject(14537, 1296.38916, -866.88776, 44.18364,   0.00000, 0.00000, 5.07439);
	CreateDynamicObject(19831, 1229.10657, -870.09277, 41.87930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1231.78345, -868.23035, 42.66233,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11686, 1228.30115, -878.73621, 41.72369,   0.00000, 0.00000, 99.00254);
	CreateDynamicObject(1805, 1228.93164, -876.96558, 42.08369,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1805, 1229.46313, -880.56183, 42.08369,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1266.43579, -887.45660, 44.19710,   0.00000, 0.00000, 26.02214);
	CreateDynamicObject(673, 1324.15625, -904.72656, 37.84375,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1278.56311, -898.87201, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1295.82996, -878.59827, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1295.11292, -889.93665, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1288.52417, -890.39734, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1280.98633, -891.22961, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1273.90320, -891.90369, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1273.87903, -900.23474, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1274.38025, -909.33795, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1281.21899, -908.41528, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1289.30444, -906.77380, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1297.01892, -905.83856, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1302.88086, -905.92383, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1292.99512, -899.99524, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1284.48206, -900.05725, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1302.22949, -889.16626, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1264.96143, -911.85370, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1263.78296, -902.33844, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1262.43689, -893.29272, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1253.23145, -894.50226, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1245.14197, -895.62366, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1235.92029, -896.89099, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1235.91638, -903.46405, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1236.87439, -910.95190, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1242.02576, -914.74408, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1248.50635, -914.01349, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1258.43970, -898.43451, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1259.78845, -908.09576, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1249.40308, -900.02692, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1253.33655, -907.11664, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1244.29590, -908.72363, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1242.85254, -901.33936, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1233.51538, -885.73584, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1243.14197, -884.35455, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1253.18945, -883.17645, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1261.90735, -882.09802, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1273.19507, -881.03998, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1281.24060, -880.45105, 39.34314,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(673, 1288.12073, -879.86096, 39.34314,   0.00000, 0.00000, 0.00000);


	//usa garage lspd
	CreateDynamicObject(1496, 1524.69470, -1684.27441, 5.17517,   0.00000, 0.00000, 89.62965);
	//cnn usi
	CreateDynamicObject(1536, 371.26492, 166.70726, 1007.38275,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 365.78156, 189.45308, 1007.36542,   0.00000, 0.00000, 0.10000);

	//usa ds
	CreateDynamicObject(1536, 326.99158, -1512.39941, 34.99791,   0.00000, 0.00000, 52.32665);

	//mapping interior ds
	CreateDynamicObject(19433, 947.84509, -6.98501, 1001.69110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19433, 947.83795, -10.14158, 1001.69110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19433, 947.83978, -8.56513, 1001.69110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19433, 947.83795, -10.14158, 1005.17719,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19433, 947.83978, -8.56513, 1005.15192,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19433, 947.84509, -6.98501, 1005.16724,   0.00000, 0.00000, 0.00000);


    // mapping jail
    CreateDynamicObject(19787, 268.88837, 92.83778, 1001.39539,   0.00000, 0.00000, 359.89999);
	CreateDynamicObject(2637, 268.89636, 92.53688, 1000.41541,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 263.02933, 85.88723, 1000.46747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2603, 263.01178, 81.34513, 1000.46747,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2115, 263.80008, 88.07872, 1000.03986,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2115, 263.80685, 83.41622, 1000.03986,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2628, 269.78934, 76.44548, 999.99481,   0.00000, 0.00000, 179.86667);
	CreateDynamicObject(2627, 267.95752, 76.42439, 1000.01013,   0.00000, 0.00000, 180.83563);
	CreateDynamicObject(2764, 264.74014, 77.81026, 1000.50555,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 262.91324, 76.88967, 999.87799,   0.00000, 0.00000, 90.91714);
	CreateDynamicObject(1582, 264.71921, 77.82551, 1000.90771,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19580, 264.73251, 77.82678, 1000.97754,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1669, 264.54425, 78.25473, 1001.04828,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1669, 264.65842, 77.40144, 1001.04828,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2267, 264.91913, 75.57567, 1001.83075,   0.00000, 0.00000, 180.35173);
	CreateDynamicObject(11360, 262.37555, 90.97644, 1000.92133,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 258.99908, 90.04439, 1001.37799,   0.00000, 0.00000, 90.39429);
	CreateDynamicObject(1569, 262.35510, 90.11275, 1000.02032,   0.00000, 0.00000, 89.99329);
	CreateDynamicObject(11360, 259.05881, 90.87863, 1001.94672,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 259.02664, 90.10442, 1001.37799,   0.00000, 0.00000, 90.39429);
	CreateDynamicObject(19173, 270.28766, 84.46752, 1001.66241,   0.00000, 0.00000, 89.98743);
	CreateDynamicObject(2610, 323.24008, 309.34335, 998.97656,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1738, 322.21094, 317.92188, 998.80469,   3.14159, 0.00000, 3.14159);
	CreateDynamicObject(1803, 327.65222, 302.39029, 997.95203,   0.00000, 0.00000, 90.32610);
	CreateDynamicObject(1803, 327.88095, 308.44025, 997.95227,   0.00000, 0.00000, 88.57084);
	CreateDynamicObject(1803, 327.65222, 302.39029, 999.44409,   0.00000, 0.00000, 90.32610);
	CreateDynamicObject(1803, 327.88095, 308.44025, 999.47296,   0.00000, 0.00000, 88.57084);
	CreateDynamicObject(1533, 322.95648, 301.94638, 998.05182,   0.00000, 0.00000, 180.28108);
	CreateDynamicObject(1533, 270.37057, 81.28413, 999.99097,   0.00000, 0.00000, 269.66177);

	//casa zaki
	CreateDynamicObject(19551, 2044.39722, -141.17131, 0.24072,   0.00000, 0.00000, 33.61428);
	CreateDynamicObject(19551, 2044.39722, -141.17131, 0.14131,   0.00000, 0.00000, 33.61428);
	CreateDynamicObject(19551, 2044.39722, -141.17131, 1.27129,   0.00000, 0.00000, 33.61428);
	CreateDynamicObject(19551, 2044.39722, -141.17131, 0.36729,   0.00000, 0.00000, 33.61428);
	CreateDynamicObject(19551, 2044.39722, -141.17131, 0.56829,   0.00000, 0.00000, 33.61428);
	CreateDynamicObject(19551, 2044.39722, -141.17131, 0.66829,   0.00000, 0.00000, 33.61428);
	CreateDynamicObject(19551, 2044.94128, -142.72049, 1.33762,   0.00000, 0.00000, 33.61428);
	CreateDynamicObject(19551, 2044.39722, -141.17131, 1.07029,   0.00000, 0.00000, 33.61428);
	CreateDynamicObject(3033, 2103.75537, -112.84831, 1.08287,   0.00000, 0.00000, 215.21832);
	CreateDynamicObject(3033, 2106.99731, -122.50019, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2110.06787, -127.13490, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2113.13452, -131.74866, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2116.22388, -136.39607, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2119.32104, -141.04863, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2122.41187, -145.68826, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2125.51733, -150.33560, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2128.70605, -160.15674, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2129.47339, -156.28893, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2128.62256, -155.00528, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2124.07959, -163.23911, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2119.40845, -166.33180, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2114.75415, -169.41402, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2110.09546, -172.51765, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2105.42334, -175.60716, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2100.78125, -178.71123, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2096.09277, -181.81169, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2091.45850, -184.92654, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2086.81763, -188.02789, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2082.13306, -191.09904, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2077.48389, -194.18941, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2072.83813, -197.29027, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2068.21143, -200.37328, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2063.56812, -203.46829, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2058.90771, -206.57416, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2054.25562, -209.65764, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2049.58862, -212.75897, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2044.94067, -215.85240, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2040.27991, -218.95808, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2035.61389, -222.01828, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2030.97424, -225.09770, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2029.24695, -226.23940, 1.08726,   0.00000, 0.00000, 213.73872);
	CreateDynamicObject(3033, 2025.36487, -225.39949, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 2022.26306, -220.73543, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 2019.15771, -216.07697, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 2016.05469, -211.41483, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 2012.98108, -206.78050, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 2009.89185, -202.13052, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 2006.80798, -197.45262, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 2003.71497, -192.80319, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 2000.63354, -188.16670, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1997.54077, -183.51939, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1994.44202, -178.87466, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1991.37061, -174.23636, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1988.29688, -169.62592, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1985.19885, -165.03378, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1982.12769, -160.37256, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1979.02734, -155.72452, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1975.96338, -151.05229, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1972.86023, -146.40872, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1969.77026, -141.73773, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1966.67053, -137.06979, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1963.59082, -132.43600, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1960.48352, -127.79348, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1960.20361, -122.07827, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 1959.28711, -125.96877, 1.08726,   0.00000, 0.00000, 123.67509);
	CreateDynamicObject(3033, 1964.85803, -118.98226, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 1969.52893, -115.89834, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 1974.18848, -112.80965, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 1978.80493, -109.73984, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 1983.45691, -106.68169, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 1988.08069, -103.59049, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 1992.71460, -100.51598, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 1997.35535, -97.41376, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2001.97949, -94.32264, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2006.59766, -91.25923, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2011.22803, -88.13185, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2015.88428, -85.07091, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2020.52527, -82.00390, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2025.19885, -78.91371, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2029.84387, -75.81875, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2034.39612, -72.76543, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2039.06494, -69.70315, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2043.73926, -66.62106, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2048.37500, -63.51645, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2053.01147, -60.41218, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2057.66431, -57.29374, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2063.41724, -56.87709, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2059.55933, -56.07995, 0.98423,   0.00000, 0.00000, 33.69350);
	CreateDynamicObject(3033, 2066.49170, -61.53190, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2069.56714, -66.18674, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2072.66431, -70.80907, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2075.74194, -75.44231, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2078.84058, -80.10740, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2081.92627, -84.75582, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2085.02979, -89.39331, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2088.11841, -94.04169, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2091.19702, -98.67482, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2094.26807, -103.36381, 0.98423,   0.06000, -0.06000, 303.63336);
	CreateDynamicObject(3033, 2097.36865, -108.01933, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2100.28687, -112.77496, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(3033, 2100.80737, -113.19756, 0.98423,   0.00000, 0.00000, 303.63336);
	CreateDynamicObject(11490, 2007.19312, -164.64767, 0.17021,   0.00000, 0.00000, 122.77863);
	CreateDynamicObject(18850, 2066.37744, -171.24042, -10.85662,   0.00000, 0.00000, 304.38074);
	CreateDynamicObject(18850, 2096.51196, -150.47006, -10.85662,   0.00000, 0.00000, 304.38074);
	CreateDynamicObject(3749, 2095.37891, -109.04970, 6.49787,   0.00000, 0.00000, 302.91034);
	CreateDynamicObject(987, 2115.25928, -136.07408, 1.33319,   0.00000, 0.00000, 123.41042);
	CreateDynamicObject(987, 2122.02686, -145.98322, 1.33319,   0.00000, 0.00000, 124.32655);
	CreateDynamicObject(987, 2128.81665, -155.80669, 1.33319,   0.00000, 0.00000, 124.32655);
	CreateDynamicObject(987, 2120.50391, -165.09256, 1.33319,   0.00000, 0.00000, 34.07781);
	CreateDynamicObject(987, 2130.44360, -158.37492, 1.33319,   0.00000, 0.00000, 124.32655);
	CreateDynamicObject(987, 2110.67725, -171.80867, 1.33319,   0.00000, 0.00000, 34.07781);
	CreateDynamicObject(987, 2100.79053, -178.50339, 1.33319,   0.00000, 0.00000, 34.07781);
	CreateDynamicObject(987, 2090.74268, -185.13148, 1.33319,   0.00000, 0.00000, 33.99664);
	CreateDynamicObject(987, 2080.79053, -191.65515, 1.33319,   0.00000, 0.00000, 33.59464);
	CreateDynamicObject(987, 2070.86377, -198.26576, 1.33319,   0.00000, 0.00000, 33.59464);
	CreateDynamicObject(987, 2060.85938, -204.87543, 1.33319,   0.00000, 0.00000, 33.59464);
	CreateDynamicObject(987, 2050.97974, -211.48634, 1.33319,   0.00000, 0.00000, 33.59464);
	CreateDynamicObject(987, 2041.00183, -218.10425, 1.33319,   0.00000, 0.00000, 33.59464);
	CreateDynamicObject(987, 2031.04834, -224.73883, 1.33319,   0.00000, 0.00000, 33.59464);
	CreateDynamicObject(987, 2020.67175, -217.44392, 1.33319,   0.00000, 0.00000, 303.09821);
	CreateDynamicObject(987, 2027.04382, -227.41988, 1.33319,   0.00000, 0.00000, 33.59464);
	CreateDynamicObject(987, 2014.13416, -207.45169, 1.33319,   0.00000, 0.00000, 303.09821);
	CreateDynamicObject(987, 2007.57471, -197.45305, 1.33319,   0.00000, 0.00000, 303.09821);
	CreateDynamicObject(987, 2000.74231, -187.50987, 1.33319,   0.00000, 0.00000, 303.70428);
	CreateDynamicObject(987, 1989.11108, -170.18135, 1.33319,   0.00000, 0.00000, 303.70428);
	CreateDynamicObject(987, 1980.95728, -157.65967, 1.33319,   0.00000, 0.00000, 303.70428);
	CreateDynamicObject(987, 1974.26843, -147.70732, 1.33319,   0.00000, 0.00000, 303.70428);
	CreateDynamicObject(987, 1967.56982, -137.81367, 1.33319,   0.00000, 0.00000, 303.70428);
	CreateDynamicObject(987, 1960.91223, -127.90418, 1.33319,   0.00000, 0.00000, 303.70428);
	CreateDynamicObject(987, 1968.11011, -117.00095, 1.33319,   0.00000, 0.00000, 214.36392);
	CreateDynamicObject(987, 1958.13318, -123.71844, 1.33319,   0.00000, 0.00000, 303.70428);
	CreateDynamicObject(987, 1978.24072, -110.62175, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 1988.20715, -104.03445, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 2008.15930, -90.85210, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 2018.10547, -84.20748, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 2028.07813, -77.59804, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 2038.04517, -71.03751, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 2048.01904, -64.43498, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 2057.98730, -57.78726, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 2068.94897, -65.57139, 1.33319,   0.00000, 0.00000, 124.12363);
	CreateDynamicObject(987, 2062.02368, -55.13611, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(987, 2075.60522, -75.46412, 1.33319,   0.00000, 0.00000, 124.12363);
	CreateDynamicObject(987, 2082.19287, -85.45558, 1.33319,   0.00000, 0.00000, 123.71760);
	CreateDynamicObject(987, 2088.80420, -95.44013, 1.33319,   0.00000, 0.00000, 123.71760);
	CreateDynamicObject(987, 2091.45166, -99.50224, 1.33319,   0.00000, 0.00000, 123.71760);
	CreateDynamicObject(3279, 2061.68213, -61.72057, 0.96243,   0.00000, 0.00000, 307.95154);
	CreateDynamicObject(3279, 2124.54492, -158.58401, 1.32085,   0.00000, 0.00000, 219.97037);
	CreateDynamicObject(3279, 2027.84753, -221.58322, 1.01968,   0.00000, 0.00000, 126.54221);
	CreateDynamicObject(3279, 1964.33411, -124.36347, 1.01968,   0.00000, 0.00000, 32.23982);
	CreateDynamicObject(9833, 2081.90869, -162.76857, 4.19383,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8614, 1986.85986, -169.27928, 0.18527,   0.00000, 0.00000, 213.09830);
	CreateDynamicObject(19447, 2043.32410, -68.74262, 3.06571,   0.00000, 0.00000, 303.41449);
	CreateDynamicObject(3287, 2037.60681, -73.44131, 5.86735,   0.00000, 0.00000, 305.64096);
	CreateDynamicObject(3465, 2040.27771, -71.14445, 3.03866,   0.00000, 0.00000, 302.88531);
	CreateDynamicObject(3465, 2043.37268, -69.11922, 3.03866,   0.00000, 0.00000, 302.88531);
	CreateDynamicObject(3465, 2046.38330, -67.16172, 3.03866,   0.00000, 0.00000, 302.88531);
	CreateDynamicObject(11494, 2021.25806, -94.49833, 1.36350,   0.00000, 0.00000, 348.23071);
	CreateDynamicObject(11494, 2009.83826, -101.11771, 1.36350,   0.00000, 0.00000, 348.23071);
	CreateDynamicObject(2957, 2006.39514, -97.25665, 2.32034,   0.00000, 0.00000, 34.38107);
	CreateDynamicObject(2957, 1996.42249, -103.60507, 2.32034,   0.00000, 0.00000, 34.38107);
	CreateDynamicObject(2957, 2007.45215, -96.55405, 2.32034,   0.00000, 0.00000, 34.38107);
	CreateDynamicObject(2957, 2017.81543, -90.66063, 2.32034,   0.00000, 0.00000, 34.38107);
	CreateDynamicObject(2957, 2018.85156, -89.96120, 2.32034,   0.00000, 0.00000, 34.38107);
	CreateDynamicObject(2957, 1995.35730, -104.28937, 2.32034,   0.00000, 0.00000, 34.38107);
	CreateDynamicObject(987, 1998.22791, -97.53951, 1.33319,   0.00000, 0.00000, 213.33955);
	CreateDynamicObject(19544, 2106.68213, -101.96761, 1.45681,   0.90000, 0.42000, 303.84326);
	CreateDynamicObject(3033, 2103.89795, -117.85415, 1.15033,   0.00000, 0.00000, 303.65347);
	CreateDynamicObject(3033, 2108.30688, -109.63111, 1.12469,   0.90000, 0.30000, 215.00513);
	CreateDynamicObject(3033, 2112.83447, -106.35262, 1.17749,   0.00000, 0.00000, 214.60312);
	CreateDynamicObject(3033, 2117.37305, -103.09011, 1.30729,   0.18000, 0.60000, 214.72699);
	CreateDynamicObject(3033, 2121.99121, -99.94516, 1.35322,   0.00000, 0.00000, 214.09911);
	CreateDynamicObject(3033, 2126.64209, -96.79218, 1.46337,   0.00000, 0.00000, 214.09911);
	CreateDynamicObject(3033, 2131.28906, -93.66949, 1.54545,   0.00000, 0.00000, 214.09911);
	CreateDynamicObject(3033, 2096.40674, -100.17922, 1.13093,   0.00000, 0.00000, 212.56880);
	CreateDynamicObject(3033, 2101.12598, -97.16182, 1.24356,   0.00000, 0.00000, 212.56880);
	CreateDynamicObject(3033, 2105.74072, -94.22553, 1.32090,   0.00000, 0.00000, 212.56880);
	CreateDynamicObject(3033, 2110.45386, -91.19892, 1.39748,   0.00000, 0.00000, 212.56880);
	CreateDynamicObject(3033, 2092.50659, -102.73901, 1.12487,   0.00000, 0.00000, 212.56880);
	CreateDynamicObject(3033, 2115.19409, -88.22530, 1.47785,   0.00000, 0.00000, 212.56880);
	CreateDynamicObject(3033, 2119.88428, -85.21574, 1.52411,   0.00000, 0.00000, 212.56880);
	CreateDynamicObject(3033, 2124.57739, -82.20516, 1.59065,   0.00000, 0.00000, 212.56880);
	CreateDynamicObject(2008, 2006.59998, -160.46652, 1.66035,   0.00000, 0.00000, 33.82262);
	CreateDynamicObject(2008, 2013.34619, -165.42856, 1.66035,   0.00000, 0.00000, 214.73961);
	CreateDynamicObject(1723, 2008.57983, -159.10843, 1.66165,   0.00000, 0.00000, 33.56604);
	CreateDynamicObject(1729, 2007.71094, -161.12289, 1.61836,   0.00000, 0.00000, 175.95068);
	CreateDynamicObject(1729, 2012.25977, -164.76112, 1.61836,   0.00000, 0.00000, 2.69735);
	CreateDynamicObject(1641, 1999.92798, -171.85495, 1.48076,   0.00000, 0.00000, 302.39813);
	CreateDynamicObject(1641, 1998.40466, -169.61002, 1.48076,   0.00000, 0.00000, 302.39813);
	CreateDynamicObject(1646, 1999.08838, -170.72488, 1.56189,   0.00000, 0.00000, 302.33905);
	CreateDynamicObject(1641, 1999.92798, -171.85495, 1.48076,   0.00000, 0.00000, 302.39813);
	CreateDynamicObject(1641, 1997.16003, -167.48358, 1.48076,   0.00000, 0.00000, 302.39813);
	CreateDynamicObject(1641, 1995.64197, -165.17622, 1.48076,   0.00000, 0.00000, 302.39813);
	CreateDynamicObject(1646, 1996.32642, -166.38863, 1.56189,   0.00000, 0.00000, 302.33905);
	CreateDynamicObject(987, 1994.16040, -177.63084, 1.33319,   0.00000, 0.00000, 303.70428);
	CreateDynamicObject(11494, 1998.81543, -108.13540, 1.36350,   0.00000, 0.00000, 348.23071);
	CreateDynamicObject(633, 2011.24829, -166.39169, 2.70841,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(633, 2014.69275, -164.20313, 2.70841,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(987, 2108.75635, -126.10743, 1.33319,   0.00000, 0.00000, 123.41042);
	CreateDynamicObject(3264, 2128.52148, -79.58292, 1.97461,   0.00000, 0.00000, 124.17794);
	CreateDynamicObject(19967, 2095.12769, -102.55003, 1.43486,   0.00000, 0.00000, 108.31950);
	CreateDynamicObject(1215, 2072.98853, -72.20148, 1.38173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2102.67261, -117.53281, 1.38173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2112.44165, -132.72865, 1.38173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2123.95947, -149.86369, 1.38173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2087.19800, -94.12205, 1.38173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 2080.95923, -84.32520, 1.38173,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6965, 2047.45764, -136.05019, 5.14423,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(6964, 2047.45447, -135.97560, 1.02433,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1454, 2076.23389, -81.27343, 2.12629,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1454, 2073.91357, -77.14620, 2.12629,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8947, 2026.73486, -196.94090, 3.97638,   0.00000, 0.00000, 123.73358);
	CreateDynamicObject(19903, 2029.02319, -187.85156, 1.31092,   0.00000, 0.00000, 308.16779);
	CreateDynamicObject(19903, 2038.24658, -196.99736, 1.33445,   0.00000, 0.00000, 123.84032);
	CreateDynamicObject(7311, 2028.40222, -195.99071, 3.44095,   0.00000, 0.00000, 33.58941);
	CreateDynamicObject(19864, 2020.65845, -195.87428, 3.78696,   0.00000, 0.00000, 304.11469);
	CreateDynamicObject(19864, 2023.62988, -200.24080, 3.78696,   0.00000, 0.00000, 304.11469);
	CreateDynamicObject(19864, 2025.47571, -202.95207, 6.21886,   0.00000, 0.00000, 304.11469);
	CreateDynamicObject(19864, 2020.67529, -195.85138, 6.21886,   0.00000, 0.00000, 304.11469);
	CreateDynamicObject(19864, 2023.62988, -200.24080, 6.21886,   0.00000, 0.00000, 304.11469);
	CreateDynamicObject(7311, 2028.40222, -195.99071, 5.11687,   0.00000, 0.00000, 33.58941);
	CreateDynamicObject(3062, 2025.96362, -203.66106, 2.62150,   0.00000, 0.00000, 303.85709);
	CreateDynamicObject(3062, 2026.06689, -203.80841, 2.62150,   0.00000, 0.00000, 303.85709);
	CreateDynamicObject(1723, 2020.60608, -208.05284, 1.33456,   0.00000, 0.00000, 124.28822);
	CreateDynamicObject(2165, 2018.48328, -198.08278, 1.33456,   0.00000, 0.00000, 213.79980);
	CreateDynamicObject(1729, 2017.13953, -197.14476, 1.30873,   0.00000, 0.00000, 33.02885);
	CreateDynamicObject(321, 2017.52075, -198.93503, 2.19905,   51.30014, 123.11999, 83.30978);
	CreateDynamicObject(2985, 2016.88672, -199.05165, 1.33561,   0.00000, 0.00000, 306.98352);
	CreateDynamicObject(19787, 2022.11890, -198.09557, 2.67104,   0.00000, 0.00000, 305.04004);
	CreateDynamicObject(19172, 2022.21326, -198.25240, 4.10559,   0.00000, 0.00000, 303.76904);



	//gard cnn
    CreateDynamicObject(970, 1113.81226, -1415.95642, 12.99760,   0.00000, 0.00000, 1.02000);
	CreateDynamicObject(970, 1118.95190, -1415.88806, 12.99760,   0.00000, 0.00000, 0.24000);
	CreateDynamicObject(970, 1123.87134, -1415.89172, 13.01760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1128.84937, -1415.87390, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1133.62927, -1415.89539, 13.05760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1138.54712, -1415.90955, 13.07760,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1143.48718, -1415.95984, 13.07760,   0.00000, 0.00000, -0.54000);
	CreateDynamicObject(970, 1186.10474, -1495.67102, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(970, 1186.14282, -1490.92114, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(970, 1186.13611, -1486.25720, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(970, 1186.10059, -1481.48560, 12.96110,   0.00000, 0.00000, -90.06000);
	CreateDynamicObject(970, 1124.00598, -1562.16187, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateDynamicObject(970, 1133.22400, -1562.16504, 12.95910,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(970, 1128.58142, -1562.17664, 12.95910,   0.00000, 0.00000, -0.48000);
	CreateDynamicObject(970, 1061.49329, -1492.59277, 12.96960,   0.00000, 0.00000, -105.78001);
	CreateDynamicObject(970, 1059.12000, -1501.51147, 12.96960,   0.00000, 0.00000, -104.70000);
	CreateDynamicObject(970, 1060.26794, -1497.01086, 12.98960,   0.00000, 0.00000, -105.30000);
	//vila 1
	CreateDynamicObject(19378, 321.85, -1513.85, 3.09,   0.00, 90.00, 0.00);
	CreateDynamicObject(14387, 316.24, -1516.10, 3.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(14387, 316.25, -1511.40, 3.67,   0.00, 0.00, 0.00);
	CreateDynamicObject(19366, 313.12, -1510.66, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 313.16, -1516.86, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 309.70, -1510.65, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 309.68, -1516.87, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 309.68, -1513.76, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 309.67, -1507.46, 4.61,   0.00, 90.00, 0.00); 
	CreateDynamicObject(19366, 313.14, -1507.46, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 316.57, -1507.46, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 320.04, -1507.45, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 323.53, -1507.45, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 326.99, -1507.43, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 309.70, -1520.05, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 313.16, -1520.07, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 316.61, -1520.06, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 320.04, -1520.05, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 323.51, -1520.05, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 326.99, -1520.06, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 306.20, -1513.75, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 306.20, -1516.86, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19366, 306.21, -1510.65, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19362, 325.49, -1518.49, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 322.64, -1518.49, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 319.44, -1518.50, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 316.52, -1518.51, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 325.49, -1508.99, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 322.67, -1509.00, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 319.48, -1509.00, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 316.50, -1508.99, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19454, 322.28, -1505.76, 6.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(19454, 312.74, -1505.79, 6.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(19454, 322.39, -1521.75, 6.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(19454, 312.80, -1521.75, 6.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 307.91, -1520.08, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 307.83, -1507.47, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 306.25, -1518.54, 6.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 306.17, -1508.99, 6.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 304.74, -1516.97, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 304.73, -1513.78, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 304.74, -1510.57, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 311.51, -1513.77, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19362, 313.21, -1515.29, 6.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 313.23, -1512.25, 6.44,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 314.88, -1513.77, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19366, 316.43, -1513.75, 4.61,   0.00, 90.00, 0.00);
	CreateDynamicObject(19362, 316.59, -1515.28, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 316.59, -1512.21, 2.98,   0.00, 0.00, 90.00);
	CreateDynamicObject(19362, 318.12, -1513.77, 2.98,   0.00, 0.00, 0.00);
	CreateDynamicObject(19454, 327.00, -1510.58, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19454, 327.02, -1517.11, 6.44,   0.00, 0.00, 0.00);
	CreateDynamicObject(19454, 326.99, -1513.69, 4.53,   0.00, 0.00, 0.00);
	CreateDynamicObject(1726, 319.13, -1514.79, 3.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(1726, 322.37, -1512.92, 3.18,   0.00, 0.00, -90.00);
	CreateDynamicObject(2292, 326.39, -1521.11, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(2291, 325.91, -1521.10, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(2291, 324.93, -1521.10, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(2291, 323.95, -1521.12, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(2291, 326.39, -1519.65, 4.70,   0.00, 0.00, -90.00);
	CreateDynamicObject(2291, 326.38, -1518.65, 4.70,   0.00, 0.00, -90.00);
	CreateDynamicObject(2291, 326.31, -1507.89, 4.70,   0.00, 0.00, -90.00);
	CreateDynamicObject(2291, 326.33, -1506.84, 4.70,   0.00, 0.00, -90.00);
	CreateDynamicObject(2292, 326.34, -1506.38, 4.70,   0.00, 0.00, -90.00);
	CreateDynamicObject(2291, 324.85, -1506.38, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 323.85, -1506.36, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2291, 322.84, -1506.39, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1823, 323.96, -1508.35, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1823, 324.16, -1520.23, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2099, 321.89, -1505.85, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2099, 322.34, -1521.45, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(2229, 314.92, -1514.86, 4.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2229, 314.90, -1512.06, 4.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2207, 308.15, -1514.67, 4.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(1671, 306.26, -1513.69, 5.22,   0.00, 0.00, 90.00);
	CreateDynamicObject(1829, 305.58, -1516.13, 5.22,   0.00, 0.00, 90.00);
	CreateDynamicObject(2162, 304.86, -1517.91, 4.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2162, 304.89, -1510.41, 4.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(2007, 305.38, -1511.43, 4.70,   0.00, 0.00, 90.00);
	CreateDynamicObject(1727, 308.47, -1507.27, 4.70,   0.00, 0.00, 50.00);
	CreateDynamicObject(1727, 309.26, -1521.04, 4.70,   0.00, 0.00, 140.00);
	CreateDynamicObject(2200, 314.96, -1521.48, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(2200, 313.77, -1505.90, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1726, 315.83, -1506.42, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1726, 317.82, -1520.90, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(1827, 320.82, -1513.85, 3.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(1536, 326.94, -1515.43, 3.18,   0.00, 0.00, 90.00);
	CreateDynamicObject(1536, 326.89, -1512.42, 3.18,   0.00, 0.00, -90.00);
	CreateDynamicObject(948, 326.57, -1509.45, 3.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(948, 326.53, -1518.02, 3.18,   0.00, 0.00, 0.00);
	CreateDynamicObject(2297, 311.20, -1513.00, 4.70,   0.00, 0.00, 225.00);
	CreateDynamicObject(1727, 306.72, -1509.71, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(1727, 307.74, -1517.60, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(970, 325.55, -1518.60, 5.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 321.40, -1518.63, 5.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 317.24, -1518.62, 5.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 325.44, -1508.91, 5.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 321.32, -1508.89, 5.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(970, 317.17, -1508.91, 5.15,   0.00, 0.00, 0.00);
	CreateDynamicObject(2162, 318.57, -1505.92, 4.70,   0.00, 0.00, 0.00);
	CreateDynamicObject(2162, 319.49, -1521.46, 4.70,   0.00, 0.00, 180.00);
	CreateDynamicObject(19378, 321.84, -1517.07, 8.14,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 321.85, -1510.48, 8.15,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 312.92, -1517.07, 8.15,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 313.03, -1510.51, 8.14,   0.00, 90.00, 0.00);
	CreateDynamicObject(19378, 309.88, -1513.86, 8.16,   0.00, 90.00, 0.00);

	//LINII MASINI
    CreateDynamicObject(10183, 1267.64600, -1797.14282, 12.43480,   0.00000, 0.00000, 44.64000);
	CreateDynamicObject(10183, 1205.08972, -1829.13245, 12.43480,   0.00000, 0.00000, 45.48000);
	CreateDynamicObject(10183, 1570.63953, -1606.69458, 12.40590,   0.00000, 0.00000, 45.12000);
	//PD Exterior by piMp
	CreateDynamicObject(11326, 1605.01282, -1623.63245, 14.78770,   0.00000, 0.00000, 89.46000);
	CreateDynamicObject(955, 1553.64233, -1683.42175, 12.92650,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 1542.62939, -1641.17981, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateDynamicObject(983, 1545.80750, -1650.77563, 27.68590,   0.00000, 0.00000, -270.12021);
	CreateDynamicObject(983, 1542.60828, -1647.55884, 27.70590,   -0.16000, -0.04000, -180.12010);
	CreateDynamicObject(983, 1550.38745, -1650.77563, 27.68590,   0.00000, 0.00000, -270.12021);
	CreateDynamicObject(983, 1542.62939, -1640.45984, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateDynamicObject(983, 1545.85986, -1637.26941, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1552.21460, -1637.27222, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1558.61877, -1637.28772, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1565.02625, -1637.32434, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1571.40149, -1637.35168, 27.70590,   0.00000, 0.00000, -270.18002);
	CreateDynamicObject(983, 1574.66931, -1637.35522, 27.70590,   0.00000, 0.00000, -270.17999);
	CreateDynamicObject(983, 1577.83557, -1640.57202, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateDynamicObject(983, 1577.77295, -1646.93713, 27.70590,   0.00000, 0.00000, -180.48010);
	CreateDynamicObject(983, 1577.78162, -1653.32056, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.78674, -1659.73962, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.77917, -1666.16150, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.75732, -1672.53748, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.72766, -1678.91931, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.73621, -1685.32568, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.72400, -1691.71228, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.71289, -1698.10791, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.72131, -1704.51245, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.69897, -1710.88159, 27.70590,   0.00000, 0.00000, -180.06012);
	CreateDynamicObject(983, 1577.69897, -1711.24158, 27.70590,   0.00000, 0.00000, -180.06010);
	CreateDynamicObject(983, 1574.44556, -1714.38306, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1568.07471, -1714.34656, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1561.66760, -1714.30737, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1555.31116, -1714.26440, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1548.95508, -1714.22168, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1545.76025, -1714.20190, 27.70590,   0.00000, 0.00000, -270.35995);
	CreateDynamicObject(983, 1542.57971, -1710.99304, 27.70590,   0.00000, 0.00000, -359.87982);
	CreateDynamicObject(983, 1542.54773, -1704.60864, 27.70590,   0.00000, 0.00000, -359.87982);
	CreateDynamicObject(983, 1542.54773, -1703.70862, 27.70590,   0.00000, 0.00000, -359.87979);
	CreateDynamicObject(983, 1545.74390, -1700.54211, 27.70590,   0.00000, 0.00000, -270.00009);
	CreateDynamicObject(983, 1550.38757, -1700.53650, 27.70590,   0.00000, 0.00000, -270.00009);
	CreateDynamicObject(983, 1553.58850, -1697.36475, 27.70590,   0.00000, 0.00000, -179.70013);
	CreateDynamicObject(983, 1553.56555, -1690.94910, 27.70590,   0.00000, 0.00000, -179.70013);
	CreateDynamicObject(983, 1553.56580, -1656.84106, 27.70590,   0.00000, 0.00000, -179.70010);
	CreateDynamicObject(983, 1553.55737, -1653.96729, 27.70590,   0.00000, 0.00000, -179.70010);
	CreateDynamicObject(3934, 1562.89099, -1700.73755, 27.38710,   0.00000, -0.02000, -0.84000);
	CreateDynamicObject(3934, 1560.78516, -1650.95300, 27.38710,   0.00000, -0.02000, 1.02000);
	//Pompe de benzina
	CreateDynamicObject(1676, 1009.18927, -936.09637, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateDynamicObject(1676, 1005.57520, -936.67499, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateDynamicObject(1676, 1002.23541, -937.06488, 42.78190,   0.00000, 0.00000, 6.66000);
	CreateDynamicObject(1676, 998.64508, -937.57654, 42.78190,   0.00000, 0.00000, 6.66000);
	//Dozatoare
	CreateDynamicObject(1977, 316.88760, -140.32410, 998.59998,   0.00000, 0.00000, -90.42000);
	CreateDynamicObject(1775, 495.97321, -24.32530, 1000.73621,   0.00000, 0.00000, -180.18030);

		//da

	CreateDynamicObject(1660, 111.10, -1614.28, 9.20,   -30.00, 0.00, 80.50);
	CreateDynamicObject(1660, 103.73, -1613.05, 9.59,   -29.50, 0.00, 80.50);
	CreateDynamicObject(1660, 96.39, -1611.82, 10.05,   -29.50, 0.00, 80.50);
	CreateDynamicObject(1660, 89.05, -1610.59, 10.51,   -33.50, 0.00, 80.50);
	CreateDynamicObject(1660, 81.75, -1609.37, 10.46,   -47.50, 0.00, 80.50);
	CreateDynamicObject(1660, 74.66, -1608.18, 8.61,   -47.50, 0.00, 80.50);
	CreateDynamicObject(19378, 62.64, -1604.11, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 52.29, -1602.21, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 64.26, -1594.64, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 53.96, -1592.76, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 42.02, -1600.39, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 43.62, -1590.99, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 45.30, -1581.56, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 55.61, -1583.35, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 65.94, -1585.18, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(14413, 70.66, -1583.13, 0.86,   0.00, 0.00, -10.00);
	CreateDynamicObject(14413, 57.29, -1580.92, 0.86,   0.00, 0.00, -10.00);
	CreateDynamicObject(14413, 55.23, -1592.72, 0.86,   0.00, 0.00, -10.00);
	CreateDynamicObject(14413, 68.29, -1595.05, 0.86,   0.00, 0.00, -10.00);
	CreateDynamicObject(11556, 32.73, -1626.95, -0.52,   0.00, 0.00, -80.50);
	CreateDynamicObject(16113, 62.50, -1623.78, -0.02,   0.00, 0.00, 40.01);
	CreateDynamicObject(16134, 51.58, -1570.29, -2.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(16134, 65.91, -1572.01, -1.55,   0.00, 0.00, -780.00);
	CreateDynamicObject(19378, 77.54, -1608.00, 8.06,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 84.40, -1609.17, 9.78,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 82.64, -1603.89, 5.47,   0.00, 0.00, 80.00);
	CreateDynamicObject(19378, 73.13, -1602.25, 5.48,   0.00, 0.00, 80.00);
	CreateDynamicObject(19378, 72.80, -1607.15, 6.94,   0.00, 90.00, -10.00);
	CreateDynamicObject(14877, 78.88, -1604.85, 7.78,   0.00, 0.00, -9.66);
	CreateDynamicObject(14877, 72.09, -1603.69, 6.06,   0.00, 0.00, -9.66);
	CreateDynamicObject(19378, 82.20, -1606.88, 5.46,   0.00, 0.00, 80.00);
	CreateDynamicObject(19378, 72.76, -1605.29, 5.46,   0.00, 0.00, 80.78);
	CreateDynamicObject(19378, 82.97, -1599.22, 10.67,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 72.65, -1597.40, 10.64,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 62.51, -1605.37, 10.64,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 74.31, -1587.90, 10.67,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 84.64, -1589.75, 10.67,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 89.68, -1590.72, 5.51,   0.00, 0.00, -10.00);
	CreateDynamicObject(19378, 88.05, -1599.92, 5.47,   0.00, 0.00, -10.00);
	CreateDynamicObject(19378, 85.68, -1585.14, 5.41,   0.00, 0.00, 80.00);
	CreateDynamicObject(19378, 76.39, -1583.60, 5.44,   0.00, 0.00, 80.00);
	CreateDynamicObject(19378, 70.92, -1587.54, 5.41,   0.00, 0.00, -10.00);
	CreateDynamicObject(19378, 69.36, -1596.63, 5.44,   0.00, 0.00, -10.00);
	CreateDynamicObject(19378, 63.99, -1586.07, 10.67,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 62.31, -1595.57, 10.64,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 52.18, -1603.55, 10.64,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 53.70, -1584.24, 10.67,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 51.97, -1593.72, 10.64,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 41.88, -1601.73, 10.64,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 41.67, -1591.83, 10.64,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 45.23, -1582.76, 10.64,   0.00, 90.00, -10.00);
	CreateDynamicObject(19453, 67.54, -1606.23, 12.42,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 73.17, -1602.25, 12.42,   0.00, 0.00, 79.97);
	CreateDynamicObject(19453, 78.74, -1598.43, 12.42,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 80.38, -1589.04, 12.42,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 76.41, -1583.55, 12.42,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 66.92, -1581.87, 12.42,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 57.45, -1580.21, 12.42,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 48.02, -1578.55, 12.42,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 61.89, -1610.03, 12.42,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 52.42, -1608.36, 12.42,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 42.92, -1606.70, 12.42,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 39.14, -1601.08, 12.42,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 40.81, -1591.59, 12.42,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 42.44, -1582.37, 12.42,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 66.92, -1581.87, 15.92,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 57.45, -1580.21, 15.92,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 48.02, -1578.55, 15.92,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 70.87, -1587.36, 15.92,   0.00, 0.00, -10.00);
	CreateDynamicObject(19378, 75.30, -1588.16, 14.17,   0.00, 90.00, -10.00);
	CreateDynamicObject(19378, 73.64, -1597.53, 14.17,   0.00, 90.00, -10.00);
	CreateDynamicObject(19453, 69.20, -1596.80, 15.92,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 67.54, -1606.23, 15.92,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 61.89, -1610.03, 15.92,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 52.42, -1608.36, 15.92,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 42.92, -1606.70, 15.92,   0.00, 0.00, 80.00);
	CreateDynamicObject(19453, 39.14, -1601.08, 15.92,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 40.81, -1591.59, 15.92,   0.00, 0.00, -10.00);
	CreateDynamicObject(19453, 42.44, -1582.37, 15.92,   0.00, 0.00, -10.00);
	CreateDynamicObject(19375, 67.46, -1586.73, 19.24,   0.00, -65.00, -10.00);
	CreateDynamicObject(19375, 65.83, -1596.19, 19.24,   0.00, -65.00, -10.00);
	CreateDynamicObject(19375, 64.19, -1605.62, 19.24,   0.00, -65.00, -10.00);
	CreateDynamicObject(19375, 61.09, -1585.65, 22.24,   0.00, -65.00, -10.00);
	CreateDynamicObject(19375, 45.46, -1582.90, 19.24,   0.00, -65.00, 170.00);
	CreateDynamicObject(19375, 51.80, -1584.03, 22.24,   0.00, -65.00, 170.00);
	CreateDynamicObject(19375, 43.91, -1592.18, 19.24,   0.00, -65.00, 170.00);
	CreateDynamicObject(19375, 42.29, -1601.67, 19.24,   0.00, -65.00, 170.00);
	CreateDynamicObject(19375, 50.17, -1593.29, 22.24,   0.00, -65.00, 170.00);
	CreateDynamicObject(19375, 48.47, -1602.82, 22.24,   0.00, -65.00, 170.00);
	CreateDynamicObject(19375, 59.49, -1595.16, 22.24,   0.00, -65.00, -10.00);
	CreateDynamicObject(19375, 57.80, -1604.49, 22.24,   0.00, -65.00, -10.00);
	CreateDynamicObject(19454, 66.48, -1581.84, 18.20,   25.00, 0.00, 80.04);
	CreateDynamicObject(19454, 60.84, -1580.88, 20.70,   25.00, 0.00, 80.04);
	CreateDynamicObject(19454, 60.84, -1580.88, 16.86,   25.00, 0.00, 80.04);
	CreateDynamicObject(19454, 53.69, -1579.61, 20.86,   -25.00, 0.00, 80.04);
	CreateDynamicObject(19454, 48.14, -1578.64, 18.14,   -25.00, 0.00, 80.04);
	CreateDynamicObject(19454, 53.69, -1579.61, 17.85,   -25.00, 0.00, 80.04);
	CreateDynamicObject(19454, 61.66, -1609.91, 18.03,   25.00, 0.00, 80.00);
	CreateDynamicObject(19454, 53.62, -1608.53, 18.03,   25.00, 0.00, 80.00);
	CreateDynamicObject(19454, 55.78, -1608.86, 20.83,   25.00, 0.00, 80.00);
	CreateDynamicObject(19454, 48.66, -1607.58, 20.83,   -25.00, 0.00, 80.00);
	CreateDynamicObject(19454, 48.58, -1607.63, 17.83,   -25.00, 0.00, 80.00);
	CreateDynamicObject(19454, 43.40, -1606.69, 18.13,   -25.00, 0.00, 80.00);
	CreateDynamicObject(3034, 80.66, -1588.13, 12.47,   0.00, 0.00, 80.00);
	CreateDynamicObject(3034, 78.75, -1598.96, 12.47,   0.00, 0.00, 80.00);
	CreateDynamicObject(3034, 67.63, -1606.31, 12.47,   0.00, 0.00, 80.00);
	CreateDynamicObject(3034, 67.67, -1606.08, 15.47,   0.00, 0.00, 80.00);
	CreateDynamicObject(3034, 68.92, -1598.89, 15.47,   0.00, 0.00, 80.00);
	CreateDynamicObject(3034, 71.23, -1586.01, 15.47,   0.00, 0.00, 80.00);
	CreateDynamicObject(3034, 76.30, -1583.43, 12.47,   0.00, 0.00, 170.00);
	CreateDynamicObject(3034, 64.60, -1581.35, 12.47,   0.00, 0.00, 170.00);
	CreateDynamicObject(3034, 55.48, -1579.75, 12.47,   0.00, 0.00, 170.00);
	CreateDynamicObject(3034, 47.09, -1578.27, 12.47,   0.00, 0.00, 170.00);
	CreateDynamicObject(3034, 50.55, -1578.90, 15.97,   0.00, 0.00, 170.00);
	CreateDynamicObject(3034, 62.01, -1580.89, 15.97,   0.00, 0.00, 170.00);
	CreateDynamicObject(3034, 41.87, -1584.88, 12.47,   0.00, 0.00, -100.00);
	CreateDynamicObject(3034, 42.24, -1582.78, 15.97,   0.00, 0.00, -100.00);
	CreateDynamicObject(3034, 38.97, -1601.10, 15.97,   0.00, 0.00, -100.00);
	CreateDynamicObject(3034, 40.69, -1591.51, 15.97,   0.00, 0.00, -100.00);
	CreateDynamicObject(3034, 39.24, -1599.81, 12.47,   0.00, 0.00, -100.00);
	CreateDynamicObject(1231, 81.86, -1612.90, 12.60,   0.00, 0.00, -8.50);
	CreateDynamicObject(1231, 83.28, -1603.76, 13.50,   0.00, 0.00, -8.50);
	CreateDynamicObject(1231, 85.73, -1586.50, 13.50,   0.00, 0.00, -8.50);
	CreateDynamicObject(1231, 68.00, -1610.52, 9.70,   0.00, 0.00, -8.50);
	CreateDynamicObject(1231, 72.88, -1611.38, 11.00,   0.00, 0.00, -8.50);
	CreateDynamicObject(751, 63.51, -1609.26, 5.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(751, 50.10, -1605.69, 5.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(751, 50.30, -1605.60, 2.33,   0.00, 0.00, 90.00);
	CreateDynamicObject(751, 40.48, -1604.05, 5.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(751, 42.51, -1593.48, 5.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(751, 45.46, -1579.31, 5.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(751, 56.39, -1581.58, 5.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(751, 65.85, -1582.76, 5.83,   0.00, 0.00, 90.00);
	CreateDynamicObject(1653, 80.61, -1606.61, 11.39,   0.00, 0.00, -10.00);
	CreateDynamicObject(1653, 67.97, -1604.44, 11.39,   0.00, 0.00, -9.50);
	CreateDynamicObject(1653, 81.23, -1603.74, 11.39,   0.00, 0.00, -10.50);
	CreateDynamicObject(1653, 73.34, -1610.88, 8.89,   0.00, -14.00, -9.50);
	CreateDynamicObject(1653, 85.74, -1612.98, 10.89,   0.00, 1.00, 170.00);
	CreateDynamicObject(1653, 98.41, -1615.08, 10.69,   0.00, 3.00, -9.00);
	CreateDynamicObject(1653, 89.49, -1592.31, 11.39,   0.00, 0.00, 80.00);
	CreateDynamicObject(1653, 84.28, -1584.86, 11.39,   0.00, 0.00, -9.50);
	CreateDynamicObject(1653, 74.89, -1583.31, 14.89,   0.00, 0.00, -9.50);
	CreateDynamicObject(1653, 80.07, -1590.73, 14.89,   0.00, 0.00, -100.00);
	CreateDynamicObject(1653, 79.01, -1596.83, 14.89,   0.00, 0.00, 80.00);
	CreateDynamicObject(1653, 71.52, -1601.96, 14.89,   0.00, 0.00, -10.50);
	CreateDynamicObject(1653, 65.60, -1580.34, 7.70,   0.00, 0.00, -9.50);
	CreateDynamicObject(1653, 70.91, -1587.74, 7.70,   0.00, 0.00, 80.50);
	CreateDynamicObject(1653, 52.97, -1578.22, 7.70,   0.00, 0.00, -9.50);
	CreateDynamicObject(1653, 47.29, -1577.16, 7.70,   0.00, 0.00, -9.50);
	CreateDynamicObject(1653, 39.88, -1582.43, 7.70,   0.00, 0.00, 80.00);
	CreateDynamicObject(1653, 37.63, -1595.06, 7.70,   0.00, 0.00, 80.50);
	CreateDynamicObject(1653, 37.13, -1597.90, 7.70,   0.00, 0.00, 80.50);
	CreateDynamicObject(1653, 42.37, -1605.30, 7.70,   0.00, 0.00, -9.50);
	CreateDynamicObject(1653, 54.90, -1607.53, 7.70,   0.00, 0.00, -11.50);
	CreateDynamicObject(1653, 67.47, -1609.87, 7.70,   0.00, 0.00, -9.50);
	CreateDynamicObject(1231, 37.62, -1586.63, 13.40,   0.00, 0.00, -8.50);
	CreateDynamicObject(1231, 36.28, -1595.22, 13.40,   0.00, 0.00, -8.50);
	CreateDynamicObject(1569, 40.35, -1594.00, 10.71,   0.00, 0.00, 80.00);
	CreateDynamicObject(1569, 40.87, -1591.05, 10.71,   0.00, 0.00, -100.00);
	CreateDynamicObject(1557, 79.87, -1592.11, 10.67,   0.00, 0.00, -100.00);
	CreateDynamicObject(1557, 79.35, -1595.09, 10.67,   0.00, 0.00, 800.00);
	CreateDynamicObject(1569, 69.81, -1593.65, 14.26,   0.00, 0.00, 80.00);
	CreateDynamicObject(1569, 70.33, -1590.70, 14.26,   0.00, 0.00, -100.00);
	CreateDynamicObject(1653, 89.49, -1592.31, 11.39,   0.00, 0.00, -1000.00);
	CreateDynamicObject(1653, 80.07, -1590.73, 14.89,   0.00, 0.00, 80.00);
	CreateDynamicObject(1653, 79.01, -1596.83, 14.89,   0.00, 0.00, -100.00);
	CreateDynamicObject(1653, 80.61, -1606.61, 11.39,   0.00, 0.00, 170.00);
	CreateDynamicObject(1653, 81.23, -1603.74, 11.39,   0.00, 0.00, 170.00);
	CreateDynamicObject(1653, 84.28, -1584.86, 11.39,   0.00, 0.00, 170.50);
	CreateDynamicObject(1653, 85.74, -1612.98, 10.89,   0.00, -1.50, -9.50);
	CreateDynamicObject(1653, 98.45, -1615.08, 10.69,   0.00, -3.50, 171.00);
	CreateDynamicObject(1653, 73.34, -1610.88, 8.89,   0.00, 13.50, 170.00);
	CreateDynamicObject(1653, 67.47, -1609.87, 7.70,   0.00, 0.00, 170.00);
	CreateDynamicObject(1653, 54.90, -1607.53, 7.70,   0.00, 0.00, 168.50);
	CreateDynamicObject(1653, 42.37, -1605.30, 7.70,   0.00, 0.00, 170.00);
	CreateDynamicObject(1653, 35.24, -1600.91, 7.70,   0.00, 0.00, -99.50);
	CreateDynamicObject(1653, 37.63, -1595.06, 7.70,   0.00, 0.00, -99.50);
	CreateDynamicObject(1653, 39.88, -1582.43, 7.70,   0.00, 0.00, -100.00);
	CreateDynamicObject(1653, 47.29, -1577.16, 7.70,   0.00, 0.00, 170.50);
	CreateDynamicObject(1653, 52.97, -1578.22, 7.70,   0.00, 0.00, 170.50);
	CreateDynamicObject(1653, 65.60, -1580.34, 7.70,   0.00, 0.00, 170.50);
	CreateDynamicObject(1653, 70.91, -1587.74, 7.70,   0.00, 0.00, -99.50);
	CreateDynamicObject(16134, 49.91, -1584.39, -2.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(16134, 45.37, -1600.64, -2.05,   0.00, 0.00, 90.00);
	CreateDynamicObject(16134, 68.77, -1576.97, -1.55,   0.00, 0.00, -780.00);
	CreateDynamicObject(970, 36.99, -1588.31, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(970, 36.07, -1593.58, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(970, 36.52, -1590.90, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(970, 37.76, -1595.98, 11.22,   0.00, 0.00, -10.00);
	CreateDynamicObject(970, 39.38, -1586.61, 11.22,   0.00, 0.00, -10.00);
	CreateDynamicObject(1360, 38.75, -1596.94, 11.52,   0.00, 0.00, 80.00);
	CreateDynamicObject(1360, 40.67, -1586.11, 11.52,   0.00, 0.00, 80.00);
	CreateDynamicObject(1360, 37.23, -1605.09, 11.52,   0.00, 0.00, 80.00);
	CreateDynamicObject(1360, 42.01, -1577.92, 11.52,   0.00, 0.00, 80.00);
	CreateDynamicObject(1364, 37.26, -1590.85, 11.52,   0.00, 0.00, 80.00);
	CreateDynamicObject(17951, 69.24, -1596.77, 8.30,   0.00, 0.00, -10.75);
	CreateDynamicObject(17951, 70.72, -1588.25, 8.30,   0.00, 0.00, -10.75);
	CreateDynamicObject(970, 37.23, -1598.12, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(970, 36.27, -1603.49, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(970, 36.79, -1600.74, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(970, 39.55, -1584.55, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(970, 40.50, -1579.21, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(970, 40.04, -1581.88, 11.22,   0.00, 0.00, 80.00);
	CreateDynamicObject(16134, 81.43, -1582.62, -7.05,   0.00, 0.00, -780.00);

	// escape
	CreateDynamicObject(971, 96.52710, 1920.48022, 17.59541,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7657, 286.12311, 1821.51538, 18.21438,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7657, 286.12311, 1821.51538, 21.60156,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2930, 246.43819, 1864.41785, 19.90134,   0.00000, 90.00000, 38.70001);
	CreateDynamicObject(3095, 268.77887, 1883.64551, 16.43222,   0.00000, 0.00000, 0.00000);
	//nou hq ng
	CreateDynamicObject(3268, -1092.35571, -1274.16125, 128.18553,   0.00000, 0.00000, 270.60013);
	CreateDynamicObject(11010, -1212.80371, -1192.23438, 134.11650,   0.00000, 0.00000, 269.64252);
	CreateDynamicObject(3279, -1119.25684, -1248.20435, 128.23499,   0.00000, 0.00000, 94.67532);
	CreateDynamicObject(18850, -1148.25305, -1165.39990, 116.01414,   0.00000, 0.00000, 89.60246);
	CreateDynamicObject(18850, -1109.61865, -1165.69666, 116.01414,   0.00000, 0.00000, 89.60246);
	CreateDynamicObject(19905, -1192.35327, -1159.86206, 128.07590,   0.00000, 0.00000, 359.39029);

	//bike spawn by oviiadv
	CreateVehicle(510, 905.9911, -1666.8192, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 905.9377, -1654.5406, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 906.0417, -1668.2805, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 905.9891, -1667.5400, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 906.0512, -1669.0514, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 906.0804, -1669.7600, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 906.0109, -1656.0072, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 905.9731, -1655.3053, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 905.9155, -1653.7999, 13.0852, 90.9970, -1, -1, 100);
	CreateVehicle(510, 905.8906, -1653.0608, 13.0852, 90.9970, -1, -1, 100);

	//barca zaki
	CreateVehicle(473, 1990.5101, -177.7017, 0.1111, 123.0620, -1, -1, 100);
	CreateVehicle(473, 1981.5189, -164.7387, 0.1111, 123.0620, -1, -1, 100);
	CreateVehicle(473, 1987.6929, -173.2599, 0.1111, 123.0620, -1, -1, 100);
	CreateVehicle(473, 1983.8390, -167.8450, 0.1111, 123.0620, -1, -1, 100);


	//gard sf
	CreateDynamicObject(970, -1230.86707, -763.55206, 63.34603,   0.00000, 0.00000, 42.16568);
	CreateDynamicObject(970, -1227.83826, -760.71503, 63.34603,   0.00000, 0.00000, 44.00003);




	//crates vechi
	/*CreateDynamicObject(19543, 1223.31726, -1353.75012, 12.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1223.50220, -1322.16064, 12.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1238.34912, -1322.06702, 12.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1238.01428, -1353.83484, 12.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1218.08020, -1385.14282, 12.79860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1224.09363, -1384.97791, 12.79860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1230.10303, -1385.07935, 12.79860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1236.08911, -1385.03015, 12.79860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1241.96716, -1385.01306, 12.79860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1245.99182, -1382.65771, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1246.00793, -1378.49146, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1246.02637, -1374.37451, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.99426, -1370.27856, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.99744, -1366.12781, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.99927, -1361.94873, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.97119, -1357.78772, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.99536, -1353.62390, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1246.01465, -1349.45020, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.96387, -1345.31433, 12.82060,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(970, 1245.93140, -1341.12488, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.85962, -1336.98596, 12.82060,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(970, 1245.83826, -1332.88843, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.80505, -1328.70093, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.80823, -1324.54382, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.81714, -1320.35376, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.83582, -1316.18030, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.82263, -1312.03552, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.84131, -1307.93518, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.88696, -1299.69690, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.89160, -1295.55115, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1245.86731, -1293.05444, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1243.80029, -1291.01746, 12.82060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1239.69873, -1290.91736, 12.82060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1235.58606, -1290.86108, 12.82060,   0.00000, 0.00000, -0.89800);
	CreateDynamicObject(970, 1231.44397, -1290.81946, 12.82060,   0.00000, 0.00000, -0.89800);
	CreateDynamicObject(970, 1227.29297, -1290.74414, 12.82060,   0.00000, 0.00000, -0.89800);
	CreateDynamicObject(970, 1223.18042, -1290.67273, 12.82060,   0.00000, 0.00000, -0.89800);
	CreateDynamicObject(970, 1219.01904, -1290.61121, 12.82060,   0.00000, 0.00000, -0.89800);
	CreateDynamicObject(970, 1216.06531, -1292.65869, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1218.12402, -1290.58521, 12.82060,   0.00000, 0.00000, -0.89800);
	CreateDynamicObject(970, 1216.01111, -1296.73364, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1216.03687, -1300.86292, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1216.02881, -1304.94666, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1216.02588, -1309.05701, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1216.02466, -1313.19019, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.95764, -1317.26611, 12.95260,   0.00000, 0.00000, 88.81200);
	CreateDynamicObject(970, 1215.89563, -1321.42725, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.94214, -1325.56494, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.93115, -1329.68835, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.93591, -1333.75281, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.89673, -1338.02759, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.90564, -1342.17151, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.88342, -1346.35986, 12.95260,   0.00000, 0.00000, 89.01000);
	CreateDynamicObject(970, 1215.81738, -1350.48010, 12.95260,   0.00000, 0.00000, 89.01000);
	CreateDynamicObject(970, 1215.78979, -1354.65955, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19543, 1238.35596, -1353.56128, 12.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1238.31812, -1330.79651, 12.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1215.79590, -1358.78271, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.80994, -1362.86743, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.82605, -1366.92029, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.80872, -1371.02197, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.81189, -1375.14014, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.81824, -1379.15430, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1215.81555, -1383.23877, 12.95260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19543, 1223.31726, -1353.75012, 12.23090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1235.35156, -1353.91150, 12.56090,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1238.43433, -1353.81042, 12.42890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19543, 1238.44727, -1323.03967, 12.42890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1245.88379, -1303.77856, 12.82060,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3434, 1231.31177, -1294.84558, 13.53840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2783, 1231.45972, -1296.97803, 13.08860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1895, 1231.36914, -1297.44824, 13.58850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19054, 1230.95581, -1341.93738, 13.13440,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9833, 1230.51233, -1342.43066, 14.54420,   0.00000, 0.00000, 25.00000);
	CreateDynamicObject(3861, 1242.62158, -1314.30701, 13.55630,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3861, 1242.57690, -1322.97864, 13.55630,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3861, 1242.51331, -1332.63049, 13.61530,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1881, 1241.24646, -1316.27307, 12.89230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.24646, -1316.27307, 13.60030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.24646, -1316.27307, 14.30830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.21985, -1312.47900, 12.89230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.21985, -1312.47900, 13.54130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.21985, -1312.47900, 14.24930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.16809, -1321.10876, 12.89230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.20593, -1324.84143, 12.89230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.06775, -1330.83887, 12.89230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.07751, -1334.51550, 12.89230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.07751, -1334.51550, 13.60030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.07751, -1334.51550, 14.30830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.06775, -1330.83887, 13.60030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.06775, -1330.83887, 14.30830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.16809, -1321.10876, 13.60030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.16809, -1321.10876, 14.30830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.20593, -1324.84143, 13.60030,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1881, 1241.20593, -1324.84143, 14.30830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14537, 1230.11267, -1362.99133, 14.49170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1481, 1224.26709, -1367.97498, 13.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1481, 1223.20654, -1368.01526, 13.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1481, 1235.58069, -1367.71790, 13.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1481, 1236.72083, -1367.71936, 13.22410,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 1231.90845, -1368.18469, 12.90500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 1232.91113, -1368.30859, 12.90500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 1233.69128, -1368.29578, 12.90500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 1228.23120, -1368.30396, 12.90500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 1227.22156, -1368.36829, 12.90500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2350, 1226.28833, -1368.43176, 12.90500,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2480, 1241.72852, -1313.42822, 13.13660,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(2480, 1241.60339, -1322.10938, 13.13660,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(2480, 1241.66895, -1331.73022, 13.13660,   0.00000, 0.00000, -47.00000);
	CreateDynamicObject(2480, 1241.83301, -1333.37537, 13.13660,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(2480, 1241.75012, -1323.83374, 13.07760,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(2480, 1241.74731, -1315.11353, 13.13660,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(782, 1243.69714, -1294.88428, 12.53158,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(782, 1218.93591, -1294.74377, 12.53160,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(620, 1219.68359, -1379.90979, 12.57813,   356.85840, 0.00000, -2.49966);
	CreateDynamicObject(620, 1245.46008, -1381.12646, 12.57813,   356.85840, 0.00000, -2.49966);
	CreateDynamicObject(16061, 1242.76025, -1336.95374, 12.54167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16061, 1220.19385, -1337.11816, 12.54167,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1257, 1310.68298, -1364.34192, 18.98340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19315, 1310.61084, -1364.81824, 20.43580,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19121, 1226.99536, -1384.98547, 12.90610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1221.11169, -1385.06885, 12.90610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1232.92407, -1384.98669, 12.90610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1238.98108, -1385.00659, 12.90610,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1244.86218, -1384.97534, 12.90610,   0.00000, 0.00000, 0.00000);*/

	//craciun la trash

	//CreateDynamicObject(19076, 1656.39648, -2138.21533, 12.31838,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19076, 1656.59961, -2128.53979, 12.31838,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19056, 1655.76025, -2133.48145, 14.05589,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19056, 1655.78052, -2132.88257, 13.14785,   0.00000, 0.00000, 0.00000);
	//CreateDynamicObject(19056, 1655.78003, -2134.00464, 13.14785,   0.00000, 0.00000, 0.00000);


	



	//dovleci halloween
/*	CreateDynamicObject(19527, 858.27698, -1644.07043, 12.88407,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 858.75549, -1644.43909, 13.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 858.81885, -1643.80896, 13.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 858.33112, -1643.48547, 13.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 857.78290, -1643.78137, 13.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 857.87476, -1644.43555, 13.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 858.32764, -1644.71692, 13.09003,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19527, 1104.70239, -1463.83008, 14.79085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1105.30188, -1463.94409, 14.97078,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1105.06738, -1463.41345, 14.97078,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1104.43079, -1463.32800, 14.97078,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1104.12012, -1463.87207, 14.97078,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1104.39807, -1464.31763, 14.97078,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1104.97131, -1464.43384, 14.97078,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19527, 1535.99292, -1685.17615, 12.54858,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1535.85522, -1684.60913, 12.77402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1535.49084, -1685.14954, 12.77402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1535.77234, -1685.68091, 12.77402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1536.37488, -1685.46167, 12.77402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1536.37488, -1685.46167, 12.77402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1536.40906, -1684.86145, 12.77402,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19527, 1560.68994, -1599.22156, 12.54839,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1560.68555, -1598.62939, 12.70575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1560.12903, -1598.89880, 12.70575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1561.19507, -1599.04956, 12.70575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1561.03333, -1599.71033, 12.70575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1560.46497, -1599.80920, 12.70575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1560.06067, -1599.37085, 12.70575,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19527, 1873.36145, -1395.17285, 12.53992,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1873.13928, -1394.67078, 12.74092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1872.77881, -1395.22583, 12.74092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1873.17334, -1395.68970, 12.74092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1873.85254, -1395.46619, 12.74092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1873.82361, -1394.78247, 12.74092,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19527, 1029.53369, -1030.75500, 31.03007,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1029.51453, -1031.26477, 31.15356,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1030.06067, -1030.92993, 31.15356,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1029.83411, -1030.31726, 31.15356,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1029.28833, -1030.31042, 31.15356,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1028.94446, -1030.85791, 31.15356,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19527, 1004.89886, -945.08453, 41.20097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1004.96423, -945.63251, 41.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1005.33087, -945.20874, 41.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1005.08252, -944.63434, 41.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1004.46521, -944.75336, 41.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 1004.44537, -945.35468, 41.33687,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19527, 339.13528, -1524.43762, 32.27312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 339.62363, -1524.64063, 32.53312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 339.56015, -1524.16052, 32.53312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 339.07852, -1524.02075, 32.53312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 338.66440, -1524.18921, 32.53312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 338.66190, -1524.68359, 32.53312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 339.05685, -1525.14209, 32.53312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19320, 339.37839, -1524.90332, 32.53312,   0.00000, 0.00000, 0.00000);*/


	//spawn by oviiadv
	CreateDynamicObject(970, 907.51294, -1642.32178, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 907.49792, -1646.46313, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 907.48242, -1650.60693, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 907.46320, -1654.72900, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 907.46271, -1667.16125, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 907.51465, -1660.93286, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 907.45923, -1675.44800, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 907.45892, -1679.61060, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 905.36755, -1684.52917, 12.99933,   0.00000, 0.00000, 0.47600);
	CreateDynamicObject(970, 907.46222, -1682.39551, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(970, 901.20996, -1684.55884, 12.99933,   0.00000, 0.00000, 0.47600);
	CreateDynamicObject(970, 897.04535, -1684.58276, 12.99933,   0.00000, 0.00000, 0.47600);
	CreateDynamicObject(970, 892.90570, -1684.60620, 12.99933,   0.00000, 0.00000, 0.47600);
	CreateDynamicObject(970, 888.82568, -1684.59558, 12.99933,   0.00000, 0.00000, 359.86996);
	CreateDynamicObject(970, 884.68182, -1684.60400, 12.99933,   0.00000, 0.00000, 359.86996);
	CreateDynamicObject(970, 880.52081, -1684.58716, 12.99933,   0.00000, 0.00000, 359.86996);
	CreateDynamicObject(970, 876.38434, -1684.56067, 12.99933,   0.00000, 0.00000, 359.86996);
	CreateDynamicObject(970, 872.22107, -1684.54224, 12.99933,   0.00000, 0.00000, 359.86996);
	CreateDynamicObject(970, 868.07758, -1684.53015, 12.99933,   0.00000, 0.00000, 359.86996);
	CreateDynamicObject(970, 863.93646, -1684.54175, 12.99933,   0.00000, 0.00000, 359.86996);
	CreateDynamicObject(970, 859.81641, -1684.54333, 12.99933,   0.00000, 0.00000, 0.37399);
	CreateDynamicObject(970, 855.66681, -1684.64355, 12.99933,   0.00000, 0.00000, 1.79720);
	CreateDynamicObject(1215, 907.47748, -1656.98376, 12.95311,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 907.45831, -1664.78369, 12.95311,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(968, 907.46008, -1656.98291, 12.46500,   0.00000, 0.00000, 0.35090);
	CreateDynamicObject(968, 907.45184, -1664.77148, 12.46500,   0.00000, 0.00000, 359.74384);
	CreateDynamicObject(970, 907.46069, -1671.30481, 12.99933,   0.00000, 0.00000, 89.91045);
	CreateDynamicObject(10832, 861.22198, -1678.87451, 14.31575,   0.00000, 0.00000, 270.10721);
	CreateDynamicObject(18653, 865.74866, -1675.65576, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(18653, 865.74866, -1675.65576, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(18653, 865.74866, -1675.65576, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(18653, 865.74866, -1675.65576, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(18653, 865.74866, -1675.65576, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(18653, 865.74866, -1675.65576, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(18653, 862.90839, -1675.65417, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(18653, 860.06836, -1675.62292, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(18653, 856.58795, -1675.61877, 14.05632,   0.00000, 0.00000, 269.81299);
	CreateDynamicObject(1280, 892.85803, -1671.67383, 12.87142,   0.00000, 0.00000, 270.42532);
	CreateDynamicObject(1280, 869.93701, -1671.92920, 12.87142,   0.00000, 0.00000, 270.42532);
	CreateDynamicObject(1280, 874.71045, -1671.93457, 12.87142,   0.00000, 0.00000, 270.42532);
	CreateDynamicObject(1280, 879.04395, -1671.91162, 12.87142,   0.00000, 0.00000, 270.42532);
	CreateDynamicObject(1280, 883.65894, -1671.92078, 12.87142,   0.00000, 0.00000, 270.42532);
	CreateDynamicObject(1280, 888.04755, -1671.78650, 12.87142,   0.00000, 0.00000, 270.42532);
	CreateDynamicObject(1280, 869.88379, -1655.52979, 12.87784,   0.00000, 0.00000, 90.14091);
	CreateDynamicObject(1280, 892.61017, -1655.43921, 12.87784,   0.00000, 0.00000, 90.14091);
	CreateDynamicObject(1280, 888.09741, -1655.46887, 12.87784,   0.00000, 0.00000, 90.14091);
	CreateDynamicObject(1280, 883.48700, -1655.52380, 12.87784,   0.00000, 0.00000, 90.14091);
	CreateDynamicObject(1280, 878.84558, -1655.52063, 12.87784,   0.00000, 0.00000, 90.14091);
	CreateDynamicObject(1280, 874.59784, -1655.59778, 12.87784,   0.00000, 0.00000, 90.14091);
	CreateDynamicObject(638, 853.12347, -1665.13745, 13.16108,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 853.11774, -1662.45740, 13.16108,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(638, 853.13263, -1659.77649, 13.16108,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 853.06519, -1662.45898, 13.15841,   0.00000, 0.00000, 269.40909);
	CreateDynamicObject(1231, 853.66260, -1644.34570, 13.15841,   0.00000, 0.00000, 269.40909);
	CreateDynamicObject(1359, 890.27667, -1671.92566, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 885.70892, -1671.92786, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 881.09149, -1672.09705, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 876.93823, -1671.96802, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 872.18378, -1671.92041, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 872.19196, -1655.42554, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 876.90424, -1655.50842, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 881.22382, -1655.43713, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 890.27515, -1655.51990, 13.10931,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1359, 886.00922, -1655.46338, 13.10931,   0.00000, 0.00000, 0.00000);
		

	//fisherman ls
	CreateDynamicObject(18802, 1265.06079, -2589.46875, 3.56083,   0.00000, 0.00000, 179.01213);
	CreateDynamicObject(19588, 1106.80933, -2588.70459, 6.91949,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1134.13354, -2595.52588, 6.45663,   0.00000, 0.00000, 269.36581);
	CreateDynamicObject(970, 1134.10388, -2585.62988, 6.45663,   0.00000, 0.00000, 269.36581);
	CreateDynamicObject(970, 1134.15063, -2591.38281, 6.45663,   0.00000, 0.00000, 269.36581);
	CreateDynamicObject(970, 1134.12976, -2582.63232, 6.45663,   0.00000, 0.00000, 269.36581);
	CreateDynamicObject(16610, 1195.90125, -2589.70728, 9.52722,   0.00000, 0.00000, 0.30301);
	CreateDynamicObject(970, 1113.76526, -2584.36450, 6.96934,   0.00000, 0.00000, 87.21442);
	CreateDynamicObject(970, 1123.55298, -2575.32495, 7.92085,   1.32000, -1.92000, 93.55759);
	CreateDynamicObject(970, 1114.02539, -2575.26367, 7.90130,   1.32000, -1.92000, 87.17776);
	CreateDynamicObject(970, 1114.86755, -2568.60034, 8.75901,   0.00000, 0.00000, 259.78745);
	CreateDynamicObject(970, 1122.87476, -2568.94580, 8.78543,   0.00000, 0.00000, 278.09915);
	CreateDynamicObject(970, 1123.51636, -2598.00586, 8.01504,   0.00000, 0.00000, 271.33215);
	CreateDynamicObject(970, 1112.99255, -2597.63208, 8.01504,   0.00000, 0.00000, 265.86633);
	CreateDynamicObject(970, 1112.71167, -2610.17480, 10.43770,   0.00000, 0.00000, 92.95448);
	CreateDynamicObject(970, 1123.23193, -2610.76782, 10.43770,   0.00000, 0.00000, 84.13926);
	CreateDynamicObject(19588, 1129.07715, -2588.48364, 6.91949,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1099.25671, -2591.27490, -4.29783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10829, 1095.31067, -2589.79199, 6.17739,   0.00000, 0.00000, 89.89555);
	CreateDynamicObject(2774, 1099.25854, -2586.11816, -4.29783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1091.35291, -2586.25073, -4.29783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1091.34973, -2591.25366, -4.29783,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1113.40234, -2592.18799, 6.96934,   0.00000, 0.00000, 88.15127);
	CreateDynamicObject(970, 1123.30664, -2592.83740, 7.02077,   0.00000, 0.00000, 269.07599);
	CreateDynamicObject(8493, 1119.26563, -2576.56543, 18.81174,   0.00000, 0.00000, 358.65302);
	CreateDynamicObject(970, 1123.36243, -2584.50586, 7.02077,   0.00000, 0.00000, 269.07599);

	//stage
	CreateDynamicObject(8947, 1793.49280, -2034.76697, 15.42940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19817, 1791.13257, -2034.30957, 12.53496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19817, 1796.75134, -2034.04932, 12.53496,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19903, 1787.12366, -2025.83423, 12.53510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19903, 1794.58997, -2031.72034, 12.53510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(10282, 1790.48755, -2028.15759, 13.41920,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13591, 1807.57056, -2025.85583, 12.80560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3761, 1799.77881, -2043.05566, 14.47340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1812.73401, -2075.81714, 12.54510,   0.00000, 0.00000, -91.00000);
	CreateDynamicObject(19425, 1812.78479, -2072.47803, 12.54510,   0.00000, 0.00000, -91.00000);
	CreateDynamicObject(19425, 1812.83289, -2069.17603, 12.54510,   0.00000, 0.00000, -91.00000);
	CreateDynamicObject(8843, 1806.49365, -2063.31958, 12.71150,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(8843, 1804.53088, -2065.35059, 12.71150,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1327, 1802.02759, -2046.35828, 12.53120,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1327, 1802.02759, -2046.35828, 13.12620,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1327, 1802.02759, -2046.35828, 13.72120,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1327, 1802.06079, -2046.53516, 15.08120,   0.00000, 0.00000, -84.00000);
	CreateDynamicObject(10281, 1813.91638, -2063.32715, 15.13600,   0.00000, -0.08500, -269.68500);
	CreateDynamicObject(10281, 1802.36914, -2076.61694, 15.13600,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1294, 1810.65637, -2060.19165, 16.68710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 1797.31274, -2047.34607, 12.96110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 1789.72180, -2047.26172, 12.96110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 1812.31287, -2067.21509, 12.96110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 1812.34875, -2077.28149, 12.96110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19870, 1780.18604, -2018.88440, 14.81110,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19641, 1697.43030, -2067.99438, 12.59930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19641, 1697.38611, -2075.87549, 12.59930,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1370, 1786.94006, -2047.63049, 13.03560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1370, 1787.80090, -2047.70166, 13.03560,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18284, 1775.26257, -2064.90576, 15.30700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3465, 1775.32434, -2056.51953, 13.74080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3465, 1775.35754, -2062.14063, 13.74080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3465, 1775.55188, -2067.77490, 13.74080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3465, 1775.72485, -2073.14648, 13.74080,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11292, 1779.94556, -2042.40869, 13.85320,   0.00000, 0.00000, 0.00000);

	//garage
	CreateDynamicObject(6959,477.0000000,-419.3999900,2757.3000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(6959,496.7000100,-419.7000100,2742.6001000,0.0000000,91.6560000,359.9730000);
 	CreateDynamicObject(6959,477.6000100,-418.8999900,2742.6001000,0.0000000,91.6530000,359.9730000);
	CreateDynamicObject(6959,497.2999900,-399.6000100,2742.6001000,0.0000000,91.6530000,269.0490000);
	CreateDynamicObject(6959,496.5000000,-438.6000100,2742.6001000,0.0000000,91.6480000,269.0440000);
	CreateDynamicObject(6959,477.0000000,-419.3999900,2762.3000000,0.0000000,0.0000000,0.0000000);	 
	CreateDynamicObject(13187,491.7999900,-438.8999900,2758.6001000,0.0000000,0.0000000,88.3620000);
	CreateDynamicObject(13187,483.5000000,-438.7999900,2758.6001000,0.0000000,0.0000000,89.6380000);
	CreateDynamicObject(2323,488.7000100,-401.2999900,2757.3000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2306,491.2999900,-401.3999900,2757.3000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1730,493.2999900,-400.2000100,2757.3000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1518,493.5000000,-400.2999900,2758.7000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2226,491.2999900,-400.2000100,2758.3000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2229,494.7000100,-400.1000100,2757.3000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2229,492.8999900,-400.1000100,2757.3000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2297,488.5000000,-400.2000100,2759.3000000,0.0000000,0.0000000,316.4590000);
	CreateDynamicObject(2654,490.6000100,-400.2999900,2757.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2980,495.1000100,-400.2000100,2758.1001000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2614,487.2000100,-400.0000000,2761.3999000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2611,492.0000000,-400.1000100,2760.0000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1616,496.8999900,-439.1000100,2762.1001000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1584,497.2000100,-404.0000000,2759.5000000,0.0000000,0.0000000,278.3490000);
	CreateDynamicObject(1585,478.2000100,-432.3999900,2759.5000000,0.0000000,0.0000000,271.6380000);
	CreateDynamicObject(14699,494.0000000,-430.1000100,2760.5000000,0.0000000,0.0000000,92.2040000);
	CreateDynamicObject(14699,493.7000100,-420.7000100,2760.5000000,0.0000000,0.0000000,92.2030000);
	CreateDynamicObject(14699,493.2999900,-410.99900,2760.5000000,0.0000000,0.0000000,92.2030000);
	CreateDynamicObject(14699,493.2999900,-403.2999900,2760.5000000,0.0000000,0.0000000,92.2030000);
	CreateDynamicObject(14699,485.7999900,-403.0000000,2760.5000000,0.0000000,0.0000000,92.2030000);
	CreateDynamicObject(14699,486.1000100,-411.3999900,2760.5000000,0.0000000,0.0000000,92.2030000);
	CreateDynamicObject(14699,486.7999900,-420.6000100,2760.5000000,0.0000000,0.0000000,92.2030000);
	CreateDynamicObject(14699,485.7000100,-430.5000000,2760.5000000,0.0000000,0.0000000,92.2030000);
	CreateDynamicObject(2502,478.8999900,-400.0000000,2757.3000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19273, 487.68793, -438.88925, 2758.78760,   0.00000, 0.00000, 175.91960);
	CreateDynamicObject(19900, 480.10303, -400.07925, 2757.25903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19900, 480.74579, -400.07465, 2757.25903,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19815, 482.35214, -399.79022, 2758.80859,   0.00000, 0.00000, -0.78000);
	CreateDynamicObject(11737, 481.59167, -401.42493, 2757.26416,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2465, 479.12677, -400.20123, 2758.53125,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19617, 487.34158, 399.89642, 2760.01953,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19804, 488.39011, -400.00421, 2758.41748,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19805, 485.45383, -399.87045, 2759.29175,   0.00000, 0.00000, 0.00000);

	//USA GARAJ FBI
	//CreateDynamicObject(10184, 617.60950, -602.30725, 17.29980,   0.00000, 0.00000, 0.00000);
	
	//USA MAFII
	CreateDynamicObject(1506, 2544.06641, -1306.37781, 1053.63586,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1506, 2544.06641, -1304.89783, 1053.63586,   0.00000, 0.00000, 90.00000);
	// bug house
	CreateDynamicObject(19303, 442.47998, 509.23032, 1001.63678,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	CreateDynamicObject(19304, 453.06204, 507.98209, 1001.92603,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	CreateDynamicObject(19304, 453.11362, 509.63824, 1001.92603,   0.00000, 0.00000, 90.00000,-1,-1,-1,300.0);
	//NG BAZA
    CreateDynamicObject(19312, 191.14, 1870.04, 21.48,0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);
     // Hq Bug
    CreateDynamicObject(19357, 968.4691, -53.4128, 1001.8241, 0.0000, 0.0000, 0.0000,-1,-1,-1,300.0);
	//Lspd
	gatelspd = CreateObject(10184, 1592.67676, -1638.05225, 14.95110,   0.00000, 0.00000, -89.70000);
    //Lspd Object
	CreateDynamicObject(2952, 1581.99524, -1637.93494, 12.36840,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(983, 1545.0706787109, -1635.6511230469, 13.237774848938, 0, 0, 0,-1,-1,-1,300.0);
    CreateDynamicObject(983, 1544.4979248047, -1620.7434082031, 13.238116264343, 0, 0, 0,-1,-1,-1,300.0);
    lspdbar = CreateDynamicObject(968, 1544.7007, -1630.7527, 13.2983, 0.0000, 90.0200, 90.0000,-1,-1,-1,300.0);
	//Lvpd
	gatelvpd = CreateDynamicObject(10184, 2335.89282, 2444.87451, 7.29770,   0.00000, 0.00000, -30.08000, -1, -1, -1, 300.0);
	gatelvpd2 = CreateDynamicObject(10184, 2294.02222, 2503.16650, 4.70800,   0.00000, 0.00000, 0.00000, -1, -1, -1, 300.0);
	CreateDynamicObject(955, 2273.52612, 2429.61206, 10.21940, 0.00000, 0.00000, 0.00000,-1,-1,-1,300.0); //usa
	CreateDynamicObject(1569, 2293.94946, 2492.96411, 2.28980,   0.00000, 0.00000, 90.00000, -1, -1, -1, 300.0); //dozatorul
	CreateDynamicObject(19313, 2251.27319, 2498.03394, 5.56540,   0.00000, 0.00000, -90.36000,-1,-1,-1,300.0); //gratii
    lvpdbar = CreateDynamicObject(968, 2238.22021, 2450.44312, 10.58781, 0.0000, 90.0200, 90.0000,-1,-1,-1,300.0);
	return 1; 
}
	
stock LoadTextdraws() {

	Time = TextDrawCreate(579.545959, 20.249971, "01:08");
	TextDrawLetterSize(Time, 0.539824, 1.678333);
	TextDrawAlignment(Time, 2);
	TextDrawColor(Time, -1);
	TextDrawSetShadow(Time, 0);
	TextDrawSetOutline(Time, 1);
	TextDrawBackgroundColor(Time, 255);
	TextDrawFont(Time, 3);
	TextDrawSetProportional(Time, 1);
	TextDrawSetShadow(Time, 0)
	;
	RestartTD = TextDrawCreate(95.333396, 232.055496, "SERVERUL SE VA RESTARTA IN 07:00~N~MOTIV: UPDATE");
	TextDrawLetterSize(RestartTD, 0.151666, 1.247406);
	TextDrawTextSize(RestartTD, 0.000000, 154.000000);
	TextDrawAlignment(RestartTD, 2);
	TextDrawColor(RestartTD, -1);
	TextDrawUseBox(RestartTD, 1);
	TextDrawBoxColor(RestartTD, 140);
	TextDrawSetShadow(RestartTD, 0);
	TextDrawSetOutline(RestartTD, 1);
	TextDrawBackgroundColor(RestartTD, 255);
	TextDrawFont(RestartTD, 2);
	TextDrawSetProportional(RestartTD, 1);
	TextDrawSetShadow(RestartTD, 0);

	Date = TextDrawCreate(579.545349, 35.416572, "08.07.2019");
	TextDrawLetterSize(Date, 0.295051, 1.203331);
	TextDrawAlignment(Date, 2);
	TextDrawColor(Date, -1);
	TextDrawSetShadow(Date, 0);
	TextDrawSetOutline(Date, 1);
	TextDrawBackgroundColor(Date, 255);
	TextDrawFont(Date, 2);
	TextDrawSetProportional(Date, 1);
	TextDrawSetShadow(Date, 0);

	Damage[0] = TextDrawCreate(13.333326, 245.014801, "LD_BEAT:chit");
	TextDrawLetterSize(Damage[0], 0.000000, 0.000000);
	TextDrawTextSize(Damage[0], 139.000000, 3.949999);
	TextDrawAlignment(Damage[0], 1);
	TextDrawColor(Damage[0], -16776961);
	TextDrawSetShadow(Damage[0], 0);
	TextDrawSetOutline(Damage[0], 0);
	TextDrawBackgroundColor(Damage[0], 255);
	TextDrawFont(Damage[0], 4);
	TextDrawSetProportional(Damage[0], 0);
	TextDrawSetShadow(Damage[0], 0);

	Damage[1] = TextDrawCreate(13.333326, 187.014801, "LD_BEAT:chit");
	TextDrawLetterSize(Damage[1], 0.000000, 0.000000);
	TextDrawTextSize(Damage[1], 139.000000, 4.000000);
	TextDrawAlignment(Damage[1], 1);
	TextDrawColor(Damage[1], 8388863);
	TextDrawSetShadow(Damage[1], 0);
	TextDrawSetOutline(Damage[1], 0);
	TextDrawBackgroundColor(Damage[1], 255);
	TextDrawFont(Damage[1], 4);
	TextDrawSetProportional(Damage[1], 0);
	TextDrawSetShadow(Damage[1], 0);

	Ruleta_TD[0] = TextDrawCreate(325.764678, 136.916717, "box");
    TextDrawLetterSize(Ruleta_TD[0], 0.000000, 24.164701);
    TextDrawTextSize(Ruleta_TD[0], 0.000000, 377.000000);
    TextDrawAlignment(Ruleta_TD[0], 2);
    TextDrawColor(Ruleta_TD[0], -1);
    TextDrawUseBox(Ruleta_TD[0], 1);
    TextDrawBoxColor(Ruleta_TD[0], 78);
    TextDrawSetShadow(Ruleta_TD[0], 0);
    TextDrawSetOutline(Ruleta_TD[0], 0);
    TextDrawBackgroundColor(Ruleta_TD[0], 255);
    TextDrawFont(Ruleta_TD[0], 1);
    TextDrawSetProportional(Ruleta_TD[0], 1);
    TextDrawSetShadow(Ruleta_TD[0], 0);
 
    Ruleta_TD[1] = TextDrawCreate(148.352798, 124.666664, "Casino Roulette");
    TextDrawLetterSize(Ruleta_TD[1], 0.627294, 2.288331);
    TextDrawAlignment(Ruleta_TD[1], 1);
    TextDrawColor(Ruleta_TD[1], -1);
    TextDrawSetShadow(Ruleta_TD[1], 1);
    TextDrawSetOutline(Ruleta_TD[1], 0);
    TextDrawBackgroundColor(Ruleta_TD[1], 255);
    TextDrawFont(Ruleta_TD[1], 0);
    TextDrawSetProportional(Ruleta_TD[1], 1);
    TextDrawSetShadow(Ruleta_TD[1], 1);
 
    Ruleta_TD[2] = TextDrawCreate(172.823715, 180.666778, "box");
    TextDrawLetterSize(Ruleta_TD[2], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[2], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[2], 2);
    TextDrawColor(Ruleta_TD[2], 255);
    TextDrawUseBox(Ruleta_TD[2], 1);
    TextDrawBoxColor(Ruleta_TD[2], 255);
    TextDrawSetShadow(Ruleta_TD[2], 0);
    TextDrawSetOutline(Ruleta_TD[2], 0);
    TextDrawBackgroundColor(Ruleta_TD[2], 255);
    TextDrawFont(Ruleta_TD[2], 1);
    TextDrawSetProportional(Ruleta_TD[2], 1);
    TextDrawSetShadow(Ruleta_TD[2], 0);
 
    Ruleta_TD[3] = TextDrawCreate(211.423477, 180.466781, "box");
    TextDrawLetterSize(Ruleta_TD[3], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[3], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[3], 2);
    TextDrawColor(Ruleta_TD[3], 255);
    TextDrawUseBox(Ruleta_TD[3], 1);
    TextDrawBoxColor(Ruleta_TD[3], -16776961);
    TextDrawSetShadow(Ruleta_TD[3], 0);
    TextDrawSetOutline(Ruleta_TD[3], 0);
    TextDrawBackgroundColor(Ruleta_TD[3], 255);
    TextDrawFont(Ruleta_TD[3], 1);
    TextDrawSetProportional(Ruleta_TD[3], 1);
    TextDrawSetShadow(Ruleta_TD[3], 0);
 
    Ruleta_TD[4] = TextDrawCreate(250.222885, 180.466781, "box");
    TextDrawLetterSize(Ruleta_TD[4], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[4], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[4], 2);
    TextDrawColor(Ruleta_TD[4], 255);
    TextDrawUseBox(Ruleta_TD[4], 1);
    TextDrawBoxColor(Ruleta_TD[4], 255);
    TextDrawSetShadow(Ruleta_TD[4], 0);
    TextDrawSetOutline(Ruleta_TD[4], 0);
    TextDrawBackgroundColor(Ruleta_TD[4], 255);
    TextDrawFont(Ruleta_TD[4], 1);
    TextDrawSetProportional(Ruleta_TD[4], 1);
    TextDrawSetShadow(Ruleta_TD[4], 0);
 
    Ruleta_TD[5] = TextDrawCreate(289.024810, 180.466781, "box");
    TextDrawLetterSize(Ruleta_TD[5], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[5], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[5], 2);
    TextDrawColor(Ruleta_TD[5], 255);
    TextDrawUseBox(Ruleta_TD[5], 1);
    TextDrawBoxColor(Ruleta_TD[5], -16776961);
    TextDrawSetShadow(Ruleta_TD[5], 0);
    TextDrawSetOutline(Ruleta_TD[5], 0);
    TextDrawBackgroundColor(Ruleta_TD[5], 255);
    TextDrawFont(Ruleta_TD[5], 1);
    TextDrawSetProportional(Ruleta_TD[5], 1);
    TextDrawSetShadow(Ruleta_TD[5], 0);
 
    Ruleta_TD[6] = TextDrawCreate(327.827178, 180.466781, "box");
    TextDrawLetterSize(Ruleta_TD[6], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[6], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[6], 2);
    TextDrawColor(Ruleta_TD[6], 255);
    TextDrawUseBox(Ruleta_TD[6], 1);
    TextDrawBoxColor(Ruleta_TD[6], 8388863);
    TextDrawSetShadow(Ruleta_TD[6], 0);
    TextDrawSetOutline(Ruleta_TD[6], 0);
    TextDrawBackgroundColor(Ruleta_TD[6], 255);
    TextDrawFont(Ruleta_TD[6], 1);
    TextDrawSetProportional(Ruleta_TD[6], 1);
    TextDrawSetShadow(Ruleta_TD[6], 0);
 
    Ruleta_TD[7] = TextDrawCreate(366.629547, 180.466781, "box");
    TextDrawLetterSize(Ruleta_TD[7], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[7], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[7], 2);
    TextDrawColor(Ruleta_TD[7], 255);
    TextDrawUseBox(Ruleta_TD[7], 1);
    TextDrawBoxColor(Ruleta_TD[7], 255);
    TextDrawSetShadow(Ruleta_TD[7], 0);
    TextDrawSetOutline(Ruleta_TD[7], 0);
    TextDrawBackgroundColor(Ruleta_TD[7], 255);
    TextDrawFont(Ruleta_TD[7], 1);
    TextDrawSetProportional(Ruleta_TD[7], 1);
    TextDrawSetShadow(Ruleta_TD[7], 0);
 
    Ruleta_TD[8] = TextDrawCreate(405.431915, 180.466781, "box");
    TextDrawLetterSize(Ruleta_TD[8], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[8], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[8], 2);
    TextDrawColor(Ruleta_TD[8], 255);
    TextDrawUseBox(Ruleta_TD[8], 1);
    TextDrawBoxColor(Ruleta_TD[8], -16776961);
    TextDrawSetShadow(Ruleta_TD[8], 0);
    TextDrawSetOutline(Ruleta_TD[8], 0);
    TextDrawBackgroundColor(Ruleta_TD[8], 255);
    TextDrawFont(Ruleta_TD[8], 1);
    TextDrawSetProportional(Ruleta_TD[8], 1);
    TextDrawSetShadow(Ruleta_TD[8], 0);
 
    Ruleta_TD[9] = TextDrawCreate(444.034271, 180.466781, "box");
    TextDrawLetterSize(Ruleta_TD[9], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[9], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[9], 2);
    TextDrawColor(Ruleta_TD[9], 255);
    TextDrawUseBox(Ruleta_TD[9], 1);
    TextDrawBoxColor(Ruleta_TD[9], 255);
    TextDrawSetShadow(Ruleta_TD[9], 0);
    TextDrawSetOutline(Ruleta_TD[9], 0);
    TextDrawBackgroundColor(Ruleta_TD[9], 255);
    TextDrawFont(Ruleta_TD[9], 1);
    TextDrawSetProportional(Ruleta_TD[9], 1);
    TextDrawSetShadow(Ruleta_TD[9], 0);
 
    Ruleta_TD[10] = TextDrawCreate(482.366058, 179.883453, "box");
    TextDrawLetterSize(Ruleta_TD[10], 0.000000, 4.258821);
    TextDrawTextSize(Ruleta_TD[10], 0.000000, 35.000000);
    TextDrawAlignment(Ruleta_TD[10], 2);
    TextDrawColor(Ruleta_TD[10], 255);
    TextDrawUseBox(Ruleta_TD[10], 1);
    TextDrawBoxColor(Ruleta_TD[10], -16776961);
    TextDrawSetShadow(Ruleta_TD[10], 0);
    TextDrawSetOutline(Ruleta_TD[10], 0);
    TextDrawBackgroundColor(Ruleta_TD[10], 255);
    TextDrawFont(Ruleta_TD[10], 1);
    TextDrawSetProportional(Ruleta_TD[10], 1);
    TextDrawSetShadow(Ruleta_TD[10], 0);
 
    Ruleta_TD[11] = TextDrawCreate(326.705932, 146.833343, "I");
    TextDrawLetterSize(Ruleta_TD[11], 0.449882, 10.781667);
    TextDrawAlignment(Ruleta_TD[11], 2);
    TextDrawColor(Ruleta_TD[11], -1);
    TextDrawSetShadow(Ruleta_TD[11], 0);
    TextDrawSetOutline(Ruleta_TD[11], 0);
    TextDrawBackgroundColor(Ruleta_TD[11], 255);
    TextDrawFont(Ruleta_TD[11], 1);
    TextDrawSetProportional(Ruleta_TD[11], 1);
    TextDrawSetShadow(Ruleta_TD[11], 0);
 
    Ruleta_TD[12] = TextDrawCreate(329.058868, 237.833236, "Rolls in ~y~12~w~ seconds");
    TextDrawLetterSize(Ruleta_TD[12], 0.400000, 1.600000);
    TextDrawAlignment(Ruleta_TD[12], 2);
    TextDrawColor(Ruleta_TD[12], -1);
    TextDrawSetShadow(Ruleta_TD[12], 0);
    TextDrawSetOutline(Ruleta_TD[12], 1);
    TextDrawBackgroundColor(Ruleta_TD[12], 255);
    TextDrawFont(Ruleta_TD[12], 1);
    TextDrawSetProportional(Ruleta_TD[12], 1);
    TextDrawSetShadow(Ruleta_TD[12], 0);
 
    Ruleta_TD[13] = TextDrawCreate(207.176361, 312.500091, "box");
    TextDrawLetterSize(Ruleta_TD[13], 0.000000, 4.023525);
    TextDrawTextSize(Ruleta_TD[13], 100.000000, 127.000000);
    TextDrawAlignment(Ruleta_TD[13], 2);
    TextDrawColor(Ruleta_TD[13], -1);
    TextDrawUseBox(Ruleta_TD[13], 1);
    TextDrawBoxColor(Ruleta_TD[13], 255);
    TextDrawSetShadow(Ruleta_TD[13], 0);
    TextDrawSetOutline(Ruleta_TD[13], 0);
    TextDrawBackgroundColor(Ruleta_TD[13], 255);
    TextDrawFont(Ruleta_TD[13], 1);
    TextDrawSetProportional(Ruleta_TD[13], 1);
    TextDrawSetShadow(Ruleta_TD[13], 0);
    TextDrawSetSelectable(Ruleta_TD[13], true);
 
    Ruleta_TD[14] = TextDrawCreate(331.580230, 312.500091, "box");
    TextDrawLetterSize(Ruleta_TD[14], 0.000000, 4.023525);
    TextDrawTextSize(Ruleta_TD[14], 100.000000, 115.000000);
    TextDrawAlignment(Ruleta_TD[14], 2);
    TextDrawColor(Ruleta_TD[14], -1);
    TextDrawUseBox(Ruleta_TD[14], 1);
    TextDrawBoxColor(Ruleta_TD[14], 8388863);
    TextDrawSetShadow(Ruleta_TD[14], 0);
    TextDrawSetOutline(Ruleta_TD[14], 0);
    TextDrawBackgroundColor(Ruleta_TD[14], 255);
    TextDrawFont(Ruleta_TD[14], 1);
    TextDrawSetProportional(Ruleta_TD[14], 1);
    TextDrawSetShadow(Ruleta_TD[14], 0);
    TextDrawSetSelectable(Ruleta_TD[14], true);
 
    Ruleta_TD[15] = TextDrawCreate(450.116912, 312.316772, "box");
    TextDrawLetterSize(Ruleta_TD[15], 0.000000, 4.023525);
    TextDrawTextSize(Ruleta_TD[15], 100.000000, 115.000000);
    TextDrawAlignment(Ruleta_TD[15], 2);
    TextDrawColor(Ruleta_TD[15], -1);
    TextDrawUseBox(Ruleta_TD[15], 1);
    TextDrawBoxColor(Ruleta_TD[15], -16776961);
    TextDrawSetShadow(Ruleta_TD[15], 0);
    TextDrawSetOutline(Ruleta_TD[15], 0);
    TextDrawBackgroundColor(Ruleta_TD[15], 255);
    TextDrawFont(Ruleta_TD[15], 1);
    TextDrawSetProportional(Ruleta_TD[15], 1);
    TextDrawSetShadow(Ruleta_TD[15], 0);
    TextDrawSetSelectable(Ruleta_TD[15], true);
   
    Ruleta_TD[16] = TextDrawCreate(500.293975, 128.166702, "LD_BEAT:cross");
    TextDrawLetterSize(Ruleta_TD[16], 22.000000, 22.000000);
    TextDrawTextSize(Ruleta_TD[16], 22.000000, 22.000000);
    TextDrawAlignment(Ruleta_TD[16], 1);
    TextDrawColor(Ruleta_TD[16], -1);
    TextDrawSetShadow(Ruleta_TD[16], 0);
    TextDrawSetOutline(Ruleta_TD[16], 0);
    TextDrawBackgroundColor(Ruleta_TD[16], 255);
    TextDrawFont(Ruleta_TD[16], 4);
    TextDrawSetProportional(Ruleta_TD[16], 0);
    TextDrawSetShadow(Ruleta_TD[16], 0);
    TextDrawSetSelectable(Ruleta_TD[16], true);	 

    StageTD[0] = TextDrawCreate(279.000000, 370.029632, "~G~~H~~H~UPGRADE");
	TextDrawLetterSize(StageTD[0], 0.244999, 1.409185);
	TextDrawTextSize(StageTD[0], 8.000000, 59.000000);
	TextDrawAlignment(StageTD[0], 2);
	TextDrawColor(StageTD[0], -1);
	TextDrawUseBox(StageTD[0], 0);
	TextDrawBoxColor(StageTD[0], 255);
	TextDrawSetShadow(StageTD[0], 0);
	TextDrawSetOutline(StageTD[0], 1);
	TextDrawBackgroundColor(StageTD[0], 255);
	TextDrawFont(StageTD[0], 2);
	TextDrawSetProportional(StageTD[0], 1);
	TextDrawSetShadow(StageTD[0], 0);
	TextDrawSetSelectable(StageTD[0], true);

	StageTD[1] = TextDrawCreate(368.067565, 369.614807, "~R~CANCEL");
	TextDrawLetterSize(StageTD[1], 0.244999, 1.409185);
	TextDrawTextSize(StageTD[1], 8.000000, 59.000000);
	TextDrawAlignment(StageTD[1], 2);
	TextDrawColor(StageTD[1], -1);
	TextDrawUseBox(StageTD[1], 0);
	TextDrawBoxColor(StageTD[1], 255);
	TextDrawSetShadow(StageTD[1], 0);
	TextDrawSetOutline(StageTD[1], 1);
	TextDrawBackgroundColor(StageTD[1], 255);
	TextDrawFont(StageTD[1], 2);
	TextDrawSetProportional(StageTD[1], 1);
	TextDrawSetShadow(StageTD[1], 0);
	TextDrawSetSelectable(StageTD[1], true);		
	return 1; 
}  

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {
	new Float:hp, newcar = GetClosestVehicle2(playerid, 40), veh = GetPlayerVehicleID(playerid), engine,lights,alarm,doors,bonnet,boot,objective;
	GetPlayerHealth(playerid, hp);
   	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
   	if(newkeys & KEY_FIRE) {
   		if(!IsPlayerInAnyVehicle(playerid)) {
   			if((GetPlayerWeapon(playerid) > 0 && GetPlayerWeapon(playerid) < 43) && !IsACop(playerid) && GetPlayerVirtualWorld(playerid) < 1) {
   				if(IsPlayerInRangeOfPoint(playerid, 50, 1799.3353,-1857.7065,13.4141) || IsPlayerInRangeOfPoint(playerid, 50, 1127.8387,-1450.3074,15.7969) || IsPlayerInRangeOfPoint(playerid, 25, 1028.0869,-1040.6451,31.5733) ||
   				IsPlayerInRangeOfPoint(playerid, 25, 488.8158,-1727.5239,11.1992) || IsPlayerInRangeOfPoint(playerid, 25, 1460.0826,-1023.9927,23.8281) || IsPlayerInRangeOfPoint(playerid, 25, 2187.2595,1676.2838,11.1053) ||
   				IsPlayerInRangeOfPoint(playerid, 25, 2120.0132,-1786.2161,13.5608) || IsPlayerInRangeOfPoint(playerid, 25, 1621.0037,2210.8643,15.1959) || IsPlayerInRangeOfPoint(playerid, 25, 801.0026,-613.3019,16.3359) ||
   				IsPlayerInRangeOfPoint(playerid, 25, 1118.5520,-2585.4749,7.5227) || IsPlayerInRangeOfPoint(playerid, 25, 2838.4954,1310.6364,11.3906) || IsPlayerInRangeOfPoint(playerid, 25, 2397.8408,-1899.1869,13.5469) ||
   				IsPlayerInRangeOfPoint(playerid, 25, 2849.8909,891.6392,10.7500) || IsPlayerInRangeOfPoint(playerid, 25, 1632.6968,606.3718,7.7813)) { 
	   				SetPlayerArmedWeapon(playerid, 0);
	   				SCM(playerid, -1, "Nu poti folosi arme in safe-zone.");
	   			}	
   			}
   		}
   		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && SpeedBoost[playerid] == 1 && PlayerInfo[playerid][pAdmin] >= 1) {
		    new Float:vx, Float:vy, Float:vz; GetVehicleVelocity(GetPlayerVehicleID(playerid), vx, vy, vz);
        	SetVehicleVelocity(GetPlayerVehicleID(playerid), vx * 1.8, vy *1.8, vz * 1.8);
   		}
   	}
   	if(newkeys & KEY_WALK) {
   		if(Spectate[playerid] != -1) {
   			if(timerspectate[playerid] != Timer:-1) stop timerspectate[playerid];
   			timerspectate[playerid]=Timer:-1;
   			TogglePlayerControllable(playerid, 1); TogglePlayerSpectating(playerid, 0);
   			SetPlayerInterior(playerid, Unspec[playerid][sPint]);
   			PlayerInfo[playerid][pInt] = Unspec[playerid][sPint]; PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
   			Unspec[playerid][sLocal] = -1; gTeam[playerid] = PlayerInfo[playerid][pTeam]; SetPlayerToTeamColor(playerid);
   			PlayerTextDrawHide(playerid, TextDrawSpec[playerid][1]); PlayerTextDrawHide(playerid, TextDrawSpec[playerid][2]);
   			PlayerTextDrawHide(playerid, TextDrawSpec[playerid][3]); PlayerTextDrawHide(playerid, TextDrawSpec[playerid][4]);
   			PlayerTextDrawHide(playerid, TextDrawSpec[playerid][5]);
   			Spectate[playerid] = -1; SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
   		}
   	}
   	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		for(new x = 0; x < sizeof(VehicleInfo); x++)
		{
			if(VehicleInfo[x][vehCarID] == newcar) {
				if(VehicleInfo[x][vehGroup] != 0 && VehicleInfo[x][vehGroup] != 30 && VehicleInfo[x][vehGroup] != 8 && VehicleInfo[x][vehGroup] != 2 && VehicleInfo[x][vehGroup] != 3 && VehicleInfo[x][vehGroup] != 1) {
					if(PlayerInfo[playerid][pMember] == VehicleInfo[x][vehGroup] && OnDuty[playerid] == 1) { }
					else {
						if(AdminDuty[playerid] >= 1) { }
						else {
							ClearAnimations(playerid);
							SCMf(playerid, COLOR_PRINC, ">> {ffffff}Nu faci parte din factiunea %s sau nu esti on duty.", DynamicFactions[VehicleInfo[x][vehGroup]][fName]);
						}
					}
				}
			}
		}
		if(IsACopCar(newcar)) {
		    if(IsACop(playerid) && OnDuty[playerid] == 1) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_WHITE, "Nu faci parte din factiunea Los Santos Police Departament sau nu esti on duty."); }
		}
		if(IsAFbiCar(newcar)) {
		    if(IsACop(playerid) && OnDuty[playerid] == 1) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_WHITE, "Nu faci parte din factiunea Federal Bureau of Investigations sau nu esti on duty."); }
		}
		if(IsANgCar(newcar)) {
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group National Guard."); }
		}	
		if(IsALVPDCar(newcar)) {
		    if(IsACop(playerid)) { }
		    else { ClearAnimations(playerid); SendClientMessage(playerid,COLOR_WHITE, "This vehicle is locked to group Las Venturas Police Department."); }
		}			
  	} 
   	if((IsACBUGWeapon(playerid) && RELEASED(KEY_FIRE)) && newkeys != KEY_FIRE && newkeys & KEY_CROUCH) {
       	ApplyAnimation (playerid , "PED" , "getup" , 4.1 , 0 , 0 , 0 , 0 , 0) ;
       	SCM(playerid,COLOR_DARKPINK,"Pe serverul nostru este interzis c-bug, risti ban 3 zile.");
       	SendAdmins(COLOR_SKEMA2, "cBug:{ffffff} %s make c-bug / c-shot, someone to keep an eye on him", 1, GetName(playerid));
   	}
   	if((newkeys==KEY_CTRL_BACK)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid)==PLAYER_STATE_DRIVER)) 
   	{
   		radio_work(playerid);
	}  	
	if(newkeys & KEY_YES) {		
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 944.7222,-14.4644,1000.9297)) {
			if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, -1, "Ai nevoie de minim level 3.");
			BuyCar[playerid] = -1;
			ShowPlayerDialogEx(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "SERVER: Vehicle Dealership", "Cheap Vehicles\nNormal Vehicles\nExpensive Vehicles\nPremium Vehicles", "Select", "Close");
			}
   		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1791.0586 ,-2032.2661, 15.4568) || IsPlayerInRangeOfPoint(playerid, 2.0, 1796.7007, -2031.8474, 15.4568)) {
	   		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	   			if(IsAnOwnableCar(GetPlayerVehicleID(playerid))) {
					new string[256];
					for(new i; i < MAX_PERSONAL_VEHICLES; i++) {
						if(PlayerInfo[playerid][pCarID][i] == GetPlayerVehicleID(playerid)) {
							if(PlayerInfo[playerid][pCarStage][i] == 0) format(string, sizeof(string), "Vehicle: ~B~%s (%d)~W~~H~~N~Max. Speed: ~B~%d ~W~~H~KM/h~N~Current stage: ~B~%d/3~W~~H~~N~Total boost: ~B~+%d~W~~H~ KM/h / ~P~%d~W~~H~ km/h", 
								aVehicleNames[PlayerInfo[playerid][pCarModel][i] - 400], PlayerInfo[playerid][pCarModel][i], MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]), PlayerInfo[playerid][pCarStage][i], (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) / 6), (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) + PlayerInfo[playerid][pCarStageKM][i]));
							else format(string, sizeof(string), "Vehicle: ~B~%s (%d)~W~~H~~N~Max. Speed: ~B~%d ~W~~H~KM/h~N~Current stage: ~B~%d/3~W~~H~~N~Total boost: ~B~+%d~W~~H~ KM/h / ~P~%d~W~~H~ km/h", 
								aVehicleNames[PlayerInfo[playerid][pCarModel][i] - 400], PlayerInfo[playerid][pCarModel][i], MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]), PlayerInfo[playerid][pCarStage][i], (PlayerInfo[playerid][pCarStageKM] + (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) / 6)), (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) + PlayerInfo[playerid][pCarStageKM][i]));
							PlayerTextDrawSetString(playerid, StagePTD[playerid], string);
							PlayerTextDrawShow(playerid, StagePTD[playerid]);
							TextDrawShowForPlayer(playerid, StageTD[0]);
							TextDrawShowForPlayer(playerid, StageTD[1]);
							SelectTextDraw(playerid, 0xFF0000FF);
							StageVehicle[playerid] = i;
							SCM(playerid, -1, "");
							SCM(playerid, -1, ">> stage #1 - 250 puncte premium.");
							SCM(playerid, -1, ">> stage #2 - 300 puncte premium.");
							SCM(playerid, -1, ">> stage #3 - 400 puncte premium.");
							break;
						}
					}
	   			}
	   			else SendClientMessage(playerid, COLOR_WHITE, "This car is not your personal vehicle.");
	   		}
   		}			
	}	

   	if(newkeys & KEY_NO) {
		for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
   			if(CheckPlayerDistanceToVehicle(5.0, playerid, PlayerInfo[playerid][pCarID][v])) {
	 			if(PlayerInfo[playerid][pCarLock][v] == 1) {
   					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	  	    		SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,0,bonnet,boot,objective);
	  	    		va_GameTextForPlayer(playerid, "~h~%s~n~~g~Unlocked", 5000, 3, aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCarLock][v] = 0;
					gCarLock[PlayerInfo[playerid][pCarID][v]] = 0;
					cUpdate(playerid, v, cLockx);
					return true;
				} else {
 					GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	    			SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,1,bonnet,boot,objective);
					SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarID][v],playerid,0,0);
					va_GameTextForPlayer(playerid, "~h~%s~n~~r~Locked", 5000, 3, aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCarLock][v] = 1;
					gCarLock[PlayerInfo[playerid][pCarID][v]] = 1;
					cUpdate(playerid, v, cLockx);
     				return true;
				}
			} else if(CheckPlayerDistanceToVehicle(5.0, playerid, HireCar[playerid])) {
				if(gCarLock[HireCar[playerid]] == 0) {
					va_GameTextForPlayer(playerid, "~h~%s~n~~r~Locked", 5000, 3, aVehicleNames[GetVehicleModel(HireCar[playerid]) - 400]);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[HireCar[playerid]] = 1;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
		            return true;
			    } else if(gCarLock[HireCar[playerid]] == 1) {
			    	va_GameTextForPlayer(playerid, "~h~%s~n~~g~Unlocked", 5000, 3, aVehicleNames[GetVehicleModel(HireCar[playerid]) - 400]);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[HireCar[playerid]] = 0;
	    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
		            return true;
				}
			} else if(CheckPlayerDistanceToVehicle(5.0, playerid, GetPVarInt(playerid, "rent_take"))) {
				if(gCarLock[GetPVarInt(playerid, "rent_take")] == 0) {
				    GameTextForPlayer(playerid, "~h~~n~~r~locked", 5000, 3);
		  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[GetPVarInt(playerid, "rent_take")] = 1;
	    			GetVehicleParamsEx(GetPVarInt(playerid, "rent_take"),engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(GetPVarInt(playerid, "rent_take"),engine,lights,alarm,1,bonnet,boot,objective);
		            return true;
			    }
				else if(gCarLock[GetPVarInt(playerid, "rent_take")] == 1) {
				    GameTextForPlayer(playerid, "~h~~n~~g~unlocked", 5000, 3);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[GetPVarInt(playerid, "rent_take")] = 0;
	    			GetVehicleParamsEx(GetPVarInt(playerid, "rent_take"),engine,lights,alarm,doors,bonnet,boot,objective);
	      	    	SetVehicleParamsEx(GetPVarInt(playerid, "rent_take"),engine,lights,alarm,0,bonnet,boot,objective);
		            return true;
				}
			}	
		}
	}
	if(newkeys & KEY_CROUCH) {
		if(IsACop(playerid)) {
		   if(IsPlayerInRangeOfPoint(playerid, 15.0,1588.6552, -1637.9025, 15.0358)) {
               MoveObject(gatelspd,1592.65674, -1638.05286, 9.89110,2, -1000.0, -1000.0, -1000.0);
               defer lspdgateclose();
               return true;
           }
		   if(IsPlayerInRangeOfPoint(playerid, 15.0,1544.7007, -1630.7527, 13.2983)) {
               MoveDynamicObject(lspdbar,1544.7007, -1630.7527, 13.2983,1,0.0000, 0.0000, 90.0000);
               defer lspdbarclose();
               return true;
           }	
		   if(IsPlayerInRangeOfPoint(playerid, 15.0,135.2833, 1941.3331, 21.6932)) {
		   	   ShowPlayerDialogEx(playerid, DIALOG_NGNAB, DIALOG_STYLE_MSGBOX, "National Guard", "In ce locatie vrei sa fi teleportat?", "Exterior", "Interior");
               return true;
           }   
           if(IsPlayerInRangeOfPoint(playerid, 15.0,2334.8999000, 2444.3999000, 8.3000000)) {
               MoveDynamicObject(gatelvpd, 2335.89282, 2444.87451, 2.01770,2, -1000.0, -1000.0, -1000.0);
               defer lvpdgateclose();
               return true;
           }
           if(IsPlayerInRangeOfPoint(playerid, 15.0,2295.3000000, 2507.0000000, 5.7000000)) {
               MoveDynamicObject(gatelvpd2, 2294.02222, 2503.16650, -0.27200,2, -1000.0, -1000.0, -1000.0);
               defer lvpdgateclose2();
               return true;
           } 
           if(IsPlayerInRangeOfPoint(playerid, 15.0,2238.22021, 2450.44312, 10.58781)) {
               MoveDynamicObject(lvpdbar,2238.22021, 2450.44312, 10.58781,1,0.0000, 0.0000, 90.0000);
               defer lvpdbarclose();
               return true;
           }	                             		
		}
	}
   	if(newkeys == KEY_LOOK_BEHIND) {
	   if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		   if(IsABike(GetPlayerVehicleID(playerid))) return SCM(playerid, COLOR_LIGHTGREEN3, "You can't do that for bikes!");
		   if(EngineDelay [playerid] > 0) return SCM(playerid, COLOR_WHITE, "Poti folosi aceasta comanda peste cateva secunde!");
		   if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
		   if(Refueling[playerid] == 0) {
     	       if(vehEngine[GetPlayerVehicleID(playerid)] == 0) {
				   vehEngine[GetPlayerVehicleID(playerid)] = 1;
	               GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
	               SetVehicleParamsEx(GetPlayerVehicleID(playerid),VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
	               SetPVarInt(playerid, "Engine", 1);
	               if(Undercover[playerid] != 0) {
	                   sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* An unknown hitman starts the engine of his %s.", aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
	               } else {
	               	   sendNearbyMessage(playerid, 3.0, COLOR_PURPLE, "* %s starts the engine of his %s.", GetName(playerid),aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
				   }
        	   } else if(vehEngine[GetPlayerVehicleID(playerid)] == 1) {
    			   vehEngine[GetPlayerVehicleID(playerid)] = 0;
    			   GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
      	    	   SetVehicleParamsEx(GetPlayerVehicleID(playerid),VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
            	   SetPVarInt(playerid, "Engine", 0);
            	   if(Undercover[playerid] != 0) {
	                   sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* An unknown hitman stops the engine of his %s.", aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
            	   } else {
						sendNearbyMessage(playerid, 3.0, COLOR_PURPLE, "* %s stops the engine of his %s.", GetName(playerid),aVehicleNames[GetVehicleModel(GetPlayerVehicleID(playerid)) - 400]);
				   }
        	   }
        	   EngineDelay [playerid] = 5;
	       }
		   else return SendClientMessage(playerid,COLOR_WHITE,"{999999}Please wait, you refill your vehicle.");
	   }
   	}	
   	if(newkeys & KEY_SPRINT) {
   		if(gPlayerUsingLoopingAnim[playerid] == 1) StopLoopingAnim(playerid);  		
   	}
   	if(newkeys & KEY_ANALOG_DOWN) {
   		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
   			if(GetPVarInt(playerid, "Boot") == 0) {
	 			GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
				SetPVarInt(playerid, "Boot", 1);  				
   			} else if(GetPVarInt(playerid, "Boot") == 1) {
				GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
				SetPVarInt(playerid, "Boot", 0);   				
   			}
   		}
   		return true;
   	} 
   	if(newkeys & KEY_ACTION) {
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
	        if(GetPVarInt(playerid, "Lights") == 0) {
				GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
			 	SetPVarInt(playerid, "Lights", 1);
	        } else if(GetPVarInt(playerid, "Lights") == 1) {
				GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
				SetVehicleParamsEx(veh,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
				SetPVarInt(playerid, "Lights", 0);
	        }
	    }
	    return true;   		
   	} 
   	if(newkeys & KEY_ANALOG_UP) {
      	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
         	if(GetPVarInt(playerid, "Bonnet") == 0) {
			 	GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 	SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
			 	SetPVarInt(playerid, "Bonnet", 1);
         	} else if(GetPVarInt(playerid, "Bonnet") == 1) {
			 	GetVehicleParamsEx(veh,engine,lights,alarm,doors,bonnet,boot,objective);
			 	SetVehicleParamsEx(veh,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
			 	SetPVarInt(playerid, "Bonnet", 0);
         	}
      	}
      	return true;
   	}   
   	if(newkeys & KEY_SECONDARY_ATTACK) {
   		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
   			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1022.6699,-983.9812,42.7132))
   			{
				if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, "only staff!");
				SetPlayerPosEx(playerid, 140.2225,1365.9218,1083.8594); 
				SetPlayerInterior(playerid, 5); 
				SetPlayerVirtualWorld(playerid, 1337);
			} 
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 140.2225,1365.9218,1083.8594))
   			{
				SetPlayerPosEx(playerid, 1022.6699,-983.9812,42.7132); 
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			} 
   			if(IsPlayerInRangeOfPoint(playerid, 1.0, 258.2692,90.7536,1002.4453))
   			{
				if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
				SetPlayerPosEx(playerid, 262.7982,90.8923,1000.8385); 
				SetPlayerInterior(playerid, 6);
				SCM(playerid, -1, "Ai intrat in perimetrul inchisorii"); 
			} 
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 262.7640,90.9949,1001.0391))
   			{
				if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
				SetPlayerPosEx(playerid, 258.5813,90.8412,1002.4453); 
				SetPlayerInterior(playerid, 6);
				SCM(playerid, -1, "Ai iesit din perimetrul inchisorii"); 
			} 
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 246.3885,88.0081,1003.6406))
   			{
				if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
				SetPlayerPosEx(playerid, 1525.1204,-1683.4482,5.890); 
				SetPlayerInterior(playerid, 0);
			} 
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1525.1204,-1683.4482,5.890))
   			{
				if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
				SetPlayerPosEx(playerid, 246.3885,88.0081,1003.6406); 
				SetPlayerInterior(playerid, 6);
			} 
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 270.3159, 80.5530, 1000.9152))
   			{
				SetPlayerPosEx(playerid, 322.1614, 302.4355, 999.0797); 
				SetPlayerInterior(playerid, 5);
			} 
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 1102.4135,-1458.0602,15.7969))
   			{
				SetPlayerPosEx(playerid, 389.5797,173.6944,1008.3828); 
				SetPlayerInterior(playerid, 3);
			} 
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 390.7682,173.7686,1008.3828))
   			{
				SetPlayerPosEx(playerid, 1102.4135,-1458.0602,15.7969); 
				SetPlayerInterior(playerid, 0);
			} 
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 327.7686,-1512.0288,36.0325))
   			{
				SetPlayerPosEx(playerid, 934.4846,7.0950,1000.9887); 
				SetPlayerInterior(playerid, 3); SetPlayerVirtualWorld(playerid, 0);
			}  
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 934.4846,7.0950,1000.9887))
   			{
				SetPlayerPosEx(playerid, 327.7686,-1512.0288,36.0325); 
				SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
			} 
			if(IsPlayerInRangeOfPoint(playerid, 1.0, 322.1614, 302.4355, 999.0797))
   			{
				SetPlayerPosEx(playerid, 270.3159, 80.5530, 1000.9152); 
				SetPlayerInterior(playerid, 6);
			} 
   			if(IsPlayerInRangeOfPoint(playerid, 5.0, 372.5400,-133.0090,1001.4922) && GetPlayerVirtualWorld(playerid) == 50) {
   				SetPlayerPosEx(playerid, 2397.8408,-1899.1869,13.5469);
   				SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
				DisablePlayerCheckpoint(playerid);
				CP[playerid] = 0; 
				RemovePlayerAttachedObject(playerid, 9);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); 
				PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
				SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]); 				
   			}
			if(IsPlayerInRangeOfPoint(playerid, 5.0, 2313.5137,-1347.6245,24.0227))
			{
			    SetPlayerInterior(playerid, 6);
			    SetPlayerPosEx(playerid, -2240.468505,137.060440,1035.414062);
			 
			    SCM(playerid, -1, "Welcome to amanet.");
			}
			 
			if(IsPlayerInRangeOfPoint(playerid, 5.0, -2240.468505,137.060440,1035.414062) && GetPlayerInterior(playerid) == 6)
			{
			    SetPlayerPosEx(playerid, 2313.5137,-1347.6245,24.0227);
			    SetPlayerVirtualWorld(playerid, 0);
			    SetPlayerInterior(playerid, 0);
			}
			if(IsPlayerInRangeOfPoint(playerid, 2.0, 834.6208,7.6082,1004.1870) && GetPlayerVirtualWorld(playerid) == 1338) {
				SetPlayerPos(playerid, 1852.3159,-1145.1041,23.83376); SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
			}     			
   			if(flymode[playerid] == 1) {
   				flymode[playerid] = 0; StopFly(playerid);
   				SetPlayerHealthEx(playerid, 100); SetPlayerArmourEx(playerid, 0);
   			}
   			for(new i = 1; i < sizeof(HouseInfo); i++) {
   				if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && GetPlayerVirtualWorld(playerid) == 0) {
   					if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0) {
   						SetPlayerInterior(playerid, HouseInfo[i][hInterior]); SetPlayerPosEx(playerid, HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
   						PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior]; PlayerInfo[playerid][pLocal] = i; 
   						SetPlayerVirtualWorld(playerid, HouseInfo[i][hVirtual]); 
   						InHouse[playerid] = i;
						if(strlen(housestring[InHouse[playerid]]) > 0) {
			   			    StopAudioStreamForPlayer(playerid);
	    				    PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
						}   						
   					}
				   	else {
					   	SendClientMessage(playerid, COLOR_WHITE, "This house is locked.");
					   	if(IsACop(playerid)) {
					   		BreachID[playerid] = i;
		            		ShowPlayerDialogEx(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "SERVER: Housing", "This house is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
					   	}
					   	if(PlayerInfo[playerid][pMember] == 11) {
					   		BreachID[playerid] = i;
		            		ShowPlayerDialogEx(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "SERVER: Housing", "This house is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
					   	}
				   }   											
   				}
   			}
   			for(new i = 1; i < sizeof(BizzInfo); i++) {
				if (IsPlayerInRangeOfPoint(playerid,2,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) && (GetPlayerVirtualWorld(playerid) == 0 || (GetPlayerVirtualWorld(playerid) == playerid + 146000 && BizzInfo[i][bType] == 6) || (GetPlayerVirtualWorld(playerid) == playerid + 146000 && BizzInfo[i][bType] == 11))) { 
					if(BizzInfo[i][bSbiz] != 0) return false;
					if(GetPlayerCash(playerid) < BizzInfo[i][bEntranceCost]) return SCM(playerid, -1, "Nu ai bani.");
					if(BizzInfo[i][bLocked] == 1) {
						SCM(playerid, -1, "This business is locked.");
					   	if(IsACop(playerid)) {
					   		BreachID[playerid] = i;
		            		ShowPlayerDialogEx(playerid, DIALOG_RAMBIZ, DIALOG_STYLE_MSGBOX, "SERVER: Businesses", "This business is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
					   	}
					  	if(PlayerInfo[playerid][pMember] == 11) {
					   		BreachID[playerid] = i;
		            		ShowPlayerDialogEx(playerid, DIALOG_RAMBIZ, DIALOG_STYLE_MSGBOX, "SERVER: Businesses", "This business is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
					   	}
					   	return true;						
					}
					if(LastBiz[playerid] != i) {
						GivePlayerCash(playerid, -BizzInfo[i][bEntranceCost]); BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
						va_GameTextForPlayer(playerid, "~r~-$%d", 5000, 1, BizzInfo[i][bEntranceCost]);
					   	LastBizTime[playerid] = 60;						
					} else GameTextForPlayer(playerid, "welcome back", 5000, 1);
					LastBiz[playerid] = i;
				   	if(BizzInfo[i][bType] == 1) {
                       	SCM(playerid,COLOR_GREEN3,"Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.");
                       	SCM(playerid,COLOR_GREEN3,"Imprumuturile de orice fel (inclusiv datoriile) se fac pe proprie raspundere. Nu ai nicio garantie ca ii vei recupera.");
                       	SCM(playerid,COLOR_GREEN3,"Afacerile cu bani reali nu sunt permise. Se pedepseste cu ban 7-14 zile la prima abatere si ban permanent la urmatoarea abatere.");
                        SCM(playerid,COLOR_RED,"(!) Daca ai peste $1.000.000.000 in 'Bank Money' tasteaza in banca '/deposit 1'");
			           	SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /deposit, /withdraw, /transfer");
				   	} else if(BizzInfo[i][bType] == 2) SCM(playerid, -1, "Welcome to the gun shop! The commands of this business are as follows: /buygun");
				   	else if(BizzInfo[i][bType] == 3) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buydrink");
				   	else if(BizzInfo[i][bType] == 4) SCM(playerid,COLOR_WHITE,"Welcome to the sex shop! The commands of this business are as follows: /buytoys");
				   	else if(BizzInfo[i][bType] == 5) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /dice /roulette");
				   	else if(BizzInfo[i][bType] == 6) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buy");
				   	else if(BizzInfo[i][bType] == 7 || BizzInfo[i][bType] == 14) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood");
				   	else if(BizzInfo[i][bType] == 8) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfightstyle");
				   	else if(BizzInfo[i][bType] == 9) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood");	
				   	else if(BizzInfo[i][bType] == 11) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /clothes, /exitclothes");				   		

				   	SetPlayerInterior(playerid, BizzInfo[i][bInterior]); SetPlayerPosEx(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
			   		SetPlayerVirtualWorld(playerid, BizzInfo[i][bVirtual]); 
			   		InBussines[playerid] = i;
			   		gString[0] = (EOS);
				   	mysql_format(SQL, gString, 144, "UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d' LIMIT 1", BizzInfo[i][bTill],i);
				   	mysql_tquery(SQL, gString);	
				} 			
   			}
	   	   	for(new fid; fid < sizeof(DynamicFactions); fid++) {
			   	if(IsPlayerInRangeOfPoint(playerid, 2, DynamicFactions[fid][fceX], DynamicFactions[fid][fceY], DynamicFactions[fid][fceZ]) && GetPlayerVirtualWorld(playerid) == 0) {
			   		if(DynamicFactions[fid][fLocked] == 1 && PlayerInfo[playerid][pMember] == fid) {
				   		SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
		                SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]); SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
		                InHQ[playerid] = fid;
		            } else if(DynamicFactions[fid][fLocked] == 0) {
		            	SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
		                SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]); SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
		                InHQ[playerid] = fid;
		            } else {
		            	SendClientMessage(playerid, COLOR_WHITE, "This HQ is locked.");
		            	if(IsACop(playerid)) {
		            		BreachID[playerid] = fid;
		            		ShowPlayerDialogEx(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "SERVER: Group HQ", "This Group HQ is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
		            	}
		            	if(PlayerInfo[playerid][pMember] == 11) {
		            		BreachID[playerid] = fid;
		            		ShowPlayerDialogEx(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "SERVER: Group HQ", "This Group HQ is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
		            	}
		            }
			   	}
		   	} 
		   	for(new fid; fid < sizeof(DynamicFactions); fid++) {
		   	   	if(IsPlayerInRangeOfPoint(playerid, 2, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual]) {
			   		SetPlayerPosEx(playerid, DynamicFactions[fid][fceX], DynamicFactions[fid][fceY], DynamicFactions[fid][fceZ]);
				    SetPlayerInterior(playerid, 0); PlayerInfo[playerid][pInt] = 0; 
				    SetPlayerVirtualWorld(playerid, 0); InHQ[playerid] = -1;
			   }
		   	}
			if(IsPlayerInRangeOfPoint(playerid,2,1584.8812, 1797.7262, 10.8280) && PlayerInfo[playerid][pMember] == 14) SetPlayerPosEx(playerid, 1585.8629, 1793.7830, 30.4688);
		 	if(IsPlayerInRangeOfPoint(playerid,2,1585.8629, 1793.7830, 30.4688) && PlayerInfo[playerid][pMember] == 14) SetPlayerPosEx(playerid, 1584.8812, 1797.7262, 10.8280);
			if(IsPlayerInRangeOfPoint(playerid,2,611.0679,-583.4949,18.2109) && IsACop(playerid)) SetPlayerPosEx(playerid, 613.0522,-568.1258,26.1432);
			if(IsPlayerInRangeOfPoint(playerid,2,613.0522,-568.1258,26.1432) && IsACop(playerid)) SetPlayerPosEx(playerid, 611.0679,-583.4949,18.2109);
			else if (IsPlayerInRangeOfPoint(playerid,1,1552.5898,-1683.4698,13.5504) && GetPlayerVirtualWorld(playerid) == 0) {
				if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Please wait 10 seconds.");				
		      	if(GetPlayerCash(playerid) < 200) return true;
				SetPlayerPos(playerid, 1552.8281,-1683.4645,13.5500); SetPlayerFacingAngle(playerid, 272.63);
    			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
       			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
          		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
            	GivePlayerCash(playerid, -200);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "VENDING", "VEND_Drink_P", 4.0, 0, 0, 0, 0, 0);
				if(hp >= 75) SetPlayerHealthEx(playerid, 100);
				else SetPlayerHealthEx(playerid, hp + 25);
				sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s bought a drink from vending machine.", GetName(playerid));
				delayfactions[playerid] = 10;
			} else if (IsPlayerInRangeOfPoint(playerid,1,2273.5654,2428.7834,10.8203)) {
				if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Please wait 10 seconds.");				
				if(GetPlayerCash(playerid) < 200) return true;
				SetPlayerPos(playerid, 2273.5645,2428.7981,10.8203); SetPlayerFacingAngle(playerid, 3.20);
    			ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
       			PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
          		GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
            	GivePlayerCash(playerid, -200);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "VENDING", "VEND_Drink_P", 4.0, 0, 0, 0, 0, 0);
				if(hp >= 75) SetPlayerHealthEx(playerid, 100);
				else SetPlayerHealthEx(playerid, hp + 25);
				sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s bought a drink from vending machine.", GetName(playerid));
				delayfactions[playerid] = 10;
			} else if (IsPlayerInRangeOfPoint(playerid,1,495.9684,-23.5361,1000.6797)) {
				if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Please wait 10 seconds.");				
				if(GetPlayerCash(playerid) < 200) return true;
				SetPlayerPos(playerid, 495.9684,-23.5361,1000.6797); SetPlayerFacingAngle(playerid, 182.5);
	    		ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);
	       		PlayerPlaySound(playerid, 42600, 0.0, 0.0, 0.0);
	          	GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
	            GivePlayerCash(playerid, -200);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "VENDING", "VEND_Drink_P", 4.0, 0, 0, 0, 0, 0);
				if(hp >= 75) SetPlayerHealthEx(playerid, 100);
				else SetPlayerHealthEx(playerid, hp + 25);
				sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s bought a drink from vending machine.", GetName(playerid));
				delayfactions[playerid] = 10;
			} else if (IsPlayerInRangeOfPoint(playerid,1,316.0904,-140.3487,999.6016)) {
				if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Please wait 10 seconds.");
				if(GetPlayerCash(playerid) < 200) return true;
				SetPlayerPos(playerid, 316.0904,-140.3487,999.6016); SetPlayerFacingAngle(playerid, 269.10);
	    		ApplyAnimation(playerid,"FOOD","EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	       		PlayerPlaySound(playerid, 42601, 0.0, 0.0, 0.0);
	          	GameTextForPlayer(playerid, "~r~-200$", 5000, 1);
	            GivePlayerCash(playerid, -200);
				ClearAnimations(playerid);
				ApplyAnimation(playerid, "VENDING", "VEND_Drink_P", 4.0, 0, 0, 0, 0, 0);
				if(hp >= 75) SetPlayerHealthEx(playerid, 100);
				else SetPlayerHealthEx(playerid, hp + 25);
				sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s bought a drink from vending machine.", GetName(playerid));
				delayfactions[playerid] = 10;
			} else if (IsPlayerInRangeOfPoint(playerid,2,1765.1732,-1569.0253,1742.4930)) SetPlayerPosEx(playerid,1764.3419,-1567.7599,1742.4967);
			else if (IsPlayerInRangeOfPoint(playerid,2,2139.2612,-1697.9432,15.0784)) {
	            SetPlayerInterior(playerid,5); PlayerInfo[playerid][pInt] = 5;
				SetPlayerPosEx(playerid,318.5867,1115.4735,1083.8828);
			} else if (IsPlayerInRangeOfPoint(playerid,2,2307.2935,-1786.0671,13.5557)) {
			    SetPlayerInterior(playerid,3); PlayerInfo[playerid][pInt] = 3;
				SetPlayerPosEx(playerid,1527.229980,-11.574499,1002.097106);
			    GameTextForPlayer(playerid, "~w~B'Dub House", 5000, 1);
			} else if (IsPlayerInRangeOfPoint(playerid,2,288.8405,167.7809,1007.1719) && GetPlayerVirtualWorld(playerid) == 0) {
				SetPlayerInterior(playerid,6); SetPlayerVirtualWorld(playerid,0);
				SetPlayerPosEx(playerid,242.8626,66.2978,1003.6406);
				PlayerInfo[playerid][pInt] = 6; PlayerInfo[playerid][pLocal] = 0; InHQ[playerid] = -1;
			} else if (IsPlayerInRangeOfPoint(playerid,2,288.8405,167.7809,1007.1719) && GetPlayerVirtualWorld(playerid) == 3) {
			   	SetPlayerInterior(playerid,6); SetPlayerVirtualWorld(playerid,3);
			   	SetPlayerPosEx(playerid,242.8626,66.2978,1003.6406);
			   	PlayerInfo[playerid][pInt] = 6; PlayerInfo[playerid][pLocal] = 0; InHQ[playerid] = -1;
			} else if (IsPlayerInRangeOfPoint(playerid,2,242.8626,66.2978,1003.6406) && GetPlayerVirtualWorld(playerid) == 0) {
               	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu faci parte dintr-un departament.");
			   	SetPlayerInterior(playerid,3);
			   	SetPlayerVirtualWorld(playerid,0);
			   	SetPlayerPosEx(playerid,288.8405,167.7809,1007.1719);
			   	PlayerInfo[playerid][pInt] = 6; InHQ[playerid] = 1;
			 } else if (IsPlayerInRangeOfPoint(playerid,2,242.8626,66.2978,1003.6406) && GetPlayerVirtualWorld(playerid) == 3) {
    	       	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu faci parte dintr-un departament.");
			   	SetPlayerInterior(playerid,3); SetPlayerVirtualWorld(playerid,3);
			   	SetPlayerPosEx(playerid,288.8405,167.7809,1007.1719);
			   	PlayerInfo[playerid][pInt] = 6; PlayerInfo[playerid][pLocal] = 0; InHQ[playerid] = 1;
			}	   			   
		   	for(new i = 1; i <  sizeof(HouseInfo); i++) {
			   	if (IsPlayerInRangeOfPoint(playerid, 2,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && HouseInfo[i][hVirtual] == GetPlayerVirtualWorld(playerid)) {
		       	   	if(PlayerInfo[playerid][pSleeping] != 0) return true;
				   	SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0);
				   	SetPlayerPosEx(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
				   	PlayerInfo[playerid][pInt] = 0; PlayerInfo[playerid][pLocal] = 255;
				   	InHouse[playerid] = -1; StopAudioStreamForPlayer(playerid);
					PlayerInfo[playerid][pSleeping] = 0;
			   	}
		   	}
		   	for(new i = 1; i <  sizeof(BizzInfo); i++) {
			   	if (IsPlayerInRangeOfPoint(playerid, 2,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]) && BizzInfo[i][bVirtual]==GetPlayerVirtualWorld(playerid) && BizzInfo[i][bSbiz] == 0) {
				   	SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0;
				   	SetPlayerPosEx(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
				   	PlayerInfo[playerid][pLocal] = 255; SetPlayerVirtualWorld(playerid,0);
	               	InBussines[playerid] = -1; StopAudioStreamForPlayer(playerid);
			   	}
		   	}
		   	if (IsPlayerInRangeOfPoint(playerid,2,1756.4181,-1577.8954,1742.5309) && PlayerInfo[playerid][pJailed] == 0) {
			   	SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0;
			   	SetPlayerPosEx(playerid,1798.5801,-1578.1804,14.0827);
		   	} else if (IsPlayerInRangeOfPoint(playerid,2,1764.3419,-1567.7599,1742.4967)) SetPlayerPosEx(playerid,1765.1732,-1569.0253,1742.4930);
		   	else if (IsPlayerInRangeOfPoint(playerid,2,626.3122,-11.8606,1000.9219) && GetPlayerVirtualWorld(playerid) == 10) {
			   	SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0;
			   	SetPlayerPosEx(playerid,918.6766,-1252.2185,16.2109);
			   	SetPlayerVirtualWorld(playerid, 0); InHQ[playerid] = -1;
		  	} else if (IsPlayerInRangeOfPoint(playerid,2,318.5867,1115.4735,1083.8828)) {
	           	SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0;
			   	SetPlayerPosEx(playerid,2139.2612,-1697.9432,15.0784);
		   	} else if (IsPlayerInRangeOfPoint(playerid,2,-204.439987,-26.453998,1002.273437)) {
			   	SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0;
			   	SetPlayerPosEx(playerid,1090.7542,-1476.3380,22.7465);
		   	} else if (IsPlayerInRangeOfPoint(playerid,2,1527.229980,-11.574499,1002.097106)) {
			  	SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0;
			   	SetPlayerPosEx(playerid,2307.2935,-1786.0671,13.5557);
		   	} else if (IsPlayerInRangeOfPoint(playerid,1,304.5868,-141.9874,1004.0625))  SetPlayerPosEx(playerid,305.7950,-141.8203,1004.0547);
		   	else if (IsPlayerInRangeOfPoint(playerid,1,298.8386,-141.9191,1004.0547))  SetPlayerPosEx(playerid,300.1631,-141.8074,1004.0625);
		   	else if (IsPlayerInRangeOfPoint(playerid,2,1262.1383,-785.3315,1091.9063) && GetPlayerVirtualWorld(playerid) == 3) {
			  	SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0;
			   	SetPlayerPosEx(playerid,1481.1063,-1771.2532,18.7958);
			   	SetPlayerVirtualWorld(playerid,0); InHQ[playerid] = -1;
		   	} else if (IsPlayerInRangeOfPoint(playerid,2,761.412963,1440.191650,1102.703125)) {
			   	SetPlayerPosEx(playerid,387.7978,173.8582,1008.3828);
			   	PlayerInfo[playerid][pInt] = 0; PlayerInfo[playerid][pLocal] = 255; SetPlayerInterior(playerid, 0);
			}	
   		}
   		if(NoFuel[playerid] == 1) {
   			RemovePlayerFromVehicle(playerid); TogglePlayerControllable(playerid, 1); 
   			NoFuel[playerid] = 0;
   		}
   	}
	return 0; }

public OnVehicleSpawn(vehicleid) 
{

	StopBlinkNeons(vehicleid);	


    if(!IsAnOwnableCar(vehicleid))
    {
		Gas[vehicleid] = 100;
		foreach(new i : Player) 
		{
			if(HireCar[i] == vehicleid) HireCar[i] = -1;
		}
  	}
  	else {
  	    new engine,lights,alarm,doors,bonnet,boot,objective;
		foreach(new i : Player) 
		{
			for(new v; v < MAX_PERSONAL_VEHICLES; v++) 
			{
				if(PlayerInfo[i][pCarID][v] == vehicleid)
				{
					LoadCar(i);
					if(PlayerInfo[i][pCarLock][v] == 1)
					 {
						GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(vehicleid,engine,lights,alarm,1,bonnet,boot,objective);
					}
					else
					{
						GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
						SetVehicleParamsEx(vehicleid,engine,lights,alarm,0,bonnet,boot,objective);
					}
					ChangeVehiclePaintjob(vehicleid, PlayerInfo[i][pCarPaintJ][v]);
					for(new d; d < 17; d++)
					{
						if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
					}
					SetVehicleNumberPlate(vehicleid,CarPlate[i][v]);
					cUpdate(i, v, cKMx);
					if(strlen(CarVipName[i][v]) > 0) SetVipText(i, v);
					if(PlayerInfo[i][pCarSouvenrire][v] == 500 && PlayerInfo[i][pCarModel][v] == 411)
					{
						for(new x; x < 5; x++)
						{
						    if(souvenire_objects[PlayerInfo[i][pCarID][v]][x]) DestroyDynamicObject(souvenire_objects[PlayerInfo[i][pCarID][v]][x]);
						    souvenire_objects[PlayerInfo[i][pCarID][v]][x] = 0;
						}
						souvenire_objects[PlayerInfo[i][pCarID][v]][3] = CreateDynamicObject(19314,0,0,-1000,0,0,0,100);
						souvenire_objects[PlayerInfo[i][pCarID][v]][4] = CreateDynamicObject(1146,0,0,-1000,0,0,0,100);

						AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[i][pCarID][v]][3], PlayerInfo[i][pCarID][v], 0.011, 2.877, -0.378, 94.500, -77.999, -11.599);
						AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[i][pCarID][v]][4], PlayerInfo[i][pCarID][v], 0.000, -2.311, 0.360, 0.000, 0.000, 0.000);
						AddVehicleComponent(PlayerInfo[i][pCarID][v], 1079);							
					}		

					if(PlayerInfo[i][pCarSouvenrire][v] == 500 && PlayerInfo[i][pCarModel][v] == 541)
					{
						for(new x; x < 3; x++)
						{
						    if(souvenire_objects[PlayerInfo[i][pCarID][v]][x]) DestroyDynamicObject(souvenire_objects[PlayerInfo[i][pCarID][v]][x]);
						    souvenire_objects[PlayerInfo[i][pCarID][v]][x] = 0;
						}

						souvenire_objects[PlayerInfo[i][pCarID][v]][0] = CreateDynamicObject(1002,0,0,-1000,0,0,0,100);

						AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[i][pCarID][v]][0], PlayerInfo[i][pCarID][v], 0.000000,-2.025000,0.300000,0.000000,0.000000,0.000000);
						AddVehicleComponent(PlayerInfo[i][pCarID][v], 1079);						
					}									

					if(PlayerInfo[i][pCarTranscendent][v] >= 1) SetVehicleHealth(PlayerInfo[i][pCarID][v], 1200.0);		
				}
			}
		}
  	}
  	vehRadio[vehicleid] = 0;
	return 1; 
}

function IsPlayerInTurf(playerid, turfid) {
	if(turfid == -1) return false;
	new Float: x, Float: y, Float: z; GetPlayerPos(playerid, x, y, z);
	if(x >= TurfInfo[turfid][zMinX] && x < TurfInfo[turfid][zMaxX] && y >= TurfInfo[turfid][zMinY] && y < TurfInfo[turfid][zMaxY]) return true;
	return false;  }
function GetPlayerTurf(playerid) {
    for(new i = 1; i < sizeof(Turfs); i++)
    {
        if(IsPlayerInTurf(playerid, i)) {
            return i;
        }
    }
    return -1; } 

timer UnFreezeStation[1000](playerid) return TogglePlayerControllable(playerid, 1);	
timer TimerFisher[10000](playerid) {
	TogglePlayerControllable(playerid, 1);
	if(PlayerInfo[playerid][pLevel] < 4) pesteprice[playerid] = 42000 + random(10000);
	else if(PlayerInfo[playerid][pLevel] >= 4 && PlayerInfo[playerid][pLevel] < 7) pesteprice[playerid] = 44000 + random(10000);
	else if(PlayerInfo[playerid][pLevel] >= 7 && PlayerInfo[playerid][pLevel] < 10) pesteprice[playerid] = 48000 + random(10000);
	else if(PlayerInfo[playerid][pLevel] >= 10 && PlayerInfo[playerid][pLevel] < 15) pesteprice[playerid] = 52000 + random(20000);
	else if(PlayerInfo[playerid][pLevel] >= 15) pesteprice[playerid] = 66000 + random(50000);	
	SCMf(playerid, COLOR_DARKPINK, "Your fish costs $%s because you have level %d.", FormatNumber(pesteprice[playerid]), PlayerInfo[playerid][pLevel]);
	SCM(playerid, -1, "Go to a 24/7 business type to sell your fish.");
	ClearAnimations(playerid); SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, 4);
	return 1; 
}  	
function PayDay() {
	foreach(new i : Player) {
		if(!IsPlayerConnected(i)) return false;
		new key = PlayerInfo[i][pPhousekey], Float:timee, Float:timee2, rent[MAX_PLAYERS], paycheck;
		if(PlayerInfo[i][pGoldenAccount] < 1) paycheck = 30000 * PlayerInfo[i][pLevel];
		if(PlayerInfo[i][pGoldenAccount] >= 1) paycheck = 60000 * PlayerInfo[i][pLevel];

		manage_licenses(i);

		if(PlayerInfo[i][pFpunish] > 0 && PlayerInfo[i][pVIP] == 0) {
			 PlayerInfo[i][pFpunish] --;
			 pUpdateInt(i, "FPunish", PlayerInfo[i][pFpunish]);
		}	 
		if(PlayerInfo[i][pFpunish] > 0 && PlayerInfo[i][pVIP] == 1) {
			PlayerInfo[i][pFpunish] -= 2; pUpdateInt(i, "FPunish", PlayerInfo[i][pFpunish]);
		} 
		if(PlayerInfo[i][pCarLicSuspend] > 0) {
			PlayerInfo[i][pCarLicSuspend] --;
			pUpdateInt(i, "CarLicSuspend", PlayerInfo[i][pCarLicSuspend]);
		}	
		if(PlayerInfo[i][pGunLicSuspend] > 0) {
			PlayerInfo[i][pGunLicSuspend] --; 
			pUpdateInt(i, "GunLicSuspend", PlayerInfo[i][pGunLicSuspend]);
		}	
		if(key != 999) {
			rent[i] = HouseInfo[key][hRent];
			if(rent[i] > GetPlayerCash(i) && strcmp(PlayerInfo[i][pNormalName], HouseInfo[key][hOwner], false) == 0) {
				PlayerInfo[i][pPhousekey] = 999; 
				pUpdateInt(i, "House", 999);
			}	
			HouseInfo[key][hTakings] += rent[i];
			gString[0] = (EOS);
			mysql_format(SQL, gString, 144, "UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d'", HouseInfo[key][hTakings], key);
			mysql_tquery(SQL, gString);
		}
		Tax += TaxValue;
		PlayerInfo[i][pAccount] -= TaxValue;
		if(PlayerInfo[i][pSleeping] < 1) PlayerInfo[i][pConnectTime] += PlayerInfo[i][pPayDay] / 3600.0, pUpdateFloat(i, "ConnectedTime", Float: PlayerInfo[i][pConnectTime]);
		if(PlayerInfo[i][pSleeping] >= 1) PlayerInfo[i][pConnectTime] += 1200 / 3600.0, pUpdateFloat(i, "ConnectedTime", Float: PlayerInfo[i][pConnectTime]);
		timee = PlayerInfo[i][pPayDay] / 3600.0; timee2 = PlayerInfo[i][pPayDay] / 60.0;		
		gString[0] = (EOS);						
		if(PlayerInfo[i][pVIP] == 0 && PlayerInfo[i][pEscapePoints] < 20) PlayerInfo[i][pEscapePoints] ++, pUpdateInt(i, "EscapePoints", PlayerInfo[i][pEscapePoints]);
		if(PlayerInfo[i][pVIP] == 1 && PlayerInfo[i][pEscapePoints] < 20) PlayerInfo[i][pEscapePoints] += 2, pUpdateInt(i, "EscapePoints", PlayerInfo[i][pEscapePoints]);
		PlayerInfo[i][pPayDay] = 0; pUpdateInt(i, "PayDay", 0);
		PlayerInfo[i][pExp] ++;
		PlayerInfo[i][pAccount] += paycheck; pUpdateInt(i, "Bank", PlayerInfo[i][pAccount]);
		if(PlayerInfo[i][pPremiumAccount] >= 1) PlayerInfo[i][pExp] ++;
		if(PlayerInfo[i][pRob] >= 20 && PlayerInfo[i][pGoldenAccount] >= 1) PlayerInfo[i][pRob] ++;
		if(PlayerInfo[i][pRob] < 20 && PlayerInfo[i][pGoldenAccount] < 1) PlayerInfo[i][pRob] ++;
		pUpdateInt(i, "Respect", PlayerInfo[i][pExp]); pUpdateInt(i, "Rob", PlayerInfo[i][pRob]);
		SCM(i, COLOR_CYAN, "--------------------------------------------------------------------------");
		if(PlayerInfo[i][pMember] >= 1) givesalariu(i);
		if(PlayerInfo[i][pSleeping] < 1) SCMf(i, COLOR_GREEN2, "Ai primit %.2f ore jucate (%d minute). Acum ai %.2f ore jucate.", timee, floatround(timee2), Float:PlayerInfo[i][pConnectTime]);
		if(PlayerInfo[i][pSleeping] >= 1) SCMf(i, COLOR_GREEN2, "Ai primit 0.30 ore jucate deoarece dormi (20 minute). Acum ai %.2f ore jucate.", Float: PlayerInfo[i][pConnectTime]);	
		SCMf(i, COLOR_GREY, "Paycheck: $%s | Bank balance: $%s | Tax: $%s (10 percent).", FormatNumber(paycheck), FormatNumber(PlayerInfo[i][pAccount]), FormatNumber(TaxValue));
		SCM(i, COLOR_CYAN, "--------------------------------------------------------------------------");
		PlayerInfo[i][pRoll] += 25; pUpdateInt(i, "Roll", PlayerInfo[i][pRoll]);
		if(PlayerInfo[i][pPet] == 1) PlayerInfo[i][pPetPoints] += 10; pUpdateInt(i, "PetPoints", PlayerInfo[i][pPetPoints]);
		SCMf(i, COLOR_PRINC, ">> {ffffff}ai primit 25 roll points (%d total).", PlayerInfo[i][pRoll]);  
		if(PlayerInfo[i][pTimeCrate] >= 1) PlayerInfo[i][pTimeCrate] --, pUpdateInt(i, "TimeCrate", PlayerInfo[i][pTimeCrate]);
		if(PlayerInfo[i][pTimeCrate] < 1) SCM(i, COLOR_PRINC, ">> {ffffff}poti deschide Reward Crate-ul.");
		if(PlayerInfo[i][pPet] == 1) SCMf(i, COLOR_PRINC, ">> {FFFFFF}ai primit 10 pet points");
		new h,m,s; 
		gettime(h,m,s); 
		checkLevelProgress(i);
	}	
	return 1; 
}
stock GetWeaponSlot (weaponid) {
	switch (weaponid) {
		case 0, 1:
			return false;

		case 2 .. 9:
			return true;
		case 10 .. 15:
			return 10;
		case 16 .. 19, 39:
			return 8;
		case 22 .. 24:
			return 2;
		case 25 .. 27:
			return 3;
		case 28, 29, 32:
			return 4;
		case 30, 31:
			return 5;
		case 33, 34:
			return 6;
		case 35 .. 38:
			return 7;
		case 40:
			return 12;
		case 41 .. 43:
			return 9;

		case 44 .. 46:
			return 11;
	}
	return 0; }
stock GivePlayerWeaponEx(playerid,weapon,ammo) {
	WeaponData[playerid][GetWeaponSlot(weapon)] = true;
	return GivePlayerWeapon(playerid,weapon,ammo);
}
stock ResetPlayerWeaponsEx(playerid) {
	WeaponData[playerid][0] = false; WeaponData[playerid][1] = false; WeaponData[playerid][2] = false; WeaponData[playerid][3] = false;
	WeaponData[playerid][4] = false; WeaponData[playerid][5] = false; WeaponData[playerid][6] = false; WeaponData[playerid][7] = false;
	WeaponData[playerid][8] = false; WeaponData[playerid][9] = false; WeaponData[playerid][10] = false; WeaponData[playerid][11] = false;
	WeaponData[playerid][12] = false;
	return ResetPlayerWeapons(playerid);
}
stock firstTeam(team) {
	new string[32];
	switch(team) {
		case 1: string = "FC Gilau West";
		case 2: string = "CFR Cluj";
		case 3: string = "Barcelona";
		case 4: string = "Everton";
		case 5: string = "Werder Bremen";
		case 6: string = "Hoffenheim";
	}
	return string; }

stock secondTeam(team) {
	new string[32];
	switch(team) {
		case 1: string = "FC Targu Neamt";
		case 2: string = "FC Botosani";
		case 3: string = "Real Madrid";
		case 4: string = "Manchester City";
		case 5: string = "B. Monchengladbach";
		case 6: string = "Augsburg";
	}
	return string; }	

stock teamPrize(team) {
	new cota = 2 + random(3);
	teamPlayerPrize1[team] = cota; 
	teamPlayerPrize2[team] = cota+2; 
	teamPlayerPrize3[team] = cota-1;
	return 1; 
}

stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]);
function OnPlayerRegister(playerid, password[]) {
	new criptedpassword[129];
	format(criptedpassword, sizeof criptedpassword, MD5_Hash(password));
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `users` (`name`,`password`) VALUES ('%s','%s')", GetName(playerid), criptedpassword);
	mysql_tquery(SQL, gString);
	strmid(PlayerInfo[playerid][pKey], criptedpassword, 0, strlen(criptedpassword), 255);
	if(Spectate[playerid] != -1) PlayerInfo[playerid][pInt] = Unspec[playerid][sPint], PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
	ShowPlayerDialogEx(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "Password", "Confirm password", "login", "cancel");
	return 1; 
}	

function OnPlayerLogin(playerid,password[]) {
    new playerip[64], playersip[64], y, m, d, h, mi, s, string[130], savedip[64], qstr[256];
    GetPlayerIp(playerid, playerip, sizeof(playerip));
    GameTextForPlayer(playerid, "~n~~r~CHECKING THE PASSWORD", 700, 3);
    format(qstr,sizeof(qstr),"SELECT * FROM users WHERE `name`='%s' AND `password`='%s' LIMIT 1",GetName(playerid),password);
    new Cache: pass = mysql_query(SQL,qstr);
    if(cache_get_row_count() > 0) {
        cache_get_field_content(0, "password", PlayerInfo[playerid][pKey], SQL, 130);
        cache_get_field_content(0, "name", PlayerInfo[playerid][pNormalName], SQL, 130);
        cache_get_field_content(0, "IP", savedip, SQL, 130);  
        PlayerInfo[playerid][pCorona]					= cache_get_field_content_int(0, "Corona");
        PlayerInfo[playerid][pNeon]						= cache_get_field_content_int(0, "Neon"); 
        PlayerInfo[playerid][pWitch]   					= cache_get_field_content_int(0, "Witch");  
		PlayerInfo[playerid][pMoneyAmanet]              = cache_get_field_content_int(0, "MoneyAmanet");
		PlayerInfo[playerid][pDaysAmanet]               = cache_get_field_content_int(0, "DaysAmanet");
		PlayerInfo[playerid][pCarAmanet]                = cache_get_field_content_int(0, "CarAmanet");
		PlayerInfo[playerid][pHouseAmanet]              = cache_get_field_content_int(0, "HouseAmanet");
		PlayerInfo[playerid][pBusinessAmanet]           = cache_get_field_content_int(0, "BusinessAmanet");           
        PlayerInfo[playerid][pGiftOpened]				= cache_get_field_content_int(0, "GiftOpened");
        PlayerInfo[playerid][pGiftPoints]				= cache_get_field_content_int(0, "GiftPoints");
        PlayerInfo[playerid][pGiftLevel]				= cache_get_field_content_int(0, "GiftLevel");
        PlayerInfo[playerid][pManager]					= cache_get_field_content_int(0, "Manager");
        PlayerInfo[playerid][pMoneyBag]					= cache_get_field_content_int(0, "MoneyBag");
        PlayerInfo[playerid][pMiliarde]					= cache_get_field_content_int(0, "Miliarde");
        PlayerInfo[playerid][pPinCode]					= cache_get_field_content_int(0, "PinCode");
        PlayerInfo[playerid][pKills] 					= cache_get_field_content_int(0, "Kills");
        PlayerInfo[playerid][pGoldenAccount]			= cache_get_field_content_int(0, "GoldenAccount");
        PlayerInfo[playerid][pTokens]					= cache_get_field_content_int(0, "Tokens");
        PlayerInfo[playerid][pRaport][0] 				= cache_get_field_content_int(0, "Raport1");
		PlayerInfo[playerid][pRaport][1] 				= cache_get_field_content_int(0, "Raport2");
		PlayerInfo[playerid][pRaport][2] 				= cache_get_field_content_int(0, "Raport3");
		PlayerInfo[playerid][pRaport][3] 				= cache_get_field_content_int(0, "Raport4");
		PlayerInfo[playerid][pRaport][4] 				= cache_get_field_content_int(0, "Raport5");
		PlayerInfo[playerid][pRaport][5] 				= cache_get_field_content_int(0, "Raport6");
		PlayerInfo[playerid][pRaport][6] 				= cache_get_field_content_int(0, "Raport7");
        PlayerInfo[playerid][pNormalVoucher]			= cache_get_field_content_int(0, "NormalVoucher");
        PlayerInfo[playerid][pPremiumVoucher]			= cache_get_field_content_int(0, "PremiumVoucher");
        PlayerInfo[playerid][pExtraVoucher]				= cache_get_field_content_int(0, "ExtraVoucher");
        PlayerInfo[playerid][pFuel]						= cache_get_field_content_int(0, "Fuel");
        PlayerInfo[playerid][pStaffWarns] 				= cache_get_field_content_int(0, "StaffWarns");
        PlayerInfo[playerid][pLeaderWarns] 				= cache_get_field_content_int(0, "LeaderWarns");
        PlayerInfo[playerid][pRoll]						= cache_get_field_content_int(0, "Roll");
        PlayerInfo[playerid][pGems] 					= cache_get_field_content_int(0, "Gems");
        PlayerInfo[playerid][pQuests]					= cache_get_field_content_int(0, "Quests");
        PlayerInfo[playerid][pColor]					= cache_get_field_content_int(0, "Color");
        PlayerInfo[playerid][pMiniCrate]				= cache_get_field_content_int(0, "MiniCrate");
        PlayerInfo[playerid][pBigCrate] 				= cache_get_field_content_int(0, "BigCrate");
        PlayerInfo[playerid][pGigantCrate] 				= cache_get_field_content_int(0, "GigantCrate");
        PlayerInfo[playerid][pTimeCrate]				= cache_get_field_content_int(0, "TimeCrate");
        PlayerInfo[playerid][pNmute]					= cache_get_field_content_int(0, "Nmute");
        PlayerInfo[playerid][pRmute]					= cache_get_field_content_int(0, "Rmute");
        PlayerInfo[playerid][pEscapePoints] 			= cache_get_field_content_int(0, "EscapePoints");
        PlayerInfo[playerid][pVIP]						= cache_get_field_content_int(0, "VIP");     
        PlayerInfo[playerid][pLevel]                    = cache_get_field_content_int(0, "Level");
        PlayerInfo[playerid][pRob]                      = cache_get_field_content_int(0, "Rob");
        PlayerInfo[playerid][pAdmin]                    = cache_get_field_content_int(0, "Admin");
        PlayerInfo[playerid][pHelper]                   = cache_get_field_content_int(0, "Helper");
        PlayerInfo[playerid][pPremiumAccount]           = cache_get_field_content_int(0, "Premium");
        PlayerInfo[playerid][pPremiumPoints]            = cache_get_field_content_int(0, "PremiumPoints");
        PlayerInfo[playerid][pGloburi]            		= cache_get_field_content_int(0, "globuri");
        PlayerInfo[playerid][pConnectTime]              = cache_get_field_content_float(0, "ConnectedTime");
        PlayerInfo[playerid][pReg]                      = cache_get_field_content_int(0, "Registered");
        PlayerInfo[playerid][pSex]                      = cache_get_field_content_int(0, "Sex");
        PlayerInfo[playerid][pAge]                      = cache_get_field_content_int(0, "Age");
        PlayerInfo[playerid][pGasCan]                   = cache_get_field_content_int(0, "GasCan");
        PlayerInfo[playerid][pMuteTime]                 = cache_get_field_content_int(0, "MuteTime");
        PlayerInfo[playerid][pExp]                      = cache_get_field_content_int(0, "Respect");
        PlayerInfo[playerid][pCash]                     = cache_get_field_content_int(0, "Money");
        PlayerInfo[playerid][pAccount]                  = cache_get_field_content_int(0, "Bank");
        PlayerInfo[playerid][pCrimes]                   = cache_get_field_content_int(0, "Crimes");
        PlayerInfo[playerid][pArrested]                 = cache_get_field_content_int(0, "Arrested");
        PlayerInfo[playerid][pWantedDeaths]             = cache_get_field_content_int(0, "WantedDeaths");
        PlayerInfo[playerid][pPhoneBook]                = cache_get_field_content_int(0, "Phonebook");
        PlayerInfo[playerid][pWantedLevel]              = cache_get_field_content_int(0, "WantedLevel");
        PlayerInfo[playerid][pHeadValue]                = cache_get_field_content_int(0, "HeadValue");
        PlayerInfo[playerid][pJailed]                   = cache_get_field_content_int(0, "Jailed");
        PlayerInfo[playerid][pJailTime]                 = cache_get_field_content_int(0, "JailTime");
        PlayerInfo[playerid][pMats]                     = cache_get_field_content_int(0, "Materials");
        PlayerInfo[playerid][pClan]                     = cache_get_field_content_int(0, "Clan");
        PlayerInfo[playerid][pCRank]                    = cache_get_field_content_int(0, "CRank");
        PlayerInfo[playerid][pCWarns]                   = cache_get_field_content_int(0, "ClanWarns");
        PlayerInfo[playerid][pClanTag]                  = cache_get_field_content_int(0, "ClanTag");
        PlayerInfo[playerid][pDrugs]                    = cache_get_field_content_int(0, "Drugs");
        PlayerInfo[playerid][pLeader]                   = cache_get_field_content_int(0, "Leader");
        PlayerInfo[playerid][pMember]                   = cache_get_field_content_int(0, "Member");
        PlayerInfo[playerid][pRank]                     = cache_get_field_content_int(0, "Rank");
        PlayerInfo[playerid][pFACWarns]                 = cache_get_field_content_int(0, "FWarn");
        PlayerInfo[playerid][pFpunish]                  = cache_get_field_content_int(0, "FPunish");
        PlayerInfo[playerid][pSpawnChange]              = cache_get_field_content_int(0, "SpawnChange");
        PlayerInfo[playerid][pInt]                      = cache_get_field_content_int(0, "Inter");
        PlayerInfo[playerid][pTeam]                     = cache_get_field_content_int(0, "Team");
        PlayerInfo[playerid][pModel]                    = cache_get_field_content_int(0, "Model");
        PlayerInfo[playerid][pPnumber]                  = cache_get_field_content_int(0, "PhoneNr");
        PlayerInfo[playerid][pPhousekey]                = cache_get_field_content_int(0, "House");
        PlayerInfo[playerid][pPbiskey]                  = cache_get_field_content_int(0, "Bizz");
        PlayerInfo[playerid][pCarLic]                   = cache_get_field_content_int(0, "CarLic");
        PlayerInfo[playerid][pCarLicSuspend]            = cache_get_field_content_int(0, "CarLicSuspend");
        PlayerInfo[playerid][pGunLicSuspend]            = cache_get_field_content_int(0, "GunLicSuspend");
        PlayerInfo[playerid][pFlyLic]                   = cache_get_field_content_int(0, "FlyLic");
        PlayerInfo[playerid][pBoatLic]                  = cache_get_field_content_int(0, "BoatLic");
        PlayerInfo[playerid][pGunLic]                   = cache_get_field_content_int(0, "GunLic");
        PlayerInfo[playerid][pPayDay]                   = cache_get_field_content_int(0, "PayDay");
        PlayerInfo[playerid][pWarns]                    = cache_get_field_content_int(0, "Warnings");
        PlayerInfo[playerid][pRented]                   = cache_get_field_content_int(0, "Rented");
        PlayerInfo[playerid][pWTalkie]                  = cache_get_field_content_int(0, "WTalkie");
        PlayerInfo[playerid][pTut]                      = cache_get_field_content_int(0, "Tutorial");
        cache_get_field_content(0, "Email", PlayerInfo[playerid][pEmail], SQL, 64);
        PlayerInfo[playerid][pPhone]                    = cache_get_field_content_int(0, "Phone");
        PlayerInfo[playerid][pSQLID]                    = cache_get_field_content_int(0, "id");
        cache_get_field_content(0, "Victim", PlayerInfo[playerid][pVictim], SQL, 64);
        cache_get_field_content(0, "Accused", PlayerInfo[playerid][pAccused], SQL, 64);
        cache_get_field_content(0, "Crime1", PlayerInfo[playerid][pCrime1], SQL, 64);
        cache_get_field_content(0, "Crime2", PlayerInfo[playerid][pCrime2], SQL, 64);
        cache_get_field_content(0, "Crime3", PlayerInfo[playerid][pCrime3], SQL, 64);
        PlayerInfo[playerid][pStatus]                   = cache_get_field_content_int(0, "Status");
        PlayerInfo[playerid][pFWorks]                   = cache_get_field_content_int(0, "FWorks");
        PlayerInfo[playerid][pVirtualPD]                = cache_get_field_content_int(0, "VirtualPD");
        PlayerInfo[playerid][pGlasses]                  = cache_get_field_content_int(0, "Glasses");
        PlayerInfo[playerid][pFactionJoin]              = cache_get_field_content_int(0, "FactionJoin");
        PlayerInfo[playerid][pCredits]                  = cache_get_field_content_int(0, "CreditsF");
        PlayerInfo[playerid][pHiddenColor]              = cache_get_field_content_int(0, "HiddenColor");
        PlayerInfo[playerid][pHats]                     = cache_get_field_content_int(0, "Hats");
        PlayerInfo[playerid][pFightStyle]               = cache_get_field_content_int(0, "FightStyle");
        PlayerInfo[playerid][pHUD1]                     = cache_get_field_content_int(0, "HUD1");
        PlayerInfo[playerid][pHUD2]                     = cache_get_field_content_int(0, "HUD2");
        PlayerInfo[playerid][pHUD3]                     = cache_get_field_content_int(0, "HUD3");
        PlayerInfo[playerid][pCarSlots]                 = cache_get_field_content_int(0, "CarSlots");
        WTChannel[playerid]                             = cache_get_field_content_int(0, "WTChannel");
        PlayerInfo[playerid][pBattlePassLevelToUp]      = cache_get_field_content_int(0, "BattlePassLevelToUp");
		PlayerInfo[playerid][pBattlepas]                = cache_get_field_content_int(0, "Battlepas");
		PlayerInfo[playerid][pBattlepasLevel]           = cache_get_field_content_int(0, "BattlepasLevel");
		PlayerInfo[playerid][pBattlepasQuests]          = cache_get_field_content_int(0, "BattlepasQuests");
		PlayerInfo[playerid][pReborn]		 	        = cache_get_field_content_int(0, "Reborn");
		PlayerInfo[playerid][pMp3]		 	    	    = cache_get_field_content_int(0, "Mp3");
		PlayerInfo[playerid][pQuestDone] 				= cache_get_field_content_int(0, "Questdone");
		PlayerInfo[playerid][pFragments] 				= cache_get_field_content_int(0, "fragments");
		PlayerInfo[playerid][pJetpack] 			        = cache_get_field_content_int(0, "Jetpack");
		PlayerInfo[playerid][pSantaHat] 				= cache_get_field_content_int(0, "SantaHat");
		PlayerInfo[playerid][pPet] 						= cache_get_field_content_int(0, "Pet");
		PlayerInfo[playerid][pPetPoints] 				= cache_get_field_content_int(0, "PetPoints");
		PlayerInfo[playerid][pPetSkin] 					= cache_get_field_content_int(0, "PetSkin");
		PlayerInfo[playerid][pPetLevel] 				= cache_get_field_content_int(0, "PetLevel");
		cache_get_field_content(0, "PetName", PlayerInfo[playerid][pPetName], SQL, 64);
		PlayerInfo[playerid][pPetStatus] 				= cache_get_field_content_int(0, "PetStatus");

		new battlevar[512], result[512];
		cache_get_field_content(0, "BattlePassMissions", result); format(battlevar, 256, result);
		sscanf(battlevar, "p<|>iiiiiiiiiiiiiiiiii", 
		PlayerInfo[playerid][pBattlePassMissions][0], PlayerInfo[playerid][pBattlePassMissions][1], PlayerInfo[playerid][pBattlePassMissions][2], PlayerInfo[playerid][pBattlePassMissions][3], PlayerInfo[playerid][pBattlePassMissions][4],
		PlayerInfo[playerid][pBattlePassMissions][5], PlayerInfo[playerid][pBattlePassMissions][6], PlayerInfo[playerid][pBattlePassMissions][7], PlayerInfo[playerid][pBattlePassMissions][8], PlayerInfo[playerid][pBattlePassMissions][9],
		PlayerInfo[playerid][pBattlePassMissions][10], PlayerInfo[playerid][pBattlePassMissions][11], PlayerInfo[playerid][pBattlePassMissions][12], PlayerInfo[playerid][pBattlePassMissions][13], PlayerInfo[playerid][pBattlePassMissions][14],
		PlayerInfo[playerid][pBattlePassMissions][15], PlayerInfo[playerid][pBattlePassMissions][16], PlayerInfo[playerid][pBattlePassMissions][17]);
    }    
    else {
        gPlayerLogTries[playerid] -= 1;
        if(gPlayerLogTries[playerid] == 1 || gPlayerLogTries[playerid] == 0) SCM(playerid, COLOR_SKEMA2, "Incorrect password.");
        ShowPlayerDialogEx(playerid, DIALOG_LOGIN2, DIALOG_STYLE_PASSWORD, "SERVER: Login", "Welcome to the RedTimes RPG Server.\n\nPlease enter your password below!", "Login", "Cancel");
        if(gPlayerLogTries[playerid] == -1) {
            SCM(playerid, COLOR_SKEMA2, "You have used all available login attempts.");
            defer KickEx(playerid);
        }
        return true;
    }
    cache_delete(pass);
	ResetPlayerCash(playerid); GivePlayerCash(playerid, PlayerInfo[playerid][pCash]); 
	StopAudioStreamForPlayer(playerid);
	gString[0] = (EOS);
	gPlayerLogged[playerid] = 1;
    if(PlayerInfo[playerid][pReg] == 0) {
        PlayerInfo[playerid][pLevel] = 1; PlayerInfo[playerid][pInt] = 0; PlayerInfo[playerid][pLocal] = 255;
        PlayerInfo[playerid][pTeam] = 3; PlayerInfo[playerid][pModel] = 250; PlayerInfo[playerid][pPnumber] = 0;
        PlayerInfo[playerid][pPhousekey] = 999; PlayerInfo[playerid][pPbiskey] = 255; PlayerInfo[playerid][pAccount] = 1000;
        PlayerInfo[playerid][pReg] = 1; SetPlayerInterior(playerid,0);  
        mysql_format(SQL,gString, 256,"UPDATE users SET `IP`='%s' WHERE `name`='%s' LIMIT 1",playerip,PlayerInfo[playerid][pNormalName]);
        mysql_tquery(SQL,gString);
        pUpdateInt(playerid, "House", PlayerInfo[playerid][pPhousekey]); pUpdateInt(playerid, "Bizz", PlayerInfo[playerid][pPbiskey]); pUpdateInt(playerid, "PhoneNr", PlayerInfo[playerid][pPnumber]);
        pUpdateInt(playerid, "Registered", PlayerInfo[playerid][pReg]); pUpdateInt(playerid, "Team", 3); pUpdateInt(playerid, "Model", 250);              
    	checkLevelProgress(playerid);
    }
    if(PlayerInfo[playerid][pFightStyle] > 0) {
        switch(PlayerInfo[playerid][pFightStyle]) {
            case 1: SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
            case 2: SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
            case 3: SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
            case 4: SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
            case 5: SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
        }
    } 

    else if(PlayerInfo[playerid][pFightStyle] == 0) SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);     
    clearchat(playerid);	
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);      
    SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]); 
    if(PlayerInfo[playerid][pPremiumAccount] == 1) SCM(playerid, -1, "You are a Premium Account user!");
    if(PlayerInfo[playerid][pMember] == 15) Iter_Add(Mecanici, playerid);
    if(PlayerInfo[playerid][pMember] == 9) Iter_Add(Reporters, playerid);  
    if(IsACop(playerid)) Iter_Add(Cops, playerid);   
    if(IsAMember(playerid)) Iter_Add(Gangsters, playerid);
    if(PlayerInfo[playerid][pVIP] >= 1 || PlayerInfo[playerid][pAdmin] >= 1) Iter_Add(Vips, playerid);
    if(PlayerInfo[playerid][pWantedLevel] > 0) {
        SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
        PlayerTextDrawShow(playerid, WantedText[playerid]);
        format(string, 64, "WANTED SCADE IN: ~r~%d MINUTE", wantedlost[playerid]/60+1);
        PlayerTextDrawSetString(playerid, WantedText[playerid], string);
        SCM(playerid, COLOR_SKEMA2, "You're still a wanted man! Your criminal record was reinstated.");
        wantedlost[playerid] = 900; WantedPoints[playerid] = PlayerInfo[playerid][pWantedLevel]*2;
    }
    SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel], 1675.7025,1447.7917,10.7866, 1.0, -1, -1, -1, -1, -1, -1);  
    if(gTeam[playerid] == 0) gTeam[playerid] = 3;
    else gTeam[playerid] = PlayerInfo[playerid][pTeam];        
    if(PlayerInfo[playerid][pMember] != 0) SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, "(Group) {FFFFFF}%s from your group has just logged in.", GetName(playerid));
    if(PlayerInfo[playerid][pMember] != 0) {
        if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0) {
            SCMf(playerid, COLOR_GENANNOUNCE, "Group MOTD: {FFFFFF}%s", DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
        }
    }  
    if(PlayerInfo[playerid][pMember] == 0) gTeam[playerid] = 3, PlayerInfo[playerid][pTeam] = 3;
    else if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 8) gTeam[playerid] = 2, PlayerInfo[playerid][pTeam] = 2;
    else if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pMember] == 10) gTeam[playerid] = 5, PlayerInfo[playerid][pTeam] = 5;
    else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pMember] == 14) gTeam[playerid] = 4, PlayerInfo[playerid][pTeam] = 4;
    else if(PlayerInfo[playerid][pMember] == 1) gTeam[playerid] = 11, PlayerInfo[playerid][pTeam] = 11;
    GetPlayerIp(playerid, playersip, sizeof(playersip)); SpawnPlayer(playerid); getdate(y,m,d); gettime(h,mi,s); 
    mysql_format(SQL,gString, 256, "UPDATE `users` SET `Status`='1',`LastIP`='%s',`lastOn`='%d-%02d-%02d %02d:%02d:%02d' WHERE `id` = '%d' LIMIT 1", playersip, y, m, d, h, mi, s, PlayerInfo[playerid][pSQLID]);
    mysql_tquery(SQL,gString);    
    printf("%s has been connected to the server (IP: %s)", GetName(playerid), playersip);
    playerTextDrawSetString(playerid, LogoTD, "%s/RPG.BLACK~p~MOON~w~.RO", GetName(playerid)); PlayerTextDrawShow(playerid, LogoTD);
    login[playerid] = 0; 
    LoadCarID(playerid); 
   	gString[0] = (EOS);
    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s has connected [cash: $%s] [bank: $%s] [PP: %d] [Level: %d] [%s] [hours: %.2f]')", PlayerInfo[playerid][pSQLID], GetName(playerid), FormatNumber(GetPlayerCash(playerid)), FormatNumber(PlayerInfo[playerid][pAccount]), PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pLevel], playerip, Float: PlayerInfo[playerid][pConnectTime]);
    mysql_tquery(SQL, gString, "", ""); 
    if(PlayerInfo[playerid][pAdmin] >= 1) {
    	Iter_Add(Admins, playerid);
    	SCMf(playerid, COLOR_PRINC, "ADMIN >> {ffffff}You are a level %d admin. There are %d admins online.", PlayerInfo[playerid][pAdmin], Iter_Count(Admins));		
    	SendAdmins(COLOR_PRINC, "WelcomeBot: {ffffff}%s is now connected on the server.", 1,GetName(playerid));
    	SendHelpers(COLOR_PRINC, "WelcomeBot: {ffffff}%s is now connected on the server.", 1, GetName(playerid));    
    }
    if(PlayerInfo[playerid][pHelper] >= 1) {
    	Iter_Add(Helpers, playerid);
    	SCMf(playerid, COLOR_PRINC, "WelcomeBot: {ffffff}You are a level %d helper. There are %d helpers online.", PlayerInfo[playerid][pHelper], Iter_Count(Helpers));	
    	SendAdmins(COLOR_PRINC, "WelcomeBot: {ffffff}%s is now connected on the server.", 1,GetName(playerid));
    	SendHelpers(COLOR_PRINC, "WelcomeBot: {ffffff}%s is now connected on the server.", 1, GetName(playerid));    
    }                
    if(PlayerInfo[playerid][pTut] == 1) arataquests(playerid);

    //quest cand intri pe sv if(PlayerInfo[playerid][pTut] == 1) SendClientMessage(playerid, COLOR_DARKPINK, "");
    if(PlayerInfo[playerid][pHeadValue] >= 10000) Iter_Add(Contracts, playerid);
    format(gString, 128, "SELECT * FROM `friends` WHERE `fid` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
    new Cache: frlist = mysql_query(SQL, gString);
    new pid, gpid = -1;
    for(new i, j = cache_get_row_count (); i != j; ++i) {
        pid = cache_get_field_content_int(i, "pid");
        foreach(new xi: Player){
            if(PlayerInfo[xi][pSQLID] == pid){
                gpid = xi; break;
            }
        }
        if(gpid != -1) SCMf(gpid, COLOR_PRINC, "* Prietenul tau %s s-a conectat pe server.", GetName(playerid));
        gpid = -1;
    }
    cache_delete(frlist);    
    //foreach(new i : Player) {
	 //   if(PlayerInfo[i][pSQLID] == PlayerInfo[playerid][pSQLID] && i != playerid && PlayerInfo[playerid][pClan] >= 1 && PlayerInfo[playerid][pClanTag] >= 1) {
	  //  	SendAdmins(COLOR_PRINC1, "%s was kicked by AdmBot for bug abuse with clan tag.", 1, GetName(playerid)); 
	   // 	SCM(playerid, -1, "Ai primit kick, incearca sa intri peste cateva secunde/minute.");
	   // 	defer KickEx(playerid);
	   // }	
	//}	

	DeletePVar(playerid, "now_login");

    if(IsAMember(playerid)) 
    {
    	/*
        if(!CAC_GetStatus(playerid)) 
        {
            SendClientMessage(playerid, COLOR_SKEMA, "(sampcac): {ffffff}Nu poti sa te loghezi pe cont deoarece nu ai SA:MP AntiCheat instalat.");
            SendClientMessage(playerid, COLOR_SKEMA, "(sampcac): {ffffff}Il poti descarca de pe redtimes.eu/forum --> informatii / anunturi");
            SendClientMessage(playerid, COLOR_SKEMA, "(sampcac): {ffffff}Iti recomandam sa-l instalezi pe un gta curat (moduri.ro/gta)");
            SendClientMessage(playerid, COLOR_SKEMA, "(sampcac): {ffffff}In caz ca ai probleme, poti citii toate informatiile de pe forum -> informatii / anunturi");
            SendAdmins(0xEE5555FF, "%s[%d] was kicked - mafia member without SAMPCAC installed.", 1, GetName(playerid), playerid);
            defer KickEx(playerid);
        }
        if(CAC_GetStatus(playerid)) SendClientMessage(playerid, COLOR_SKEMA, "(Gang AC): {ffffff}Enjoy the game without cheats.");
        */
    } 
	if(PlayerInfo[playerid][pPinCode] >= 1)
    {
    	SCM(playerid, -1, "");
    	//SCM(playerid, COLOR_PRINC, "(PIN): {ffffff}Introdu codul tau pin. Daca ai probleme deschide un ticket pe panel.");

    	ShowPlayerDialogEx(playerid, DIALOG_PIN3, DIALOG_STYLE_INPUT, "Login with pin", "Please enter your pin code", "Insert", "Kick");
    }
	if(PlayerInfo[playerid][pCarAmanet] >= 1 || PlayerInfo[playerid][pHouseAmanet] >= 1 || PlayerInfo[playerid][pBusinessAmanet] >= 1)
	{
	    if(PlayerInfo[playerid][pDaysAmanet] < 1)
	    
{	        PlayerInfo[playerid][pMoneyAmanet] = 0;
	        PlayerInfo[playerid][pDaysAmanet] = 0;
	        PlayerInfo[playerid][pCarAmanet] = 0;
	        PlayerInfo[playerid][pHouseAmanet] = 0;
	        PlayerInfo[playerid][pBusinessAmanet] = 0;
	 
	        gString[0] = (EOS);
	 
	        mysql_format(SQL, gString, 256, "UPDATE `users` SET `MoneyAmanet` = '0', `DaysAmanet` = '0', `CarAmanet` = '0', `HouseAmanet` = '0', `BusinessAmanet` = '0' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	        mysql_tquery(SQL, gString);
	 
	        SCM(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Itemele tale de la amanet au fost inlaturate.");
	    }
	}

	checkLevelProgress(playerid);
  	return 1; 
  }
    
stock SendSplitMessage(playerid, color, final[]) {
    new len = strlen(final),
		_iL = len / EX_SPLITLENGTHH,
		_Line[EX_SPLITLENGTHH+5],
		_:_i@Index;
	if((len % EX_SPLITLENGTHH)) _iL++;
	while(_i@Index < _iL) {
		if(_i@Index == 0)
			strmid(_Line, final, (_i@Index * EX_SPLITLENGTHH), (_i@Index * EX_SPLITLENGTHH) + EX_SPLITLENGTHH);
		else
			strmid(_Line, final, (_i@Index * EX_SPLITLENGTHH), (_i@Index * EX_SPLITLENGTHH) + EX_SPLITLENGTHH);

		if(_iL > 1) {
			if(_i@Index > 0) {
				format(_Line, sizeof _Line, "... %s", _Line);
			}
		}
		SendClientMessage(playerid, color, _Line);
		_i@Index++;
	}
    return 1; 
}
function OOCNews(color,string[]) {
	foreach(new i : Player) if(!gNews[i]) SendSplitMessage(i, color, string);
	return 1; 
}
function SendRadioMessage(member, color, string[]) {
	foreach(new i : Player) {
	    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member) SendClientMessage(i, color, string);
	}
	return 1; 
}
function SendTeamMessage(member, color, string[]) {
	foreach(new i : Player) {
	    if(PlayerInfo[i][pMember] == member || PlayerInfo[i][pLeader] == member) SendClientMessage(i, color, string);
	}
	return 1; 
} 
stock CalculateBestScore(turfid) {
    new bestid, score, bestscore, group1 = WarInfo[turfid][wAttacker], group2 = WarInfo[turfid][wFaction];
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0) {
        foreach(new i : Gangsters) {
            if(group1 == PlayerInfo[i][pMember] || group2 == PlayerInfo[i][pMember]) {
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score >= bestscore) {
                    bestscore = score; bestid = i;
                }
            }
        }
    }
	return bestid; }
stock ConnectedPlayers()
{
    new Connected;
    foreach(new i: Player)
        Connected++;

    return Connected;
}
stock CalculateWorstScore(turfid) {
    new bestid, score, bestscore, group1 = WarInfo[turfid][wAttacker],group2 = WarInfo[turfid][wFaction];
    if(WarInfo[turfid][wAttacker] != 0 && WarInfo[turfid][wFaction] != 0) {
       foreach(new i : Gangsters) {
            if(group1 == PlayerInfo[i][pMember] || group2 == PlayerInfo[i][pMember]) {
                score = ucideri[i][turfid] - decese[i][turfid];
                if(score <= bestscore) {
                    bestscore = score; bestid = i;
                }
            }
        }
    }
    return bestid; }
OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp) {
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}
LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp) {
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
}
StopLoopingAnim(playerid) {
	gPlayerUsingLoopingAnim[playerid] = 0;
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}
PreloadAnimLib(playerid, animlib[]) {
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}
public OnPlayerPickUpPickup(playerid, pickupid) {
	if(pickupid == gslsenter1) SetPlayerPosEx(playerid, 302.3855,-142.1355,1004.0625);
	else if(pickupid == gslsenter2) SetPlayerPosEx(playerid, 296.4399,-141.7991,1004.0625);
	else if(pickupid == gslsenter3) SetPlayerPosEx(playerid, 308.8968,-141.8929,1004.0625);
	else if(pickupid == gslsenter4) SetPlayerPosEx(playerid, 302.3855,-142.1355,1004.0625);	
	return 1; 
}

CMD:buylicenses(playerid, params[]) {
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, -1, "Pentru a cumpara licentele ai nevoie de minim level 3.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 872.3621,-1645.5623,13.5469)) return SCM(playerid, -1, "Nu te afli in locatia corespunzatoare, foloseste /gps.");
	ShowPlayerDialogEx(playerid, DIALOG_LICENTE, DIALOG_STYLE_LIST, "SERVER: Licenses", "Weapon license - 200,000$\nFlying license - 150,000$\nBoat license - 100,000$", "Buy", "Exit");
	return 1; 
}
CMD:getgift(playerid, params[]) {
	if(arecpactiv(playerid)) return true;
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, -1, "Ai nevoie de minim level 3 pentru a folosi aceasta comanda.");
	if(PlayerInfo[playerid][pGiftPoints] < 1000) return SCM(playerid, -1, "Ai nevoie de minim 1000 gift points.");
 	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1266.8634,-887.7623,42.8828)) {
 		DisablePlayerCheckpoint(playerid); CP[playerid] = 0;
 		SCM(playerid, COLOR_PRINC, "Giftbox: Nu te afli langa giftbox, urmeaza checkpoint-ul de pe minimap.");
		SetPlayerCheckpoint(playerid, 1266.8634,-887.7623,42.8828, 3.0);
		CP[playerid] = 43;	
		return true; 
	}
	if(PlayerInfo[playerid][pGiftLevel] == 1) {
		new skema = random(52);
		switch(skema) {
			case 0..15: {
				new money = 1000000 + random(1000000);
				GivePlayerCash(playerid, money);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat $%s.", FormatNumber(money));
			}
			case 16..23: {
				new rob = 10 + random(30);
				PlayerInfo[playerid][pRob] += rob; pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de rob.", rob);
			}
			case 24..29: {
				GivePlayerCash(playerid, 5000000);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 5,000,000$.");
			}
			case 30..37: {
				new rp = 3 + random(5);
				PlayerInfo[playerid][pExp] += rp; pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de respect.", rp);
			}
			case 38..42: {
				if(PlayerInfo[playerid][pCarSlots] < 19) PlayerInfo[playerid][pCarSlots] ++, pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);
				InsertCar(playerid, 20, 1);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat un vehicul de tip Tampa (+ 1 slot de vehicule).");
				va_SendClientMessageToAll(COLOR_RED, "GIFTBOX: {ffffff}%s opened a level 1 giftbox and won Tampa.", GetName(playerid));
			}
			case 43..46: {
				if(PlayerInfo[playerid][pWarns] >= 1) {
					PlayerInfo[playerid][pWarns] = 0; pUpdateInt(playerid, "Warnings", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear warns.");
					return true;
				}
				if(PlayerInfo[playerid][pWarns] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
			case 47..52: {
				if(PlayerInfo[playerid][pFpunish] >= 1) {
					PlayerInfo[playerid][pFpunish] = 0; pUpdateInt(playerid, "FPunish", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear faction punish.");
					return true;
				}
				if(PlayerInfo[playerid][pFpunish] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
		}
	}	
	if(PlayerInfo[playerid][pGiftLevel] == 2) {
		new skema = random(52);
		switch(skema) {
			case 0..15: {
				new money = 1500000 + random(2000000);
				GivePlayerCash(playerid, money);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat $%s.", FormatNumber(money));
			}
			case 16..23: {
				new rob = 15 + random(25);
				PlayerInfo[playerid][pRob] += rob; pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de rob.", rob);
			}
			case 24..29: {
				GivePlayerCash(playerid, 7000000);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 7,000,000$.");
			}
			case 30..37: {
				new rp = 4 + random(6);
				PlayerInfo[playerid][pExp] += rp; pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de respect.", rp);
			}
			case 38..42: {
				if(PlayerInfo[playerid][pCarSlots] < 19) PlayerInfo[playerid][pCarSlots] ++, pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);				
				InsertCar(playerid, 41, 1);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat un vehicul de tip Euros (+ 1 slot de vehicule).");
				va_SendClientMessageToAll(COLOR_RED, "GIFTBOX: {ffffff}%s opened a level 2 giftbox and won Euros.", GetName(playerid));
			}
			case 43..46: {
				if(PlayerInfo[playerid][pWarns] >= 1) {
					PlayerInfo[playerid][pWarns] = 0; pUpdateInt(playerid, "Warnings", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear warns.");
					return true;
				}
				if(PlayerInfo[playerid][pWarns] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
			case 47..52: {
				if(PlayerInfo[playerid][pFpunish] >= 1) {
					PlayerInfo[playerid][pFpunish] = 0; pUpdateInt(playerid, "FPunish", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear faction punish.");
					return true;
				}
				if(PlayerInfo[playerid][pFpunish] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
		}
	}
	if(PlayerInfo[playerid][pGiftLevel] == 3) {
		new skema = random(52);
		switch(skema) {
			case 0..15: {
				new money = 2000000 + random(1000000);
				GivePlayerCash(playerid, money);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat $%s.", FormatNumber(money));
			}
			case 16..23: {
				new rob = 25 + random(25);
				PlayerInfo[playerid][pRob] += rob; pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de rob.", rob);
			}
			case 24..29: {
				GivePlayerCash(playerid, 8500000);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 8,500,000$.");
			}
			case 30..37: {
				new rp = 5 + random(7);
				PlayerInfo[playerid][pExp] += rp; pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de respect.", rp);
			}
			case 38..42: {
				if(PlayerInfo[playerid][pCarSlots] < 19) PlayerInfo[playerid][pCarSlots] ++, pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);				
				InsertCar(playerid, 46, 1);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat un vehicul de tip Huntley (+ 1 slot de vehicule).");
				va_SendClientMessageToAll(COLOR_RED, "GIFTBOX: {ffffff}%s opened a level 3 giftbox and won Huntley.", GetName(playerid));
			}
			case 43..46: {
				if(PlayerInfo[playerid][pWarns] >= 1) {
					PlayerInfo[playerid][pWarns] = 0; pUpdateInt(playerid, "Warnings", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear warns.");
					return true;
				}
				if(PlayerInfo[playerid][pWarns] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
			case 47..52: {
				if(PlayerInfo[playerid][pFpunish] >= 1) {
					PlayerInfo[playerid][pFpunish] = 0; pUpdateInt(playerid, "FPunish", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear faction punish.");
					return true;
				}
				if(PlayerInfo[playerid][pFpunish] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
		}
	}	
	if(PlayerInfo[playerid][pGiftLevel] == 4) {
		new skema = random(52);
		switch(skema) {
			case 0..15: {
				new money = 2000000 + random(2000000);
				GivePlayerCash(playerid, money);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat $%s.", FormatNumber(money));
			}
			case 16..23: {
				new rob = 30 + random(30);
				PlayerInfo[playerid][pRob] += rob; pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de rob.", rob);
			}
			case 24..29: {
				GivePlayerCash(playerid, 10000000);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 10,000,000$.");
			}
			case 30..37: {
				new rp = 5 + random(7);
				PlayerInfo[playerid][pExp] += rp; pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de respect.", rp);
			}
			case 38..42: {
				if(PlayerInfo[playerid][pCarSlots] < 19) PlayerInfo[playerid][pCarSlots] ++, pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);				
				InsertCar(playerid, 51, 1);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat un vehicul de tip Jester (+ 1 slot de vehicule).");
				va_SendClientMessageToAll(COLOR_RED, "GIFTBOX: {ffffff}%s opened a level 4 giftbox and won Jester.", GetName(playerid));
			}
			case 43..46: {
				if(PlayerInfo[playerid][pWarns] >= 1) {
					PlayerInfo[playerid][pWarns] = 0; pUpdateInt(playerid, "Warnings", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear warns.");
					return true;
				}
				if(PlayerInfo[playerid][pWarns] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
			case 47..52: {
				if(PlayerInfo[playerid][pFpunish] >= 1) {
					PlayerInfo[playerid][pFpunish] = 0; pUpdateInt(playerid, "FPunish", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear faction punish.");
					return true;
				}
				if(PlayerInfo[playerid][pFpunish] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
		}
	}			
	if(PlayerInfo[playerid][pGiftLevel] == 5) {
		new skema = random(52);
		switch(skema) {
			case 0..15: {
				new money = 3000000 + random(2000000);
				GivePlayerCash(playerid, money);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat $%s.", FormatNumber(money));
			}
			case 16..23: {
				new rob = 40 + random(30);
				PlayerInfo[playerid][pRob] += rob; pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de rob.", rob);
			}
			case 24..29: {
				GivePlayerCash(playerid, 15000000);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 15,000,000$.");
			}
			case 30..37: {
				new rp = 5 + random(15);
				PlayerInfo[playerid][pExp] += rp; pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);
				SCMf(playerid, COLOR_PRINC, "Giftbox: Ai castigat %d puncte de respect.", rp);
			}
			case 38..42: {
				if(PlayerInfo[playerid][pCarSlots] < 19) PlayerInfo[playerid][pCarSlots] ++, pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);				
				InsertCar(playerid, 57, 1);
				SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat un vehicul de tip Turismo (+ 1 slot de vehicule).");
				va_SendClientMessageToAll(COLOR_RED, "GIFTBOX: {ffffff}%s opened a level 5 giftbox and won Turismo.", GetName(playerid));
			}
			case 43..46: {
				if(PlayerInfo[playerid][pWarns] >= 1) {
					PlayerInfo[playerid][pWarns] = 0; pUpdateInt(playerid, "Warnings", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear warns.");
					return true;
				}
				if(PlayerInfo[playerid][pWarns] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
			case 47..52: {
				if(PlayerInfo[playerid][pFpunish] >= 1) {
					PlayerInfo[playerid][pFpunish] = 0; pUpdateInt(playerid, "FPunish", 0);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat clear faction punish.");
					return true;
				}
				if(PlayerInfo[playerid][pFpunish] < 1) {
					GivePlayerCash(playerid, 3000000);
					SCM(playerid, COLOR_PRINC, "Giftbox: Ai castigat 3,000,000$.");
				}
			}
		}
	}				
	givelevelgift(playerid);				
	PlayerInfo[playerid][pGiftPoints] -= 1000; pUpdateInt(playerid, "GiftPoints", PlayerInfo[playerid][pGiftPoints]);	
	return 1; 
}
CMD:loadtruck(playerid, params[])
{
	new objectid  = CreateObject(3800, 2163.38525, -2283.33569, 6.33094,   0.00000, 0.00000, -44.03999);
	new vehicleid = GetPlayerVehicleID(playerid);
	AttachObjectToVehicle(objectid, vehicleid, 3800, 578, 1.0, 0.0, 0.0, 0.0);
	return 1; 
}	
CMD:getip(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
	new ip[16], id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /getip [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	GetPlayerIp(id, ip, sizeof ip);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s: %s", GetName(id), ip);
	return 1; 
}		
CMD:rob(playerid, params[]) {
	if(arecpactiv(playerid)) return true;
	if(PlayerInfo[playerid][pPremiumAccount] == 0 && PlayerInfo[playerid][pRob] < 10) return SCM(playerid, -1, "Ai nevoie de minim 10 rob points.");
	if(PlayerInfo[playerid][pPremiumAccount] == 1 && PlayerInfo[playerid][pRob] < 8) return SCM(playerid, -1, "Ai nevoie de minim 8 rob points.");
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	if(IsACop(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comande deoarece esti politist.");
	if(InBussines[playerid] < 1) return SCM(playerid, -1, "Nu te afli intr-un business.");
	DisablePlayerCheckpoint(playerid); 
	facerob[playerid] = 1;
	if(PlayerInfo[playerid][pPremiumAccount] == 0) PlayerInfo[playerid][pRob] -= 10;
	if(PlayerInfo[playerid][pPremiumAccount] == 1) PlayerInfo[playerid][pRob] -= 8;
	pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
	SetPlayerWantedLevel(playerid, 6); pUpdateInt(playerid, "WantedLevel", PlayerInfo[playerid][pWantedLevel]);
	PlayerTextDrawShow(playerid, WantedText[playerid]);
	new str1[64], rand = random(sizeof(gRandomRob));
	format(str1,sizeof(str1),"WANTED SCADE IN: ~r~%d MINUTE",wantedlost[playerid]/60+1);
	PlayerTextDrawSetString(playerid, WantedText[playerid], str1);
	WantedPoints[playerid] = 12;
	SetPlayerCriminal(playerid,-1, "armed robbery");	
	SetPlayerCheckpoint(playerid, gRandomRob[rand][0],gRandomRob[rand][1],gRandomRob[rand][2], 4.0);
	CP[playerid] = 114;
	SCM(playerid, COLOR_ROB, "Mergi la checkpoint-ul de pe minimap pentru a ascunde banii furati."); 
	if(quest_type[playerid] == quest_rob) quest_finish(playerid);
	return 1; 
}
CMD:cc(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
    foreach(new id : Player) {
        if(PlayerInfo[id][pAdmin] == 0 && PlayerInfo[id][pHelper] == 0) {
            for(new sal; sal < 100; sal++) SendClientMessage(id, -1, " ");
        }
    }
    SendAdmins(COLOR_PRINC,"(/cc){ffffff} %s cleared the chat.",1,PlayerInfo[playerid][pNormalName]);
    return 1; 
}  	
CMD:goto(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	new Float:X, Float:Y, Float:Z;
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /goto [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	GetPlayerPos(id, X, Y, Z);
	SetPlayerPosEx(playerid, X + 2.0, Y, Z);
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id)); SetPlayerInterior(playerid, GetPlayerInterior(id));
	SCMf(id, -1, "Admin %s teleported to you.", GetName(playerid));
	SCM(playerid, -1, "You have been teleported.");
	SendAdmins(COLOR_PRINC, "(/goto) {ffffff}%s teleported to %s (ID: %d).", 1, GetName(playerid), GetName(id), id);
	if(GetPlayerState(id) == PLAYER_STATE_DRIVER) PutPlayerInVehicle(playerid, GetPlayerVehicleID(id), 1);
	return 1; 
}	
CMD:flip(playerid, params[]) {
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted."); 
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pReborn] < 1) return SCM(playerid, -1, AdminOnly);
	if(barcadelay[playerid] >= 1) return SCMf(playerid, -1, "Poti folosi aceasta comanda peste %d secunde", barcadelay[playerid]);
	barcadelay[playerid] = 3;
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
	new Float:angle;
	GetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
	SetVehicleZAngle(GetPlayerVehicleID(playerid), angle);
	SCM(playerid, COLOR_BLUE, "Your vehicle has been flipped back over.");
	return 1; 
} 
CMD:gmotd(playerid, params[]) {
	if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, -1, "Nu esti lider sau nu ai rank 6.");
	new newsf[128], newsfe[128];
	if(sscanf(params, "s[128]", newsf)) return SCM(playerid, -1, "Syntax: /gmotd [message]");
	mysql_real_escape_string(newsf, newsfe);
	strmid(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], newsfe, 0, strlen(newsfe), 255);
	gString[0] = (EOS);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have changed the group MOTD to %s.", DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	SCM(playerid, -1, "Foloseste gmotd doar pentru anunturi importante. Folosirea /gmotd pentru glume, spam va fi sanctionata.");
	SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, "%s has changed the group MOTD to '%s'.", GetName(playerid), DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	mysql_format(SQL, gString, 256, "UPDATE `factions` SET `Anunt`='%s' WHERE `ID`='%d' LIMIT 1", DynamicFactions[PlayerInfo[playerid][pMember]][fAnn], PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL, gString);
	return 1; 
}
CMD:showmotd(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid, -1, "You are not in a group.");
	if(strlen(DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]) > 0) SCMf(playerid, COLOR_GENANNOUNCE, "Group MOTD: {ffffff}%s", DynamicFactions[PlayerInfo[playerid][pMember]][fAnn]);
	return 1; 
}
CMD:gsafepos(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pMember] == 0) return SCM(playerid, -1, AdminOnly);
	GetPlayerPos(playerid, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2]);
	DestroyDynamicPickup(DynamicFactions[PlayerInfo[playerid][pMember]][fSafePickupID]);
	DestroyDynamic3DTextLabel(DynamicFactions[PlayerInfo[playerid][pMember]][fSafeLabelID]);
	gString[0] = (EOS);
	format(gString, 256, "%s\nGroup Safe", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);
	DynamicFactions[PlayerInfo[playerid][pMember]][fSafePickupID] = CreateDynamicPickup(1274, 23, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], DynamicFactions[PlayerInfo[playerid][pMember]][fVirtual], DynamicFactions[PlayerInfo[playerid][pMember]][fInterior], -1, 50);
	DynamicFactions[PlayerInfo[playerid][pMember]][fSafeLabelID] = CreateDynamic3DTextLabel(gString, COLOR_PRINC, DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DynamicFactions[PlayerInfo[playerid][pMember]][fVirtual], DynamicFactions[PlayerInfo[playerid][pMember]][fInterior], -1, 20.0);
	mysql_format(SQL, gString, 256, "UPDATE `factions` SET `SafePos1`='%f', `SafePos2`='%f', `SafePos3`='%f' WHERE `ID`='%d' LIMIT 1", DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][0], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][1], DynamicFactions[PlayerInfo[playerid][pMember]][fSafePos][2], PlayerInfo[playerid][pMember]);
	mysql_tquery(SQL, gString);
	SCM(playerid, -1, "You have adjusted the position of your group's safe.");
	return 1; 
}	
CMD:top(playerid, params[]) {
	new p=0,t=0,s=0,r=0;
    for(new i = 1; i < sizeof(Turfs); i++) {
		if(TurfInfo[i][zOwned] == 4) t++;
		if(TurfInfo[i][zOwned] == 5) p++;
		if(TurfInfo[i][zOwned] == 6) s++;
		if(TurfInfo[i][zOwned] == 10) r++;
	}
	SCM(playerid, -1, "----- TOP GANGS -----");
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Los Aztecas - %d turfs", t);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Grove Street - %d turfs", p);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Los Vagos - %d turfs", s);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Ballas - %d turfs", r);
	return 1; 
}
CMD:checkv(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id, count;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /checkv [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
		if(PlayerInfo[id][pCarID][v] != 0) {
			SCMf(playerid, -1,"[ID:%d] %s | age: %d | km: %.0f | colors: %d, %d",PlayerInfo[id][pCarID][v],aVehicleNames[PlayerInfo[id][pCarModel][v] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][v]),PlayerInfo[id][pCarKM][v],PlayerInfo[id][pCarColor1][v],PlayerInfo[id][pCarColor2][v]);
			count++;			
		}
	}	
	SendAdmins(COLOR_PRINC, "(/checkv) {ffffff}%s used command /checkv", 1, GetName(playerid));
	if(count == 0) return SCM(playerid, -1, "This player don't have a vehicle spawned.");
	return 1; 
}	
CMD:removetuning(playerid, params[]) {
	new count,carid = GetPlayerVehicleID(playerid),Float:PosX,Float:PosY,Float:PosZ;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your vehicle.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
		if(PlayerInfo[playerid][pCarID][v] == carid) {
			PlayerInfo[playerid][pCarPaintJ][v] = 6;
			for(new s; s < 17; s++) {
				CarMod[playerid][v][s] = 0;
			}
			cUpdate(playerid, v, cModsx); cUpdate(playerid, v, cPaintJx);
			GetVehiclePos(PlayerInfo[playerid][pCarID][v], PosX, PosY, PosZ);
			SetVehicleToRespawnEx2(PlayerInfo[playerid][pCarID][v]);
			SetVehiclePos(PlayerInfo[playerid][pCarID][v], PosX, PosY, PosZ);
			count++;
		}
	}
	if(count == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your vehicle.");
	return 1; 
}
CMD:givekey(playerid, params[]) {
	new id,idcar=-1;
	if(sscanf(params, "u",id)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /givekey [name/playerid]");
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) {
		if(PlayerInfo[playerid][pCarID][vv] == GetPlayerVehicleID(playerid)) idcar = vv;
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You need to be inside your car to change its lock.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "invalid id.");
	if(GetDistanceBetweenPlayers(playerid, id) > 5) return SCM(playerid, -1, "Nu te afli in raza acelui player.");
	HireCar[id] = GetPlayerVehicleID(playerid);
	sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out a set of keys, and tosses them to %s.", GetName(playerid), GetName(id));
	SetVehicleParamsForPlayer(HireCar[id],id,0,0);
	return 1; 
}
//CMD:buycar(playerid, params[]) {
//	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, -1, "Ai nevoie de minim level 3.");
//	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COLOR_WHITE,"You need to be on foot.");
//	if(IsPlayerInRangeOfPoint(playerid, 7.0, 328.3534,-1513.1687,36.0391)) {
//		BuyCar[playerid] = -1;
//		ShowPlayerDialogEx(playerid, DIALOG_CARBUY, DIALOG_STYLE_LIST, "SERVER: Vehicle Dealership", "Cheap Vehicles\nNormal Vehicles\nExpensive Vehicles\nPremium Vehicles", "Select", "Close");
//	}
//	else return SCM(playerid,COLOR_WHITE,"You are not at the DealerShip.");
//	return 1; }

CMD:editstock(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
	new model, stocks, id;
	if(sscanf(params, "dd", model, stocks)) return SCM(playerid, -1, "Syntax: /editstock [model] [stock]");
	gString[0] = (EOS);
	format(gString, 300, "SELECT * FROM `stock` WHERE `vid`='%d'", model);
	new Cache: result = mysql_query(SQL, gString);
	if(cache_get_row_count() > 0) {
		for(new i, j = cache_get_row_count(); j != i; ++i) id = cache_get_field_content_int(i, "ID");
		gString[0] = (EOS);
		mysql_format(SQL, gString, 256, "UPDATE `stock` SET `Stock` = '%d' WHERE `vid` = '%d' LIMIT 1", stocks, model);
		mysql_tquery(SQL, gString); 
		Stock[id][vStock] = stocks;
		SendAdmins(COLOR_PRINC, "(/editstock) {ffffff}Administrator %s [user: %d] changed dealership stock for car id %d in %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], model, stocks);
	} else {
		SCM(playerid, -1, "This model doesn't exist in dealership.");
		cache_delete(result);
		return true;
	}
	cache_delete(result);
	return 1; 
}
CMD:v(playerid, params[]) {
	new masina[124], count, souvenire[15], transcendent[15], vip[15], rainbow[15], stage[20];
	gString[0] = (EOS);
	for(new id; id < PlayerInfo[playerid][pCarSlots]; id++) {
		if(PlayerInfo[playerid][pCar][id] != -1) {

			if(PlayerInfo[playerid][pCarSouvenrire][id] >= 1) souvenire = "{fca103}[S]";
			if(PlayerInfo[playerid][pCarSouvenrire][id] < 1) souvenire = "";

			if(PlayerInfo[playerid][pCarTranscendent][id] >= 1) transcendent = "{806000}[T]";
			if(PlayerInfo[playerid][pCarTranscendent][id] < 1) transcendent = "";

			if(PlayerInfo[playerid][pCarVIP][id] >= 1) vip = "{6065eb}[V]";
			if(PlayerInfo[playerid][pCarVIP][id] < 1) vip = "";

			if(PlayerInfo[playerid][pCarRainbow][id] >= 1) rainbow = "{9bd1c8}[R]";
			if(PlayerInfo[playerid][pCarRainbow][id] < 1) rainbow = "";

			if(PlayerInfo[playerid][pCarStage][id] >= 1) format(stage, sizeof stage, "{8a3b2d}[S:%d/3]", PlayerInfo[playerid][pCarStage][id]);
			if(PlayerInfo[playerid][pCarStage][id] < 1) stage = "";

			if(PlayerInfo[playerid][pCarID][id] != 0) {
				format(masina, 124, "{FFFFFF}%s (ID: %d) {20a51a}(spawned) %s %s %s %s %s\n", aVehicleNames[PlayerInfo[playerid][pCarModel][id] - 400], PlayerInfo[playerid][pCarID][id], souvenire, transcendent, vip, rainbow, stage);
				strcat(gString, masina);
			} else {
				format(masina, 124, "{FFFFFF}%s {FFFFFF}(despawned) %s %s %s %s %s\n", aVehicleNames[PlayerInfo[playerid][pCarModel][id] - 400], souvenire, transcendent, vip, rainbow, stage);
				strcat(gString, masina);
			}
			count ++;
		} else {
			format(masina, 124, "{FFFF00}[empty]\n"); 
			strcat(gString, masina);
		}
	}
	if(count < 1) return SCM(playerid, -1, "You don't own any cars.");
	ShowPlayerDialogEx(playerid, DIALOG_VEHSPAWN, DIALOG_STYLE_LIST, "Manage your vehicles", gString, "Select", "Cancel");
	return 1; 
}
CMD:sellhidden(playerid, params[]) {
	new id, price;
	if(sscanf(params, "ui", id, price)) return SCM(playerid, -1, "Syntax: /sellhidden [name/playerid] [price]");
	if(Spectate[id] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe acel player.");
	if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "Ai nevoie de minim 5 ore jucate.");
	if(playerid == id) return SCM(playerid, -1, "You can't sell a hidden color to yourself.");
	if(SellTradeTimer[playerid] != 0) return SCM(playerid, -1, "You already have sent an offer. The offer will expire in 2 minutes.");
	if(price < 1 || price > 10000000) return SCM(playerid, -1, "Price must be between 1 and 10,000,000$.");
	if(GetPlayerCash(id) < price) return SCM(playerid, -1, "This player don't have enough money.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(IsPlayerInRangeOfPlayer(playerid, id, 5.0)) {
		SellHiddenID[playerid] = id; SellHiddenPrice[playerid] = price;
		gString[0] = (EOS);
		format(gString, 256, "Esti sigur ca vrei sa ii vinzi lui %s o culoare Hidden??\nVei primi suma de $%s, iar %s va primi o culoare hidden.", GetName(id), FormatNumber(price), GetName(id));
		ShowPlayerDialogEx(playerid, DIALOG_SELLHIDDEN, DIALOG_STYLE_MSGBOX, "Esti sigur?", gString, "Da", "Nu");
	}
	return 1; 
}
CMD:tradecar(playerid, params[]) {
	new id, price, idcar1=-1, idcar2=-1, vid = GetPlayerVehicleID(playerid), vid2 = GetPlayerVehicleID(id), hidden[50];
	if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "You don't have 5 hours.");
	if(PlayerInfo[id][pConnectTime] < 5) return SCM(playerid, -1, "Acel player nu are 5 ore jucate.");
	if(sscanf(params, "ui", id, price)) return SCM(playerid, -1, "Syntax: /tradecar [name/playerid] [difference] - you will pay the difference");
	if(Spectate[id] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe acel player.");
	if(id == playerid) return SCM(playerid, -1, "You can't trade your car to yourself.");
	if(SellTradeTimer[playerid] != 0) return SCM(playerid, -1, "You already have sent an offer. The offer will expire in 2 minutes.");
	if(price < 1 || price > 500000000) return SCM(playerid, -1, "Price not lower than 1 and not higher than $500,000,000.");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You need to be in your personal car.");
	if(!IsPlayerInAnyVehicle(id)) return SCM(playerid, -1, "That player needs to be in his personal car.");
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) {
		if(vid == PlayerInfo[playerid][pCarID][vv]) idcar1 = vv;
	}
	if(idcar1 == -1) return SCM(playerid, COLOR_WHITE, "You need to be in your personal car.");
    for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) {
		if(vid2 == PlayerInfo[id][pCarID][vv]) idcar2 = vv;
	}
	if(idcar2 == -1) return SCM(playerid, COLOR_WHITE, "That player needs to be in his personal car.");
	if(GetPlayerCash(playerid) < price) return SCM(playerid, -1, "You don't have enough money.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(IsPlayerInRangeOfPlayer(playerid, id, 5.0)) {
		SelectedCar[playerid] = idcar1; SelectedCar[id] = idcar2;
		SellTradeID[playerid] = id; SellTradePrice[playerid] = price;
		if(PlayerInfo[id][pCarColor1][idcar2] >= 128 || PlayerInfo[id][pCarColor2][idcar2] >= 128) format(hidden, 50, "hidden colors: %d, %d", PlayerInfo[id][pCarColor1][idcar2], PlayerInfo[id][pCarColor2][idcar2]);
		else format(hidden, 50, "no hidden colors");
		gString[0] = (EOS);
		format(gString, 256, "You want to trade your car (%s) + $%s for %s's car (%s[age: %d, distance: %.0fKM, %s])?", aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],FormatNumber(price),GetName(id),aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400],GetDaysFromTimestamp(PlayerInfo[id][pCarBuyTime][idcar2]),PlayerInfo[id][pCarKM][idcar2],hidden);
		ShowPlayerDialogEx(playerid, DIALOG_TRADECAR, DIALOG_STYLE_MSGBOX, "Trade car", gString, "Yes", "No");
	}
	return 1; 
}
CMD:sellcarto(playerid, params[]) {
	new id, price, vid = GetPlayerVehicleID(playerid), idcar=-1;
	if(sscanf(params, "ui", id, price)) return SCM(playerid, -1, "Syntax: /sellcarto [name/playerid] [price]");
	if(Spectate[id] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe acel player.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "You can't sell your car to yourself.");
  	if(SellTradeTimer[playerid] != 0) return SCM(playerid, -1, "You already have sent an offer. The offer will expire in 2 minutes.");
  	if(price < 1 || price > 500000000) return SCM(playerid, -1, "Price not lower then 1 and not higher then $500,000,000.");
  	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You are not in your personal car.");
  	if(GetPlayerCash(id) < price) return SCM(playerid, -1, "This player don't have money needed.");
  	if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "You don't have 5 hours.");
  	if(PlayerInfo[id][pConnectTime] < 5) return SCM(playerid, -1, "That player doesn't have 5 hours.");
  	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) {
  		if(vid == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
  	}
  	if(idcar == -1) return SCM(playerid, -1, "You are not in your personal car.");
  	if(IsPlayerInRangeOfPlayer(playerid, id, 5.0)) {
  		SelectedCar[playerid] = idcar; SellTradeID[playerid] = id; SellTradePrice[playerid] = price;
  		gString[0] = (EOS);
  		format(gString, 256, "Are you sure you want to sell your car to %s for %s$?", GetName(id), FormatNumber(price));
  		ShowPlayerDialogEx(playerid, DIALOG_SELLCARTO, DIALOG_STYLE_MSGBOX, "Are you sure?", gString, "Yes", "No");
  	}
	return 1; 
}
CMD:sellcar(playerid, params[]) {
	new vehh = GetPlayerVehicleID(playerid), value, found, cashveh;
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 338.1959,-1522.3083,33.2143)) return SCM(playerid, -1, "You are not at the car seller. (/gps => other locations => car seller)");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You are not in your car.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
		if(PlayerInfo[playerid][pCarID][v] == vehh) {
			gString[0] = (EOS);
			format(gString, 256, "SELECT * FROM `stock` WHERE `vid`='%d'", PlayerInfo[playerid][pCarModel][v]);
			new Cache: result = mysql_query(SQL, gString);
			for(new i, j = cache_get_row_count (); i != j; ++i) value = cache_get_field_content_int(i, "Price");
			cache_delete(result);
			if(PlayerInfo[playerid][pCarModel][v] == 539 || PlayerInfo[playerid][pCarModel][v] == 502 || PlayerInfo[playerid][pCarModel][v] == 503 || PlayerInfo[playerid][pCarModel][v] == 494 || PlayerInfo[playerid][pCarModel][v] == 487 || PlayerInfo[playerid][pCarModel][v] == 447 || PlayerInfo[playerid][pCarModel][v] == 409) 
				return SendClientMessage(playerid, COLOR_WHITE, "This car can't be sold to the DealerShip.");
			CarID[playerid] = PlayerInfo[playerid][pCarID][v];
			cashveh = floatround(floatmul(value,0.60),floatround_ceil);
			format(gString, 256, "Do you want to sell your car to the Dealership for $%s?", FormatNumber(cashveh));
			ShowPlayerDialogEx(playerid, DIALOG_CARSELL, DIALOG_STYLE_MSGBOX, "/sellcar", gString, "Yes", "No");
			found = 1;	
		}
	}
	if(found == 0) return SCM(playerid, -1, "You are not in your car.");	
	return 1; 
}
CMD:findhouse(playerid, params[]) {
	if(arecpactiv(playerid)) return true;
	new houseID, i = sizeof(HouseInfo) - 1;
	if(sscanf(params, "d", houseID)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /findhouse [house id]");
	if(houseID > 56) return SCM(playerid, -1, "Invalid id.");
	if(houseID > i || houseID < 0) return SendClientMessage(playerid, COLOR_WHITE, "Invalid House ID.");
	SetPlayerCheckpoint(playerid, HouseInfo[houseID][hEntrancex], HouseInfo[houseID][hEntrancey], HouseInfo[houseID][hEntrancez], 4.0);
	CP[playerid] = 43;
 	SCM(playerid, COLOR_PRINC, "Checkpoint-ul a fost plasat catre casa aleasa.");
	return 1; 
}
CMD:findbiz(playerid, params[]) {
	if(arecpactiv(playerid)) return true;
	new houseID,i = sizeof(BizzInfo) - 1;
	if(sscanf(params, "d", houseID)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /findbiz [biz id]");
	if(houseID > 51) return SCM(playerid, -1, "Invalid id.");
	if(houseID > i || houseID < 0) return SendClientMessage(playerid, COLOR_WHITE, "Invalid bizz ID.");
	SetPlayerCheckpoint(playerid, BizzInfo[houseID][bEntranceX], BizzInfo[houseID][bEntranceY], BizzInfo[houseID][bEntranceZ], 4.0);
	CP[playerid] = 43;
	SCM(playerid, COLOR_PRINC, "Checkpoint-ul a fost plasat catre business-ul ales.");
	return 1; 
}
CMD:carplate(playerid, params[]) {
	new idcar=-1,Float:health2;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv]) {
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
	GetVehicleHealth(GetPlayerVehicleID(playerid), health2);
	if(health2 < 500.0 || vehEngine[GetPlayerVehicleID(playerid)] == 1) return SCM(playerid,COLOR_WHITE,"You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
	if(GetPlayerCash(playerid) >= 10000) {
		if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][idcar]) {
	   		ShowPlayerDialogEx(playerid, DIALOG_PLATE, DIALOG_STYLE_INPUT, "License plate registration", "{FFFFFF}Please enter a license plate for your vehicle.\n\nThere is only two conditions:\n- The license plate must be unique\n- The license can be alphanumerical, but it must consist of only 10 characters.", "Select", "");
		}
	}
	else return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
	return 1; 
}
CMD:carcolor(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
	new carid = GetPlayerVehicleID(playerid), idcar = -1, colorid, colorpart;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) { if(carid == PlayerInfo[playerid][pCarID][vv]) idcar = vv; }
	if(idcar == -1) return SCM(playerid, -1, "You are not in your car.");
	if(sscanf(params, "ii", colorpart, colorid)) return SCM(playerid, -1, "Syntax: /carcolor [1/2] [color]");
	if(colorid < 0 || colorid > 255) return SCM(playerid, -1, "Invalid color id.");
	if(colorid > 127 && PlayerInfo[playerid][pHiddenColor] < 1) return SCM(playerid, -1, "Nu ai o culoare hidden.");
	if(colorpart != 1 && colorpart != 2) return SCM(playerid, -1, "Color part - 1 / 2.");
	if(GetPlayerCash(playerid) < 10000) return SCM(playerid, -1, "Ai nevoie de minim 10,000$ pentru a folosi aceasta comanda.");
	switch(colorpart) {
		case 1: {
			if(colorid > 127) PlayerInfo[playerid][pHiddenColor] --, pUpdateInt(playerid, "HiddenColor", PlayerInfo[playerid][pHiddenColor]);
			PlayerInfo[playerid][pCarColor1][idcar] = colorid;
			ChangeVehicleColor(carid, colorid, PlayerInfo[playerid][pCarColor2][idcar]);
			cUpdate(playerid, idcar, cColorOnex);
			SCM(playerid, COLOR_DARKPINK, "Vehicle color changed.");
		}
		case 2: {
			if(colorid > 127) PlayerInfo[playerid][pHiddenColor] --, pUpdateInt(playerid, "HiddenColor", PlayerInfo[playerid][pHiddenColor]);
			PlayerInfo[playerid][pCarColor2][idcar] = colorid;
			ChangeVehicleColor(carid, PlayerInfo[playerid][pCarColor1][idcar], colorid);
			cUpdate(playerid, idcar, cColorTwox);
			SCM(playerid, COLOR_DARKPINK, "Vehicle color changed.");
		}
	} 	
	GivePlayerCash(playerid, -10000);
	return 1; 
}
CMD:swapcolors(playerid, params[]) {
	if(GetPlayerCash(playerid) < 5000) return SCM(playerid, -1, "You don't have enough money.");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You are not in your car.");
	new VehI = GetPlayerVehicleID(playerid),idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) {
		if(VehI == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
	}	
	if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
	if(VehI == PlayerInfo[playerid][pCarID][idcar]) {
		new color1 = PlayerInfo[playerid][pCarColor1][idcar];
		new color2 = PlayerInfo[playerid][pCarColor2][idcar];
		PlayerInfo[playerid][pCarColor1][idcar] = color2; PlayerInfo[playerid][pCarColor2][idcar] = color1; 
		ChangeVehicleColor(VehI, color2, color1);
		GivePlayerCash(playerid, -5000);
		cUpdate(playerid, idcar, cColorOnex); cUpdate(playerid, idcar, cColorTwox);
		SCM(playerid, -1, "Culorile masinii au fost schimbate.");
	}	
	return 1; 
}
CMD:park(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
	if(IsPlayerInRangeOfPoint(playerid, 40.0, 1791.8353,-1854.7963,13.4141)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda in zona spawnului.");
	new engine,lights,alarm,doors,bonnet,boot,objective,Float:x,Float:y,Float:z,Float:a,idcar=-1,interiorr = GetPlayerInterior(playerid),virtuall = GetPlayerVirtualWorld(playerid),getcarid = GetPlayerVehicleID(playerid);
	GetVehiclePos(getcarid, x, y, z);
	GetVehicleZAngle(getcarid, a);
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) if(getcarid == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
	if(idcar == -1) return SendClientMessage(playerid, COLOR_WHITE, "You are not in your car.");
	if(GetPlayerCash(playerid) < 10000) return SCM(playerid, -1, "Ai nevoie de minim 10,000$ pentru a folosi aceasta comanda.");
	if(getcarid == PlayerInfo[playerid][pCarID][idcar]) {
		new Float:health2;
		GetVehicleHealth(getcarid, health2);
		if(health2 < 500.0 || (vehEngine[getcarid] == 1 && !IsABike(getcarid))) return SCM(playerid,COLOR_WHITE,"You need to stop the engine first. Also, your car needs to be reapaired first (more than 500 car health).");
		cUpdate(playerid, idcar, cModsx);
		cUpdate(playerid, idcar, cPaintJx);
		LoadCar(playerid);
		PlayerInfo[playerid][pCarLocX][idcar] = x;
		PlayerInfo[playerid][pCarLocY][idcar] = y;
		PlayerInfo[playerid][pCarLocZ][idcar] = z;
		PlayerInfo[playerid][pCarAngle][idcar] = a;
		DestroyVehicle(PlayerInfo[playerid][pCarID][idcar]);
		PlayerInfo[playerid][pCarID][idcar] = CreateVehicle(PlayerInfo[playerid][pCarModel][idcar],PlayerInfo[playerid][pCarLocX][idcar],PlayerInfo[playerid][pCarLocY][idcar],PlayerInfo[playerid][pCarLocZ][idcar]+1.0,PlayerInfo[playerid][pCarAngle][idcar],PlayerInfo[playerid][pCarColor1][idcar],PlayerInfo[playerid][pCarColor2][idcar],-1);
		UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][idcar], PlayerInfo[playerid][pCarDamage1][idcar], PlayerInfo[playerid][pCarDamage2][idcar], PlayerInfo[playerid][pCarDamage3][idcar], PlayerInfo[playerid][pCarDamage4][idcar]);
		Gas[PlayerInfo[playerid][pCarID][idcar]] = PlayerInfo[playerid][pCarGas][idcar];
		SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][idcar], CarPlate[playerid][idcar]);
		SetVehicleHealth(PlayerInfo[playerid][pCarID][idcar], health2);
		LinkVehicleToInterior(PlayerInfo[playerid][pCarID][idcar], interiorr);
		SetVehicleVirtualWorld(PlayerInfo[playerid][pCarID][idcar], virtuall);
		vehEngine[PlayerInfo[playerid][pCarID][idcar]] = 0;
		GetVehicleParamsEx(PlayerInfo[playerid][pCarID][idcar],engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(PlayerInfo[playerid][pCarID][idcar],VEHICLE_PARAMS_OFF,lights,alarm,PlayerInfo[playerid][pCarLock][idcar],bonnet,boot,objective);
		SetPVarInt(playerid, "Engine", 0);
		cUpdate(playerid, idcar, cLocationxx);
		cUpdate(playerid, idcar, cLocationyx);
		cUpdate(playerid, idcar, cLocationzx);
		cUpdate(playerid, idcar, cAnglex);
		defer ModPVehicle(playerid, idcar);
		if(strlen(CarVipName[playerid][idcar]) > 0) SetVipText(playerid, idcar);
		SendClientMessage(playerid, COLOR_DARKPINK, "Masina parcata. Pentru a respawna masina aici, foloseste /v.");
		GivePlayerCash(playerid, -10000);

		if(IsPlayerInRangeOfPoint(playerid, 25.0, 486.0312,-429.1757,2758.0149) && GetVehicleVirtualWorld(idcar) != playerid + 1)
		{
			SetVehicleVirtualWorld(idcar, playerid + 1);

			SCM(playerid, -1, "updated vehicle virtual world");
		}

		return true;
	}
	return 1; 
}
CMD:lock(playerid, params[]) {
	new engine,lights,alarm,doors,bonnet,boot,objective;
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
	    if(CheckPlayerDistanceToVehicle(5.0, playerid, PlayerInfo[playerid][pCarID][v])) {
			if(PlayerInfo[playerid][pCarLock][v] == 1) {
	    		GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,0,bonnet,boot,objective);
	      	    va_GameTextForPlayer(playerid, "~h~%s~n~~g~Unlocked", 5000, 3, aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCarLock][v] = 0;
				gCarLock[PlayerInfo[playerid][pCarID][v]] = 0;
				cUpdate(playerid, v, cLockx);
				return true;
			}
			else {
	    		GetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
	      	    SetVehicleParamsEx(PlayerInfo[playerid][pCarID][v],engine,lights,alarm,1,bonnet,boot,objective);
				SetVehicleParamsForPlayer(PlayerInfo[playerid][pCarID][v],playerid,0,0);
				va_GameTextForPlayer(playerid, "~h~%s~n~~r~Locked", 5000, 3, aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400]);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCarLock][v] = 1;
				gCarLock[PlayerInfo[playerid][pCarID][v]] = 1;
				cUpdate(playerid, v, cLockx);
			    return true;
			}
		}
		else if(CheckPlayerDistanceToVehicle(5.0, playerid, HireCar[playerid])) {
			new carid = HireCar[playerid];
			if(gCarLock[carid] == 0) {
		        new vehicles = GetVehicleModel(carid) - 400;
		        va_GameTextForPlayer(playerid, "~h~%s~n~~r~Locked", 5000, 3, aVehicleNames[vehicles]);
	  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 1;
    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,1,bonnet,boot,objective);
	            return true;
		    }
			else if(gCarLock[carid] == 1) {
				new vehicles = GetVehicleModel(carid) - 400;
				va_GameTextForPlayer(playerid, "~h~%s~n~~g~Unlocked", 5000, 3, aVehicleNames[vehicles]);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 0;
    			GetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(HireCar[playerid],engine,lights,alarm,0,bonnet,boot,objective);
	            return true;
			}
		}
		else if(CheckPlayerDistanceToVehicle(5.0, playerid, GetPVarInt(playerid, "rent_take"))) {
			new carid = GetPVarInt(playerid, "rent_take");
			if(gCarLock[carid] == 0) {
			    GameTextForPlayer(playerid, "~h~~n~~r~locked", 5000, 3);
	  	        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 1;
    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(carid,engine,lights,alarm,1,bonnet,boot,objective);
	            return true;
		    }
			else if(gCarLock[carid] == 1) {
			    GameTextForPlayer(playerid, "~h~~n~~g~unlocked", 5000, 3);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				gCarLock[carid] = 0;
    			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
      	    	SetVehicleParamsEx(carid,engine,lights,alarm,0,bonnet,boot,objective);
	            return true;
			}
		}
	}
    return 1; 
}
CMD:attack(playerid, params[]) {
	if(blockattack == 1) return SCM(playerid, -1, "Comanda a fost blocata de un administrator.");
	new hour, minn, sec, turf, faction, memberss; 
	gettime(hour, minn, sec);
	if(!IsAMember(playerid)) return SCM(playerid, -1, "You are not a member of mafia.");
	if(PlayerInfo[playerid][pRank] < 3) return SCM(playerid, -1, "You don't have rank 4.");
	if(hour != 20 && hour != 21) return SCM(playerid, -1, "Poti folosi aceasta comanda doar intre orele 20:00 si 22:00.");
	for(new i = 1; i <= sizeof(TurfInfo); i++) {
		if(IsPlayerInTurf(playerid, i) == 1) { 
			turf = i;
			break;
		}			
	}
	if(turf == 0) return SCM(playerid, -1, "You are not on a turf.");
	if(DeelayWar[PlayerInfo[playerid][pMember]] > 0) return SCMf(playerid, COLOR_PRINC, ">> {ffffff}Your mafia can attack another turf in %d seconds.", DeelayWar[PlayerInfo[playerid][pMember]]);
	faction = PlayerInfo[playerid][pMember];
	if(TurfInfo[turf][zOwned] == faction) return SCM(playerid, -1, "You can't attack your own turf.");
	if(WarInfo[turf][wAttacker] != 0) return SCM(playerid, -1, "Turf is already attacked.");
	if(InWar[faction] == 1) return SCM(playerid, -1, "You have an active war.");
	if(InWar[TurfInfo[turf][zOwned]] == 1) return SCM(playerid, -1, "This mafia have active war.");
	foreach(new i : Gangsters) { if(PlayerInfo[i][pMember] == TurfInfo[turf][zOwned]) memberss ++; }
	if(memberss < 1) return SCM(playerid, -1, "This mafia don't have members online.");
	WarInfo[turf][wTime] = 1200; WarInfo[turf][wAttacker] = faction; WarInfo[turf][wFaction] = TurfInfo[turf][zOwned];
	SendFamilyMessage(faction, COLOR_GREEN, "[TURF] %s from your group attacked turf %d (owned by %s).", GetName(playerid), turf, NumeFactiune(TurfInfo[turf][zOwned]));
	SendFamilyMessage(TurfInfo[turf][zOwned], COLOR_GREEN, "[TURF] %s from %s attacked turf %d owned by you.", GetName(playerid), NumeFactiune(WarInfo[turf][wAttacker]), turf);
	worstscoreat[turf] = 0; worstmemberat[turf] = 999; bestscoreat[turf] = 0; bestmemberat[turf] = 999; worstscoredf[turf] = 0; waitwar[faction] = 60;
	worstmemberdf[turf] = 999; bestscoredf[turf] = 0; bestmemberdf[turf] = 999; InWar[TurfInfo[turf][zOwned]] = 1; InWar[faction] = 1;
	va_SendClientMessageToAll(COLOR_PRINC, "(War): {FFFFFF}Gruparea mafiota %s a pornit un razboi pe teritoriul #%d detinut de mafia %s.", NumeFactiune(PlayerInfo[playerid][pMember]), turf, NumeFactiune(TurfInfo[turf][zOwned]));	
	for(new z = 1; z <= sizeof TurfInfo; z++) {
		foreach(new x : Gangsters) {
			if(IsPlayerInTurf(x, z)) { if(PlayerInfo[x][pMember] == faction || PlayerInfo[x][pMember] == TurfInfo[turf][zOwned]) SetPlayerVirtualWorld(x, 1024); intratwar[x] = 1; } 
		}
	}
	return 1; 
}
CMD:turfs(playerid, params[]) {
	if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 20 de secunde.");
	if(TurfsDisp[playerid] == 0) {
		TurfsDisp[playerid] = 1;
		for(new i = 0; i < sizeof(Turfs); i++) {
			if(TurfInfo[i][zOwned] == 4) GangZoneShowForPlayerEx(playerid, Turfs[i], 0x18EBD6C8);
			if(TurfInfo[i][zOwned] == 5) GangZoneShowForPlayerEx(playerid, Turfs[i], 0x40863CAA); 
			if(TurfInfo[i][zOwned] == 6) GangZoneShowForPlayerEx(playerid, Turfs[i], 0xFFAE00C8);
			if(TurfInfo[i][zOwned] == 10) GangZoneShowForPlayerEx(playerid, Turfs[i], 0xBD1CDEC8); 
		}
	}
	else {
		TurfsDisp[playerid] = 0;
		for(new i = 0; i < sizeof(Turfs); i++) GangZoneHideForPlayerEx(playerid, Turfs[i]);
	}
	delayfactions[playerid] = 20;
	return 1; 
}
CMD:gdeposit(playerid, params[]) {
	new x = PlayerInfo[playerid][pMember], cashdeposit, item[20];
	if(x <= 0) return true;
	if(sscanf(params, "s[20]d", item, cashdeposit)) {
		SCM(playerid, -1, "Syntax: /gdeposit [money, materials or drugs] [amount]");
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}Safe balance: $%d, %d materials, %d grams of drugs", DynamicFactions[x][fBank], DynamicFactions[x][fMats], DynamicFactions[x][fDrugs]);
		return true;
	}
	if(cashdeposit < 1 || cashdeposit > 2147483646) return true;
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, DynamicFactions[x][fSafePos][0], DynamicFactions[x][fSafePos][1], DynamicFactions[x][fSafePos][2])) return SCM(playerid, -1, "Nu te afli in locatia potrivita.");
	gString[0] = (EOS);
	if(strcmp(item, "money", true) == 0) {
		if(GetPlayerCash(playerid) < cashdeposit) return SCM(playerid, -1, "You don't have that amount of money.");
		DynamicFactions[x][fBank] += cashdeposit;
		GivePlayerCash(playerid, -cashdeposit);
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have deposited $%d in your group safe.", cashdeposit);
		sendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s deposits $%d in their group safe.", GetName(playerid), cashdeposit);
		mysql_format(SQL, gString, 184, "UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d' LIMIT 1", DynamicFactions[x][fBank], x);
		mysql_tquery(SQL, gString);
	}
	else if(strcmp(item, "materials", true) == 0) {
		if(cashdeposit > PlayerInfo[playerid][pMats]) return SCM(playerid, -1, "You don't have that amount of materials.");
		PlayerInfo[playerid][pMats] = PlayerInfo[playerid][pMats]-cashdeposit;
		DynamicFactions[x][fMats] += cashdeposit;
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have deposited %d materials in your group safe.", cashdeposit);
		sendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s deposits %d materials in their group safe.", GetName(playerid), cashdeposit);
		mysql_format(SQL, gString, 184, "UPDATE `factions` SET `Mats`='%d' WHERE `ID`='%d' LIMIT 1", DynamicFactions[x][fMats], x);
		mysql_tquery(SQL, gString);
		pUpdateInt(playerid, "Materials", PlayerInfo[playerid][pMats]);
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Raport3` = `Raport3` + '%d' WHERE `id` = '%d' LIMIT 1", cashdeposit, PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString, "", ""); 
		PlayerInfo[playerid][pRaport][2] += cashdeposit;
		save_raport(playerid, 3);
	}
	else if(strcmp(item, "drugs", true) == 0) {
		if(cashdeposit > PlayerInfo[playerid][pDrugs]) return SCM(playerid, -1, "You don't have that amount of drugs.");
		PlayerInfo[playerid][pDrugs] = PlayerInfo[playerid][pDrugs]-cashdeposit;
		DynamicFactions[x][fDrugs] += cashdeposit;
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have deposited %d drugs in your group safe.", cashdeposit);
		sendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s deposits %d drugs in their group safe.", GetName(playerid), cashdeposit);
		mysql_format(SQL, gString, 184, "UPDATE `factions` SET `Drugs`='%d' WHERE `ID`='%d' LIMIT 1", DynamicFactions[x][fDrugs], x);
		mysql_tquery(SQL, gString);
		pUpdateInt(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Raport7` = `Raport7` + '%d' WHERE `id` = '%d' LIMIT 1", cashdeposit, PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString, "", ""); 
		PlayerInfo[playerid][pRaport][6] += cashdeposit;
		save_raport(playerid, 7);		
	}
	return 1; 
}
CMD:gov(playerid, params[]) {
	new faction = PlayerInfo[playerid][pMember], hour, minute, second;
	if(faction != 1 && faction != 2 && faction != 3 && faction != 8 && faction != 14) return SCM(playerid, -1, "Factiunea ta nu dispune de aceasta comanda.");
	if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, -1, "You need rank 6 to use this command.");
	gettime(hour, minute, second);
	if(hour == 01 || hour == 02 || hour == 03 || hour == 04 || hour == 05 || hour == 06 || hour == 07 || hour == 08) return SCM(playerid, -1, "Nu poti folosi aceasta comanda intre orele 01 - 09.");	
	if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 30 de secunde.");
	new textgov[128];
	if(sscanf(params, "s[128]", textgov)) return SCM(playerid, -1, "Syntax: /gov [message]");
	va_SendClientMessageToAll(COLOR_TEAL, "------ Government Announcement (%s) ------", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);
	if(PlayerInfo[playerid][pRank] == 7) va_SendClientMessageToAll(COLOR_BLUE, "* %s %s: %s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], GetName(playerid), textgov);
	if(PlayerInfo[playerid][pRank] == 6) va_SendClientMessageToAll(COLOR_BLUE, "* %s %s: %s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], GetName(playerid), textgov);
	delayfactions[playerid] = 30;
	return 1; 
}
CMD:hud(playerid, params[]) {
	new stringhp[20], stringarm[20], stringfps[25];
	gString[0] = (EOS);
	if(PlayerInfo[playerid][pHUD1] != 0) {
		switch(PlayerInfo[playerid][pHUD1]) {
			case 1: format(stringhp, 20, "{C0C0C0}Grey");
			case 2: format(stringhp, 20, "{7E689B}Red");
			case 3: format(stringhp, 20, "{00FF00}Green"); 
			case 4: format(stringhp, 20, "{0000FF}Blue");
			case 5: format(stringhp, 20, "{FFFF00}Yellow");
		}
	} else format(stringhp, 20, "{7E689B}Disabled");
	if(PlayerInfo[playerid][pHUD2] != 0) {
		switch(PlayerInfo[playerid][pHUD2]) {
			case 1: format(stringarm, 20, "{C0C0C0}Grey");
			case 2: format(stringarm, 20, "{FF0000}Red");
			case 3: format(stringarm, 20, "{00FF00}Green");
			case 4: format(stringarm, 20, "{0000FF}Blue");
			case 5: format(stringarm, 20, "{FFFF00}Yellow");
		}
	} else format(stringarm, 20, "{7E689B}Disabled");
	if(PlayerInfo[playerid][pHUD3] != 0) format(stringfps, 25, "{00FF00}Enabled");
	else format(stringfps, 25, "{7E689B}Disabled");
	format(gString, 256, "HP Text: %s\n{FFFFFF}Armour Text: %s\n{FFFFFF}Server info (admin+): %s", stringhp, stringarm, stringfps);
	ShowPlayerDialogEx(playerid, DIALOG_HUD, DIALOG_STYLE_LIST, "HUD Options", gString, "Select", "Close");
	return 1; 
}	
CMD:online(playerid, params[])
{
	if(PlayerInfo[playerid][pFPS] >= 5) return SCM(playerid, -1, "Aceasta comanda poate fi folosita doar de jucatorii de pe mobile.");

	SCMf(playerid, COLOR_GREY, "(server): %d/100 players.", Iter_Count(Player));
	return true;
}
CMD:ownerhat(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 6)
	{
	    if(PalariaProstului[playerid] != 0)
	    {
	        DestroyPlayerObject(playerid, 5);
		    PalariaProstului[playerid] = 0;
		}
		else
		{
		    PalariaProstului[playerid] = 1;
		    SetPlayerAttachedObject(playerid, 5, 19528, 2, 0.167425, -0.006185, -0.004779, 0.612963, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		}
	}
	return 1;
}
/*CMD:mask(playerid, params[])
{
	if(PlayerInfo[playerid][pCorona] < 1) return SCM(playerid, -1, "Nu ai o masca chirurgicala, poti cumpara una din /shop");
	{
	    if(pulamea[playerid] != 0)
	    {
	        DestroyPlayerObject(playerid, 5);
		    pulamea[playerid] = 0;
		}
		else
		{
		    pulamea[playerid] = 1;
		    SetPlayerAttachedObject(playerid, 0, 19036, 2, 0.100000, 0.039999, -0.009999, 105.000000, 80.000000, 340.000000, 1.000000, 1.000000, 1.000000);
		}
	}
	return 1;
}*/
CMD:witchhat(playerid, params[])
{
	if(PlayerInfo[playerid][pWitch] >= 1)
	{
	    if(rovwkoninstagram[playerid] != 0)
	    {
	        DestroyPlayerObject(playerid, 5);
		    rovwkoninstagram[playerid] = 0;
		}
		else
		{
		    rovwkoninstagram[playerid] = 1;
		    SetPlayerAttachedObject(playerid, 5, 19528, 2, 0.167425, -0.006185, -0.004779, 0.612963, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
		}
	}
	return 1;
}
CMD:order(playerid, params[]) {
	new fid = PlayerInfo[playerid][pMember];
	if(fid != 4 && fid != 5 && fid != 6 && fid != 10 && fid != 11) return SCM(playerid, -1, "Factiunea ta nu dispune de aceasta comanda.");
	if(PlayerInfo[playerid][pGunLic] < 1) return SCM(playerid, -1, "You don't have gun license.");
	if(GetPlayerInterior(playerid) == 0) return SCM(playerid, -1, "You are not in your faction HQ.");
	if(OnDuty[playerid] < 1) return SCM(playerid, -1, "Nu esti on duty.");
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) != DynamicFactions[fid][fVirtual]) 
		return SCM(playerid, -1, "You are not in your faction HQ.");
	new x_nr[50];
	gString[0] = (EOS);
	if(fid == 4 || fid == 5 || fid == 6 || fid == 10) {
		if(sscanf(params, "s[50]", x_nr)) {
			SCM(playerid, -1, "Syntax: /order [1-4]");
			SCM(playerid, -1, "(1) Deagle | (2) Combat | (3) M4 | (4) Rifle");
			return true;
		}
		if(strcmp(x_nr, "1", true) == 0) {
	        if(DynamicFactions[fid][fMats] <= 119) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 120 de materiale pentru a creea aceasta arma.");
	        if(GetPlayerCash(playerid) <= 1199) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $1200.");		
	        GivePlayerWeaponEx(playerid, 24, 200); GivePlayerCash(playerid, -1200);
	        DynamicFactions[fid][fMats] -= 120; DynamicFactions[fid][fBank] += 1200;
	        mysql_format(SQL, gString, 184, "UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'", DynamicFactions[fid][fBank], DynamicFactions[fid][fMats], fid);
	        mysql_tquery(SQL, gString);
	        SCM(playerid, -1, "Ai cumparat un Deagle pentru $1,200. 120 materiale luate din seiful factiunii.");
		}
		else if(strcmp(x_nr, "2", true) == 0) {
			if(PlayerInfo[playerid][pRank] < 4) return SCM(playerid, -1, "Nu ai rank 4.");
	        if(DynamicFactions[fid][fMats] <= 200) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 200 de materiale pentru a creea aceasta arma.");
	        if(GetPlayerCash(playerid) < 2000) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $2000.");		
	        GivePlayerWeaponEx(playerid, 27, 200); GivePlayerCash(playerid, -2000);
	        DynamicFactions[fid][fMats] -= 200; DynamicFactions[fid][fBank] += 2000;
	        mysql_format(SQL, gString, 184, "UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'", DynamicFactions[fid][fBank], DynamicFactions[fid][fMats], fid);
	        mysql_tquery(SQL, gString);
	        SCM(playerid, -1, "Ai cumparat un Combat pentru $2,000. 200 materiale luate din seiful factiunii.");
		}	
		else if(strcmp(x_nr, "3", true) == 0) {
	        if(DynamicFactions[fid][fMats] <= 150) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 150 de materiale pentru a creea aceasta arma.");
	        if(GetPlayerCash(playerid) < 1500) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $1500.");		
	        GivePlayerWeaponEx(playerid, 31, 200); GivePlayerCash(playerid, -1500);
	        DynamicFactions[fid][fMats] -= 150; DynamicFactions[fid][fBank] += 1500;
	        mysql_format(SQL, gString, 184, "UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'", DynamicFactions[fid][fBank], DynamicFactions[fid][fMats], fid);
	        mysql_tquery(SQL, gString);
	        SCM(playerid, -1, "Ai cumparat un M4 pentru $1,500. 150 materiale luate din seiful factiunii.");
		}		
		else if(strcmp(x_nr, "4", true) == 0) {
			if(PlayerInfo[playerid][pRank] < 3) return SCM(playerid, -1, "Nu ai rank 3.");
	        if(DynamicFactions[fid][fMats] <= 175) return SendClientMessage(playerid, COLOR_WHITE,"Mafia ta nu detine 175 de materiale pentru a creea aceasta arma.");
	        if(GetPlayerCash(playerid) < 1800) return SendClientMessage(playerid, COLOR_WHITE,"Nu ai $1800.");		
	        GivePlayerWeaponEx(playerid, 33, 200); GivePlayerCash(playerid, -1800);
	        DynamicFactions[fid][fMats] -= 175; DynamicFactions[fid][fBank] += 1800;
	        mysql_format(SQL, gString, 184, "UPDATE `factions` SET `Bank`='%d',`Mats`='%d' WHERE `ID`='%d'", DynamicFactions[fid][fBank], DynamicFactions[fid][fMats], fid);
	        mysql_tquery(SQL, gString);
	        SCM(playerid, -1, "Ai cumparat o arma de tip Rifle pentru $1,800. 175 materiale luate din seiful factiunii.");
		}	
	} else if(fid == 11) {
		if(sscanf(params, "s[50]", x_nr)) {
			SCM(playerid, -1, "Syntax: /order [item]");
			SCM(playerid, -1, "1 - sniper, 2 - rifle. Price: $1000");
			return true;
		}
		if(strcmp(x_nr, "1", true) == 0) {
			if(GetPlayerMoney(playerid) < 1000) return SCM(playerid, -1, "Nu ai $1,000.");
			GivePlayerWeaponEx(playerid, 4, 1); GivePlayerWeaponEx(playerid, 23, 50); GivePlayerWeaponEx(playerid, 34, 50);
			GivePlayerCash(playerid, -1000);
			DynamicFactions[fid][fBank] += 1000;
			mysql_format(SQL,gString,184,"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fBank],fid);
			mysql_tquery(SQL,gString);			
		}
		else if(strcmp(x_nr, "2", true) == 0) {
			if(GetPlayerMoney(playerid) < 1000) return SCM(playerid, -1, "Nu ai $1,000.");
			GivePlayerWeaponEx(playerid, 4, 1); GivePlayerWeaponEx(playerid, 23, 50); GivePlayerWeaponEx(playerid, 33, 50);
			GivePlayerCash(playerid, -1000);
			DynamicFactions[fid][fBank] += 1000;
			mysql_format(SQL,gString,184,"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'",DynamicFactions[fid][fBank],fid);
			mysql_tquery(SQL,gString);			
		}
	}		
	return 1; 
}
CMD:m(playerid, params[]) {
	new tmpcar = GetPlayerVehicleID(playerid), textmeg[128];
	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");	
	if(!Copcar2(tmpcar)) return SCM(playerid, -1, "Nu esti intr-o masina de politie.");
	if(sscanf(params, "s[128]", textmeg)) return SCM(playerid, -1, "Syntax: /m [message]");
	sendNearbyMessage(playerid, 60.0, COLOR_PRINC, "(megaphone) Politist %s: %s", GetName(playerid), textmeg);
	return 1; 
} 
CMD:r(playerid, params[]) {
	new radiomsj[128], member = PlayerInfo[playerid][pMember];
	gString[0] = (EOS);
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(sscanf(params, "s[128]", radiomsj)) return SCM(playerid, -1, "Syntax: /r [message]");
	if(member != 1 && member != 2 && member != 14 && member != 3 && member != 8) return SCM(playerid, -1, "Your group data is invalid.");
	if(gFam[playerid] == 1) return SCM(playerid, -1, "You have disabled radio chat, use /tog to enable.");
	switch(PlayerInfo[playerid][pRank]) {
		case 1: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], PlayerInfo[playerid][pNormalName], radiomsj); }
		case 2: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], PlayerInfo[playerid][pNormalName], radiomsj); }
		case 3: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], PlayerInfo[playerid][pNormalName], radiomsj); }
		case 4: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], PlayerInfo[playerid][pNormalName], radiomsj); } 
		case 5: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], PlayerInfo[playerid][pNormalName], radiomsj); }
		case 6: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], PlayerInfo[playerid][pNormalName], radiomsj); }
		case 7: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], PlayerInfo[playerid][pNormalName], radiomsj); }
	}
	foreach(new i : Player) {
		if(PlayerInfo[i][pMember] == member && !gFam[i]) SendSplitMessage(i, COLOR_RADIOCHAT, gString);
		if(PlayerInfo[i][pAdmin] >= 1 && specfaction[i] == member) SendSplitMessage(i, COLOR_RADIOCHAT, gString);
	}
	return 1; 
}
CMD:f(playerid, params[]) {
	new member = PlayerInfo[playerid][pMember];
	if(member != 4 && member != 5 && member != 6 && member != 9 && member != 10 && member != 11 && member != 13 && member != 15 && member != 16) return SCM(playerid, -1, "Your group data is invalid.");
	if(gFam[playerid] == 1) return SCM(playerid, -1, "You have family chat disabled, use /togf to enable.");
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	new message[128], rtext[64];
	if(sscanf(params, "s[128]", message)) return SCM(playerid, -1, "Syntax: /f [message]");
	switch(PlayerInfo[playerid][pRank]) {
		case 1: format(rtext, 64, "%s", DynamicFactions[member][fRankName1]);
		case 2: format(rtext, 64, "%s", DynamicFactions[member][fRankName2]);
		case 3: format(rtext, 64, "%s", DynamicFactions[member][fRankName3]);
		case 4: format(rtext, 64, "%s", DynamicFactions[member][fRankName4]);
		case 5: format(rtext, 64, "%s", DynamicFactions[member][fRankName5]);
		case 6: format(rtext, 64, "%s", DynamicFactions[member][fRankName6]);
		case 7: format(rtext, 64, "%s", DynamicFactions[member][fRankName7]);
	}
	gString[0] = (EOS);
	format(gString, 144, "# %s %s: %s", rtext, GetName(playerid), message);
	if(PlayerInfo[playerid][pRank] >= 1 && PlayerInfo[playerid][pRank] < 6) SendFamilyMessage(member, 0x00B8E6FF, gString);
	else if(PlayerInfo[playerid][pRank] >= 6) SendFamilyMessage(member, 0x009ACDFF, gString);
	return 1; 
}	
CMD:d(playerid, params[]) {
	new depmsj[128], member = PlayerInfo[playerid][pMember];
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(sscanf(params, "s[128]", depmsj)) return SCM(playerid, -1, "Syntax: /d [message]");
	if(gFam[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled radio chat, use /tog to enable.");
	gString[0] = (EOS);
	if(member != 1 && member != 2 && member != 3 && member != 8) return SCM(playerid, -1, "Factiunea ta nu dispune de aceasta comanda.");
	switch(PlayerInfo[playerid][pRank]) {
		case 1: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1], GetName(playerid), depmsj); }
		case 2: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2], GetName(playerid), depmsj); }
		case 3: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3], GetName(playerid), depmsj); }
		case 4: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4], GetName(playerid), depmsj); }
		case 5: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5], GetName(playerid), depmsj); }
		case 6: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6], GetName(playerid), depmsj); }
		case 7: { format(gString, 144, "* %s %s: %s, over.", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName7], GetName(playerid), depmsj); }
	}
	foreach(new i : Cops) {
		if(IsACop(i)) {
			if(!gFam[i]) SendSplitMessage(i, 0xff353535, gString);
		}
	}
	format(gString, 144, "(radio) ''%s''", params);
	SetPlayerChatBubble(playerid, gString, COLOR_CHATBUBBLE, 10.0, 10000);	
	return 1; 
}
CMD:confiscate(playerid, params[]) {
	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
	if(OnDuty[playerid] != 1) return SendClientMessage(playerid, COLOR_WHITE, "You are not on duty.");
	new x_nr[15], giveplayerid;
	if(sscanf(params, "us[15]",giveplayerid,x_nr)) {
		SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /confiscate [name/playerid] [item]");
  		SendClientMessage(playerid, COLOR_WHITE, "Items: Licence, Drugs, Materials, Weapons.");
		return 1;
	}	
	if(giveplayerid == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(playerid == giveplayerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
	if(strcmp(x_nr,"licence",true) == 0) {
        if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 8) {
			if(PlayerInfo[giveplayerid][pCarLic] == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have a driving licence.");
			SCMf(playerid, -1, "You have confiscated %s's driving license.", GetName(giveplayerid));
			SCMf(giveplayerid, -1, "%s has confiscated your driving license.", GetName(playerid));
			PlayerInfo[giveplayerid][pCarLicSuspend] = 2; PlayerInfo[giveplayerid][pCarLic] = 0;
	       	pUpdateInt(giveplayerid, "CarLicSuspend", 2);
	        pUpdateInt(giveplayerid, "CarLic", 0);
			save_raport(playerid, 3);
		}				
	}
	else if(strcmp(x_nr,"weapons", true) == 0) {
        if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 8) {
	        SCMf(playerid, -1, "You have confiscated %s's weapons.", GetName(giveplayerid));
			SCMf(giveplayerid, -1, "%s has confiscated your weapons.", GetName(playerid));
	        ResetPlayerWeaponsEx(giveplayerid); ResetPlayerWeapons(giveplayerid);
		}		
	}
	else if(strcmp(x_nr,"materials", true) == 0) {
		if (GetDistanceBetweenPlayers(playerid, giveplayerid) < 8) {
	        SCMf(playerid, -1, "You have confiscated %s's materials.", GetName(giveplayerid));
			SCMf(giveplayerid, -1, "%s has confiscated your materials.", GetName(playerid));
	        PlayerInfo[giveplayerid][pMats] = 0; pUpdateInt(giveplayerid, "Materials", 0);	
	    }    
	}
	else if(strcmp(x_nr,"drugs", true) == 0) {
        if(GetDistanceBetweenPlayers(playerid, giveplayerid) < 8) {
			if(PlayerInfo[giveplayerid][pDrugs] == 0) return SendClientMessage(playerid, COLOR_WHITE, "This player don't have drugs.");
	        SCMf(playerid, -1, "You have confiscated %s's drugs.", GetName(giveplayerid));
			SCMf(giveplayerid, -1, "%s has confiscated your drugs.", GetName(playerid));
	        PlayerInfo[giveplayerid][pDrugs] = 0; pUpdateInt(giveplayerid, "Drugs", 0);
	        save_raport(playerid, 4);
		}		
	}
	return 1; 
}
CMD:mdc(playerid, params[]) {
	if(!IsACop(playerid) && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, "Nu esti politist.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /mdc [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[id][pWantedLevel] > 0) SCMf(playerid, COLOR_PRINC, ">> {ffffff}-- MDC [ID %d - %s][{FFFF00}W:%d{FFFFFF}][Wanted expires in %d mins]",id, GetName(id), PlayerInfo[id][pWantedLevel], wantedlost[id]/60+1);
	else if(PlayerInfo[id][pWantedLevel] < 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}-- MDC [ID %d - %s][not wanted]", id, GetName(id));
	if(strcmp(PlayerInfo[id][pCrime1], "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1], "Fara", false) == 0) { }
	else SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s", PlayerInfo[id][pCrime1]);
	if(strcmp(PlayerInfo[id][pCrime2], "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1], "Fara", false) == 0) { }
	else SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s", PlayerInfo[id][pCrime2]);
	if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", false) == 0 || strcmp(PlayerInfo[id][pCrime1], "Fara", false) == 0) { }
	else SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s", PlayerInfo[id][pCrime3]); 
	return 1; 
}
CMD:su(playerid, params[]) {
	new id, level, reason[64], reason2[64], ini, escape[256], string[64];
	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
	if(sscanf(params, "uis[64]", id, level, reason)) return SCM(playerid, -1, "Syntax: /su [name/playerid] [level] [reason]");
	mysql_real_escape_string(reason, reason2);
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(level < 1 || level > 7) return SCM(playerid, -1, "Invalid wanted level (1-6).");
	if(OnDuty[playerid] != 1) return SCM(playerid, -1, "You are not on duty.");
	if(IsACop(id)) return SCM(playerid, -1, "You can't suspect a cop.");
	ini = PlayerInfo[id][pWantedLevel];
	if(PlayerInfo[id][pJailTime] > 0) return SCM(playerid, -1, "You can't suspect an arrested player.");
	if(level + PlayerInfo[id][pWantedLevel] > 6) PlayerInfo[id][pWantedLevel] = 6;
	else PlayerInfo[id][pWantedLevel] = level+PlayerInfo[id][pWantedLevel];
	format(string, 64, "Unknown");
	strmid(PlayerInfo[id][pVictim], string, 0, strlen(string), 255);
	pUpdateStr(id, "Victim", PlayerInfo[id][pVictim]);
	strmid(PlayerInfo[id][pAccused], GetName(playerid), 0, 25, 255);
	pUpdateStr(id, "Accused", PlayerInfo[id][pAccused]);
	if(strcmp(PlayerInfo[id][pCrime1], "Fara Crima", true) == 0) {
		format(string, 64, "%s", reason2);
		strmid(PlayerInfo[id][pCrime1], string, 0, strlen(string), 255);
		pUpdateStr(id, "Crime1", PlayerInfo[id][pCrime1]);
	}
	else if(strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0) {
		format(string, 64, "%s", reason2);
		strmid(PlayerInfo[id][pCrime2], string, 0, strlen(string), 255);
		pUpdateStr(id, "Crime2", PlayerInfo[id][pCrime2]);
	}
	else if(strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0) {
		format(string, 64, "%s", reason2);
		strmid(PlayerInfo[id][pCrime3], string, 0, strlen(string), 255);
		pUpdateStr(id, "Crime3", PlayerInfo[id][pCrime3]);
	}
	else if(strcmp(PlayerInfo[id][pCrime1],  "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime2], "Fara Crima", true) == 0 && strcmp(PlayerInfo[id][pCrime3], "Fara Crima", true) == 0) { }
	else {
		format(string, 64, "%s", reason2);
		strmid(PlayerInfo[id][pCrime1], string, 0, strlen(string), 255);
		pUpdateStr(id, "Crime1", PlayerInfo[id][pCrime1]);
		format(string, 64, "Fara Crima");
		strmid(PlayerInfo[id][pCrime2], string, 0, strlen(string), 255);
		strmid(PlayerInfo[id][pCrime3], string, 0, strlen(string), 255);
		pUpdateStr(id, "Crime2", PlayerInfo[id][pCrime2]); pUpdateStr(id, "Crime3", PlayerInfo[id][pCrime3]);
	}
	SetPlayerWantedLevel(id, PlayerInfo[id][pWantedLevel]);
	ini = PlayerInfo[id][pWantedLevel]-ini;
	SCMf(id, COLOR_SKEMA2, "You committed a crime: %s, reported by: %s. W: +%d. New wanted level: %d.",reason2,GetName(playerid),level,PlayerInfo[id][pWantedLevel]);
	SendFamilyMessage(8, COLOR_DBLUE, "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.", GetName(id), id, reason2, GetName(playerid), level, PlayerInfo[id][pWantedLevel]);
	SendFamilyMessage(3, COLOR_DBLUE, "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.", GetName(id), id, reason2, GetName(playerid), level, PlayerInfo[id][pWantedLevel]);
	SendFamilyMessage(2, COLOR_DBLUE, "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.", GetName(id), id, reason2, GetName(playerid), level, PlayerInfo[id][pWantedLevel]);
	SendFamilyMessage(1, COLOR_DBLUE, "Dispatch: %s [%d] has committed a crime: %s. Reporter: %s. W: +%d. New wanted level: %d.", GetName(id), id, reason2, GetName(playerid), level, PlayerInfo[id][pWantedLevel]);
	wantedlost[id] = 900; pUpdateInt(id, "WantedLevel", PlayerInfo[id][pWantedLevel]);
	WantedPoints[id] = PlayerInfo[id][pWantedLevel]*2;
	PlayerTextDrawShow(id, WantedText[id]);
	gString[0] = (EOS);
	format(gString, 256, "%s[user:%d] gave %d wanted points to %s[user:%d], reason: %s.", GetName(playerid), PlayerInfo[playerid][pSQLID], level, GetName(id), PlayerInfo[id][pSQLID], reason2);
	mysql_real_escape_string(gString, escape);
	mysql_format(SQL, gString, 256, "INSERT INTO su_logs (`playerid`,`giverid`,`reason`,`sumessage`) VALUES ('%d','%d','%s','%s')", PlayerInfo[playerid][pSQLID],PlayerInfo[id][pSQLID],reason2,escape);
	mysql_tquery(SQL,gString);
	format(string, 64, "WANTED SCADE IN: ~r~%d MINUTE", wantedlost[id]/60+1);
	PlayerTextDrawSetString(id, WantedText[id], string);	
	return 1; 
}	
CMD:wanted(playerid, params[]) {
    if(!IsACop(playerid) && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, "Nu esti politist.");
    new count, string[128];
    gString[0] = EOS; format(gString, 128, "ID\tName\tWanted\n");
    foreach(new i : Player) {
        if(PlayerInfo[i][pWantedLevel] >= 1) {
            string[0] = EOS; format(string, sizeof(string), "%d\t%s\t%d\n",i,GetName(i),PlayerInfo[i][pWantedLevel]);
            strcat(gString, string);
            count++;
        }
    }
    string[0] = EOS; format(string, 30,"Wanted online: %d",count);
    if(count == 0) return SendClientMessage(playerid, -1, "There are no wanted criminals!");
    ShowPlayerDialogEx(playerid, DIALOG_WANTEDON, DIALOG_STYLE_TABLIST_HEADERS, string, gString , "Exit", "");
    return 1; 
}	
CMD:members(playerid, params[]) {
	if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, -1, "Nu esti lider sau colider.");
	if(delayfactions[playerid] >= 30) return SCM(playerid, -1, "Asteapta cateva secunde.");
	new query[100], test[32], test1, test2[32], test3, test4, result[100], idd, mid=0, on;
	format(query, sizeof query, "SELECT * FROM `users` WHERE `users`.`Member` = '%d' ORDER BY `users`.`Rank` DESC LIMIT 25", PlayerInfo[playerid][pMember]);
	new Cache: membresult = mysql_query(SQL, query);
	gString[0] = (EOS);
	for(new i, j = cache_get_row_count (); i != j; ++i) {
		cache_get_field_content(i, "name", result); format(test, 32, result);
		test1 = cache_get_field_content_int(i, "Rank");
		cache_get_field_content(i, "lastOn", result); format(test2, 32, result);
		test3 = cache_get_field_content_int(i, "FWarn");
		test4 = cache_get_field_content_int(i, "FactionJoin");
		idd = cache_get_field_content_int(i, "id");
		on = cache_get_field_content_int(i, "Status");
		Selected[playerid][mid] = idd;
		if(on) format(gString, sizeof(gString), "%s%d - %s\tonline right now\t%d/3 fw\t%d days\n", gString, test1, test, test3, GetDaysFromTimestamp(test4));
		else format(gString, sizeof(gString), "%s%d - %s\t%s\t%d/3 fw\t%d days\n", gString, test1, test, test2, test3, GetDaysFromTimestamp(test4));
		mid++;		
	}
	cache_delete(membresult);
	format(gString, sizeof(gString), "Rank - Name\tLast Login\tFW\tDays in faction\n%s", gString);
	ShowPlayerDialogEx(playerid, DIALOG_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, "Faction members", gString, "Select", "Exit");
	delayfactions[playerid] = 30;
	return 1; 
}
CMD:shop(playerid, params[]) {
	gString[0] = (EOS);
	new string_shop[2500];
	strcat(string_shop, "{e2bf02}[+] {ffffff}Get Premium Points\n");
	strcat(string_shop, "{FFFFFF}Premium account - {7E689B}300 {FFFFFF}premium points\n{FFFFFF}Change Nickname - {7E689B}30 {FFFFFF}premium points\n");
	strcat(string_shop, "{FFFFFF}Clear FP - {7E689B}200 {FFFFFF}premium points\n");
	strcat(string_shop, "{FFFFFF}Clear warns - {7E689B}50 {FFFFFF}premium points\n");
	strcat(string_shop, "{FFFFFF}Vehicle hidden color - {7E689B}30 {FFFFFF}premium points\n{FFFFFF}5x fireworks - {7E689B}1 {FFFFFF}premium point\n");
	strcat(string_shop, "{FFFFFF}Buy vehicle slot - {7E689B}200 {FFFFFF}premium points\nWalkie-talkie private frequency - {7E689B}50 {FFFFFF}premium points\niPhone - {7E689B}40 {FFFFFF}premium points\nClan - {7E689B}400 {FFFFFF}premium points\nVIP - {7E689B}270 {ffffff}premium points\nPersonal garage - {7e689b}more detalies\n");
 	strcat(string_shop, "{ffffff}page 2 (click)");
 	ShowPlayerDialogEx(playerid, DIALOG_SHOPPREMIUM, DIALOG_STYLE_LIST, "Premium Shop", string_shop, "Buy", "Exit");	
	return 1; 
}
CMD:buybusiness(playerid, params[]) {
	new ownerid, query[256];
	if(PlayerInfo[playerid][pPbiskey] != 255) return SCM(playerid, -1, "You already own a business.");
	for(new b = 1; b < sizeof(BizzInfo); b++) {
		gString[0] = (EOS);
		if(IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ])) {
			if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded]) return SCM(playerid, -1, "Nu ai nivelul necesar.");
			if(BizzInfo[b][bOwned] == 0) {
				if(GetPlayerCash(playerid) < BizzInfo[b][bBuyPrice]) return SCM(playerid, -1, "You don't have enough money.");
				PlayerInfo[playerid][pPbiskey] = b;
				BizzInfo[b][bOwned] = 1;
				strmid(BizzInfo[b][bOwner], GetName(playerid), 0, strlen(GetName(playerid))+1);
				GivePlayerCash(playerid, -BizzInfo[b][bBuyPrice]);
				if(BizzInfo[b][bSbiz] == 0) {
					PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior]; PlayerInfo[playerid][pLocal] = b;
					InBussines[playerid] = b;
					SetPlayerInterior(playerid, BizzInfo[b][bInterior]); SetPlayerVirtualWorld(playerid, BizzInfo[b][bVirtual]);
					SetPlayerPosEx(playerid, BizzInfo[b][bExitX], BizzInfo[b][bExitY], BizzInfo[b][bExitZ]);
				}
				SCM(playerid, -1, "Congratulations on your purchase!");
				SendAdmins(COLOR_PRINC, "%s [user: %d] bought the business [%d] from state for $%s.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], b, FormatNumber(BizzInfo[b][bBuyPrice]));
				mysql_format(SQL, gString, 256, "UPDATE users SET `Money`='%d',`Bizz`='%d' WHERE `name`='%s' LIMIT 1", GetPlayerCash(playerid), PlayerInfo[playerid][pPbiskey], PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Owned`='1',`Owner`='%s' WHERE `ID`='%d' LIMIT 1", GetName(playerid), b);
				mysql_tquery(SQL, gString);
				OnPropTextdrawUpdate(2,b);
			} else if(BizzInfo[b][bOwned] == 1 && BizzInfo[b][bPrice] > 0) {
				if(GetPlayerCash(playerid) < BizzInfo[b][bPrice]) return SCM(playerid, -1, "You don't have enough money.");
				PlayerInfo[playerid][pPbiskey] = b;
				BizzInfo[b][bOwned] = 1;
				format(query, sizeof query, "SELECT * FROM `users` WHERE `name`='%s'", BizzInfo[b][bOwner]);
				new Cache: result = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i) ownerid = cache_get_field_content_int(i, "id");
				cache_delete(result);
				SendAdmins(COLOR_PRINC, "%s [user: %d] bought the business [%d] from %s for $%s.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], b, BizzInfo[b][bOwner], FormatNumber(BizzInfo[b][bPrice]));

				strmid(BizzInfo[b][bOwner], GetName(playerid), 0, strlen(GetName(playerid))+1);

				GivePlayerCash(playerid, -BizzInfo[b][bPrice]);
				if(BizzInfo[b][bSbiz] == 0) {
					PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior]; PlayerInfo[playerid][pLocal] = b;
					InBussines[playerid] = b;
					SetPlayerInterior(playerid, BizzInfo[b][bInterior]); SetPlayerVirtualWorld(playerid, BizzInfo[b][bVirtual]);
					SetPlayerPosEx(playerid, BizzInfo[b][bExitX], BizzInfo[b][bExitY], BizzInfo[b][bExitZ]);
					SCM(playerid, -1, "Congratulations on your purchase!");
				}
				mysql_format(SQL, gString, 256, "UPDATE users SET `Money`='%d',`Bizz`='%d' WHERE `name`='%s' LIMIT 1", GetPlayerCash(playerid), PlayerInfo[playerid][pPbiskey], PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d' LIMIT 1", GetName(playerid), b);
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "UPDATE users SET Bizz=255, Money=Money+%d WHERE id=%d LIMIT 1", BizzInfo[b][bPrice], ownerid);
				mysql_tquery(SQL, gString);
				foreach(new i : Player) {
					if(PlayerInfo[i][pSQLID] == ownerid) {
						PlayerInfo[i][pPbiskey] = 255;
						GivePlayerCash(i, BizzInfo[b][bPrice]);
					}
				}
				BizzInfo[b][bPrice] = 0;
				OnPropTextdrawUpdate(2,b);		
			}
		}
	}
	return 1; 
}	
CMD:buyhouse(playerid, params[]) {
	new query[256], ownerid;
	for(new h = 1; h < sizeof(HouseInfo); h++) {
		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez])) {
			if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel]) return SCM(playerid, -1, "Nu ai nivelul necesar.");
			if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) return SCM(playerid, -1, "You already own a house.");
			gString[0] = (EOS);
			if(HouseInfo[h][hOwned] == 0) {
				if(GetPlayerCash(playerid) < HouseInfo[h][hValue]) return SCM(playerid, -1, "You don't have enough money.");
				InHouse[playerid] = h;
				PlayerInfo[playerid][pPhousekey] = h; PlayerInfo[playerid][pRented] = -1;
				HouseInfo[h][hOwned] = 1;
				strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
				GivePlayerCash(playerid, -HouseInfo[h][hValue]);
				SetPlayerInterior(playerid, HouseInfo[h][hInterior]); SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtual]);
				SetPlayerPosEx(playerid, HouseInfo[h][hExitx], HouseInfo[h][hExity], HouseInfo[h][hExitz]);
				PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior]; PlayerInfo[playerid][pLocal] = h;
				SCM(playerid, -1, "Congratulations on your purchase!");
				SendAdmins(COLOR_SKEMA, "%s [user: %d] bought the house [%d] from the state for $%s.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], h, FormatNumber(HouseInfo[h][hValue]));
				pUpdateInt(playerid, "House", PlayerInfo[playerid][pPhousekey]);
				mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d' LIMIT 1", PlayerInfo[playerid][pNormalName], HouseInfo[h][hID]);
				mysql_tquery(SQL, gString);
				OnPropTextdrawUpdate(1,h);
				if(strlen(housestring[InHouse[playerid]]) > 0) {
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
				HouseInfo[h][hPrice] = 0;
				return true;
			} else if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hPrice] > 0) {
				if(GetPlayerCash(playerid) < HouseInfo[h][hPrice]) return SCM(playerid, -1, "You don't have enough money.");
				InHouse[playerid] = h;
				PlayerInfo[playerid][pPhousekey] = h; PlayerInfo[playerid][pRented] = -1;
				HouseInfo[h][hOwned] = 1;
				format(query, sizeof(query), "SELECT * FROM `users` WHERE `name`='%s'", HouseInfo[h][hOwner]);
				new Cache: result = mysql_query(SQL, query);
				for(new i, j = cache_get_row_count (); i != j; ++i) ownerid = cache_get_field_content_int(i, "id");
				cache_delete(result);
				SendAdmins(COLOR_SKEMA, "%s [user: %d] bought the house [%d] from %s for $%s.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], h, HouseInfo[h][hOwner], FormatNumber(HouseInfo[h][hPrice]));
				strmid(HouseInfo[h][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
				GivePlayerCash(playerid, -HouseInfo[h][hPrice]);
				SetPlayerInterior(playerid, HouseInfo[h][hInterior]); SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtual]);
				SetPlayerPosEx(playerid, HouseInfo[h][hExitx], HouseInfo[h][hExity], HouseInfo[h][hExitz]);
				PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior]; PlayerInfo[playerid][pLocal] = h;
				SCM(playerid, -1, "Congratulations on your purchase!");
				pUpdateInt(playerid, "House", PlayerInfo[playerid][pPhousekey]);
				mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Owned`='1',`Owner`='%s',`Prices`='0' WHERE `ID`='%d' LIMIT 1", PlayerInfo[playerid][pNormalName], HouseInfo[h][hID]);
				mysql_tquery(SQL, gString);
				if(strlen(housestring[InHouse[playerid]]) > 0) {
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}
				foreach(new i : Player) {
					if(PlayerInfo[i][pSQLID] == ownerid) {
						GivePlayerCash(i, HouseInfo[h][hPrice]);
						PlayerInfo[i][pPhousekey] = 999; PlayerInfo[i][pRented] = -1; PlayerInfo[i][pSpawnChange] = 0;
						pUpdateInt(i, "SpawnChange", PlayerInfo[i][pSpawnChange]); pUpdateInt(i, "House", PlayerInfo[i][pPhousekey]); pUpdateInt(i, "Rented", PlayerInfo[i][pRented]);
						if(PlayerInfo[i][pLocal] == h) {
							SetPlayerInterior(i, 0);
							SetPlayerPosEx(i,HouseInfo[h][hEntrancex],HouseInfo[h][hEntrancey],HouseInfo[h][hEntrancez]);
							PlayerInfo[i][pInt] = 0;
						}
					}
				}
				mysql_format(SQL,gString,sizeof(gString),"UPDATE users SET House = 999, SpawnChange = 0, Money = Money+%d WHERE `id`='%d' LIMIT 1",HouseInfo[h][hPrice], ownerid);
				mysql_tquery(SQL,gString);				
				HouseInfo[h][hPrice] = 0;
				OnPropTextdrawUpdate(1,h);
				return true;
	  		}
	  	}	
	}
	return 1; 
}
CMD:tenants(playerid, params[]) {
	if(PlayerInfo[playerid][pPhousekey] == 999) return SCM(playerid,COLOR_WHITE,"You don't have house or you don't have rentroom.");
	new h = PlayerInfo[playerid][pPhousekey];
	if(PlayerInfo[playerid][pPhousekey] == h) {
		SendClientMessage(playerid, COLOR_WHITE, "---- Tenants online: ----");
		foreach(new i : Player) {
			if(PlayerInfo[i][pRented] == h) {
				SCMf(playerid, -1,"(%d) %s", i, PlayerInfo[i][pNormalName]);
			}
		}
	}
	return 1; 
}
CMD:rentroom(playerid, params[]) {
	new Float: oldposx, Float: oldposy, Float: oldposz; GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new h = 1; h < sizeof(HouseInfo); h++) {
		if(IsPlayerInRangeOfPoint(playerid,2.0, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1) {
			if(HouseInfo[h][hRent] == 0) return SCM(playerid, -1, "The owner of this house does not allow renters.");
			if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) return SCM(playerid, -1, "You already own a house.");
			if(GetPlayerCash(playerid) < HouseInfo[h][hRent]) return SCM(playerid, -1, "You don't have money.");
			PlayerInfo[playerid][pRented] = h; PlayerInfo[playerid][pPhousekey] = h;
			InHouse[playerid] = h;
			GivePlayerCash(playerid, -HouseInfo[h][hRent]);
			HouseInfo[h][hTakings] = HouseInfo[h][hTakings] + HouseInfo[h][hRent];
			SetPlayerPosEx(playerid, HouseInfo[h][hExitx], HouseInfo[h][hExity], HouseInfo[h][hExitz]); SetPlayerInterior(playerid, HouseInfo[h][hInterior]);
			SetPlayerVirtualWorld(playerid, HouseInfo[h][hVirtual]);
			GameTextForPlayer(playerid, "~g~house rented!", 5000, 1);
			PlayerInfo[playerid][pInt] = HouseInfo[h][hInterior]; PlayerInfo[playerid][pLocal] = h;
			pUpdateInt(playerid, "Rented", PlayerInfo[playerid][pRented]); pUpdateInt(playerid, "House", PlayerInfo[playerid][pRented]);
			OnPropTextdrawUpdate(1,h);
			if(strlen(housestring[InHouse[playerid]]) > 0) {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
			}
		}
	}
	if(quest_type[playerid] == quest_rent) quest_finish(playerid);
	return true;
}
CMD:housename(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPhousekey],housename[30],housename2[30],maxc = strlen(housename);
   	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		if(sscanf(params, "s[30]", housename)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /housename [message]");
		if(maxc > 30) return SCM(playerid,COLOR_WHITE,"Your house name can have maximum 30 characters.");
   		mysql_real_escape_string(housename, housename2);
		strmid(HouseInfo[bouse][hDiscription], housename, 0, 64, 255);
		SCM(playerid, -1, "Descrierea casei a fost schimbata.");
		gString[0] = (EOS);
		mysql_format(SQL,gString, 256,"UPDATE houses SET Discription='%s' WHERE ID='%d' LIMIT 1", housename2, PlayerInfo[playerid][pPhousekey]);
		mysql_tquery(SQL,gString);
		OnPropTextdrawUpdate(1, bouse);
	}
	return 1; 
}
CMD:housewithdraw(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPhousekey],moneyhouse;
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		if(sscanf(params, "d",moneyhouse)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /housewithdraw [amount]");
		if(moneyhouse < 1) return true;
		if (moneyhouse > HouseInfo[bouse][hTakings]) return SendClientMessage(playerid, COLOR_WHITE, "You don't have that amount of money.");
		if (!IsPlayerInRangeOfPoint(playerid, 100,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz])) return SendClientMessage(playerid, COLOR_WHITE, "You need to be near your house.");
		else {
			GivePlayerCash(playerid,moneyhouse);
			HouseInfo[bouse][hTakings] = HouseInfo[bouse][hTakings]-moneyhouse;
			SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have withdrawn $%d from your house vault.", moneyhouse);
			gString[0] = (EOS);
			mysql_format(SQL,gString,184,"UPDATE `houses` SET `Takings`='%d' WHERE `ID`='%d' LIMIT 1",HouseInfo[bouse][hTakings],HouseInfo[bouse][hID]);
			mysql_tquery(SQL,gString);
			return true;
		}
	}
	return 1; 
}
alias:housewithdraw("hwithdraw")
CMD:hbalance(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPhousekey];
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) SCMf(playerid, COLOR_PRINC, ">> {ffffff}House Vault Balance: $%d", HouseInfo[bouse][hTakings]);
	return 1; 
}
CMD:evict(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPhousekey], target;
	if(bouse != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		if(sscanf(params, "u", target)) return SCM(playerid, -1, "Syntax: /evict [name/playerid]");
		if(target == playerid) return SCM(playerid, -1, "You can't evict yourself.");
		if(target == INVALID_PLAYER_ID || !IsPlayerConnected(target)) return SCM(playerid, -1, "Invalid id.");
		if(PlayerInfo[target][pPhousekey] != PlayerInfo[playerid][pPhousekey]) return SCM(playerid, -1, "Player doesn't have rent at your house.");
		SCM(target, -1, "You have been evicted.");
		SCM(playerid, -1, "Player has been evicted.");
		PlayerInfo[target][pPhousekey] = 999; PlayerInfo[target][pRented] = -1;
		gString[0] = (EOS);
		mysql_format(SQL, gString, 184, "UPDATE users SET `House`='999',`Rented`='-1' WHERE `name`='%s' LIMIT 1", PlayerInfo[target][pNormalName]);
		mysql_tquery(SQL, gString);
		OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey]);
	}
	return 1; 
}
CMD:evictall(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPhousekey],str[100];
	if (bouse != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		mysql_format(SQL,str,100,"UPDATE users SET `House`='999',`Rented`='-1' WHERE `Rented`='%d'",PlayerInfo[playerid][pPhousekey]);
		mysql_tquery(SQL,str);
		foreach(new i : Player) {
			if(i != playerid) {
				if (PlayerInfo[i][pPhousekey] == PlayerInfo[playerid][pPhousekey]) {
					SendClientMessage(i, COLOR_WHITE, "You have been evicted from your house.");
					PlayerInfo[i][pPhousekey] = 999;
					PlayerInfo[i][pRented] = -1;
					return true;
				}
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "Everyone have been evicted.");
		OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey]);
	}
	return 1; 
}
CMD:sellhousetostate(playerid, params[]) {
	if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		SellHouseID[playerid] = PlayerInfo[playerid][pPhousekey];
		ShowPlayerDialogEx(playerid, DIALOG_SELLHOUSETOSTATE, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to sell your house for $15.000.000?", "Yes", "No");
	}
	return 1; 
}
CMD:sellhouse(playerid, params[]) {
	if(PlayerInfo[playerid][pPhousekey] == 999) return SCM(playerid, -1, "Nu ai o casa.");
	new id22 = PlayerInfo[playerid][pPhousekey], money;
	if(id22 != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		if(!IsPlayerInRangeOfPoint(playerid, 4, HouseInfo[id22][hEntrancex], HouseInfo[id22][hEntrancey], HouseInfo[id22][hEntrancez])) return SCM(playerid, -1, "You are not near your house.");
		if(sscanf(params, "i", money)) return SCM(playerid, -1, "Syntax: /sellhouse [price]");
		if(money < 0 || money > 1000000000) return SCM(playerid, -1, "Price maximum $1,000,000,000 (0 = stop selling).");
		if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, -1, "Ai nevoie de minim level 5.");
		HouseInfo[id22][hPrice] = money;
		gString[0] = (EOS);
		mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Prices`='%d' WHERE `ID`='%d' LIMIT 1", money, id22);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_PRINC, "You have set your house sell price at $%s.", FormatNumber(money));
		OnPropTextdrawUpdate(1,id22);
	}
	return 1; 
}
CMD:sellbusiness(playerid, params[]) {
	new biz = PlayerInfo[playerid][pPbiskey], money;
	if(biz == 255) return SCM(playerid, -1, "You don't have business.");
	if(!IsPlayerInRangeOfPoint(playerid, 4, BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ])) return SCM(playerid, -1, "You are not near your business.");
	if(sscanf(params, "i", money)) return SCM(playerid, -1, "Syntax: /sellbusiness [price]");
	if(money < 0 || money > 1000000000) return SCM(playerid, -1, "Price maximum $1,000,000,000 (0 = stop selling).");
	if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, -1, "Ai nevoie de minim level 5.");
	BizzInfo[biz][bPrice] = money;
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Prices`='%d' WHERE `ID`='%d' LIMIT 1", money, biz);
	mysql_tquery(SQL, gString);
	SCMf(playerid, COLOR_PRINC, "You have set your business sell price at $%s.", FormatNumber(money));
	OnPropTextdrawUpdate(2,biz);
	return 1; 
}		
CMD:setrent(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPhousekey], fee;
	if(bouse != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		if(sscanf(params, "d", fee)) return SCM(playerid, -1, "Syntax: /setrent [money]");
		if(fee < 0 || fee > 10000) return SCM(playerid, -1, "Minimum rent is $1, maximum rent is $10,000. To disable rent use /setrent 0.");
		HouseInfo[bouse][hRent] = fee;
		if(fee == 0) HouseInfo[bouse][hRentabil] = 0;
		else HouseInfo[bouse][hRentabil] = 1;
		gString[0] = (EOS);
		mysql_format(SQL, gString, 128, "UPDATE `houses` SET `Rent`='%d' WHERE `ID`='%d' LIMIT 1", fee, bouse);
		mysql_tquery(SQL, gString);
		mysql_format(SQL, gString, 128, "UPDATE `houses` SET `Rentabil`='%d' WHERE `ID`='%d' LIMIT 1", HouseInfo[bouse][hRentabil], bouse);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}House rent set to $%d.", HouseInfo[bouse][hRent]);
		OnPropTextdrawUpdate(1,PlayerInfo[playerid][pPhousekey]);
		return true;
	} 
	return 1; 
}	
CMD:fpk(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, -1, AdminOnly);
	new id, reason[64], fpunish, string2[256], escape[256];
	if(sscanf(params, "uds[64]", id, fpunish, reason)) return SCM(playerid, -1, "Syntax: /fpk [name/playerid] [fp] [reason]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[id][pMember] == 0) return SCM(playerid, -1, "This player is not in a group.");
	gString[0] = (EOS);
	if(fpunish > 0) {
		SendAdmins(COLOR_SKEMA2, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", 1,GetName(id), GetName(playerid), NumeFactiune(PlayerInfo[id][pMember]), PlayerInfo[id][pRank], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
		SendFamilyMessage(PlayerInfo[id][pMember], COLOR_GENANNOUNCE, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", GetName(id), GetName(playerid), NumeFactiune(PlayerInfo[id][pMember]), PlayerInfo[id][pRank], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
		format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", GetName(id), GetName(playerid), DynamicFactions[PlayerInfo[id][pMember]][fName], PlayerInfo[id][pRank], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
		mysql_real_escape_string(string2, escape);
		Factionlog(PlayerInfo[id][pMember],PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape);
		mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,gString);
		PlayerInfo[id][pFpunish] = fpunish;
		SCMf(id, COLOR_SKEMA2, "You were uninvited by Admin %s from your faction after %d days, with %d FP. Reason: %s.", GetName(playerid), GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), fpunish, reason);
	} else if(fpunish < 1) {
		SendAdmins(COLOR_SKEMA2, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", 1,GetName(id), GetName(playerid), NumeFactiune(PlayerInfo[id][pMember]), PlayerInfo[id][pRank], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
		SendFamilyMessage(PlayerInfo[id][pMember], COLOR_GENANNOUNCE, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", GetName(id), GetName(playerid), NumeFactiune(PlayerInfo[id][pMember]), PlayerInfo[id][pRank], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
		format(string2, sizeof(string2), "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", GetName(id), GetName(playerid), DynamicFactions[PlayerInfo[id][pMember]][fName], PlayerInfo[id][pRank], GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
		mysql_real_escape_string(string2, escape);
		Factionlog(PlayerInfo[id][pMember],PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],escape);
		mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL,gString);
		PlayerInfo[id][pFpunish] = 0;
		SCMf(id, COLOR_SKEMA2, "You were uninvited by Admin %s from your faction after %d days, without FP. Reason: %s.", GetName(playerid), GetDaysFromTimestamp(PlayerInfo[id][pFactionJoin]), reason);
	}	
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `factions` SET `Leader` = '0' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[id][pMember]);
	mysql_tquery(SQL, gString);		
	PlayerInfo[id][pMember] = 0; PlayerInfo[id][pLeader] = 0; PlayerInfo[id][pRank] = 0; PlayerInfo[id][pFACWarns] = 0; tazer[id] = 0;
	PlayerInfo[id][pFactionJoin] = 0; PlayerInfo[id][pModel] = 250; gTeam[id] = 3; PlayerInfo[id][pTeam] = 3; OnDuty[id] = 0;
	SetPlayerArmourEx(id, 0); SetPlayerSkin(id, 250); SetPlayerToTeamColor(id);
	mysql_format(SQL,gString,sizeof(gString),"UPDATE users SET `Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FWarn`='0',`FPunish`='%d',`Team`='3', `FactionTime` = '0', `FactionJoin`='0' WHERE `name`='%s' LIMIT 1",PlayerInfo[id][pFpunish],PlayerInfo[id][pNormalName]);
	mysql_tquery(SQL,gString);
	return 1; 
}
CMD:fpkoff(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, -1, AdminOnly);
    new id[30], fp, reason[64], rank, ftime, faction, idd, escape[30], escapee[256];
    if(sscanf(params, "s[30]is[64]", id, fp, reason)) return SCM(playerid, -1, "Syntax: /fpkoff [name] [fp] [reason]");
    mysql_real_escape_string(id, escape);
    gString[0] = (EOS);
    format(gString, 256, "SELECT `Member` FROM `users` WHERE `name` = '%s'", escape);
    new Cache: r = mysql_query(SQL, gString);
    if(cache_get_row_count()) {
        new fostfactiune = cache_get_row_int(0, 0);
        if(fostfactiune == 0) return SCM(playerid, -1, "Acest jucator nu este intr-o factiune.");
        gString[0] = (EOS);
        format(gString, 256, "SELECT * FROM `users` WHERE `name`='%s'", escape);
        new Cache: membresult = mysql_query(SQL, gString);
        for(new i, j = cache_get_row_count (); i != j; ++i) {
            idd = cache_get_field_content_int(i, "id");
            rank = cache_get_field_content_int(i, "Rank");
            ftime = cache_get_field_content_int(i, "FactionJoin");
            faction = cache_get_field_content_int(i, "Member");           
        }
        cache_delete(membresult);
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `factions` SET `Leader` = '0' WHERE `ID` = '%d' LIMIT 1", faction);
		mysql_tquery(SQL, gString);	        
        if(fp == 0) {
            SendAdmins(COLOR_SKEMA2, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", 1, id, GetName(playerid), DynamicFactions[faction][fName], rank, GetDaysFromTimestamp(ftime), reason);
            SendFamilyMessage(faction, COLOR_GENANNOUNCE, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", id, GetName(playerid), DynamicFactions[faction][fName], rank, GetDaysFromTimestamp(ftime), reason);
            mysql_format(SQL,gString,256,"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='0',`FWarn`='0',`FactionJoin`='0' WHERE `name`='%s'",escape);
            mysql_tquery(SQL,gString);   
            format(gString, 256, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with 0 FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),reason);
            mysql_real_escape_string(gString, escapee);            
            mysql_format(SQL, gString, 256, "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escapee, idd, PlayerInfo[playerid][pSQLID]);
            mysql_tquery(SQL,gString);
            cache_delete(r);
            return true;
        } else if(fp >= 1) {
            SendAdmins(COLOR_SKEMA2, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", 1, id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),fp,reason);
            SendFamilyMessage(faction, COLOR_GENANNOUNCE, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.", id, GetName(playerid), DynamicFactions[faction][fName], rank, GetDaysFromTimestamp(ftime), fp, reason);
            mysql_format(SQL,gString,256,"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='%d',`FWarn`='0',`FactionJoin`='0',`FactionTime` = '0' WHERE `name`='%s'",fp, escape);
            mysql_tquery(SQL,gString);   
            format(gString, 256, "%s was uninvited by Admin %s from faction %s (rank %d) after %d days, with %d FP. Reason: %s.",id,PlayerInfo[playerid][pNormalName],DynamicFactions[faction][fName],rank,GetDaysFromTimestamp(ftime),fp,reason);
            mysql_real_escape_string(gString, escapee);            
            mysql_format(SQL, gString, 256, "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", escapee, idd, PlayerInfo[playerid][pSQLID]);
            mysql_tquery(SQL,gString);
            cache_delete(r);
            return true;
        }
    }
    cache_delete(r);
    return 1; 
}	
CMD:addword(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
	new word[30], escape[128], x;
	if(sscanf(params, "s[30]", word)) return SCM(playerid, -1, "Syntax: /addword [word]");
	mysql_real_escape_string(word, escape);
	gString[0] = (EOS);
	format(gString, 256, "SELECT * FROM adv WHERE word = '%s' LIMIT 1", escape);
	new Cache: xd = mysql_query(SQL, gString);
	if(cache_get_row_count() == 0) x++;
	cache_delete(xd);
	if(x == 0) return SCM(playerid, -1, "This word is already forbidden.");
	mysql_format(SQL, gString, 256, "INSERT INTO adv (`word`) VALUES ('%s')", escape);
	mysql_tquery(SQL, gString);
	SCM(playerid, -1, "Forbidden word added.");
	return 1; 
}
CMD:spec(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda cand esti intr-un vehicul.");
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	new id, carid = GetPlayerVehicleID(Spectate[playerid]);
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /spec [name/playerid]");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
	if(Spectate[id] != -1) return SendClientMessage(playerid, COLOR_WHITE, "That player is on spectating someone else.");
	if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[id][pAdmin] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe un admin.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[id][pAdmin]) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe un admin mai mare ca tine.");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) SCMf(id, -1, "Adminul %s este spectator pe tine.", GetName(playerid));
	if(Spectate[playerid] == -1) {
		BeforeSpectate[playerid][pState] = GetPlayerState(playerid);
		BeforeSpectate[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		BeforeSpectate[playerid][pInt] = GetPlayerInterior(playerid);
		BeforeSpectate[playerid][pSpectating] = true;	
		new Float: x, Float: y, Float: z; GetPlayerPos(playerid, x, y, z);	
		BeforeSpectate[playerid][pOldPos][0] = x;
		BeforeSpectate[playerid][pOldPos][1] = y;
		BeforeSpectate[playerid][pOldPos][2] = z;				
	}
	Spectate[playerid] = id;
	new Float:health;
	GetPlayerHealth(Spectate[playerid], health);
	if(reportstuck[id] >= 1) {
    	SendAdmins(COLOR_PRINC, "(report) {ffffff} Admin %s (ID: %d) is now spectating %s (ID: %d) - reported for being stuck.", 1,GetName(playerid), playerid, GetName(id), id);
    	gString[0] = (EOS);
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `HelpedPlayers` = `HelpedPlayers` + '1' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString, "", "");
		PlayerInfo[playerid][pTokens] ++;
		mysql_format(SQL, gString, 256, "UPDATE `users` SET `Tokens` = `Tokens` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString);		
    	reportstuck[id] = 0; reportdat[playerid] = 0; format(reporttext[id], 30, "NULL");			
	}
	SCMf(playerid, COLOR_DARKPINK, "(%d) %s | Level: %d | Health: %.0f | AFK: %d | Duty: %d | Ping: %d | Virtual World: %d", Spectate[playerid], GetName(Spectate[playerid]), PlayerInfo[Spectate[playerid]][pLevel], health, IsPlayerAFK[Spectate[playerid]], OnDuty[Spectate[playerid]], GetPlayerPing(Spectate[playerid]), GetPlayerVirtualWorld(Spectate[playerid]));
	if(timerspectate[playerid] != Timer:-1) stop timerspectate[playerid];
	timerspectate[playerid] = repeat FunctionSpectate(playerid);
	TogglePlayerSpectating(playerid, 1);
	if(IsPlayerInAnyVehicle(Spectate[playerid])) {
		PlayerSpectateVehicle(playerid, carid);
		SpectateState[id] = 2;
	} else {
		PlayerSpectatePlayer(playerid, Spectate[playerid]);
		SpectateState[id] = 1;
	}
	PlayerTextDrawSetString(playerid, TextDrawSpec[playerid][1], "LOADING...");
	PlayerTextDrawShow(playerid, TextDrawSpec[playerid][1]);	
	if(PlayerInfo[playerid][pAdmin] < 5) SendAdmins(COLOR_PRINC, "(/spec) {ffffff}%s (ID: %d) is now spectating (/spec) %s (ID: %d).", 1, GetName(playerid), playerid, GetName(id), id);
	return true;
}
timer FunctionSpectate[1000](playerid) {
	new id = Spectate[playerid], Float:health, Float:vHealth, speed, vehicleid;
	if(!IsPlayerConnected(id)) {
		if(timerspectate[playerid] != Timer:-1) stop timerspectate[playerid];
		timerspectate[playerid]=Timer:-1;
		SetPlayerInterior(playerid, Unspec[playerid][sPint]);
		PlayerInfo[playerid][pInt] = Unspec[playerid][sPint]; PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
		Unspec[playerid][sLocal] = -1; gTeam[playerid] = PlayerInfo[playerid][pTeam]; SetPlayerToTeamColor(playerid);
		PlayerTextDrawHide(playerid, TextDrawSpec[playerid][1]); PlayerTextDrawHide(playerid, TextDrawSpec[playerid][2]);
		PlayerTextDrawHide(playerid, TextDrawSpec[playerid][3]); PlayerTextDrawHide(playerid, TextDrawSpec[playerid][4]);
		PlayerTextDrawHide(playerid, TextDrawSpec[playerid][5]);
		Spectate[playerid] = -1; SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		SendClientMessage(playerid, COLOR_WHITE, "Jucatorul pe care erai spectator a parasit serverul.");
		return 1;
	}
	GetPlayerHealth(id, health);
	if(GetPlayerState(id) == PLAYER_STATE_DRIVER || GetPlayerState(id) == PLAYER_STATE_PASSENGER) {
		vehicleid = GetPlayerVehicleID(id); speed = Carspeed(id); GetVehicleHealth(vehicleid, vHealth);
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][1], "%s (~r~%d~w~) - L ~r~%d", GetName(id), id, PlayerInfo[id][pLevel]);
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][2], "HEALTH:~r~ %.1f", health);
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][3], "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[id][pWantedLevel], PlayerInfo[id][pJailTime]);
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][4], "CAR: ~r~%d ~w~(~r~%.1f~w~ HP)", vehicleid, vHealth);
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][5], "SPEED: ~g~%d KM/H", speed);
	} else {
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][1], "%s (~r~%d~w~) - L ~r~%d", GetName(id), id, PlayerInfo[id][pLevel]);
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][2], "HEALTH:~r~ %.1f", health);
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][3], "W: ~r~%d ~w~- JAIL: ~r~%d", PlayerInfo[id][pWantedLevel], PlayerInfo[id][pJailTime]);
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][4], "");
		playerTextDrawSetString(playerid, TextDrawSpec[playerid][5], "");
	}
	for(new i = 1; i < 6; i++) PlayerTextDrawShow(playerid, TextDrawSpec[playerid][i]);
	if(GetPlayerInterior(id) != GetPlayerInterior(playerid)) SetPlayerInterior(playerid, GetPlayerInterior(id)), PlayerSpectatePlayer(playerid, id);
	if(GetPlayerVirtualWorld(id) != GetPlayerVirtualWorld(playerid)) SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id)), PlayerSpectatePlayer(playerid, id);
	if(SpectateState[id] && GetPlayerState(id) == PLAYER_STATE_DRIVER || SpectateState[id] == 1 && GetPlayerState(id) == PLAYER_STATE_PASSENGER) vehicleid = GetPlayerVehicleID(id), PlayerSpectateVehicle(playerid, vehicleid), SpectateState[id] = 2;
	if(SpectateState[id] == 2 && GetPlayerState(id) == PLAYER_STATE_ONFOOT) PlayerSpectatePlayer(playerid, id), SpectateState[id] = 1;
	return 1;
}
timer FunctionSpeedometer[1000](playerid) {
	if(!IsPlayerInAnyVehicle(playerid)) {
		if(timerspeedometer[playerid] != Timer:-1) stop timerspeedometer[playerid];
		timerspeedometer[playerid]=Timer:-1;
		return 1;
	}
	gString[0] = (EOS);    
    new vehicle = GetPlayerVehicleID(playerid), speed = Carspeed(playerid);
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) {
        PlayerTextDrawShow(playerid, Speedd[playerid]);
        format(gString, 64, "Speed: ~y~%d Km/h", speed);
        PlayerTextDrawSetString(playerid, Speedd[playerid], gString);
        if(!IsABike(vehicle) && !IsAPlane(vehicle)) {
            PlayerTextDrawShow(playerid, Fuell[playerid]);
            format(gString, 64, "Fuel: ~y~%d", Gas[vehicle]);
            PlayerTextDrawSetString(playerid, Fuell[playerid], gString);
        }	        
        foreach(new smecherie : Player) {
            for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
                if(PlayerInfo[smecherie][pCarID][v] == vehicle) {

                    PlayerTextDrawShow(playerid, Odom[playerid]);
                    format(gString, 64, "Odometer: ~y~%.0f KM", PlayerInfo[smecherie][pCarKM][v]);
                    PlayerTextDrawSetString(playerid, Odom[playerid], gString);
                    switch(PlayerInfo[smecherie][pCarLock][v]) {
                        case 0: {
                            PlayerTextDrawShow(playerid, carlocked[playerid]);
                            format(gString, 64, "UNLOCKED");
                            PlayerTextDrawSetString(playerid, carlocked[playerid], gString);
                        }
                        case 1: {
                            PlayerTextDrawShow(playerid, carlocked[playerid]);
                            format(gString, 64, "~r~LOCKED");
                            PlayerTextDrawSetString(playerid, carlocked[playerid], gString);
                        }
                    }
                }
            }
        }    
    } 
	return 1;
}
CMD:cn(playerid, params[]) {
	if(!PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, -1, "Nu esti un administrator level 1+.");
	new id;
	if(sscanf(params, "u", id))  return SendClientMessage(playerid, -1, "Syntax: /cn [playerid/name]");
	if(id == INVALID_PLAYER_ID)  return SendClientMessage(playerid, -1, "Acest jucator nu este conectat."); 
	if(strcmp(WantName[id], "NULL", true)) {
		SendAdmins(COLOR_PRINC, "(/cn) {ffffff}%s rejected %s's change name request.", 1,GetName(playerid), GetName(id));
		SCMf(id, COLOR_DARKPINK, "Admin %s rejected your change name request.", GetName(playerid));
		format(WantName[id], 30, "NULL");
		TypeName[id] = 0;
	} else return SCM(playerid, -1, "Acest jucator nu a cerut schimbarea numelui.");
	return 1; 
}
CMD:an(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id))  return SendClientMessage(playerid, -1, "Syntax: /an [playerid/name]"); 
	if(id == INVALID_PLAYER_ID)  return SendClientMessage(playerid, -1, "Acest jucator nu este conectat.");
	if(strcmp(WantName[id], "NULL", true)) {
		gString[0] = (EOS);
		mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `name` = '%s'", WantName[id]);
		mysql_tquery(SQL, gString, "selectChangeNicknameFNC", "dd", playerid, id);
	} else return SCM(playerid, -1, "Acest player nu a cerut sa-si schimbe numele.");
	return 1; 
}
function selectChangeNicknameFNC(playerid, id) {
	if(cache_get_row_count() > 0) {
		TypeName[id] = 0; format(WantName[id], 30, "NULL");
		SCM(playerid, -1, "Acest nume exista deja, incercarea jucatorului de a-si schimba numele a esuat.");
		SCM(id, -1, "Numele cerut de tine exista deja deoarece acesta este deja utilizat.");
		return true;
	}
	if(PlayerInfo[id][pPremiumPoints] < 15 && TypeName[id] == 2 && forcenamechange[id] < 1) {
		SendClientMessage(id, COLOR_WHITE, "Your change name request was rejected because you don't have necesary premium points.");
		SendClientMessage(playerid, COLOR_WHITE, "This player don't have necesary premium points and his change name request was rejected.");
		TypeName[id] = 0; format(WantName[id], 30, "NULL");
		return true;
	}
	if(PlayerInfo[id][pPhousekey] != 999 && strcmp(PlayerInfo[id][pNormalName], HouseInfo[PlayerInfo[id][pPhousekey]][hOwner], true) == 0) {
		format(HouseInfo[PlayerInfo[id][pPhousekey]][hOwner], 25, "%s", WantName[id]);
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `houses` SET `Owner` = '%s' WHERE `Owner` = '%s'", WantName[id], PlayerInfo[id][pNormalName]);
		mysql_tquery(SQL, gString, "", "");
	}
	if(PlayerInfo[id][pPbiskey] != 255) {
		format(BizzInfo[PlayerInfo[id][pPbiskey]], 25, "%s", WantName[id]);
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `bizz` SET `Owner` = '%s' WHERE `Owner` = '%s'", WantName[id], PlayerInfo[id][pNormalName]);
		mysql_tquery(SQL, gString, "", "");
	}
	for(new i; i < MAX_PERSONAL_VEHICLES; i++) {
		if(PlayerInfo[id][pCar][i] != -1) {
			format(CarOwner[id][i], 30, "%s", WantName[id]);
			mysql_format(SQL, gString, sizeof(gString), "UPDATE `cars` SET `Owner` = '%s' WHERE `ID` = '%d'", WantName[id], PlayerInfo[id][pCar][i]);
			mysql_tquery(SQL, gString, "", "");
		}
	}
	if(TypeName[id] == 2 && forcenamechange[id] < 1) {
		PlayerInfo[id][pPremiumPoints] -= 30; pUpdateInt(id, "PremiumPoints", PlayerInfo[id][pPremiumPoints]);
	}
	SCM(playerid, COLOR_DARKPINK, "Processing request, please wait."); 
	pUpdateStr(id, "name", WantName[id]);
	SendAdmins(COLOR_PRINC, "(ChangeNickname) {ffffff}%s changed %s's name to %s.", 1,GetName(playerid), GetName(id), WantName[id]);
	mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `playerlogs` (`playerid`,`giverid`,`action`) VALUES ('%d','%d','%s change nickname in %s')", PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID], GetName(id), WantName[id]);
	mysql_tquery(SQL, gString, "", "");
	format(PlayerInfo[id][pNormalName], MAX_PLAYER_NAME, "%s", WantName[id]);
	SetPlayerName(id, WantName[id]);
	format(WantName[id], 30, "NULL");
	playerTextDrawSetString(id, LogoTD, "%s/RPG.BLACK~p~MOON~w~.RO", PlayerInfo[id][pNormalName]);
	PlayerTextDrawShow(id, LogoTD);
	SendClientMessage(playerid, COLOR_DARKPINK, "Player nickname changed.");
	SendClientMessage(id, COLOR_DARKPINK, "Your nickname request was accepted.");
	TypeName[id] = 0; forcenamechange[id] = 0;
	return 1; 
}	
CMD:rangeskin(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new range, skin;
	if(sscanf(params, "ii", range, skin)) return SCM(playerid, -1, "Syntax: /rangeskin [range] [skin]");
	if(range < 1 || range > 250) return SCM(playerid, -1, "Range minim 1, maxim 250.");
	if(skin < 0 || skin > 300) return SCM(playerid, -1, "Invalid skin id.");
	SendAdmins(COLOR_PRINC, "(/rangeskin) {ffffff}%s has set skin %d to all players on range of %d.", 1, GetName(playerid), skin, range);
	foreach(new i : Player) {
		if(GetDistanceBetweenPlayers(playerid, i) < range) SetPlayerSkin(i, skin);
	}
	sendNearbyMessage(playerid, range, COLOR_PRINC, "Administratorul %s a setat skin-ul %d tuturor jucatorilor din raza lui.", GetName(playerid), skin);	
	return 1; 
}
CMD:myraport(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid, -1, "Nu faci parte dintr-o factiune!");
	if(delayfactions[playerid] >= 30) return SCM(playerid, -1, "Asteapta cateva secunde.");
	switch(PlayerInfo[playerid][pMember]) {
		case 1,2,3: {
			SCMf(playerid, -1, "---------------------------------------------");
			SCMf(playerid, -1, "%d Kills", PlayerInfo[playerid][pRaport][0]);
			SCMf(playerid, -1, "%d Arrests", PlayerInfo[playerid][pRaport][1]);
			SCMf(playerid, -1, "%d Confiscated Licenses", PlayerInfo[playerid][pRaport][4]);
			SCMf(playerid, -1, "%d Confiscated Drugs", PlayerInfo[playerid][pRaport][3]);
			SCMf(playerid, -1, "%d Tickets", PlayerInfo[playerid][pRaport][5]);
		}
		case 11: SCMf(playerid, -1, "%d Contracts", PlayerInfo[playerid][pRaport][0]);
		case 15: SCMf(playerid, -1, "%d Tows", PlayerInfo[playerid][pRaport][0]);
		case 16: SCMf(playerid, -1, "%d Clients", PlayerInfo[playerid][pRaport][0]);
		case 14: SCMf(playerid, -1, "%d Healts", PlayerInfo[playerid][pRaport][0]);
		case 5,6,4,10: {
			SCMf(playerid, -1, "%d Deposit Mats", PlayerInfo[playerid][pRaport][2]);
			SCMf(playerid, -1, "%d Deposit Drugs", PlayerInfo[playerid][pRaport][6]);
		}
		case 9: {
			SCMf(playerid, -1, "%d Lives", PlayerInfo[playerid][pRaport][5]);
			SCMf(playerid, -1, "%d News", PlayerInfo[playerid][pRaport][6]);
		}
	}
	SCM(playerid, -1, "---------------------------------------------");
	delayfactions[playerid] = 30;
	return 1;
}
CMD:raport(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid, -1, "Nu faci parte dintr-o factiune!");
	if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, -1, "Ai nevoie de rank 6+.");
	if(delayfactions[playerid] >= 30) return SCM(playerid, -1, "Asteapta cateva secunde.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /raport [name/playerid]");
	if(PlayerInfo[playerid][pMember] != PlayerInfo[id][pMember]) return SCM(playerid, -1, "Nu faci parte din aceasi factiune cu acel jucator.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "Poti folosi comanda /myraport.");
	SCMf(playerid, -1, "------------------------------------------", GetName(id));
	switch(PlayerInfo[id][pMember]) {
		case 1,2,3: {
			SCMf(playerid, -1, "%d Kills", PlayerInfo[id][pRaport][0]);
			SCMf(playerid, -1, "%d Arrests", PlayerInfo[id][pRaport][1]);
			SCMf(playerid, -1, "%d Confiscated Licenses", PlayerInfo[id][pRaport][4]);
			SCMf(playerid, -1, "%d Confiscated Drugs", PlayerInfo[id][pRaport][3]);
			SCMf(playerid, -1, "%d Tickets", PlayerInfo[id][pRaport][5]);
		}
		case 11: SCMf(playerid, -1, "%d Contracts", PlayerInfo[id][pRaport][0]);
		case 15: SCMf(playerid, -1, "%d Tows", PlayerInfo[id][pRaport][0]);
		case 16: SCMf(playerid, -1, "%d Clients", PlayerInfo[id][pRaport][0]);
		case 14: SCMf(playerid, -1, "%d Healts", PlayerInfo[id][pRaport][0]);
		case 5,6,4,10: {
			SCMf(playerid, -1, "%d Deposit Mats", PlayerInfo[id][pRaport][2]);
			SCMf(playerid, -1, "%d Deposit Drugs", PlayerInfo[id][pRaport][6]);
		}
		case 9: {
			SCMf(playerid, -1, "%d Lives", PlayerInfo[id][pRaport][5]);
			SCMf(playerid, -1, "%d News", PlayerInfo[id][pRaport][6]);
		}
	}
	SCM(playerid, -1, "------------------------------------------");
	delayfactions[playerid] = 30;
	return 1;
}
CMD:rangefreeze(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new range;
	if(sscanf(params, "i", range)) return SCM(playerid, -1, "Syntax: /rangefreeze [range]");
	if(range < 1 || range > 250) return SCM(playerid, -1, "Range minim 1, maxim 250.");
	SendAdmins(COLOR_PRINC, "(/rangefreeze) {ffffff}%s has frozen all players on range of %d.", 1,GetName(playerid), range);
	foreach(new i : Player) {
		if(GetDistanceBetweenPlayers(playerid, i) < range) TogglePlayerControllable(i, false);
	}
	SCM(playerid, COLOR_PRINC, "Jucatorii aflati in raza introdusa de tine au primit freeze.");
	return 1; 
}	
CMD:rangeunfreeze(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new range;
	if(sscanf(params, "i", range)) return SCM(playerid, -1, "Syntax: /rangeunfreeze [range]");
	if(range < 1 || range > 250) return SCM(playerid, -1, "Range minim 1, maxim 250.");
	SendAdmins(COLOR_PRINC, "(/rangegunfreeze) {ffffff}%s has unfrozen all players on range of %d.", 1,GetName(playerid), range);
	foreach(new i : Player) {
		if(GetDistanceBetweenPlayers(playerid, i) < range) TogglePlayerControllable(i, true);
	}	
	sendNearbyMessage(playerid, range, COLOR_PRINC, "Administratorul %s ti-a dat unfreeze.", GetName(playerid));
	SCM(playerid, COLOR_PRINC, "Jucatorii aflati in raza introdusa de tine au primit unfreeze.");
	return 1; 
}	
CMD:rangedisarm(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new range;
	if(sscanf(params, "i", range)) return SCM(playerid, -1, "Syntax: /rangedisarm [range]");
	if(range < 1 || range > 250) return SCM(playerid, -1, "Range minim 1, maxim 250.");
	SendAdmins(COLOR_PRINC, "(/rangedisarm) {ffffff}%s has disarmed all players on range of %d.", 1,GetName(playerid), range);
	foreach(new i : Player) {
		if(GetDistanceBetweenPlayers(playerid, i) < range) {
			ResetPlayerWeaponsEx(i); ResetPlayerWeapons(i);
		}	
	}
	sendNearbyMessage(playerid, range, COLOR_PRINC, "Administratorul %s ti-a confiscat armele.", GetName(playerid));
	return 1; 
}	
CMD:rangegun(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new range, gunid;
	if(sscanf(params, "ii", range, gunid)) return SCM(playerid, -1, "Syntax: /rangegun [range] [gun id]");
	if(range < 1 || range > 250) return SCM(playerid, -1, "Range minim 1, maxim 250.");
	if(gunid < 1||gunid > 46||gunid==19||gunid==20||gunid==21||gunid==45) return SCM(playerid,COLOR_WHITE,"Invalid weapond id.");
	SendAdmins(COLOR_PRINC, "(/rangegun) {ffffff}%s has given gun %d to all players on range %d.", 1,GetName(playerid),gunid,range);
	foreach(new i : Player) {
		if(GetDistanceBetweenPlayers(playerid, i) < range) GivePlayerWeaponEx(i, gunid, 9999);
	}
	sendNearbyMessage(playerid, range, COLOR_PRINC, "Administratorul %s a oferit arma %d tuturor jucatorilor aflati in raza lui.", GetName(playerid), gunid);
	return 1; 
}	
CMD:rangeheal(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new range;
	if(sscanf(params, "i", range)) return SCM(playerid, -1, "Syntax: /rangeheal [range]");
	if(range < 1 || range > 250) return SCM(playerid, -1, "Range minim 1, maxim 250.");
	SendAdmins(COLOR_PRINC, "(/rangeheal) {ffffff}%s has set to all players in range %d heal to 100.", 1,GetName(playerid), range);
	foreach(new i : Player) {
		if(GetDistanceBetweenPlayers(playerid, i) < range) SetPlayerHealthEx(i, 100);
	}	
	sendNearbyMessage(playerid, range, COLOR_DARKPINK, "Admin %s healed you.", GetName(playerid));
	return 1; 
}	
CMD:giveall(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
	if(sanctiondelay[playerid] >= 10) return SCM(playerid, -1, "Asteapta cateva secunde.");
	new item[20], amount;
	if(sscanf(params, "s[20]i", item, amount)) { 
		SCM(playerid, -1, "Syntax: /giveall [item] [amount]"); 
		SCM(playerid, -1, "Items: magistrate, money, fw, rob, escape, pp, level, rp, hidden, lowest, middle, Millenium, roll, giftpoints");
		return true;
	}
	if(strcmp(item, "money", true) == 0) {
		if(amount > 10000000) return SCM(playerid, -1, "Max 10,000,000$."); 
		foreach(new i : Player) GivePlayerCash(i, amount);
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit $%s tuturor jucatorilor conectati.", GetName(playerid), FormatNumber(amount));
	}
	else if(strcmp(item, "fw", true) == 0) {
		if(amount > 20) return SCM(playerid, -1, "Max 20 fireworks.");
		foreach(new i : Player) { PlayerInfo[i][pFWorks] += amount, pUpdateInt(i, "FWorks", PlayerInfo[i][pFWorks]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d artificii tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	else if(strcmp(item, "rob", true) == 0) {
		if(amount > 20) return SCM(playerid, -1, "Max 20 rob points.");
		foreach(new i : Player) { PlayerInfo[i][pRob] += amount, pUpdateInt(i, "Rob", PlayerInfo[i][pRob]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d puncte de rob tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	else if(strcmp(item, "escape", true) == 0) { 
		if(amount > 20) return SCM(playerid, -1, "Max 20 escape points.");
		foreach(new i : Player) { PlayerInfo[i][pEscapePoints] += amount, pUpdateInt(i, "EscapePoints", PlayerInfo[i][pEscapePoints]); } 
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d puncte de evadare tuturor jucatorilor conectati.", GetName(playerid), amount);
	}	
	else if(strcmp(item, "pp", true) == 0) {
		if(amount > 10) return SCM(playerid, -1, "Max 10 premium points.");
		foreach(new i : Player) { PlayerInfo[i][pPremiumPoints] += amount, pUpdateInt(i, "PremiumPoints", PlayerInfo[i][pPremiumPoints]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d puncte premium tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	else if(strcmp(item, "level", true) == 0) {
		if(amount > 2) return SCM(playerid, -1, "Max 2 level up.");
		foreach(new i : Player) { PlayerInfo[i][pLevel] += amount, checkLevelProgress(i), pUpdateInt(i, "Level", PlayerInfo[i][pLevel]), SetPlayerScore(i, PlayerInfo[i][pLevel]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d level up tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	else if(strcmp(item, "rp", true) == 0) {
		if(amount > 15) return SCM(playerid, -1, "Max 15 respect points.");
		foreach(new i : Player) { PlayerInfo[i][pExp] += amount, checkLevelProgress(i), pUpdateInt(i, "Respect", PlayerInfo[i][pExp]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d puncte de respect tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	else if(strcmp(item, "hidden", true) == 0) {
		if(amount > 2) return SCM(playerid, -1, "Max 2 colors hidden.");
		foreach(new i : Player) { PlayerInfo[i][pHiddenColor] += amount, pUpdateInt(i, "HiddenColor", PlayerInfo[i][pHiddenColor]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d culori hidden tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	else if(strcmp(item, "lowest", true) == 0) {
		if(amount > 2) return SCM(playerid, -1, "Max 2 Lowest Crates.");
		foreach(new i : Player) { PlayerInfo[i][pMiniCrate] += amount, pUpdateInt(i, "MiniCrate", PlayerInfo[i][pMiniCrate]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d Lowest Crates tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	else if(strcmp(item, "middle", true) == 0) {
		if(amount > 2) return SCM(playerid, -1, "Max 2 Middle Crates.");
		foreach(new i : Player) { PlayerInfo[i][pBigCrate] += amount, pUpdateInt(i, "BigCrate", PlayerInfo[i][pBigCrate]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d Middle Crates tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	else if(strcmp(item, "Millenium", true) == 0) {
		if(amount > 2) return SCM(playerid, -1, "Max 2 Millenium Crates.");
		foreach(new i : Player) { PlayerInfo[i][pGigantCrate] += amount, pUpdateInt(i, "GigantCrate", PlayerInfo[i][pGigantCrate]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d Millenium Crates tuturor jucatorilor conectati.", GetName(playerid), amount);
	}	
	else if(strcmp(item, "roll", true) == 0) {
		if(amount > 200) return SCM(playerid, -1, "Max 200 roll points.");
		foreach(new i : Player) { PlayerInfo[i][pRoll] += amount, pUpdateInt(i, "Roll", PlayerInfo[i][pRoll]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d roll points tuturor jucatorilor online.", GetName(playerid), amount);
	}
	else if(strcmp(item, "giftpoints", true) == 0) {
		if(amount > 1000) return SCM(playerid, -1, "Max 1000 gift points.");
		foreach(new i : Player) { PlayerInfo[i][pGiftPoints] += amount, pUpdateInt(i, "GiftPoints", PlayerInfo[i][pGiftPoints]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d gift points tuturor jucatorilor online.", GetName(playerid), amount);
	}
	else if(strcmp(item, "magistrate", true) == 0) {
		if(amount > 2) return SCM(playerid, -1, "Max 2 Magistrate Crates.");
		foreach(new i : Player) { PlayerInfo[i][pXcrate] += amount, pUpdateInt(i, "xcrate", PlayerInfo[i][pXcrate]); }
		va_SendClientMessageToAll(COLOR_PRINC, ">> {ffffff}Admin %s a oferit %d Magistrate Crates tuturor jucatorilor conectati.", GetName(playerid), amount);
	}
	sanctiondelay[playerid] = 10;
	return 1; 
}	

CMD:giftinfo(playerid, params[]) {
	SCM(playerid, -1, "Giftbox Stats:");
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Points: %d", PlayerInfo[playerid][pGiftPoints]);
	SCM(playerid, COLOR_PRINC, ">> {ffffff}gift points-urile pot fi acumulate prin bonusurile acordate de owneri");
	return 1; 
}
function givelevelgift(playerid) {
	PlayerInfo[playerid][pGiftOpened] ++; pUpdateInt(playerid, "GiftOpened", PlayerInfo[playerid][pGiftOpened]);
	if(PlayerInfo[playerid][pGiftLevel] == 1 && PlayerInfo[playerid][pGiftOpened] >= 5) {
		PlayerInfo[playerid][pGiftLevel] ++; pUpdateInt(playerid, "GiftLevel", PlayerInfo[playerid][pGiftLevel]);
		va_SendClientMessageToAll(COLOR_PRINC, "GIFTBOX: {FFFFFF}%s a avansat la giftbox level 2. Felicitari!", GetName(playerid));
	}			
	if(PlayerInfo[playerid][pGiftLevel] == 2 && PlayerInfo[playerid][pGiftOpened] >= 10) {
		PlayerInfo[playerid][pGiftLevel] ++; pUpdateInt(playerid, "GiftLevel", PlayerInfo[playerid][pGiftLevel]);
		va_SendClientMessageToAll(COLOR_PRINC, "GIFTBOX: {FFFFFF}%s a avansat la giftbox level 3. Felicitari!", GetName(playerid));
	}			
	if(PlayerInfo[playerid][pGiftLevel] == 3 && PlayerInfo[playerid][pGiftOpened] >= 15) {
		PlayerInfo[playerid][pGiftLevel] ++; pUpdateInt(playerid, "GiftLevel", PlayerInfo[playerid][pGiftLevel]);	
		va_SendClientMessageToAll(COLOR_PRINC, "GIFTBOX: {FFFFFF}%s a avansat la giftbox level 4. Felicitari!", GetName(playerid));
	}		
	if(PlayerInfo[playerid][pGiftLevel] == 4 && PlayerInfo[playerid][pGiftOpened] >= 20) {
		PlayerInfo[playerid][pGiftLevel] ++; pUpdateInt(playerid, "GiftLevel", PlayerInfo[playerid][pGiftLevel]);	
		va_SendClientMessageToAll(COLOR_PRINC, "GIFTBOX: {FFFFFF}%s a avansat la giftbox level 5. Felicitari!", GetName(playerid));
	}					
	return 1; 
}	
CMD:kick(playerid, params[]) {
	new id, reason[64];
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 2) return SCM(playerid, -1, AdminOnly);
	if(sscanf(params, "us[64]", id, reason)) return SCM(playerid, -1, "Syantax: /kick [name/playerid] [reason]");
	if(PlayerInfo[id][pAdmin] > PlayerInfo[playerid][pAdmin]) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe acest jucator.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(sanctiondelay[playerid] > 0) return SCM(playerid, -1, "Poti folosi aceasta comanda doar peste cateva secunde.");
	if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[id][pAdmin] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe un administrator.");
	va_SendClientMessageToAll(COLOR_LIGHTRED, "AdmBot: %s has been kicked by %s, reason: %s.", GetName(id), GetName(playerid), reason);
	defer KickEx(id);
	return 1; 
}
CMD:skick(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /skick [name/playerid]");
	if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Ai dat o sanctiune recent, asteapta cateva secunde.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[id][pAdmin]) return SCM(playerid, -1, "Nu poti da kick unui admin mai mare sau egal cu tine.");
	SendAdmins(COLOR_BLUE, "(/skick) %s has been silent kicked by %s.", 1, GetName(id), GetName(playerid));
	defer KickEx(id);
	sanctiondelay[playerid] = 30;
	return 1; 
}	
CMD:kill(playerid, params[]) {
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted."); 
	if(PlayerInfo[playerid][pReborn] < 1) return SCM(playerid, -1, "Nu ai accest la aceasta comanda");
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda daca esti urmarit de politie!");
	if(barcadelay[playerid] >= 1) return SCMf(playerid, -1, "Poti folosi aceasta comanda peste %d secunde", barcadelay[playerid]);
	barcadelay[playerid] = 60;
	SendAdmins(COLOR_PRINC, "Reborn player %s used command (/kill)", 1, GetName(playerid));
	SetPlayerHealthEx(playerid, 0.0);
	return 1; 
}
CMD:closestcar(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
		if(doesVehicleExist(GetClosestVehicle(playerid))) {
			PutPlayerInVehicleEx(playerid, GetClosestVehicle(playerid), 0);
			SCM(playerid, COLOR_DARKPINK, "You have been teleported in the nearest vehicle.");
		}
		else SendClientMessage(playerid, COLOR_WHITE, "No vehicles are in range.");
	}	
	return 1; 
}
CMD:vre(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
	new car = GetPlayerVehicleID(playerid);
	DeleteVehicle(car);	
	SCM(playerid, COLOR_DARKPINK, "The vehicle was respawned.");
	
	return true;
}

function DeleteVehicle(vehicleid) {
	if(Carspawn[vehicleid] != 0) {
		DestroyVehicle(Carspawn[vehicleid]);
		Carspawn[vehicleid] = 0;
	}	
	if(carrent[vehicleid] != 0)
	{
		DestroyVehicle(carrent[vehicleid]);
		carrent[vehicleid] = 0;
	}	
	
	if(IsAnOwnableCar(vehicleid)) {
		foreach(new i : Player) {
			for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
				if(PlayerInfo[i][pCarID][v] == vehicleid) {
					PlayerInfo[i][pCarHP][v] = 1000.0;
					if(PlayerInfo[i][pCarIns][v] > 0) {
						PlayerInfo[i][pCarIns][v]--;
					}
					cUpdate(i, v, cInsurancecarx);
					cUpdate(i, v, cKMx);
					cUpdate(i, v, cHPx); 


					if(vObject[PlayerInfo[i][pCarID][v]]) DestroyDynamicObject(vObject[PlayerInfo[i][pCarID][v]]);
					vObject[PlayerInfo[i][pCarID][v]]=0;
					if(PlayerInfo[i][pCarSouvenrire][i] == 1 && PlayerInfo[i][pCarModel][i] == 411)
						for(new x; x < 5; x++)
						{
						    if(souvenire_objects[PlayerInfo[i][pCarID][v]][x]) DestroyDynamicObject(souvenire_objects[PlayerInfo[i][pCarID][v]][x]);
						    souvenire_objects[PlayerInfo[i][pCarID][v]][x] = 0;
						}						

					else if(PlayerInfo[i][pCarSouvenrire][v] == 1 && PlayerInfo[i][pCarModel][v] == 541)
						for(new x; x < 3; x++)
						{
						    if(souvenire_objects[PlayerInfo[i][pCarID][v]][x]) DestroyDynamicObject(souvenire_objects[PlayerInfo[i][pCarID][v]][x]);
						    souvenire_objects[PlayerInfo[i][pCarID][v]][x] = 0;
						}
					DestroyVehicle(PlayerInfo[i][pCarID][v]);
					PlayerInfo[i][pCarID][v] = 0;
				}
			}
		}
 	} else SetVehicleToRespawn(vehicleid);
}
CMD:rac(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, -1, AdminOnly);
    new occupied = 0;
    for(new i = 1; i <= MAX_VEHICLES; i++) {
        if(!IsVehicleOccupied(i)) {
            if(occupied == 0) SetVehicleToRespawn(i);
        }
    }
    SendAdmins(COLOR_PRINC, "(/rac) {ffffff}%s all cars respawned.", 1, GetName(playerid));
    return true; 
}
CMD:agl(playerid,params[]) {
    if (PlayerInfo[playerid][pAdmin] >= 3) {
		new id,x_nr[10],sendername[25],giveplayer[25],string[128];
		if(sscanf(params, "us[10]",id,x_nr))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /agl [name/playerid] [license]");
		    SendClientMessage(playerid, COLOR_WHITE, "Available names: Driving, Pilots, Sailing, Weapon, All.");
			return 1;
		}
		if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "Player not connected.");
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    GetPlayerName(id, giveplayer, sizeof(giveplayer));
	    if(strcmp(x_nr,"driving",true) == 0) {
            format(string, sizeof(string), "* You've given a Drivers License to %s.",giveplayer);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s has given you a Drivers License.",sendername);
	        SendClientMessage(id, COLOR_LIGHTBLUE, string);
	        PlayerInfo[id][pCarLic] = 100;
			PlayerInfo[id][pCarLicSuspend] = 0;
			pUpdateInt(id, "CarLicSuspend", PlayerInfo[playerid][pCarLicSuspend]);
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `CarLic`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str);
	        return 1;
		}
		else if(strcmp(x_nr,"pilots",true) == 0) {
            format(string, sizeof(string), "* You've given a Pilots License to %s.",giveplayer);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s has given you a Pilots License.",sendername);
	        SendClientMessage(id, COLOR_LIGHTBLUE, string);
	        PlayerInfo[id][pFlyLic] = 100;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str);
	        return 1;
		}
		else if(strcmp(x_nr,"sailing",true) == 0) {
            format(string, sizeof(string), "* You've given a Sailing License to %s.",giveplayer);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s has given you a Sailing License.",sendername);
	        SendClientMessage(id, COLOR_LIGHTBLUE, string);
	        PlayerInfo[id][pBoatLic] = 100;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str);
	        return 1;
		}
		else if(strcmp(x_nr,"weapon",true) == 0) {
            format(string, sizeof(string), "* You've given a Weapon License to %s.",giveplayer);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s has given you a Weapon License.",sendername);
	        SendClientMessage(id, COLOR_LIGHTBLUE, string);
	        PlayerInfo[id][pGunLic] = 100;
			PlayerInfo[id][pGunLicSuspend] = 0;	
			pUpdateInt(id, "GunLicSuspend", PlayerInfo[playerid][pCarLicSuspend]);
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str);
	        return 1;
		}
		else if(strcmp(x_nr,"all",true) == 0) {
            format(string, sizeof(string), "* You've given a All License to %s.",giveplayer);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	        format(string, sizeof(string), "* Admin %s has given you a All License.",sendername);
	        SendClientMessage(id, COLOR_LIGHTBLUE, string);
	        PlayerInfo[id][pGunLic] = 100;
			PlayerInfo[id][pGunLicSuspend] = 0;
			pUpdateInt(id, "GunLicSuspend", PlayerInfo[playerid][pCarLicSuspend]);
	        PlayerInfo[id][pCarLic] = 100;
			PlayerInfo[id][pCarLicSuspend] = 0;
			pUpdateInt(id, "CarLicSuspend", PlayerInfo[playerid][pCarLicSuspend]);
	        PlayerInfo[id][pFlyLic] = 100;
	        PlayerInfo[id][pBoatLic] = 100;
			new str[128];
			mysql_format(SQL,str,128,"UPDATE users SET `CarLic`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str);
			mysql_format(SQL,str,128,"UPDATE users SET `FlyLic`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str);
			mysql_format(SQL,str,128,"UPDATE users SET `BoatLic`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str);
			mysql_format(SQL,str,128,"UPDATE users SET `GunLic`='100' WHERE `name`='%s'",PlayerInfo[id][pNormalName]);
			mysql_tquery(SQL,str);
	        return 1;
		}
    }
    return 1;
}
CMD:va(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new Float: Distance, Float: posX, Float: posY, Float: posZ,range,Distance2;
	if(sscanf(params, "d", range)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /va [range]");
	if(range <= 0 || range >= 201) return SendClientMessage(playerid, COLOR_WHITE, "Range must be between 1 and 200.");
	GetPlayerPos(playerid, posX, posY, posZ);
	for(new x = 1; x < MAX_VEHICLES; x++) {
		if(!IsVehicleOccupied(x)) {
			Distance = GetVehicleDistanceFromPoint(x, posX, posY, posZ);
			Distance2 = floatround(Distance, floatround_round);
			if(Distance2 <= range) DeleteVehicle(x);
		}
	}
	SendAdmins(COLOR_PRINC, "(/va) {ffffff}%s respawned vehicles on %d game units.", 1, GetName(playerid), range);
	return 1; 
}	
CMD:clearwarns(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /clearwarns [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	PlayerInfo[id][pWarns] = 0; pUpdateInt(id, "Warnings", PlayerInfo[id][pWarns]);
	SendAdmins(COLOR_PRINC, "(/clearwarns) {ffffff}%s cleared warns to %s.", 1,PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName]); 
 	return 1; 
 }
CMD:spawnweapon(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id, idweapon;
	if(sscanf(params, "ui", id, idweapon)) return SCM(playerid, -1, "Syntax: /spawnweapon [name/playerid] [weapon id]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	GivePlayerWeaponEx(id, idweapon, 9999);
	SendAdmins(COLOR_PRINC, "(/spawnweapon) {ffffff}%s used /spawnweapon to give %s a gun id %d.", 1,PlayerInfo[playerid][pNormalName],PlayerInfo[id][pNormalName],idweapon);
	return 1; 
}	
CMD:spawn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /spawn [name/playerid]");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Player not connected.");
	SpawnPlayer(id);
	SCMf(id, COLOR_DARKPINK, "You have been spawned by %s.", PlayerInfo[playerid][pNormalName]);
	SendAdmins(COLOR_PRINC, "(/spawn) {ffffff}%s used /spawn on %s.", 1,PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName]);
	return 1; 
}	
CMD:pcolor(playerid, params[])
{
	
	if(PlayerInfo[playerid][pPremiumAccount] > 0)
	{
		new string[700],string2[1000];
		format(string,sizeof(string),"{CECECE}White\n{0087FE}Blue\n{4700C2}Dark purple\n{EBFF00}Yellow\n{EF00FF}Purple\n{40FF00}Green\n{9CFF29}Lime green\n{0E7F03}Dark green\n{FF9A00}Orange\n{6E6E6E}Black\n{FF4C9D}Pink\n{F4FA58}Yellow 2\n{00BFFF}Blue 2\n{819FF7}Blue 3\n{FE9A2E}Orange 2\n{FA8258}Orange 3\n{00FF40}Green 2\n{D358F7}Purple 2");
		format(string2,sizeof(string2),"%s\n{4169E1}Royan Blue\n{9ACD32}YellowGreen\n{F0E68C}Khaki\n{BDB76B}DarkKhaki\n{FF1493}DeepPink\n{9966CC}Amethyst\n{F0B2B2}PinkOrange\n{DB7093}PaleVioletRed",string);
		ShowPlayerDialogEx(playerid, 6267, DIALOG_STYLE_LIST, "Nickname color", string2, "Choose", "Cancel");
	}
	else return SendClientMessage(playerid,-1, "You are not a premium user.");
	return 1; 
}
CMD:pc(playerid, params[]) {
	if(PlayerInfo[playerid][pPremiumAccount] < 1) return SCM(playerid, - 1, AdminOnly);
	if(togvip[playerid] == 1) return SCM(playerid, -1, "Acest chat este dezactivat, foloseste /tog.");
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(sanctiondelay[playerid] >= 1) return SCMf(playerid, COLOR_PRINC, ">> {ffffff}Poti folosi aceasta comanda peste %d secunde.", sanctiondelay[playerid]);
	new mesaj[128];
	if(sscanf(params, "s[128]", mesaj)) return SCM(playerid, -1, "Syntax: /pc [message]");
	format(mesajsmek, sizeof mesajsmek, "[PREMIUM USER] %s: %s", GetName(playerid), mesaj);
	SendVip(COLOR_ORANGE, mesajsmek);
	sanctiondelay[playerid] = 3;
	return 1; 
}	
CMD:vipchat(playerid, params[]) {
	if(PlayerInfo[playerid][pVIP] < 1) return SCM(playerid, - 1, AdminOnly);
	if(togvip[playerid] == 1) return SCM(playerid, -1, "Acest chat este dezactivat, foloseste /tog.");
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(sanctiondelay[playerid] >= 1) return SCMf(playerid, COLOR_PRINC, ">> {ffffff}Poti folosi aceasta comanda peste %d secunde.", sanctiondelay[playerid]);
	new mesaj[128];
	if(sscanf(params, "s[128]", mesaj)) return SCM(playerid, -1, "Syntax: /vipchat [message]");
	format(mesajsmek, sizeof mesajsmek, "VIP %s: %s", GetName(playerid), mesaj);
	SendVip(COLOR_ORANGE, mesajsmek);
	sanctiondelay[playerid] = 3;
	return 1; 
}	
CMD:vipwheels(playerid, params[], help) {
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nu esti intr-un vehicul!");
	new carid = GetPlayerVehicleID(playerid),idcar=-1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
	{
		if(carid == PlayerInfo[playerid][pCarID][vv])
		{
			idcar = vv;
		}
	}
	if(idcar == -1) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.");
	if(carid == PlayerInfo[playerid][pCarID][idcar])
	{
		if(PlayerInfo[playerid][pCarVIP][idcar] > 0) {
			ShowPlayerDialogEx(playerid, DIALOG_VIPWHEELS, DIALOG_STYLE_LIST, "VIP Wheels", "Gold Wheels\nDollar Wheels\nShadow Wheels", "Set", "Exit");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.");
	return true;
}	
CMD:l(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pLeader] < 1) return SCM(playerid, -1, "Nu esti lider sau admin.");
	if(toglc[playerid] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have disabled leader chat, use /tog to enable.");
	new mesajelc[126], string[144];
	if(sscanf(params, "s[126]",mesajelc)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /l [message]");
	if(PlayerInfo[playerid][pAdmin] >= 1) format(string, sizeof(string), "(/l) {FF0000}Admin %s: {67AAB1}%s", PlayerInfo[playerid][pNormalName], mesajelc);
	else {
		if(PlayerInfo[playerid][pLeader] >= 1) format(string, sizeof(string), "(/l) Leader %s %s: %s", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pNormalName], mesajelc);
	}
	if(PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 1) LeaderChat(COLOR_TEAL, string);
	return 1; 
}	
alias:fvrespawn("fvr")
CMD:fvrespawn(playerid, params[]) {
	if(PlayerInfo[playerid][pLeader] < 1 && PlayerInfo[playerid][pRank] < 5) return SCM(playerid, -1, "Nu ai rank 5+.");
	new bool:unwanted[MAX_VEHICLES], faction = PlayerInfo[playerid][pMember];
	SendClientMessage(playerid, COLOR_WHITE, "Faction vehicles respawned!");
	if(faction == 1 || faction == 2 || faction == 3 || faction == 8 || faction == 9 || faction == 11 || faction == 13 || faction == 14 || faction == 12 || faction == 15 || faction == 16) {
		foreach(new player : Player) {
        	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  		}
		for(new x = 0; x < sizeof(VehicleInfo); x++)  {
			if(VehicleInfo[x][vehGroup] == PlayerInfo[playerid][pMember]) {
				if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
				Gas[VehicleInfo[x][vehCarID]] = 100;
			}
		}
		SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, "Your faction's vehicles were respawned by %s (rank %d).", GetName(playerid), PlayerInfo[playerid][pRank]);
	}
	if(faction == 4 || faction == 5 || faction == 6 || faction == 10) {
		foreach(new player : Player) {
   		 	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
		}
		for(new x = 0; x < sizeof(VehicleInfo); x++) {
			if(VehicleInfo[x][vehGroup] == PlayerInfo[playerid][pMember]) {
				if(!unwanted[VehicleInfo[x][vehCarID]]) SetVehicleToRespawnEx(VehicleInfo[x][vehCarID]);
				Gas[VehicleInfo[x][vehCarID]] = 100;
			}
		}
		SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, "Your faction's vehicles were respawned by %s (rank %d).", GetName(playerid), PlayerInfo[playerid][pRank]);
	}
	return 1; 
}	
CMD:quitgroup(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 0) return SCM(playerid, -1, "Nu faci parte dintr-o factiune.");
	if(PlayerInfo[playerid][pLeader] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece esti lider.");
	ShowPlayerDialogEx(playerid, DIALOG_QUITGROUP, DIALOG_STYLE_MSGBOX, "Quit Faction", "Esti sigur ca vrei sa parasesti factiunea ta? O sa primesti 20 faction punish.", "Yes", "No");
	return 1; 
}
CMD:warn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new name[30], reason[64], reasone[64], id, warns;
	if(sscanf(params, "s[30]s[64]", name, reason)) return SCM(playerid, -1, "Syntax: /warn [exact name] [reason]");
	if(sanctiondelay[playerid] > 0) return SCM(playerid, -1, "Asteapta cateva secunde.");
	gString[0] = (EOS);
	format(gString, 256, "SELECT * FROM `users` WHERE `name`='%s' LIMIT 1", name);
	new Cache: ab = mysql_query(SQL, gString);
	if(cache_get_row_count() == 1) {
		id = cache_get_field_content_int(0, "id");
		warns = cache_get_field_content_int(0, "Warnings");
	} else return SCM(playerid, -1, "Invalid player");
	cache_delete(ab);
	mysql_real_escape_string(reason, reasone);
	switch(warns) {
		case 0: {
			mysql_format(SQL, gString, 256, "UPDATE `users` SET `Warnings` = '1', `WarnReason1` = '%s' WHERE `id` = '%d' LIMIT 1", reasone, id);
			mysql_tquery(SQL, gString);
		}
		case 1: {
			mysql_format(SQL, gString, 256, "UPDATE `users` SET `Warnings` = '2', `WarnReason2` = '%s' WHERE `id` = '%d' LIMIT 1", reasone, id);
			mysql_tquery(SQL, gString);			
		}
		case 2: {
			mysql_format(SQL, gString, 256, "UPDATE `users` SET `Warnings` = '0', `WarnReason1` = '(null)', `WarnReason2` = '(null)' WHERE `id` = '%d' LIMIT 1", id);
			mysql_tquery(SQL, gString);
		}
	}
	foreach(new i : Player) {
		if(PlayerInfo[i][pSQLID] == id) {
			SCMf(i, COLOR_SKEMA2, "You have received an warn from admin %s, reason: %s", GetName(playerid), reason);
			defer KickEx(i);
		}
	}
	va_SendClientMessageToAll(COLOR_LIGHTRED, "WARN: %s has been warned by %s, reason: %s", name, GetName(playerid), reason);
	sanctiondelay[playerid] = 30;
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','5','%s','%s','%s','%d')", id, PlayerInfo[playerid][pSQLID], reasone, name, GetName(playerid), gettime());
	mysql_tquery(SQL, gString);
	if(warns >= 2) {
		mysql_format(SQL, gString, sizeof(gString), "INSERT INTO bans (Name, AdminName, Reason, Days, Active, Date) VALUES('%s', 'AdmBot', '3/3 warns', '3', 1, %s)", name, getdate());
		mysql_tquery(SQL, gString);	
		mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','0','2','%s','%s','%s','%d')", id, reasone, name, GetName(playerid), gettime());
		mysql_tquery(SQL, gString);
		va_SendClientMessageToAll(COLOR_LIGHTRED, "Ban: %s has been banned by AdmBot for 3 days, reason: 3/3 warns.", name);			
	}	
	SCM(playerid, COLOR_DARKPINK, "WarnOff: Player warned!");
	return 1; 
}
CMD:givemoney(playerid, params[]) {
	new id, amount;
	if(PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, -1, AdminOnly);
	if(sscanf(params, "ui", id, amount)) return SCM(playerid, COLOR_WHITE, "Syntax: /givemoney [playerid] [amount]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(amount > 999999999) return SCM(playerid, -1, "Invalid amount.");
	GivePlayerCash(id, amount);
	SendAdmins(COLOR_PRINC, "(/givemoney) {ffffff}%s gave him $%s money %s.", 1, PlayerInfo[playerid][pNormalName], FormatNumber(amount), PlayerInfo[id][pNormalName]);
	SCMf(id, -1, "* Administrator %s gave you $%s money.", PlayerInfo[playerid][pNormalName], FormatNumber(amount));
	gString[0] = (EOS);
    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s used /givemoney %s [amount] $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[id][pSQLID], GetName(playerid), GetName(id), FormatNumber(amount));
    mysql_tquery(SQL, gString, "", "");	
	return 1; 
}
CMD:set(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id, item[20], amount;
	if(sscanf(params, "us[20]d", id, item, amount)) {
		SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /set [playerid] [item] [amount]");
		SendClientMessage(playerid, COLOR_GREY, "Items: health, armour, money, interior, virtualworld, hours, materials, fp, premiumpoints, skin");
		SendClientMessage(playerid, COLOR_GREY, "Items: flylic, weaponlic, drivinglic, sailinglic, drugs, grouprank, group, staffwarns, leaderwanrs.");
		return true;
	}
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(strcmp(item, "health", true) == 0) {
		SetPlayerHealthEx(id, amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] health to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "armour", true) == 0) {
		SetPlayerArmourEx(id, amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] armour to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "money", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
		if(amount > 999999999) return SCM(playerid, -1, "Invalid amount.");
		ResetPlayerCash(id); GivePlayerCash(id, amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] money to $%s.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], FormatNumber(amount));
	}
	else if(strcmp(item,"hours",true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You need admin 7+.");
		PlayerInfo[id][pConnectTime] = amount; pUpdateFloat(id, "ConnectedTime", Float: PlayerInfo[id][pConnectTime]);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] hours to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}	
	else if(strcmp(item, "interior", true) == 0) {
		SetPlayerInterior(id, amount); PlayerInfo[id][pInt] = amount;
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] interior to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "virtualworld", true) == 0) {
		SetPlayerVirtualWorld(id, amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] virtual world to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "materials", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
		PlayerInfo[id][pMats] = amount; pUpdateInt(id, "Materials", PlayerInfo[id][pMats]);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] materials to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "level", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
		if(amount < 1) return SCM(playerid, -1, "Level must be more than 0.");
		PlayerInfo[id][pLevel] = amount; pUpdateInt(id, "Level", PlayerInfo[id][pLevel]); SetPlayerScore(id, amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] level to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
		checkLevelProgress(id);
	}
	else if(strcmp(item, "rp", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
		PlayerInfo[id][pExp] = amount; pUpdateInt(id, "Respect", PlayerInfo[id][pExp]);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] respect points to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
		checkLevelProgress(id);
	}
	else if(strcmp(item, "fp", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
		PlayerInfo[id][pFpunish] = amount; pUpdateInt(id, "FPunish", PlayerInfo[id][pFpunish]);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] faction punish to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "premiumpoints", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
		PlayerInfo[id][pPremiumPoints] = amount; pUpdateInt(id, "PremiumPoints", PlayerInfo[id][pPremiumPoints]);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] premium points to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "drivinglic", true) == 0) {
		PlayerInfo[id][pCarLic] = amount; pUpdateInt(id, "CarLic", amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] driving license to %d hours.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "flylic", true) == 0) {
		PlayerInfo[id][pFlyLic] = amount; pUpdateInt(id, "FlyLic", amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] fly license to %d hours.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "sailinglic", true) == 0) {
		PlayerInfo[id][pBoatLic] = amount; pUpdateInt(id, "BoatLic", amount); 
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] boat license to %d hours.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "weaponlic", true) == 0) {
		PlayerInfo[id][pGunLic] = amount; pUpdateInt(id, "GunLic", amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] weapon license to %d hours.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "drugs", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
		PlayerInfo[id][pDrugs] = amount; pUpdateInt(id, "Drugs", amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] drugs to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "grouprank", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
		PlayerInfo[id][pRank] = amount; pUpdateInt(id, "Rank", amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] group rank to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "group", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);	
		PlayerInfo[id][pMember] = amount; pUpdateInt(id, "Member", amount);
		PlayerInfo[id][pRank] = 1; pUpdateInt(id, "Rank", 1);		
		if(IsACop(id)) Iter_Add(Cops, id);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] group to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount);
	}
	else if(strcmp(item, "staffwarns", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
		PlayerInfo[id][pStaffWarns] = amount; pUpdateInt(id, "staffwarns", PlayerInfo[id][pStaffWarns]);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] staff warns to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount); 
	}
	else if(strcmp(item, "leaderwarns", true) == 0) {
		if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
		PlayerInfo[id][pLeaderWarns] = amount; pUpdateInt(id, "LeaderWarns", PlayerInfo[id][pLeaderWarns]);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] leader warns to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount); 
	}
	else if(strcmp(item, "skin", true) == 0) {
		SetPlayerSkin(id, amount);
		PlayerInfo[id][pModel] = amount; pUpdateInt(id, "Model", amount);
		SendAdmins(COLOR_PRINC, "Admin %s [user: %d] updated %s [user: %d] skin to %d.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], GetName(id), PlayerInfo[id][pSQLID], amount); 
	}
	gString[0] = (EOS);
    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s used /set on %s [item] %s [amount] %d')", PlayerInfo[playerid][pSQLID], PlayerInfo[id][pSQLID], PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName], item, amount);
    mysql_tquery(SQL, gString, "", "");	
	return 1; 
}
CMD:stats(playerid, params[]) {
	ShowStats(playerid, playerid);
	return 1; 
}
CMD:colors(playerid, params[]) {
	new str[3250];
    strcat(str, "{FFFFFF}Normal colors:\n");
 	strcat(str,	"{000000}000 {F5F5F5}001 {2A77A1}002 {840410}003 {263739}004 {86446E}005 {D78E10}006 {4C75B7}007 {BDBEC6}008 {5E7072}009 {46597A}010 {656A79}011 {5D7E8D}012 {58595A}013 {D6DAD6}014 {9CA1A3}015 {335F3F}016 {730E1A}017 {7B0A2A}018 {9F9D94}019\n");
	strcat(str, "{3B4E78}020 {732E3E}021 {691E3B}022 {96918C}023 {515459}024 {3F3E45}025 {A5A9A7}026 {635C5A}027 {3D4A68}028 {979592}029 {421F21}030 {5F272B}031 {8494AB}032 {767B7C}033 {646464}034 {5A5752}035 {252527}036 {2D3A35}037 {93A396}038 {6D7A88}039\n");
	strcat(str, "{221918}040 {6F675F}041 {7C1C2A}042 {5F0A15}043 {193826}044 {5D1B20}045 {9D9872}046 {7A7560}047 {989586}048 {ADB0B0}049 {848988}050 {304F45}051 {4D6268}052 {162248}053 {272F4B}054 {7D6256}055 {9EA4AB}056 {9C8D71}057 {6D1822}058 {4E6881}059\n");
    strcat(str, "{9C9C98}060 {917347}061 {661C26}062 {949D9F}063 {A4A7A5}064 {8E8C46}065 {341A1E}066 {6A7A8C}067 {AAAD8E}068 {AB988F}069 {851F2E}070 {6F8297}071 {585853}072 {9AA790}073 {601A23}074 {20202C}075 {A4A096}076 {AA9D84}077 {78222B}078 {0E316D}079\n");
    strcat(str, "{722A3F}080 {7B715E}081 {741D28}082 {1E2E32}083 {4D322F}084 {7C1B44}085 {2E5B20}086 {395A83}087 {6D2837}088 {A7A28F}089 {AFB1B1}090 {364155}091 {6D6C6E}092 {0F6A89}093 {204B6B}094 {2B3E57}095 {9B9F9D}096 {6C8495}097 {4D8495}098 {AE9B7F}099\n");
    strcat(str, "{406C8F}100 {1F253B}101 {AB9276}102 {134573}103 {96816C}104 {64686A}105 {105082}106 {A19983}107 {385694}108 {525661}109 {7F6956}110 {8C929A}111 {596E87}112 {473532}113 {44624F}114 {730A27}115 {223457}116 {640D1B}117 {A3ADC6}118 {695853}119\n");
    strcat(str, "{9B8B80}120 {620B1C}121 {5B5D5E}122 {624428}123 {731827}124 {1B376D}125 {EC6AAE}126 {000000}127\n");
    strcat(str, "{FFFFFF}Hidden colors:\n");
    strcat(str, "{177517}128 {210606}129 {125478}130 {452A0D}131 {571E1E}132 {010701}133 {25225A}134 {2C89AA}135 {8A4DBD}136 {35963A}137 {B7B7B7}138 {464C8D}139 {84888C}140 {817867}141 {817A26}142 {6A506F}143 {583E6F}144 {8CB972}145 {824F78}146 {6D276A}147\n");
    strcat(str, "{1E1D13}148 {1E1306}149 {1F2518}150 {2C4531}151 {1E4C99}152 {2E5F43}153 {1E9948}154 {1E9999}155 {999976}156 {7C8499}157 {992E1E}158 {2C1E08}159 {142407}160 {993E4D}161 {1E4C99}162 {198181}163 {1A292A}164 {16616F}165 {1B6687}166 {6C3F99}167\n");
    strcat(str, "{481A0E}168 {7A7399}169 {746D99}170 {53387E}171 {222407}172 {3E190C}173 {46210E}174 {991E1E}175 {8D4C8D}176 {805B80}177 {7B3E7E}178 {3C1737}179 {733517}180 {781818}181 {83341A}182 {8E2F1C}183 {7E3E53}184 {7C6D7C}185 {020C02}186 {072407}187\n");
    strcat(str, "{163012}188 {16301B}189 {642B4F}190 {368452}191 {999590}192 {818D96}193 {99991E}194 {7F994C}195 {839292}196 {788222}197 {2B3C99}198 {3A3A0B}199 {8A794E}200 {0E1F49}201 {15371C}202 {15273A}203 {375775}204 {060820}205 {071326}206 {20394B}207\n");
    strcat(str, "{2C5089}208 {15426C}209 {103250}210 {241663}211 {692015}212 {8C8D94}213 {516013}214 {090F02}215 {8C573A}216 {52888E}217 {995C52}218 {99581E}219 {993A63}220 {998F4E}221 {99311E}222 {0D1842}223 {521E1E}224 {42420D}225 {4C991E}226 {082A1D}227\n");
    strcat(str, "{96821D}228 {197F19}229 {3B141F}230 {745217}231 {893F8D}232 {7E1A6C}233 {0B370B}234 {27450D}235 {071F24}236 {784573}237 {8A653A}238 {732617}239 {319490}240 {56941D}241 {59163D}242 {1B8A2F}243 {38160B}244 {041804}245 {355D8E}246 {2E3F5B}247\n");
    strcat(str, "{561A28}248 {4E0E27}249 {706C67}250 {3B3E42}251 {2E2D33}252 {7B7E7D}253 {4A4442}254 {28344E}255\n");
	ShowPlayerDialogEx(playerid, DIALOG_COLORID, DIALOG_STYLE_MSGBOX, "Vehicle Colors list - /carcolor", str, "Close","");
	return 1; 
}
CMD:re(playerid, params[]) {
	new id, mesaj[128];
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly); 
	if(sscanf(params, "us[128]", id, mesaj)) return SCM(playerid, -1, "Syntax: /re [name/playerid] [text]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	SendAdmins(COLOR_YELLOW, "(/re) %s->%s: %s", 1, GetName(playerid), GetName(id), mesaj);
	SendHelpers(COLOR_YELLOW, "(/re) %s->%s: %s", 1, GetName(playerid), GetName(id), mesaj);
	SCMf(id, COLOR_YELLOW, "((PM from %s: %s))", GetName(playerid), mesaj);
	return 1; 
}	
CMD:mechanics(playerid, params[]) {
	SendClientMessage(playerid, COLOR_WHITE, "---- Mecanici online ----");
	foreach(new i : Mecanici) SCMf(playerid, COLOR_PRINC, ">> {ffffff}(%d) %s - numar de telefon: %d", i, GetName(i), PlayerInfo[i][pPnumber]);
	SendClientMessage(playerid, COLOR_WHITE, "---------------------");
	return 1; 
}
CMD:reporters(playerid, params[]) {
	SendClientMessage(playerid, COLOR_WHITE, "---- Reporteri online ----");
	foreach(new i : Reporters) SCMf(playerid, COLOR_PRINC, ">> {ffffff}(%d) %s - numar de telefon: %d", i, GetName(i), PlayerInfo[i][pPnumber]);
	SendClientMessage(playerid, COLOR_WHITE, "---------------------");
	return 1; 
}	
CMD:admins(playerid, params[]) {
	SCM(playerid, COLOR_PRINC, "------------------------Admins online------------------------");
	foreach(new i: Admins) {
		if(PlayerInfo[i][pAdmin] == 1) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) Admin Level 1 %s", i, GetName(i));
		if(PlayerInfo[i][pAdmin] == 2) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) Admin Level 2 %s", i, GetName(i));
		if(PlayerInfo[i][pAdmin] == 3) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) Admin Level 3 %s", i, GetName(i));
		if(PlayerInfo[i][pAdmin] == 4) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) Admin Level 4 %s", i, GetName(i));
		if(PlayerInfo[i][pAdmin] == 5) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) Admin Level 5 %s", i, GetName(i));
		if(PlayerInfo[i][pAdmin] == 6) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) co-owner %s", i, GetName(i));	
		if(PlayerInfo[i][pAdmin] == 7) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) owner %s", i, GetName(i));	
	}
	SCM(playerid, COLOR_PRINC, "-----------------------------------------------------------------------");
	SCM(playerid, COLOR_WHITE, "Daca ai vreo problema, poti folosi /report. Pentru intrebari legate de joc foloseste /n.");
	SCM(playerid, COLOR_WHITE, "Poti deschide un ticket pe panel daca ai o problema ce nu tine de joc.");
	SCM(playerid, COLOR_PRINC, "-----------------------------------------------------------------------");
	return 1; 
}
CMD:helpers(playerid, parmas[]) {
	SCM(playerid, COLOR_PRINC, "------------------------Helpers Online----------------------------------");
	foreach(new i : Helpers) {
		if(PlayerInfo[i][pHelper] == 1) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) %s - helper level %d", i, GetName(i), PlayerInfo[i][pHelper]);
		if(PlayerInfo[i][pHelper] == 2) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) %s - helper level %d", i, GetName(i), PlayerInfo[i][pHelper]);
		if(PlayerInfo[i][pHelper] == 3) SCMf(playerid, COLOR_PRINC, "{ffffff}(%d) %s - helper level %d", i, GetName(i), PlayerInfo[i][pHelper]);
	}
	SCM(playerid, COLOR_PRINC, "-----------------------------------------------------------------------");
	SCM(playerid, COLOR_WHITE, "Pentru intrebari legate de joc poti folosi /n.");
	SCM(playerid, COLOR_PRINC, "-----------------------------------------------------------------------");
	return 1; 
}
CMD:ah(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1) {
		SCM(playerid, COLOR_PRINC, "----------------------------------------------------------------------------------------------------------");
		SCM(playerid, -1, "Level 1:  /hanno /aanno /forumanno /helpanno /mdc /wanted /an /clear /gethere /mute /questions /spec /kick /va /nobi /fspec /fchat");
		SCM(playerid, -1, "Level 1: /spawn /l /warn /re /vehname /gunname /slapcar /gotobusiness /nr /down /ff /fly /gotohouse /hduty /acolor");
		SCM(playerid, -1, "Level 1: /goto /gotoveh /check /pm /flymode /placegotoevent /healme /up /anno2 /anno /checkv /jail /nobiinrange");
		SCM(playerid, -1, "Level 1: /cc /ban /banoff /da /a /cn /unfreeze /freeze /getveh /disarm /aaa3 /skick /ndelete /spawnweapon /aaa2 /dm /reports /sstats");
		SCM(playerid, -1, "Level 1: /gotohq /e /skydive /kill /closestcar /vre /aod /slap /freeze /getveh /mark /gotomark /spawncar /go /rmute /fv /flip");
	}
	if(PlayerInfo[playerid][pAdmin] >= 2) SCM(playerid, -1, "Level 2: /penis /release /rangefreeze /rangeunfreeze /rangedisarm /rangegun /rangeheal /despawnecars /rangeskin");
	if(PlayerInfo[playerid][pAdmin] >= 3) SCM(playerid, -1, "Level 3: /forcenamechange /set /clearwarns /deleteallreports /putplayerinvehicle");
	if(PlayerInfo[playerid][pAdmin] >= 4) SCM(playerid, -1, "Level 4: /fpk /fpkoff /setleader /unban");
	if(PlayerInfo[playerid][pAdmin] >= 5) SCM(playerid, -1, "Level 5: /gotoxyz /jetpack /set /nos /sethelper /restockrentvehicle /addhousetobid /servername /giveall");
	if(PlayerInfo[playerid][pAdmin] >= 6) SCM(playerid, -1, "Level 6: /sstats /gsafepos /vowner /setadmin /agivehouse /servername  /unblockadminaccount");
	if(PlayerInfo[playerid][pAdmin] >= 6) SCM(playerid, -1, "Level 6: /speed /editstock /manageserver /banip /removeallrentvehicle  /asellhouse /asellbusiness /sethelperoff /setadminoff");
	return 1; 
}				
CMD:aod(playerid, params[]) 
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);

	if(AdminDuty[playerid] < 1)
	{
		AdminDuty[playerid] = 300;
		SetPlayerHealthEx(playerid, 999999); SetPlayerArmourEx(playerid, 999999);
		SendAdmins(COLOR_PRINC, "Notice: {ffffff}Admin %s (%d) is now on administrative duty.", 1, GetName(playerid), playerid);
	
		return true;
	}

	if(AdminDuty[playerid] >= 1)
	{
		AdminDuty[playerid] = 0;
		SetPlayerHealthEx(playerid, 100); SetPlayerArmourEx(playerid, 0);
		SendAdmins(COLOR_PRINC, "Notice: {FFFFFF}Admin %s (%d) is now off administrative duty.", 1, GetName(playerid), playerid);
	}

	return true; 
}
CMD:sstats(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	SCM(playerid, COLOR_GREY, "-------------------------------------- server stats --------------------------------------");
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Server start on %s | Server version: %s", StartDate, SERVER_VERSION);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Tick rate: %d | MYSQL Unprocessed Queries: %d | Clan Zones: %d | Clans: %d", GetServerTickRate(), mysql_unprocessed_queries(),serverClanZones,serverClans);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Vehicles: [clans: %d, models: %d, all in tabel: %d] | Businesses: %d", serverClanVehicles, stockss, Vehicless, bussines);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Houses: %d | Turfs: %d | Groups: 10 | Admins ON: %d | Helpers ON: %d", housess, turfsss, Iter_Count(Admins), Iter_Count(Helpers));
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Reporters ON: %d | Mechanics ON: %d | Players in paintball: %d | Cops: %d", Iter_Count(Reporters), Iter_Count(Mecanici), Iter_Count(PlayerPaint), Iter_Count(Cops));
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Contracts: %d | Players online: %d | Gangsters: %d | VIPS (with admins): %d", Iter_Count(Contracts), GetOnLinePlayers(), Iter_Count(Gangsters), Iter_Count(Vips));
	new mobile, pc;
	foreach(new x : Player){
		if(PlayerInfo[x][pFPS] < 5) mobile++;
		if(PlayerInfo[x][pFPS] >= 5) pc++;
	}
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}%d players connected on mobile and %d players connected on pc.", mobile, pc);
	return 1; 
}
CMD:makeadmin(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
	new id, level, ip[25];
	if(sscanf(params, "ud", id, level)) return SCM(playerid, -1, "Syntax: /makeadmin [playerid/name] [level]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[playerid][pAdmin] == 6 && PlayerInfo[id][pAdmin] >= 7) return SCM(playerid, -1, "Nu poti seta admin level-ul acelui player.");
	if(id == playerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
	SCMf(id, COLOR_LIGHTBLUE, "Administrator %s has promoted you to admin level %d.", GetName(playerid), level);
	SendAdmins(COLOR_LIGHTBLUE, "* Admin %s promoted %s to admin level %d.", 1, GetName(playerid), GetName(id), level);
	if(level == 0) Iter_Remove(Admins, id);
	if(level != 0 && !Iter_Contains(Admins, id)) Iter_Add(Admins, id);
	PlayerInfo[id][pAdmin] = level; pUpdateInt(id, "Admin", level);
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `staff_logs` (`text`) VALUES ('Admin %s has set %s s admin level to %d.')", PlayerInfo[playerid][pNormalName], PlayerInfo[id][pNormalName], level);
	mysql_tquery(SQL, gString);
	new year, month, day; getdate(year, month, day);
	GetPlayerIp(id, ip, sizeof ip);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `lastup` = '%d/%d/%d', `IP` = '%s' WHERE `ID` = '%d' LIMIT 1", day, month, year, ip, PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, gString);  
	return 1; 
}
CMD:sethelper(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
	new id, level, ip[25];
	if(sscanf(params, "ud", id, level)) return SCM(playerid, -1, "Syntax: /sethelper [playerid/name] [level]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(level < 0 || level > 3) return SCM(playerid, -1, "Invalid helper level.");
	if(level == 0) Iter_Remove(Helpers, id);
	if(level != 0 && !Iter_Contains(Helpers, id)) Iter_Add(Helpers, id);
	PlayerInfo[id][pHelper] = level; pUpdateInt(id, "Helper", level);
	SCMf(id, COLOR_LIGHTBLUE, "Administrator %s has set your helper level to %d.", GetName(playerid), level);
	SendAdmins(COLOR_LIGHTBLUE, "* Admin %s promoted %s to helper level %d.", 1, GetName(playerid), GetName(id), level);
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `staff_logs` (`text`) VALUES ('Admin %s has set %s s helper level to %d.')", GetName(playerid), GetName(id), level);
	mysql_tquery(SQL, gString);
	new year, month, day; getdate(year, month, day);
	GetPlayerIp(id, ip, sizeof ip);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `lastup` = '%d/%d/%d', `IP` = '%s' WHERE `ID` = '%d' LIMIT 1", day, month, year, ip, PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, gString);
	return 1; 
}
CMD:vehname(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);  
	SCM(playerid, COLOR_PRINC, "--------------------------------------------------------------------------------------------------------------------------------");
	SCM(playerid, COLOR_WHITE, "Vehicle Search:");
	new
		rcount,
		string[128];
	if(isnull(params)) return SCM(playerid, COLOR_WHITE, "No keyword specified.");
	if(strlen(params) < 3) return SCM(playerid, COLOR_WHITE, "Search keyword too short.");
	for(new v; v < sizeof(aVehicleNames); v++) {
		if(strfind(aVehicleNames[v], params, true) != -1) {
			if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", aVehicleNames[v], v+400);
			else format(string, sizeof(string), "%s | %s (ID %d)", string, aVehicleNames[v], v+400);
			rcount++;
		}
	}
	if(rcount == 0) SCM(playerid, COLOR_WHITE, "No results found.");
	else if(strlen(string) >= 128) SCM(playerid, COLOR_WHITE, "Too many results found.");
	else SCM(playerid, COLOR_WHITE, string);
	SCM(playerid, COLOR_PRINC, "--------------------------------------------------------------------------------------------------------------------------------");
	return 1; 
}
CMD:gunname(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);  
	SCM(playerid, COLOR_PRINC, "--------------------------------------------------------------------------------------------------------------------------------");
	SCM(playerid, COLOR_WHITE, "Weapon Search:");
	new
		rcount,
		string[128];
	if(isnull(params)) return SCM(playerid, COLOR_WHITE, "No keyword specified.");
	if(strlen(params) < 3) return SCM(playerid, COLOR_WHITE, "Search keyword too short.");
	for(new v; v < 47; v++) {
		if(strfind(GunNames[v], params, true) != -1) {
			if(rcount == 0) format(string, sizeof(string), "%s (ID %d)", GunNames[v], v);
			else format(string, sizeof(string), "%s | %s (ID %d)", string, GunNames[v], v);
			rcount++;
		}
	}
	if(rcount == 0) SCM(playerid, COLOR_WHITE, "No results found.");
	else if(strlen(string) >= 128) SCM(playerid, COLOR_WHITE, "Too many results found.");
	else SCM(playerid, COLOR_WHITE, string);
	SCM(playerid, COLOR_PRINC, "--------------------------------------------------------------------------------------------------------------------------------");
	return 1; 
}
CMD:find(playerid, params[]) {
	if(arecpactiv(playerid)) return true;
	if(!IsACop(playerid) && PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pReborn] == 0) return SCM(playerid, -1, "You are not a detective.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /find [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "You can't find yourself.");
	if(PlayerInfo[id][pAdmin] >= 1 && AdminDuty[id] >= 1) return SCM(playerid, -1, "Nu poti localiza un admin on duty.");
	if(togfind[id] == 1) return SCM(playerid, -1, "Nu poti localiza acel player.");
	UsedFind[playerid] = 1;
	new Float: x, Float: y, Float: z; GetPlayerPos(id, x, y, z);
	DisablePlayerCheckpoint(playerid);
	SetPlayerCheckpoint(playerid, x, y, z, 3.5);
	targetfind[playerid] = id;
	SCM(playerid, COLOR_PRINC, "Un checkpoint ti-a fost setat pe jucatorul ales.");
	if(quest_type[playerid] == quest_find) quest_finish(playerid);
	return 1; 
}
alias:gethere("get")
CMD:gethere(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	new Float:X, Float:Y, Float:Z; GetPlayerPos(playerid, X, Y, Z);
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /gethere [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[id][pAdmin]) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe un admin mai mare ca tine.");
	GetPlayerInterior(playerid); GetPlayerVirtualWorld(playerid);
	SetPlayerPosEx(id, X+2.0, Y, Z); SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid)); SetPlayerInterior(id, GetPlayerInterior(playerid));
	SCMf(id, -1, "Admin %s teleported you to him.", GetName(playerid));
	SCMf(playerid, COLOR_PRINC, "(/gethere) {ffffff}You teleported %s to you.", GetName(id));
	SendAdmins(COLOR_PRINC, "(/gethere) {ffffff}%s used /gethere and teleported %s to him (ID: %d).", 1, GetName(playerid), GetName(id), id);
	return 1; 
}
CMD:gotoxyz(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
	new interior,vw,Float:x, Float:y, Float:z;
	if(sscanf(params, "fffii", x,y,z,interior,vw)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /gotoxyz [x] [y] [z] [interior] [virtual]");
	SCM(playerid, -1, "You have been teleported.");
	SetPlayerVirtualWorld(playerid, vw); SetPlayerPosEx(playerid, x, y, z); SetPlayerInterior(playerid,interior); InHQ[playerid] = -1;
	InHouse[playerid] = -1; InBussines[playerid] = -1; StopAudioStreamForPlayer(playerid);
	return 1; 
}
CMD:so(playerid, params[]) {
	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
	if(timersoo[playerid] > 0) return SCM(playerid, -1, "You need to wait 3 seconds before use /so again.");
	if(OnDuty[playerid] != 1) return SCM(playerid, -1, "You are not on duty.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /so [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
	if(GetDistanceBetweenPlayers(playerid, id) > 40) return SCM(playerid, -1, "Acel player nu se afla langa tine.");
	sendNearbyMessage(playerid, 50.0, COLOR_PRINC, "{FFFF00}(megaphone) Politist %s: {1560BD}%s{FFFF00}, esti urmarit de politie! Opreste-te unde esti!", GetName(playerid), GetName(id));
	timersoo[playerid] = 3; somatee[playerid] = 0; somated[id] = playerid;
	format(somatename[id], 30, GetName(playerid));
	soexpire[id] = 180;
	return 1; 
}
CMD:mark(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	GetPlayerPos(playerid, TeleportDest[playerid][0], TeleportDest[playerid][1], TeleportDest[playerid][2]);
	SendClientMessage(playerid, COLOR_DARKPINK, "Mark set.");
	return 1; 
}
CMD:gotomark(playerid) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	SetPlayerPosEx(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
	SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0); SetPlayerInterior(playerid, 0);
	SCM(playerid, -1, "You have been teleported to the mark.");
	return 1; 
}	
CMD:gotoveh(playerid, parmas[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new testcar, Float: cwx2, Float: cwy2, Float: cwz2;
	if(sscanf(parmas, "d", testcar)) return SCM(playerid, -1, "Syntax: /gotoveh [car id]");
	GetVehiclePos(testcar, cwx2, cwy2, cwz2);
	SetPlayerPosEx(playerid, cwx2, cwy2, cwz2);
	SCM(playerid, -1, "You have been teleported.");
	SetPlayerInterior(playerid, 0);
	if(InHouse[playerid] > -1) StopAudioStreamForPlayer(playerid);
	InHQ[playerid] = -1; InHouse[playerid] = -1; InBussines[playerid] = -1;
	SetPlayerVirtualWorld(playerid, 0);
	SendAdmins(COLOR_PRINC, "(/gotoveh) {ffffff}%s teleported to vehicle %d.", 1, GetName(playerid), testcar);
	return 1; 
}
CMD:check(playerid, params[]) {
	new id;
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /check [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	ShowStats(playerid, id);
	return 1; 
}	
alias:vipchat("vc")
CMD:pm(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id, message[128];
	if(sscanf(params, "us[128]", id, message)) return SCM(playerid, -1, "Syntax: /pm [name/playerid] [message]");
 	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
 	SCMf(id, COLOR_YELLOW, "((PM from %s: %s))", PlayerInfo[playerid][pNormalName], message);
 	SCMf(playerid, COLOR_SMS, "((PM sent to %s: %s))", PlayerInfo[id][pNormalName], message);
	return 1; 
}
CMD:id(playerid, params[]) {
	new id[30], find = 0, idd, clan[32], clanformat[32];
	if(sscanf(params, "s[30]", id)) return SCM(playerid, -1, "Syntax: /id [name/playerid]");
	if(IsNumeric(id)) {
		idd = strval(id);
		if(PlayerInfo[idd][pClan] >= 1) format(clanformat, 32, "%s", clanVariables[PlayerInfo[idd][pClan]][clanName]);
		if(PlayerInfo[idd][pClan] < 1) clan = "None";
		if(PlayerInfo[idd][pClan] >= 1) clan = clanformat;		
		if(!IsPlayerConnected(idd)) return SCM(playerid, -1, "Acel player nu este online.");
 		if(PlayerInfo[idd][pMember] >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}(%d) %s | Level: %d | Faction: %s (rank %d) | Clan: %s | Ping: %d | FPS: %d", idd, GetName(idd), PlayerInfo[idd][pLevel], NumeFactiune(PlayerInfo[idd][pMember]), PlayerInfo[idd][pRank], clan, GetPlayerPing(idd), PlayerInfo[idd][pFPS]);
 		else SCMf(playerid, COLOR_PRINC, ">> {ffffff}(%d) %s | Level: %d | Faction: None | Clan: %s | Ping: %d | FPS: %d", idd, GetName(idd), PlayerInfo[idd][pLevel], clan, GetPlayerPing(idd), PlayerInfo[idd][pFPS]);
	} else {
		foreach(new i : Player) {
			if(find < 10) {
				if(strfind(GetName(i), id, true) != -1) {
					if(PlayerInfo[i][pClan] >= 1) format(clanformat, 32, "%s", clanVariables[PlayerInfo[i][pClan]][clanName]);
					if(PlayerInfo[i][pClan] < 1) clan = "None";
					if(PlayerInfo[i][pClan] >= 1) clan = clanformat;						
 					if(PlayerInfo[i][pMember] >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}(%d) %s | Level: %d | Faction: %s (rank %d) | Clan: %s | Ping: %d | FPS: %d", i, GetName(i), PlayerInfo[i][pLevel], NumeFactiune(PlayerInfo[i][pMember]), PlayerInfo[i][pRank], clan, GetPlayerPing(i), PlayerInfo[i][pFPS]);
 					else SCMf(playerid, COLOR_PRINC, ">> {ffffff}(%d) %s | Level: %d | Faction: None | Clan: %s | Ping: %d | FPS: %d", i, GetName(i), PlayerInfo[i][pLevel], clan, GetPlayerPing(i), PlayerInfo[i][pFPS]);
					find ++;
				}				
			}
		}
		if(find == 0) return SendClientMessage(playerid, -1, "Player not connected.");
	}
	return 1; 
}
CMD:sleep(playerid, params[]) {
	if(InHouse[playerid] < 1) return SCM(playerid, -1, "You're not in a house. You can only sleep inside a house.");
	if(PlayerInfo[playerid][pPhousekey] != InHouse[playerid]) return SCM(playerid, COLOR_LIGHTGREEN3, "You can only use /sleep only in your house.");
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "You're a wanted man. You can't go to sleep.");
	if(PlayerInfo[playerid][pSleeping] == 0) {
		PlayerInfo[playerid][pSleeping] = 1; TogglePlayerControllable(playerid, 0); SetPlayerColor(playerid, COLOR_GRAD2);
		SCM(playerid, COLOR_DARKPINK, "You are now AFK.");
		SCM(playerid, COLOR_DARKPINK, "Daca esti sleep primesti la fiecare payday 20 de minute jucate.");
		LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	} else {
		PlayerInfo[playerid][pSleeping] = 0; TogglePlayerControllable(playerid, 1); ClearAnimations(playerid); SetPlayerToTeamColor(playerid); SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		SCM(playerid, COLOR_DARKPINK, "Welcome back.");
	}
	return 1; 
}	
CMD:despawnecars(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, -1, AdminOnly);
	SendAdmins(COLOR_PRINC, "(/despawnecars) {ffffff}Admin %s despawned all admin vehicles.", 1, GetName(playerid));
	for(new i = 1; i < MAX_VEHICLES; i++) { if(Carspawn[i] != 0) DestroyVehicle(Carspawn[i]), Carspawn[i] = 0; }
	return 1; 
}
CMD:spawncar(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	new Float: X, Float: Y, Float: Z, model, carid; GetPlayerPos(playerid, X, Y, Z);
	if(sscanf(params, "i", model)) return SCM(playerid, -1, "Syntax: /spawncar [model]");
	if(model < 400 || model > 611) return SCM(playerid, -1, "Masina invalida.");
	carid = CreateVehicle(model, X, Y, Z, 0.0, -1, -1, -1);
	Carspawn[carid] = carid;
	SetVehicleNumberPlate(carid, "ADMCAR");
	LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
	PutPlayerInVehicleEx(playerid, carid, 0);	
	Gas[carid] = 100;
	return 1; 
}	
CMD:fv(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
	RepairVehicle(GetPlayerVehicleID(playerid));
	SCM(playerid, COLOR_BLUE, "Car was repaired succesfully.");
	return 1; 
}	

CMD:fix(playerid, params[]) {
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 2028.4213, -195.8341, 1.7757)) return SCM(playerid, -1, "Nu esti la o statie privata.");
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
	RepairVehicle(GetPlayerVehicleID(playerid));
	SCM(playerid, COLOR_BLUE, "Ti-ai reparat vehiculul la o statie privata (-$700,000)");
	if(GetPlayerCash(playerid) < 750000) return SCM(playerid, -1, "Nu ai $750.000");
	GivePlayerCash(playerid, -700000);
	return 1; 
}	
CMD:jetpack(playerid, params[]) {
	if(PlayerInfo[playerid][pJetpack] < 1) return SCM(playerid, -1, "Nu ai un jetpack!");
	if(jetpackdelay[playerid] >= 1) return SCMf(playerid, -1, "Poti folosi aceasta comanda peste %d secunde", jetpackdelay[playerid]);
	jetpackdelay[playerid] = 600;
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted."); 
	SetPlayerSpecialAction(playerid, 2);
	SCM(playerid, COLOR_DARKPINK, "Personal Jetpack has spawned");
	return 1; 
}
alias:flymode("fly")
CMD:fly(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(PlayerInfo[playerid][pAdmin] < 6 && PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted."); 
	if(flymode[playerid] >= 1) return SCM(playerid, -1, "Deja te afli in /flymode, apasa 'enter' pentru a dezactiva modul.");
	flymode[playerid] = 1; InitFly(playerid); StartFly(playerid);
	SetPlayerHealthEx(playerid, 9999999); SetPlayerArmourEx(playerid, 9999999);
	SendAdmins(COLOR_PRINC, "(/flymode) {ffffff}%s is now in flymode", 1, GetName(playerid));
	return 1; 
}		
CMD:nos(playerid, params[]) {
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted."); 
	if(PlayerInfo[playerid][pAdmin] < 5  && PlayerInfo[playerid][pReborn] < 1) return SCM(playerid, -1, AdminOnly);
	if(barcadelay[playerid] >= 1) return SCMf(playerid, -1, "Poti folosi aceasta comanda peste %d secunde", barcadelay[playerid]);
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
	barcadelay[playerid] = 60;
	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
	SendClientMessage(playerid, COLOR_WHITE, "Vehicle nos added!");
	return 1; 
}	
CMD:service(playerid, params[]) {
	new x_nr[64];
	if(sscanf(params, "s[64]", x_nr)) return SCM(playerid, -1, "Syntax: /service [taxi/medic/uber]");
	if(servicedelay[playerid] >= 1) return SCM(playerid, -1, "Asteapta 30 de secunde.");
	if(strcmp(x_nr, "taxi", true) == 0) {
		if(PlayerInfo[playerid][pMember] == 13) return SCM(playerid, -1, "You can't call a taxi because you're a taxi driver!");
		SendFamilyMessage(13, COLOR_CYAN, "%s [%d] has called for a taxi.", GetName(playerid), playerid);
		TaxiCall[playerid] = 1; servicedelay[playerid] = 30;
		SCM(playerid, -1, "You have called for a taxi. Please wait here!");
		return true;
	}
	else if(strcmp(x_nr, "uber", true) == 0) {
		if(PlayerInfo[playerid][pMember] == 16) return SCM(playerid, -1, "You can't call a uber because you're a uber driver!");
		SendFamilyMessage(16, COLOR_CYAN, "%s [%d] has called for a uber.", GetName(playerid), playerid);
		TaxiCall[playerid] = 2; servicedelay[playerid] = 30;
		SCM(playerid, -1, "You have called for a uber. Please wait here!");
		return true;
	}		
	else if(strcmp(x_nr, "medic", true) == 0) {
		if(PlayerInfo[playerid][pMember] == 14) return SCM(playerid, -1, "You can't call an ambulance because you're a medic!");
		SendFamilyMessage(14, COLOR_CYAN, "%s [%d] has called for a medic.", GetName(playerid), playerid);
		SCM(playerid, -1, "You have called for an ambulance. Please wait here!");
		MedicCall[playerid] = 1; servicedelay[playerid] = 30;
	}
	return 1; 
}
CMD:medic(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 14) return SCM(playerid, -1, "To call an ambulance, use /service medic.");
	new action[10], id, Float: X, Float: Y, Float: Z;
	if(sscanf(params, "s[10]u", action, id)) return SCM(playerid, -1, "Syntax: /medic [action] [id]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(strcmp(action, "accept", true) == 0) {
		if(!IsAnAmbulance(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "You can't accept a call because you're not in an ambulance.");
		if(MedicCall[id] == 0) return SCM(playerid, -1, "This player hasn't called for an ambulance, or someone else accepted the call.");
		SCMf(id, COLOR_PRINC, "Medic %s has accepted your call. Please wait here for the ambulance.", GetName(playerid));
		SendFamilyMessage(13, COLOR_CYAN, "Medic %s has accepted the call from %s.", GetName(playerid), GetName(id));
		SCMf(playerid, COLOR_PRINC, "Checkpoint set on %s [%d].", GetName(id), id);
		MedicAccepted[playerid] = id; MedicCall[id] = 0;
		GetPlayerPos(id, X, Y, Z);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, X, Y, Z, 3.0);
		UsedFind[playerid] = 1; targetfind[playerid] = id;
		return true;
	}	
	else if(strcmp(action, "cancel", true) == 0) {
		SCM(playerid, -1, "You have canceled the medic call.");
		SCMf(MedicAccepted[playerid], COLOR_PRINC, "Medic %s canceled your call.", GetName(playerid));
		MedicAccepted[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
		UsedFind[playerid] = 0; targetfind[playerid] = -1;
	}
	return 1; 
}	
CMD:taxi(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 13) return SCM(playerid, -1, "To call a taxi, use /service taxi.");
	new action[10], id, Float: X, Float: Y, Float: Z;
	if(sscanf(params, "s[10]u", action, id)) return SCM(playerid, -1, "Syntax: /taxi [action] [id]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(strcmp(action, "accept", true) == 0) {
		if(TaxiFare[playerid] == 0) return SCM(playerid, -1, "You can't accept a call because you're not on duty.");
		if(TaxiCall[id] == 0) return SCM(playerid, -1, "This player hasn't called for a taxi, or someone else accepted the call.");
		SCMf(id, COLOR_PRINC, "Taxi driver %s has accepted your call. Please wait here for the taxi.", GetName(playerid));
		SendFamilyMessage(13, COLOR_CYAN, "Taxi driver %s has accepted the call from %s.", GetName(playerid), GetName(id));
		SCMf(playerid, COLOR_PRINC, "Checkpoint set on %s [%d].", GetName(id), id);
		TaxiAccepted[playerid] = id; TaxiCall[id] = 0;
		GetPlayerPos(id, X, Y, Z);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, X, Y, Z, 3.0);
		UsedFind[playerid] = 1; targetfind[playerid] = id;
		return true;
	}
	else if(strcmp(action, "cancel", true) == 0) {
		SCM(playerid, -1, "You have canceled the taxi call.");
		SCMf(TaxiAccepted[playerid], COLOR_PRINC, "Taxi driver %s canceled your call.", GetName(playerid));
		TaxiAccepted[playerid] = -1; UsedFind[playerid] = 0; targetfind[playerid] = -1;
		DisablePlayerCheckpoint(playerid);
	}
	return 1; 
} 
CMD:fare(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 13 && PlayerInfo[playerid][pMember] != 16) return SCM(playerid, -1, "You are not a taxi driver/uber.");
	if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Please wait 30 seconds.");
	if(OnDuty[playerid] < 1) return SCM(playerid, -1, "Nu esti on duty.");
	new fare;
	if(sscanf(params, "d", fare)) return SCM(playerid, -1, "Syntax: /fare [amount]");
	if(fare < 0 || fare > 5000) return SCM(playerid, -1, "Fare must be between $1 and 5,000$.");
	if(fare == 0) {
		TaxiFare[playerid] = 0; TaxiMoneyEarned[playerid] = 0;
		SCM(playerid, -1, "You are now off duty.");
		PlayerTextDrawHide(playerid, RentCarText[playerid]);
	} else {
		if(!IsAnTaxi(GetPlayerVehicleID(playerid)) && !IsAnUber(GetPlayerVehicleID(playerid))) return true;
		
		if(PlayerInfo[playerid][pMember] == 13)
		{
			TaxiFare[playerid] = fare;
			va_SendClientMessageToAll(0x00FF00AA, "* Taxi driver %s is now on duty ($%d). [/service taxi]", GetName(playerid), fare);
			SCM(playerid, COLOR_DARKPINK, "To get off duty, use /fare 0!");
			PlayerTextDrawSetString(playerid, RentCarText[playerid], "~r~waiting for customers..");
			PlayerTextDrawShow(playerid, RentCarText[playerid]);
		}

		if(PlayerInfo[playerid][pMember] == 16)
		{
			TaxiFare[playerid] = 5000;
			va_SendClientMessageToAll(0x00FF00AA, "* Uber driver %s is now on duty ($5000). [/service uber]", GetName(playerid));
			SCM(playerid, COLOR_DARKPINK, "To get off duty, use /fare 0!");
			PlayerTextDrawSetString(playerid, RentCarText[playerid], "~r~waiting for customers..");
			PlayerTextDrawShow(playerid, RentCarText[playerid]);
		}
	}
	delayfactions[playerid] = 30;
	return 1; 
}	
CMD:placegotoevent(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new Float: x, Float: y, Float: z; GetPlayerPos(playerid, x, y, z);
	if(!eventenabled) {
		pickup_event = CreatePickup(1314, 23, x, y, z, GetPlayerVirtualWorld(playerid));
		evex = x; evey = y; evez = z;
		eventenabled = 1;
		interiorevent = GetPlayerInterior(playerid); virtuallevent = GetPlayerVirtualWorld(playerid);
		va_SendClientMessageToAll(COLOR_PRINC, "Administratorul %s a deschis teleportarile catre eveniment (/gotoevent).", GetName(playerid));
	} else {
		DestroyPickup(pickup_event);
		evex = 0.0; evey = 0.0; evez = 0.0;
		eventenabled = 0; interiorevent = 0; virtuallevent = 0;
		va_SendClientMessageToAll(COLOR_PRINC, "Administratorul %s a inchis teleportarile catre eveniment.", GetName(playerid));
	}
	return 1; 
}	
CMD:gotoevent(playerid, params[]) {
	if(!eventenabled) return true;
	SetPlayerPosEx(playerid, evex, evey, evez); SetPlayerInterior(playerid, interiorevent); SetPlayerVirtualWorld(playerid, virtuallevent);
	SCM(playerid, COLOR_DARKPINK, "You have been teleported at event.");
	return 1; 
}	
CMD:placefireworks(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda dintr-un vehicul.");
	if(PlayerInfo[playerid][pFWorks] < 1) return SCM(playerid, -1, "Nu ai artificii.");
	if(GetPlayerInterior(playerid) >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda intr-un interior.");
	if(FireworkTimer[playerid] != 0) return SCM(playerid, COLOR_LIGHTGREEN3, "You can only place fireworks every 30 seconds.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	CreateFirework(x, y, z);
	SendClientMessage(playerid, COLOR_DARKPINK, "Firework placed.");
	sendNearbyMessage(playerid, 3.0, COLOR_PURPLE, "* %s takes some fireworks out of his pocket and places them on the ground.", GetName(playerid));
	PlayerInfo[playerid][pFWorks]--; pUpdateInt(playerid, "FWorks", PlayerInfo [playerid] [pFWorks]);
	FireworkTimer[playerid] = 30;
	return 1; 
}
CMD:killcp(playerid, params[]) {
 	SCM(playerid, -1, "You have disabled the checkpoint.");
 	CP[playerid] = 0; MatsHolding[playerid] = 0;
 	facerob[playerid] = 0;
 	DisablePlayerCheckpoint(playerid); DisablePlayerRaceCheckpoint(playerid);
 	if(UsedFind[playerid] == 1) UsedFind[playerid] = 0;
 	PlayerTextDrawHide(playerid, FindTXD[playerid][0]); PlayerTextDrawHide(playerid, FindTXD[playerid][1]);
 	if(OnDuty[playerid] < 1 && !IsPlayerInAnyVehicle(playerid)) SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
 	RemovePlayerAttachedObject(playerid, 9); RemovePlayerAttachedObject(playerid, 8);
 	if(!IsPlayerInAnyVehicle(playerid)) SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return 1; 
}	
CMD:cancel(playerid, params[]) {
	new types[64];
	if(sscanf(params, "s[64]",types)) SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /cancel [service]");
	else if(strcmp(types,"drugs",true) == 0) {
		if(DrugOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you drugs.");
		DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0;
	}
	else if(strcmp(types,"repair",true) == 0) {
 		if(RepairOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you repair.");
		RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0;
	}
	else if(strcmp(types,"materials",true) == 0) {
		if(MatsOffer[playerid] == -1) return SCM(playerid,COLOR_WHITE,"No one offered you materials.");
		MatsOffer[playerid] = -1; MatsPrice[playerid] = 0; MatsAmmo[playerid] = 0;
	}
	else if(strcmp(types,"gun",true) == 0) {
		if(SellgunOffer[playerid] == -1) return SCM(playerid,COLOR_WHITE,"No one offered you gun.");
		SellgunOffer[playerid] = -1; SellgunPrice[playerid] = 0; SellgunMats[playerid] = 0;
		SellgunAmmo[playerid] = 0; SellgunID[playerid] = 0;
	}
	else if(strcmp(types,"find",true) == 0) SCM(playerid, -1, "Use /killcp.");
	else if(strcmp(types,"live",true) == 0) {
		if(LiveOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you a live.");
		LiveOffer[playerid] = 999;
	}
	else if(strcmp(types,"refill",true) == 0) {
		if(RefillOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you refill.");
		RefillOffer[playerid] = 999; RefillPrice[playerid] = 0;
	}
	else if(strcmp(types,"ticket",true) == 0) {
		if(TicketOffer[playerid] == 999) return SCM(playerid,COLOR_WHITE,"No one offered you ticket.");
		TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	}
	else if(strcmp(types,"medic",true) == 0) {
		if(MedicCall[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You have not called for an ambulance.");
		MedicCall[playerid] = 0;
		SendClientMessage(playerid, COLOR_DARKPINK, "Medic call cancelled.");
		SendFamilyMessage(14, COLOR_CYAN, "%s [%d] has canceled the medic call.", GetName(playerid), playerid);
	}
	else if(strcmp(types,"taxi",true) == 0) {
		if(TaxiCall[playerid] == 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You have not called for a taxi.");
		TaxiCall[playerid] = 0;
		SendClientMessage(playerid, COLOR_DARKPINK, "Taxi call cancelled.");
		SendFamilyMessage(13, COLOR_CYAN, "%s [%d] has canceled the taxi call.", GetName(playerid), playerid);
	}
	return 1; 
}
CMD:dice(playerid, params[]) {
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1977.7538, 1017.7076, 994.4688)) return SCM(playerid, -1, "You can use this command only in casinos.");
	new id, money;
	if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "Ai nevoie de minim 5 ore pentru a folosi aceasta actiune.");	
	if(sscanf(params, "ud", id, money)) return SCM(playerid, -1, "Syntax: /dice [name/playerid] [money]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "Nu te poti provoca singur.");
	if(GetDistanceBetweenPlayers(playerid, id) > 10) return SCM(playerid, -1, "Nu esti langa acel player.");
	if(money < 1 || money > 5000000) return SCM(playerid, -1, "Poti juca pe maxim 5,000,000$ si minim 1$.");
	if(GetPlayerCash(playerid) < money) return SCM(playerid, -1, "Nu ai suficienti bani.");
	if(GetPlayerCash(id) < money) return SCM(playerid, -1, "Acel jucator nu are suficienti bani.");
	SCM(playerid, COLOR_DARKPINK, "Cerere de barbut trimisa.");
	SCMf(id, COLOR_DARKPINK, "%s te-a invitat sa joci barbut cu el pe %s$. Scrie [/accept dice %d] pentru a accepta.", GetName(playerid), FormatNumber(money), playerid);
	diceid[id] = playerid; dicemoney[id] = money;
  	return 1; 
  }	
CMD:invite(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] < 1) return SCM(playerid, -1, "Nu esti intr-o factiune.");
	if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, -1, "Nu poti folosi aceasta comanda.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /invite [name/playerid]");
	if(PlayerInfo[id][pFpunish] != 0) return SCM(playerid, COLOR_WHITE, "You can not invite this player because he have faction punish.");
	if(PlayerInfo[id][pConnectTime] < 5) return SCM(playerid, -1, "Acel player nu are minim 5 ore jucate.");
	if(PlayerInfo[id][pLevel] < 5) return SCM(playerid, -1, "Acel player nu are minim 5 ore jucate.");
	if(!IsPlayerConnected(id) || id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[id][pMember] != 0) return SCM(playerid, -1, "Acel player se afla intr-o factiune.");
	if(PlayerInfo[id][pFPS] < 1 && IsAMember(playerid)) return SCM(playerid, -1, "Nu poti invita acel player in mafie deoarece este conectat pe android.");
	SCMf(id, COLOR_LIGHTBLUE, "%s has invited you to join group %s (to accept the invitation, type '/accept invite %d').", PlayerInfo[playerid][pNormalName], DynamicFactions[PlayerInfo[playerid][pMember]][fName], playerid);
	SendClientMessage(playerid, COLOR_DARKPINK, "Processing invite...");
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have invited %s to join your group.", PlayerInfo[id][pNormalName]);
	FactionOffer[id] = playerid;	
	return 1; 
}
CMD:lockhq(playerid, params[]) {
	if(PlayerInfo[playerid][pLeader] == 1) return SCM(playerid, -1, "Indisponibil.");
	if(PlayerInfo[playerid][pLeader] >= 2) {
		new string[64];
		gString[0] = (EOS);
		switch(DynamicFactions[PlayerInfo[playerid][pMember]][fLocked]) {
			case 1: {
				SCM(playerid, -1, "HQ unlocked.");
				DynamicFactions[PlayerInfo[playerid][pMember]][fLocked] = 0;
				format(string, sizeof string, "%s's HQ", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);
				mysql_format(SQL, gString, 256, "UPDATE `factions` SET `Locked`='0' WHERE `ID`='%d' LIMIT 1", PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL, gString);
			}
			case 0: {
				SCM(playerid, -1, "HQ locked.");
				DynamicFactions[PlayerInfo[playerid][pMember]][fLocked] = 1;
				format(string, sizeof string, "%s's HQ\n\n(locked)", DynamicFactions[PlayerInfo[playerid][pMember]][fName]);
				mysql_format(SQL, gString, 256, "UPDATE `factions` SET `Locked`='1' WHERE `ID`='%d' LIMIT 1", PlayerInfo[playerid][pMember]);
				mysql_tquery(SQL, gString); 
			}
		}
		UpdateDynamic3DTextLabelText(DynamicFactions[PlayerInfo[playerid][pMember]][fLabelID], 0x0064FFAA, string);
	}	
	return 1; 
}
CMD:changerank(playerid, params[]) {
	if(PlayerInfo[playerid][pLeader] == 0) return SCM(playerid, -1, "Nu esti lider.");
	new para1, level, rtext[64];
	if(sscanf(params, "ui", para1, level)) return SCM(playerid, -1, "Syntax: /changerank [name/playerid] [rank]");
	if(para1 == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(para1 == playerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
  	if(level > 6 || level < 1) return SCM(playerid, -1, "Invalid rank.");
	if(PlayerInfo[para1][pMember] != PlayerInfo[playerid][pLeader]) return SCM(playerid, -1, "This member is not in your faction.");
	switch(level) {
		case 1: format(rtext, sizeof(rtext), "%s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName1]);
		case 2: format(rtext, sizeof(rtext), "%s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName2]);
		case 3: format(rtext, sizeof(rtext), "%s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName3]);
		case 4: format(rtext, sizeof(rtext), "%s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName4]);
		case 5: format(rtext, sizeof(rtext), "%s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName5]);
		case 6: format(rtext, sizeof(rtext), "%s", DynamicFactions[PlayerInfo[playerid][pMember]][fRankName6]);
	}
	PlayerInfo[para1][pRank] = level; pUpdateInt(para1, "Rank", level);
	SCMf(para1, COLOR_LIGHTBLUE, "%s has promoted you to the rank of %s (%d).", GetName(playerid), rtext, level);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have promoted %s to the rank of %s (%d).", GetName(para1), rtext, level);
	return 1; 
}
CMD:atm(playerid, params[]) {
	for(new x; x < MAX_ATMS; x++) { if(IsPlayerInRangeOfPoint(playerid, 2.0, AtmInfo[x][fATMPos][0], AtmInfo[x][fATMPos][1], AtmInfo[x][fATMPos][2])) ShowPlayerDialogEx(playerid, DIALOG_ATM_MENU, DIALOG_STYLE_LIST, "SERVER: Automated Teller Machine", "Check Balance\nWithdraw", "OK", "Cancel"); }
	return 1; 
}
CMD:debugrahat(playerid, params[]) {
    return SCMf(playerid, COLOR_GREY, "Ai %d in banca cu format ai %s", PlayerInfo[playerid][pAccount], FormatNumber(PlayerInfo[playerid][pAccount]));
}
CMD:withdraw(playerid, params[]) {
	if(!IsAtBank(playerid)) return SCM(playerid, -1, "Nu te afli in banca.");
	new money;
	if(sscanf(params, "i", money)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /withdraw [amount]");
	if(money < 1 || money > 500000000) return SendClientMessage(playerid, COLOR_WHITE, "Minim 1$, maxim 500,000,000$.");
	if(GetPlayerCash(playerid) + money > 900000000) return SCM(playerid, -1, "Nu poti avea in mana mai mult de 900,000,0000$."); 
	if(GetPlayerCash(playerid) > 900000000) return SCM(playerid, -1, "Nu poti avea in mana mai mult de 900,000,0000$.");
	if(money > PlayerInfo[playerid][pAccount] && PlayerInfo[playerid][pMiliarde] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have that amount of money.");
	ConsumingMoney[playerid] = 1;
	GivePlayerCash(playerid, money);
	PlayerInfo[playerid][pAccount] -= money;
	SCMf(playerid, COLOR_YELLOW, "You have withdrawn $%s from your bank account.", FormatNumber(money));
	pUpdateInt(playerid, "Bank", PlayerInfo [playerid] [pAccount]);
	gString[0] = (EOS);
    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s used /withdraw [amount] $%s')", PlayerInfo[playerid][pSQLID], GetName(playerid), FormatNumber(money));
    mysql_tquery(SQL, gString, "", "");	
    check_bank(playerid);	
	return 1; 
}
CMD:deposit(playerid, params[])	{
	if(!IsAtBank(playerid)) return SCM(playerid, -1, "Nu te afli in banca.");
	new money;
	if(sscanf(params, "i", money)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /deposit [amount]");
	if(money < 1 || money > 500000000) return SendClientMessage(playerid, COLOR_WHITE, "Minim 1$, maxim 500,000,000$.");
	if(money > GetPlayerCash(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money for this transaction.");
	GivePlayerCash(playerid, -money);
	PlayerInfo[playerid][pAccount] = money + PlayerInfo[playerid][pAccount];
	SCMf(playerid, COLOR_YELLOW, "You have deposited $%s into your bank account.", FormatNumber(money));
	pUpdateInt(playerid, "Bank", PlayerInfo [playerid] [pAccount]);
	gString[0] = (EOS);
    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s used /deposit [amount] $%s')", PlayerInfo[playerid][pSQLID], GetName(playerid), FormatNumber(money));
    mysql_tquery(SQL, gString, "", "");	
    if(quest_type[playerid] == quest_depozit) quest_finish(playerid);

    if(PlayerInfo[playerid][pAccount] >= 999999999)
    {
    	PlayerInfo[playerid][pMiliarde] ++;
    	pUpdateInt(playerid, "Miliarde", PlayerInfo[playerid][pMiliarde]);

    	PlayerInfo[playerid][pAccount] -= 999999999;
    	pUpdateInt(playerid, "Bank", PlayerInfo[playerid][pAccount]);
    }
	return 1; 
}
CMD:transfer(playerid, params[]) {
	if(delaypay[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 30 de secunde.");
	if(PlayerInfo[playerid][pConnectTime] < 5) return SendClientMessage(playerid, -1, "Ai nevoie de minim 5 ore jucate.");
	if(!IsAtBank(playerid)) return SendClientMessage(playerid, -1, "Nu esti la banca.");
	new id, amount;
	if(sscanf(params, "ud", id, amount)) return SendClientMessage(playerid, -1, "Syntax: /transfer [playerid/name] [amount]");
	if(id == INVALID_PLAYER_ID)  return SendClientMessage(	playerid, -1, "Acest jucator nu este conectat.");
	if(id == playerid) return SendClientMessage(playerid, -1, "Nu iti poti transfera singur bani.");
	if(amount < 1 || amount > 500000000) return SendClientMessage(playerid, -1, "Minim 1$, maxim 500,000,000$.");
	if(PlayerInfo[playerid][pAccount] < amount) return SendClientMessage(playerid, -1, "Nu ai aceasta suma de bani.");
	TransferOffer[playerid] = id; TransferMoney[playerid] = amount; gString[0] = (EOS);
	format(gString, sizeof gString, "Esti sigur ca vrei sa transferi suma de %s$ lui %s?", FormatNumber(amount), GetName(id));
	ShowPlayerDialogEx(playerid, DIALOG_TRANSFER, DIALOG_STYLE_MSGBOX, "Transfer money:", gString, "Ok", "Cancel");
	delaypay[playerid] = 30;
	return 1; 
}
CMD:fakeapril(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, -1, "SERVER: unkown command");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: SergiuNr1 has been banned by Pingso for 69 days, reason: Controlul de calitate");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: Imaqtpie has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: whait has been banned by Pingso for 69 days, reason: Controlul de calitate");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: h3roina has been banned by Pingso for 69 days, reason: c0ntr0l8l d3 c1lit2te");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: l3ur has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: SkiDish has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: Dani4L has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: PinLock has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: oviiadv has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: bratisca has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: Paula has been banned by Pingso for 69 days, reason: Controlul de calitate");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: Light has been banned by Pingso for 69 days, reason: Controlul de calitate");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: Kerzo has been banned by Pingso for 69 days, reason: Controlul de calitate");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: iliuta@rupV4 has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: qOrange has been banned by Pingso for 69 days, reason: Controlul de calitate");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: dood.tractor has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: zenut has been banned by Pingso for 69 days, reason: Controlul de calitate");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: robn has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	SendClientMessageToAll(COLOR_LIGHTRED, "Ban: oviiadv has been banned by Pingso for 69 days, reason: c0ontrolul d3 calit1t3");
	return 1; 
}
CMD:panel(playerid, params[]) return SCM(playerid, COLOR_YELLOW, "panelul serverului este panel.redtimes.eu");
CMD:quests(playerid, params[]) return SCM(playerid, COLOR_PRINC, "daily quests: {ffffff} pentru a-ti alege un quest, foloseste (/gps -> daily quests)");
CMD:quest(playerid, params[]) return SCM(playerid, COLOR_PRINC, "daily quests: {ffffff} pentru a-ti alege un quest, foloseste (/gps -> daily quests)");
CMD:fill(playerid, params[]) {
	new idcar = GetPlayerVehicleID(playerid), carid = -1;
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
    	if(IsAtGasStation(playerid)) {

			  	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) 
			  	{
			  		if(idcar == PlayerInfo[playerid][pCarID][vv]) carid = vv;
			  	}    		

			  	if(PlayerInfo[playerid][pCarTranscendent][carid] >= 1) 
			  	{
			  		Gas[GetPlayerVehicleID(playerid)] = 300;

			  		GivePlayerCash(playerid, -100000);

			  		SCM(playerid, COLOR_PRINC, "Plinul a fost facut (-100.000$).");

			  		return true;
			  	}

				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid,"~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Re-Fueling Vehicle, please wait",2000,3);
				refuelwait[playerid] = 5;
				Refueling[playerid] = 1;
    	} else {
	        if(PlayerInfo[playerid][pFuel] > 0) {
	    		SendClientMessage(playerid, COLOR_DARKPINK, "* You filled your car with 20% fuel from your gas can.");
				if(Gas[idcar] < 80) Gas[idcar] += 20;
				else return SCM(playerid, COLOR_DARKPINK, "You have enough fuel in your vehicle.");
	        	PlayerInfo[playerid][pFuel] = 0; pUpdateInt(playerid, "Fuel", 0);
				TogglePlayerControllable(playerid, 1);
			}
			return true;
    	}
    }
    if(quest_type[playerid] == quest_benzina) quest_finish(playerid);
	return 1; 
}
CMD:heal(playerid, params[]) {
	if(HealTimer[playerid] != 0) return SCM(playerid, -1, "You need to wait 10 seconds before using /heal again.");
	new id, suma, Float: health;
	if(PlayerInfo[playerid][pMember] == 14 && IsAnAmbulance(GetPlayerVehicleID(playerid)) && GetPlayerVehicleSeat(playerid) == 0) {
		if(sscanf(params, "ud", id, suma)) return SCM(playerid, -1, "Syntax: /heal [name/playerid] [amount]");
		if(id == playerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
		if(suma < 1 || suma > 6500) return SCM(playerid, -1, "Amount must be between $1 and $6,500.");
		if(OnDuty[playerid] < 1) return SCM(playerid, -1, "Nu esti on duty.");
		if(GetPlayerVehicleID(id) < 1) return SCM(playerid, -1, "Acel player trebuie sa se afle in vehiculul tau.");
		if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(id)) return SCM(playerid, -1, "Nu esti in vehicul cu acel jucator.");
		GetPlayerHealth(id, health);
		if(health >= 95) return SCM(playerid, -1, "This player have more than 95 HP.");
		if(GetPlayerCash(id) < suma) return SCM(playerid, -1, "This player don't have enough money.");
		GivePlayerCash(id, -suma); GivePlayerCash(playerid, suma);
		SetPlayerHealthEx(id, 100.0);
		SCM(playerid, -1, "You have him health of that player.");
		SCM(id, COLOR_PURPLE, "Now, your health is full.");
		PlayerInfo[playerid][pRaport][0]++;
		pUpdateInt(playerid, "Raport1", PlayerInfo[playerid][pRaport][0]);
	} else {
		if(Iter_Contains(PlayerPaint, playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda aici.");
		if(InHouse[playerid] > 0 && GetPlayerInterior(playerid) >= 1) { SetPlayerHealthEx(playerid, 100.0); SCM(playerid, COLOR_PURPLE, "Now, your health, is full."); }
		if(PlayerInfo[playerid][pMember] != 0 && IsInHQ(playerid)) { SetPlayerHealthEx(playerid, 100.0); SCM(playerid, COLOR_PURPLE, "Now, your health, is full."); }
  	}
  	HealTimer[playerid] = 10;
	return 1; 
}
CMD:healme(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	SetPlayerHealthEx(playerid, 100.0);
	SendAdmins(COLOR_PRINC, "(/healme) {ffffff}%s updated health to 100", 1, GetName(playerid));
	return 1; 
}
CMD:block(playerid, params[]) {
	if(PlayerInfo[playerid][pPhone] < 1) return SCM(playerid, -1, "Nu ai un iPhone.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /block [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	PlayerInfo[playerid][pPhoneBlocked][id] = 1;
	SCM(playerid, COLOR_DARKPINK, "Userul a fost blocat.");
	return 1; 
}
CMD:gps(playerid) {
	if(arecpactiv(playerid)) return true;
	ShowPlayerDialogEx(playerid, DIALOG_LOCATION, DIALOG_STYLE_LIST, "Importants Locations", "Driving School\nLos Santos\nFaction HQS\nVehicle Mod Shops\nPaintball\nDealership\nMaterials Pickup\nLS Fisherman 24/7\nTrash Place\nAmanet\nStage\nFour Dragons - Casino\nCNN Market\nDaily quests\nOther Locations", "Select", "Exit");
	return 1; 
}	
function arecpactiv(playerid) {
	if(facerob[playerid] >= 1 || CP[playerid] == 300 || CP[playerid] >= 1 || UsedFind[playerid] >= 1) return SCM(playerid, -1, "Ai un checkpoint activ.");
	return 0; }	
CMD:unblock(playerid, params[]) {
	if(PlayerInfo[playerid][pPhone] < 1) return SCM(playerid, -1, "Nu ai un iPhone.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /unblock [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[playerid][pPhoneBlocked][id] == 0) return SCM(playerid, -1, "That user is not blocked.");
	PlayerInfo[playerid][pPhoneBlocked][id] = 0;
	SCM(playerid, COLOR_DARKPINK, "Userul a fost deblocat.");
	return 1; 
}
CMD:call(playerid, params[]) {
	new number, killerid = WantedPlayer[playerid];
	if(sscanf(params, "i",number)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /call [number]");
	if(PlayerInfo[playerid][pPnumber] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You dont't have a phone.");
	if(PhoneOnline[playerid] > 0) return SCM(playerid, COLOR_WHITE, "Your phone is turned off.");
	if(PlayerInfo[playerid][pCredits] < 2) return SCM(playerid, COLOR_WHITE, "You don't have enough credits to call.");
	if(number == 112) {
		if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "Ai nevoie de minim 5 ore pentru a folosi aceasta actiune.");	
	    if(IsACop(playerid)) return SCM(playerid,COLOR_WHITE,"You are a cop.");
	    if(WantedReason[playerid] != 999) {
	    	if(PlayerInfo[WantedPlayer[playerid]][pJailTime] > 0) return SCM(playerid, COLOR_WHITE, "This player is already in jail.");
			if(killerid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_WHITE, "Player not connected.");
            if(PlayerInfo[killerid][pWantedLevel] >= 6) return SCM(playerid, COLOR_WHITE, "This player has got already maximum of wanted stars.");
			else { WantedPoints[killerid] += 2; }
            if(WantedPoints[killerid] > 13) WantedPoints[killerid] = 13;
			SCMf(playerid, COLOR_LIGHTBLUE,"You reported %s for a crime.",GetName(killerid));
			if(WantedReason[playerid] != 49) SetPlayerCriminal(killerid,playerid, "first degree murder");
			else if(WantedReason[playerid] == 49) SetPlayerCriminal(killerid,playerid, "hit and run");
			WantedReason[playerid] = 999;
			return true;
	    } else {
			if(Mobile[playerid] == -1) {
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
				Mobile[playerid] = -2;
				SendClientMessage(playerid, COLOR_WHITE, "You've called Emergency services, please select the department you desire (i.e: LSPD, LSFMD).");
				if(PlayerInfo[playerid][pPhone] == 0) SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				else if(PlayerInfo[playerid][pPhone] == 1) SetPlayerAttachedObject(playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000);
			}
			return true;
		}
	}
	if(number == PlayerInfo[playerid][pPnumber]) return SendClientMessage(playerid, COLOR_GRAD2, "You can't call yourself.");
	if(Mobile[playerid] != -1) return SendClientMessage(playerid, COLOR_WHITE, "You are already on a call.");
	foreach(new i : Player) {
		if(IsPlayerConnected(i)) {
		    new giveplayerid = i;
			if(PlayerInfo[i][pPnumber] == number && number != 0) {
				if(IsPlayerConnected(giveplayerid)) {
					if(giveplayerid != INVALID_PLAYER_ID) {
						if(Spectate[giveplayerid] > 0) return SCM(playerid, -1, "Acel player are telefonul inchis.");
					    if(PhoneOnline[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "That player phone is offline.");
						if(PhoneOnlineCalls[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "That player phone is offline for calls.");
						if(PlayerInfo[giveplayerid][pPhoneBlocked][playerid] == 1) return SCM(playerid, COLOR_LIGHTGREEN3, "The player you are trying to call has blocked your number. You can't contact him/her.");
						if (Mobile[giveplayerid] == -1) {
							Mobile[playerid] = giveplayerid;
							sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s takes out their cellphone, and dials in a number.", PlayerInfo[playerid][pNormalName]);
							PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 20600, 0.0, 0.0, 0.0);
							SCMf(giveplayerid, COLOR_PRINC, "%s is calling you. Use /p(ickup) to answer your phone.", PlayerInfo[playerid][pNormalName]);
							if(PlayerInfo[playerid][pPhone] == 0) SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
							else if(PlayerInfo[playerid][pPhone] == 1) SetPlayerAttachedObject(playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000); 
							if(PlayerInfo[giveplayerid][pPhone] == 0) sendNearbyMessage(giveplayerid, 20.0, COLOR_PURPLE, "* %s's cellphone starts to ring...", GetName(giveplayerid));
							else if(PlayerInfo[giveplayerid][pPhone] == 1) sendNearbyMessage(giveplayerid, 20.0, COLOR_PURPLE, "* %s's iPhone starts to ring...", GetName(giveplayerid));
							CellTime[playerid] = 1;
							SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
							return true;
						}
					}
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_GRAD2, "(cellphone) *busy tone*");
	return 1; 
}
CMD:sms(playerid, params[]) {
	new phonenumb,smstext[110],giveplayerid;
    if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(sscanf(params, "is[110]",phonenumb,smstext)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /sms [number] [text]");
	if(PlayerInfo[playerid][pPnumber] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You dont't have a cellphone.");
	if(PhoneOnline[playerid] > 0) return SCM(playerid, COLOR_WHITE, "Your phone turned is off.");
	foreach(new i : Player) {
		if(PlayerInfo[playerid][pCredits] < 2) return SCM(playerid, COLOR_WHITE, "You don't have credits needed.");
		if(phonenumb == PlayerInfo[playerid][pPnumber]) return true;
		if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0) {
			if(IsPlayerConnected(giveplayerid)) {
				if(giveplayerid != INVALID_PLAYER_ID) {
				    giveplayerid = i;
				    if(PhoneOnline[giveplayerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "This player have his phone turned off.");
				    if(PlayerInfo[giveplayerid][pPhoneBlocked][playerid] == 1) return SCM(playerid, COLOR_LIGHTGREEN3, "The player you are trying to text has blocked your number. You can't contact him/her.");
					if(PlayerInfo[giveplayerid][pAdmin] < 1) SCMf(giveplayerid, COLOR_YELLOW, "SMS from %s (%d): %s", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pPnumber], smstext);
					else SCMf(giveplayerid, COLOR_YELLOW, "SMS from %s (ID: %d): %s", PlayerInfo[playerid][pNormalName], playerid, smstext);
					SCMf(playerid, COLOR_SMS, "SMS sent to %s (%d): %s", PlayerInfo[giveplayerid][pNormalName], PlayerInfo[giveplayerid][pPnumber], smstext);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerPlaySound(giveplayerid, 1139, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCredits] -= 2; pUpdateInt(playerid, "CreditsF", PlayerInfo[playerid][pCredits]); 
					LastPlayer[i] = playerid;
				}
			}
		}
	}
	return 1; 
}
CMD:reply(playerid, params[]) {
	if(PlayerInfo[playerid][pPhone] < 1) return SCM(playerid, -1, "You don't have an iPhone.");
	if(LastPlayer[playerid] < 0) return SCM(playerid, -1, "Nobody has sent you an SMS.");
	if(PlayerInfo[playerid][pCredits] < 2) return SCM(playerid, -1, "You don't have credits needed.");
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(strlen(params) < 1) return SCM(playerid, -1, "Syntax: /reply [text]");
	if(PhoneOnline[LastPlayer[playerid]] > 0) return SCM(playerid, -1, "This player have his phone turned off.");
	if(PlayerInfo[LastPlayer[playerid]][pPhoneBlocked][playerid] == 1) return SCM(playerid, -1, "The player you are trying to text has blocked your number. You can't contact him/her.");
	if(PlayerInfo[LastPlayer[playerid]][pAdmin] < 1) SCMf(LastPlayer[playerid], COLOR_YELLOW, "SMS from %s (%d): %s", GetName(playerid), PlayerInfo[playerid][pPnumber], params);
	else SCMf(LastPlayer[playerid], COLOR_YELLOW, "SMS from %s (ID: %d): %s", GetName(playerid), playerid, params);
	LastPlayer[LastPlayer[playerid]] = playerid;
	SCMf(playerid, COLOR_SMS, "SMS sent to %s (%d): %s", GetName(LastPlayer[playerid]), PlayerInfo[LastPlayer[playerid]][pPnumber], params);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0); PlayerPlaySound(LastPlayer[playerid], 1139, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pCredits] -= 2; pUpdateInt(playerid, "CreditsF", PlayerInfo[playerid][pCredits]);
	return 1; 
}
CMD:speaker(playerid, parmas[]) {
	if(PlayerInfo[playerid][pReborn] < 1) return SCM(playerid, -1, AdminOnly);
	if(PlayerInfo[playerid][pPnumber] == 0) return SCM(playerid, -1, "You do not have a phone.");
	if(Mobile[playerid] == -1 || Mobile[playerid] == -2 ||  Mobile[playerid] == -3 || Mobile[playerid] == -4) return true;
	switch(PlayerInfo[playerid][pSpeaker]) {
		case 0: {
			SCM(playerid, -1, "Speaker is on.");
			PlayerInfo[playerid][pSpeaker] = 1;
		}
		case 1: {
			SCM(playerid, -1, "Speaker is off.");
			PlayerInfo[playerid][pSpeaker] = 0;
		}
	}
	return 1; 
}
CMD:turn(playerid, params[]) {
	new x_nr[50];
	if(sscanf(params, "s[50]", x_nr)) return SCM(playerid, -1, "Syntax: /turn [on/off/off calls]");
	if(strcmp(x_nr, "off calls", true) == 0) {
		if(PlayerInfo[playerid][pPhone] != 1) return SCM(playerid, -1, "Only player with iPhone can deactivate their phone. If you want to buy an iPhone use /shop.");
		if(PhoneOnlineCalls[playerid] == 0) {
			PhoneOnlineCalls[playerid] = 1;
			sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s turns his/her iPhone off for calls.", GetName(playerid));
			return true;
		}
		else SCM(playerid, -1, "Your phone is already turned off for calls.");
		return true;
	}
	if(strcmp(x_nr, "off", true) == 0) {
		if(PhoneOnline[playerid] == 0) {
			PhoneOnline[playerid] = 1;
			if(PlayerInfo[playerid][pPhone] == 0) sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s turns off his/her phone.", GetName(playerid));
			else if(PlayerInfo[playerid][pPhone] == 1) sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s turns off his/her iPhone.", GetName(playerid));
			return true;
		} else {
			if(PlayerInfo[playerid][pPhone] == 0) SCM(playerid, -1, "Your phone is already turned off.");
			else if(PlayerInfo[playerid][pPhone] == 1) SCM(playerid, -1, "Your iPhone is already turned off.");
			return true;
		}
	}
	if(strcmp(x_nr, "on", true) == 0) {
		if(PhoneOnline[playerid] == 1) {
			PhoneOnline[playerid] = 0; PhoneOnlineCalls[playerid] = 0;
			if(PlayerInfo[playerid][pPhone] == 0) sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s turns on his/her phone.", GetName(playerid));
			else if(PlayerInfo[playerid][pPhone] == 1) sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s turns on his/her iPhone.", GetName(playerid));
			return true;
		} else {
			if(PlayerInfo[playerid][pPhone] == 0) SCM(playerid, -1, "Your phone is already turned on.");
			else if(PlayerInfo[playerid][pPhone] == 1) SCM(playerid, -1, "Your iPhone is already turned on.");
			return true;
		}
	}
	return 1; 
}	
CMD:p(playerid, params[]) {
	if(Mobile[playerid] != -1) return SCM(playerid, -1, "You are already on a call...");
	foreach(new i : Player) {
		if(Mobile[i] == playerid) {
			Mobile[playerid] = i;
			SCM(i, -1, "The other person has answered the call.");
			SCM(playerid, -1, "You have answered your phone.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			switch(PlayerInfo[playerid][pPhone]) {
				case 0: SetPlayerAttachedObject(playerid,4,330,6, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				case 1: SetPlayerAttachedObject(playerid, 4, 18865, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000);
			}
			return true;
		}
	}
	return 1; 
}	
CMD:h(playerid, params[]) {
	new caller = Mobile[playerid];
	if(Mobile[playerid] != -2 && Mobile[playerid] != -3 && Mobile[playerid] != -4) {
		if(IsPlayerConnected(caller)) {
			if(caller != INVALID_PLAYER_ID) {
				if(PhoneOnline[caller] == 0) SCM(caller, -1, "You call has been terminated by the other party.");
				CellTime[caller] = 0; CellTime[playerid] = 0; Mobile[caller] = -1;
				Mobile[playerid] = -1; CellTime[playerid] = 0; PlayerInfo[playerid][pSpeaker] = 0;
				SCM(playerid, -1, "You have terminated the current call.");
				SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObject(caller, 4); RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
	} else {
		SCM(playerid, -1, "You have terminated the current call.");
		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		Mobile[playerid] = -1; CellTime[playerid] = 0; PlayerInfo[playerid][pSpeaker] = 0;
	}
	return 1; 
}
CMD:jail(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id, reason[64], rand, time;
	if(sscanf(params, "uis[64]", id, time, reason)) return SCM(playerid, -1, "Syntax: /jail [playerid/name] [minutes] [reason]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid player id.");
	if(time < 1 || time > 100) return SCM(playerid, -1, "Invalid time.");
	if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Ai dat o sanctiune recenta, asteapta cateva secunde.");
	if(PlayerInfo[id][pJailTime] >= 1) return SCM(playerid, -1, "This player is already in jail.");
	ResetPlayerWeapons(id); ResetPlayerWeaponsEx(id);
	WantedPoints[id] = 0; PlayerInfo[id][pJailed] = 2; PlayerInfo[id][pJailTime] = time*60;
	PlayerInfo[id][pGunLic] = 0; PlayerInfo[id][pGunLicSuspend] = 5;
	SetPlayerInterior(id, 10); 
	rand = random(sizeof gRandomAJailSpawns);
	SetPlayerPosEx(id, gRandomAJailSpawns[rand][0], gRandomAJailSpawns[rand][1], gRandomAJailSpawns[rand][2]);
	va_SendClientMessageToAll(COLOR_LIGHTRED, "Jail: %s has been jailed by %s, reason: %s (%d minutes).", GetName(id), GetName(playerid), reason, time);
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Jailed` = '2', `JailTime` = '%d', `GunLic` = '0', `GunLicSuspend` = '5' WHERE `id` = '%d' LIMIT 1", time*60, PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, gString);
	sanctiondelay[playerid] = 30;
	return 1; 
}
CMD:dm(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id, rand;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /dm [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Ai dat o sanctiune recenta, asteapta cateva secunde.");
	if(PlayerInfo[id][pJailTime] >= 1) return SCM(playerid, -1, "This player is already in jail.");
	ResetPlayerWeapons(id); ResetPlayerWeaponsEx(id);
	WantedPoints[id] = 0; PlayerInfo[id][pJailed] = 2; PlayerInfo[id][pJailTime] = 600;
	SetPlayerInterior(id, 10);
	rand = random(sizeof gRandomAJailSpawns);
	SetPlayerPosEx(id, gRandomAJailSpawns[rand][0], gRandomAJailSpawns[rand][1], gRandomAJailSpawns[rand][2]);
	va_SendClientMessageToAll(COLOR_LIGHTRED, "Jail: %s has been jailed by %s, reason: DM (10 minutes).", GetName(id), GetName(playerid));
	gString[0] = (EOS);
	PlayerInfo[id][pGunLic] = 0; PlayerInfo[id][pGunLicSuspend] = 5;
	mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','6','DM','%s','%s','10','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],gettime());
	mysql_tquery(SQL,gString);	
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Jailed` = '2', `JailTime` = '600', `GunLic` = '0', `GunLicSuspend` = '5' WHERE `id` = '%d' LIMIT 1", PlayerInfo[id][pSQLID]);
	mysql_tquery(SQL, gString);
	sanctiondelay[playerid] = 30;
	return 1; 
}
CMD:release(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /release [name/playerid]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[id][pJailTime] < 2) return SCM(playerid, -1, "Acel player nu se afla in jail.");
	ResetPlayerWeaponsEx(id); ResetPlayerWeapons(id);
	WantedPoints[id] = 0; PlayerInfo[id][pJailed] = 0; pUpdateInt(id, "Jailed", 0);
	PlayerInfo[id][pJailTime] = 0; pUpdateInt(id, "JailTime", 0);
	PlayerInfo[id][pGunLic] = 50;
	pUpdateInt(id, "GunLic", 50);
	SetPlayerInterior(id, 0); SetPlayerVirtualWorld(id, 0); ClearCrime(playerid);
	PlayerTextDrawHide(id, Jailtime[id]); SetPlayerSkin(id, PlayerInfo[id][pModel]); SpawnPlayer(id);
	SendAdmins(COLOR_PRINC, "(/release) {ffffff}%s used command /release and released %s.", 1, GetName(playerid), GetName(id));
	SCMf(id, -1, "* %s released you.", GetName(playerid));
	return 1; 
}	
alias:fpk("auninvite")
CMD:clear(playerid, params[]) {
	if(!IsACop(playerid) && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, "You are not a cop.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /clear [name/playerid]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	SCMf(id, COLOR_DARKPINK, "%s has cleared all your warrants.", GetName(playerid));
	SCM(playerid, COLOR_DARKPINK, "Done.");
	SendFamilyMessage(2, COLOR_LIGHTBLUE, "Dispatch: %s has cleared all the warrants on %s.", GetName(playerid), GetName(id));	
	SendFamilyMessage(1, COLOR_LIGHTBLUE, "Dispatch: %s has cleared all the warrants on %s.", GetName(playerid), GetName(id));			
	PlayerInfo[id][pWantedLevel] = 0; WantedPoints[id] = 0;
	PlayerTextDrawHide(id, WantedText[id]); ClearCrime(id); SetPlayerWantedLevel(id, 0);
	pUpdateInt(id, "WantedLevel", 0);
	return 1; 
}	
CMD:setfreq(playerid, params[]) {
	new password[20],password2[20],ownerid,freqss2;
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, COLOR_WHITE, "You don't have a walkie talkie.");
    if(sscanf(params, "dS(q)[20]",freqss2,password)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /setfreq [frequency] (0 to switch off).");
    if(freqss2 < 0 || freqss2 > 1000000) return SCM(playerid, COLOR_WHITE, "Invalid frequency specified. Valid frequencies: 1 - 1000000.");
    if(PlayerInfo[playerid][pLevel] < 2) return SCM(playerid, -1, "Ai nevoie de minim level 2.");
    if(freqss2 == 0) {
    	WTChannel[playerid] = 0;
    	pUpdateInt(playerid, "WTChannel", WTChannel[playerid]);
    	SendClientMessage(playerid, COLOR_WHITE, "You have switched off your walkie-talkie.");
    	return true;
    }
    if(freqss2 < 100) return SCM(playerid, COLOR_WHITE, "Invalid walkie talkie frequency.");
    if(freqss2 >= 1000) {
	    SCMf(playerid, COLOR_PRINC, ">> {ffffff}You are now broadcasting at the frequency of #%d khz.",freqss2);
		WTChannel[playerid] = freqss2;
		pUpdateInt(playerid, "WTChannel", WTChannel[playerid]);
	}
	else {
		gString[0] = (EOS);
		format(gString, 200, "SELECT * FROM `frequencies` WHERE `freqid`='%d'", freqss2);
		new Cache: ab = mysql_query(SQL, gString);
		if(cache_get_row_count() > 0) {
			cache_get_field_content(0, "password", password2);
			ownerid = cache_get_field_content_int(0, "ownerid");
		}
		else {
			cache_delete(ab);
			SendClientMessage(playerid, COLOR_WHITE, "Invalid frequency. This frequency can be bought from the /shop.");
			return true;
		}
		cache_delete(ab);
		if(ownerid == PlayerInfo[playerid][pSQLID]) {
			SCMf(playerid, COLOR_PRINC, ">> {ffffff}You are now broadcasting at the frequency of #%d khz.",freqss2);
			WTChannel[playerid] = freqss2;
			pUpdateInt(playerid, "WTChannel", WTChannel[playerid]);
		}
		else {
			if(strcmp(password,password2,true) == 0) {
				SCMf(playerid, COLOR_PRINC, ">> {ffffff}You are now broadcasting at the frequency of #%d khz.",freqss2);
				WTChannel[playerid] = freqss2;
				pUpdateInt(playerid, "WTChannel", WTChannel[playerid]);
			}
			else return SCM(playerid, COLOR_WHITE, "Invalid password! This is a private frequency. You need the password to enter.");
		}
	}
	return 1; 
}
CMD:freq(playerid, params[]) {
	new action[10],value[20],name[30],freqid,xx;
	if(sscanf(params, "s[10]S(q)[20]", action, value)) {
		SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /freq [action] [value]");
		SendClientMessage(playerid, COLOR_WHITE, "Actions: password, members");
		return true;
	}
	gString[0] = (EOS);
	if(strcmp(action,"members",true) == 0) {
		if(WTChannel[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to be on the frequency that you want to manage.");
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}---- Broadcasting on frequency %d ----", WTChannel[playerid]);
		foreach(new i : Player) {
			if(WTChannel[i] == WTChannel[playerid]) {
				GetPlayerName(i, name, sizeof(name));
				SCMf(playerid, COLOR_PRINC, ">> {ffffff}(%d) %s", i, name);
			}
		}
	}
	else if(strcmp(action,"password",true) == 0) {
		if(WTChannel[playerid] == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to be on the frequency that you want to manage.");
		format(gString, 200, "SELECT * FROM `frequencies` WHERE `ownerid`='%d'", PlayerInfo[playerid][pSQLID]);
		new Cache: test = mysql_query(SQL, gString);
		for(new i, j = cache_get_row_count (); i != j; ++i)
		{
			freqid = cache_get_field_content_int(i, "freqid");
			if(WTChannel[playerid] == freqid)
			{
				xx = 1;
				break;
			}
		}
		cache_delete(test);
		if(xx == 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to be on your own frequency to use this command.");
		mysql_format(SQL, gString, 200, "UPDATE `frequencies` SET `password`='%s' WHERE `freqid`='%d' LIMIT 1", value, WTChannel[playerid]);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}Frequency password changed to %s", value);
		SCM(playerid, COLOR_WHITE, "Everyone got kicked from the frequency.");
		foreach(new i : Player) {
			if(WTChannel[i] == freqid) {
				WTChannel[i] = 0;
				SCM(playerid, COLOR_WHITE, "You were kicked from the frequency because the owner of the frequency changed the password.");
			}
		}
	}
	return 1; 
}
CMD:wt(playerid, params[]) {
	if(PlayerInfo[playerid][pWTalkie] == 0) return SCM(playerid, COLOR_WHITE, "You don't have a walkie talkie.");
	if(PlayerInfo[playerid][pConnectTime] < 1) return SCM(playerid, -1, "Ai nevoie de minim 1 ore jucate.");
	new msg[128];
    if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(sscanf(params, "s[128]", msg)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /wt [message]");
	if(WTChannel[playerid] == 0) return SCM(playerid,COLOR_WHITE,"You need to set a broadcast frequency first (using /setfrequency).");
	if(sanctiondelay[playerid] >= 1) return SCMf(playerid, COLOR_PRINC, ">> {ffffff}Poti folosi aceasta comanda peste %d secunde.", sanctiondelay[playerid]);
	foreach(new i : Player) {
	    if(WTChannel[i] == WTChannel[playerid]) SCMf(i, COLOR_SMS, "[frequency %d] %s: %s",WTChannel[playerid],GetName(playerid), msg);
	}
	sanctiondelay[playerid] = 3;
	return 1; 
}
CMD:arrest(playerid, params[]) {
    if(!IsACop(playerid)) return SCM(playerid, -1, "You are not a cop.");
    new id, time, rand, str[144];
    if(OnDuty[playerid] != 1) return SCM(playerid, -1, "You are not on duty.");
    if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /arrest [name/playerid]");
    if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
    if(GetDistanceBetweenPlayers(playerid, id) > 5) return SCM(playerid, -1, "This player is not near you.");
    new fine = PlayerInfo[id][pWantedLevel] * 600;
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 1526.2357,-1678.0305,5.8906) || IsPlayerInRangeOfPoint(playerid, 6.0, 268.9264,81.9687,1001.0391)) {
        if(PlayerInfo[id][pWantedLevel] < 1) return SCM(playerid, -1, "This player don't have wanted.");
        gString[0] = (EOS);
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Raport2` = `Raport2` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString, "", "");         
       	time = PlayerInfo[id][pWantedLevel] * 150;
        GivePlayerCash(id, -fine);
        DynamicFactions[PlayerInfo[playerid][pMember]][fBank] += fine;
        mysql_format(SQL,str,sizeof(str),"UPDATE `factions` SET `Bank`='%d' WHERE `ID`='%d'", DynamicFactions[PlayerInfo[playerid][pMember]][fBank], PlayerInfo[playerid][pMember]);
        mysql_tquery(SQL,str);
        ResetPlayerWeaponsEx(id); ResetPlayerWeapons(id);
        PlayerInfo[id][pJailTime] = time; SetPlayerWantedLevel(id, 0);
        PlayerTextDrawHide(id, WantedText[id]);
        SetPlayerInterior(id, 6);
        rand = random(sizeof(gRandomJailSpawns));
        SetPlayerPosEx(id, gRandomJailSpawns[rand][0],gRandomJailSpawns[rand][1],gRandomJailSpawns[rand][2]);
        SCMf(id, COLOR_LIGHTBLUE, "You have been arrested by %s for %d seconds, and issued a fine of $%d.", GetName(playerid), time, fine);
        if(CP[id] == 50) {
            DisablePlayerCheckpoint(playerid);
            CP[id] = 0;
        }  
        pUpdateInt(id, "Jailed", 1); pUpdateInt(id, "JailTime", time); pUpdateInt(id, "WantedLevel", 0);
        if(PlayerCuffed2[id] == 1) {
            PlayerCuffed2[id] = 0;
            SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE); RemovePlayerAttachedObject(id, 1); TogglePlayerControllable(id, 1);
        }
        if(IsPlayerInRangeOfPoint(playerid, 4, 2282.1289,2425.7620,3.4692)) {
            SetPlayerVirtualWorld(id, 3);
            PlayerInfo[id][pVirtualPD] = 3;
        } else if(IsPlayerInRangeOfPoint(playerid, 4,1526.2357,-1678.0305,5.8906)) {
            SetPlayerVirtualWorld(id, 0);
            PlayerInfo[id][pVirtualPD] = 0;
        } else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 3) {
            SetPlayerVirtualWorld(id, 3);
            PlayerInfo[id][pVirtualPD] = 3;
        } else if(IsPlayerInRangeOfPoint(playerid, 4,268.0995,82.1610,1001.0391) && GetPlayerVirtualWorld(playerid) == 0) {
            SetPlayerVirtualWorld(id, 0);
            PlayerInfo[id][pVirtualPD] = 0;
        }  
        pUpdateInt(id, "VirtualPD", PlayerInfo[id][pVirtualPD]);
        va_SendClientMessageToAll(COLOR_LIGHTRED, "%s arrested suspect %s, issuing a fine of $%d with a sentence of %d seconds.", GetName(playerid), GetName(id), fine, time);
        PlayerInfo[id][pJailed] = 1; PlayerInfo[id][pArrested] ++; PlayerInfo[id][pWantedLevel] = 0; WantedPoints[id] = 0; arrestcop[id] = playerid;       
        TogglePlayerControllable(id, 0);
        defer UnFreezeStation(id);
    }
    return 1; 
}
CMD:tod(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new hour;
	if(sscanf(params, "i", hour)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /tod [time]");
 	SetWorldTime(hour);
 	SCM(playerid, COLOR_DARKPINK, "Changed world time.");
	return 1; 
}
CMD:setweather(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, AdminOnly);
	new weather;
	if(sscanf(params, "i",weather)) return SCM(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /setweather [weather id]");
	if(weather < 0||weather > 45) return SendClientMessage(playerid, COLOR_WHITE, "Weather ID can't be below 0 or above 45.");
	SetWeather(weather);
	SCM(playerid, COLOR_DARKPINK, "Changed weather.");
	return 1; 
}
CMD:slapcar(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new Float: x, Float: y, Float: z, id;
	if(sscanf(params, "d", id)) return SCM(playerid, COLOR_WHITE, "Syntax: /slapcar [car id]");
	GetVehiclePos(id, x, y, z); SetVehiclePos(id, x, y, z+5);
	return 1; 
}
CMD:slap(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	new id, Float:slx, Float:sly, Float:slz;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /slap [name/playerid]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	GetPlayerPos(id, slx, sly, slz);
	SetPlayerPosEx(id, slx, sly, slz+5.0);
	SendAdmins(COLOR_PRINC, "(/slap) {ffffff}%s slapped %s.", 1, GetName(playerid), GetName(id));
	SCMf(playerid, COLOR_DARKPINK, "You have slapped %s.", GetName(id));
	return 1; 
}	
CMD:unstuck(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /unstuck [name/playerid]");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	TogglePlayerControllable(id, 1); ClearAnimations(id); SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
	SendAdmins(COLOR_PRINC, "(/unstuck) {ffffff}%s cleared %s animation and unfreezed him/her.", 1,GetName(playerid), GetName(id));
	SendHelpers(COLOR_PRINC, "(/unstuck) {ffffff}%s cleared %s animation and unfreezed him/her.", 1,GetName(playerid), GetName(id));
	return 1; 
}	
CMD:rmute(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new time, id;
	if(sscanf(params, "ui", id, time)) return SCM(playerid, -1, "Syntax: /rmute [name/playerid] [minutes]");
	if(sanctiondelay[playerid] > 0) return SCM(playerid, -1, "Ai dat o sanctiune recenta, asteapta cateva secunde.");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	PlayerInfo[id][pRmute] = time*60; pUpdateInt(id, "Rmute", PlayerInfo[id][pRmute]);
	SendAdmins(COLOR_PRINC, "(/rmute) {ffffff}%s has muted %s on /report for %d minutes.", 1, GetName(playerid), GetName(id), time);
	SCMf(id, COLOR_GREY, "Ai primit mute pe /report timp de %d minute.", time);
	sanctiondelay[playerid] = 30;
	return 1; 
}	
CMD:nmute(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	new time, id;
	if(sscanf(params, "ui", id, time)) return SCM(playerid, -1, "Syntax: /nmute [name/playerid] [minutes]");
	if(sanctiondelay[playerid] > 0) return SCM(playerid, -1, "Ai dat o sanctiune recenta, asteapta cateva secunde.");
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	PlayerInfo[id][pNmute] = time*60; pUpdateInt(id, "Nmute", PlayerInfo[id][pNmute]);
	SendAdmins(COLOR_PRINC, "(/nmute) {ffffff}%s has muted %s on /n for %d minutes.", 1, GetName(playerid), GetName(id), time);
	SendHelpers(COLOR_PRINC, "(/nmute) {ffffff}%s has muted %s on /n for %d minutes.", 1, GetName(playerid), GetName(id), time);
	SCMf(id, COLOR_GREY, "Ai primit mute pe /n timp de %d minute.", time);
	sanctiondelay[playerid] = 30;
	return 1; 
}	
CMD:exam(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You can't use this command when you are in a car.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2200.7825,1393.9137,11.0625)) return SCM(playerid, -1, "You are not at the DMV.");
	if(PlayerInfo[playerid][pCarLic] >= 1) return SCM(playerid, -1, "You already have a driver license.");
	if(PlayerInfo[playerid][pCarLicSuspend] > 0) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai liceta suspenda pentru 2 ore.");
	if(TakingLesson[playerid] != 0) return SCM(playerid, -1, "You already have an exam.");
	DisablePlayerCheckpoint(playerid); DisablePlayerRaceCheckpoint(playerid);	
	PlayerHandsup[playerid] = 0; TakingLesson[playerid] = 1;
	examcar[playerid] = AddStaticVehicle(410, 1242.0013,-1850.0372,13.0384,90.7065,  -1, -1);
	Gas[examcar[playerid]] = 100;
	PutPlayerInVehicleEx(playerid, examcar[playerid], 0);
	DisableRemoteVehicleCollisions(playerid, 1);
	SCM(playerid, -1, "The exam has begun. Go to the checkpoint.");
	SCM(playerid, -1, "Type /engine or press key 2 to start the engine.");
	SetPlayerCheckpoint(playerid, 1203.7761,-1849.4865,13.3828,4.0);
	CP[playerid] = 100;
	return 1; 
}
CMD:buy(playerid, params[]) { 
	if(InBussines[playerid] < 1) return true;
	if(BizzInfo[InBussines[playerid]][bType] != 6) return SCM(playerid, -1, "You are not at 24/7.");
	ShowPlayerDialogEx(playerid,Dialog_24,DIALOG_STYLE_LIST,"SERVER: 24/7","Cellphone ($500)\nPhone Book ($50)\nPhone Credit ($500)\nWalkie Talkie ($2,500)\nPhoto Camera ($2,000)\nGas Can ($5,000)","Select","Exit");
    return 1; 
}
CMD:buyfightstyle(playerid, params[]) {
	if(InBussines[playerid] < 1) return true;
	if(BizzInfo[InBussines[playerid]][bType] != 8) return SCM(playerid, -1, "You are not at gym.");
	ShowPlayerDialogEx(playerid,Dialog_Gym,DIALOG_STYLE_LIST,"SERVER: Fighting Styles","Boxing ($6,000)\nKung Fu ($10,000)\nKnee Head ($10,000)\nGrab & Kick ($10,000)\nElbow ($10,000)\nDefault ($2,000)","Select","Cancel");
	return 1; 
}
CMD:buytoys(playerid, params[]) {
	if(InBussines[playerid] < 1) return true;
	if(BizzInfo[InBussines[playerid]][bType] != 4) return SCM(playerid, -1, "You are not at sex shop.");
	ShowPlayerDialogEx(playerid,DIALOG_SEXSHOP,DIALOG_STYLE_LIST,"SERVER: Sex Shop","Purple Dildo ($100)\nSmall White Vibrator ($100)\nSilver Vibrator ($100)\nLarge White Vibrator ($100)\nFlowers ($150)","Select","Exit");
	return 1; 
}
CMD:buydrink(playerid, params[]) {
	if(InBussines[playerid] < 1) return true;
    if(BizzInfo[InBussines[playerid]][bType] != 3) return SCM(playerid, -1, "You are not at bar.");
	ShowPlayerDialogEx(playerid,DIALOG_BAR,DIALOG_STYLE_LIST,"SERVER: Bar","Stock Bar Cigars ($50)\nSprunk ($50)\nBeer ($60)\nWine ($100)","Select","Exit");
    return 1; 
}
CMD:eject(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You need to be in a vehicle to use this command.");
	if(delaypay[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 10 secunde.");
	new State = GetPlayerState(playerid), id, test = GetPlayerVehicleID(playerid);
	if(State != PLAYER_STATE_DRIVER) return SCM(playerid, -1, "You can only eject people as a driver.");
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /eject [name/playerid]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "You can't eject yourself.");
	if(!IsPlayerInVehicle(id, test)) return SCM(playerid, -1, "That player is not in your car.");
	SCMf(playerid, COLOR_PURPLE, "* You have thrown %s out of the car.", GetName(id));
	SCMf(id, COLOR_PURPLE, "* You have been thrown out the car by %s.", GetName(playerid));
	RemovePlayerFromVehicleEx(id);
	delaypay[playerid] = 10;
	return 1; 
}
CMD:buygun(playerid, params[]) {
	if(PlayerInfo[playerid][pGunLic] < 1) return SendClientMessage(playerid, COLOR_WHITE, "You don't have gun license.");
    if(BizzInfo[InBussines[playerid]][bType] != 2) return SendClientMessage(playerid, COLOR_WHITE, "You are not in a gun shop.");
	if(GetPlayerInterior(playerid) == 0) return SendClientMessage(playerid, COLOR_WHITE, "You are not in a gun shop.");
	ShowPlayerDialogEx(playerid,Dialog_gunshop,DIALOG_STYLE_LIST,"Select:","Baseball bat($2,000)\nSD Pistol($3,000)\nDesert eagle($5,000)\nShotgun($8,000)\nMP5($7,000)\nAK47($10,000)\nM4($10,000)","Select","Cancel");
    return 1; 
}
CMD:w(playerid, params[]) {
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, -1, "Ai nevoie de minim level 3.");
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	new id, message[100];
	if(sscanf(params, "us[100]", id, message)) return SCM(playerid, -1, "Syntax: /w [name/playerid] [message]");
	if(Spectate[id] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe acel player.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
    if(!IsPlayerInRangeOfPlayer(playerid, id, 5)) return true;
    SCMf(id, -1, "{0099cc}[/whisper] %s (%d): %s", GetName(playerid), playerid, message);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}{0099cc}You whisper to %s (%d): %s", GetName(id), id, message);
	return 1; 
}
CMD:setleader(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, -1, AdminOnly);
	new para1, level, string[128], escape[128], ftext[50];
	if(sscanf(params, "ui", para1, level)) { 
		SCM(playerid, -1, "Syntax: /setleader [name/playerid] [id faction]");
		SCM(playerid, COLOR_GREY, "Faction: LSPD (1) FBI (2) National Guard (3) Los Aztecas (4) Grove Street (5) Los Vagos (6) News Reporters (9) LVPD (8) Ballas (10)");
		SCM(playerid, COLOR_GREY, "Faction: Hitman (11) Taxi (13) Paramedic (14) Tow Car Company (15) Uber (16)");
		return true;
	}			
	if(level > 16 || level < 0 || level == 7 || level == 12) return SCM(playerid, -1, "Invalid id.");
	if(!IsPlayerConnected(para1)) return SCM(playerid, -1, "Playerul nu este conectat.");
	if(para1 == INVALID_PLAYER_ID) return true;
	if(PlayerInfo[para1][pMember] > 0) return SCM(playerid, -1, "This player is in a faction.");
	switch(level) {
		case 1: { ftext = "Los Santos Police Departament"; }
		case 2: { ftext = "Federal Bureau of Investigations"; }
		case 3: { ftext = "National Guard"; }
		case 4: { ftext = "Los Aztecas"; }
		case 5: { ftext = "Grove Street"; }
		case 6: { ftext = "Los Vagos"; }
		case 8: { ftext = "Las Venturas Police Departament"; }		
		case 9: { ftext = "News Reporters"; }
		case 10: { ftext = "Ballas Family"; }
		case 11: { ftext = "Hitman Agency"; }
		case 13: { ftext = "Taxi Las Venturas"; }
		case 14: { ftext = "Paramedic Departament"; }
		case 15: { ftext = "Tow Car Company"; }
		case 16: { ftext = "Uber Company"; }
	}
	PlayerInfo[para1][pMember] = level; PlayerInfo[para1][pLeader] = level;
	SCMf(para1, COLOR_DARKPINK, "<< Administrator %s has set you to lead group %s. >>", GetName(playerid), ftext);
	SendAdmins(COLOR_DARKPINK, "<< Administrator %s has set %s to lead group %s. >>", 1, GetName(playerid), GetName(para1), ftext);
	format(string, sizeof(string), "%s is now the leader of faction %s.", PlayerInfo[para1][pNormalName], ftext);
	mysql_real_escape_string(string, escape);
	Factionlog(level,PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID],escape);
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s','%d','%d')", escape, PlayerInfo[para1][pSQLID],PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL,gString);
	if(level == 0) {
	    gTeam[para1] = 3; PlayerInfo[para1][pTeam] = 3;
	}
	else if(level == 1 || level == 2 || level == 3 || level == 8) {
	    gTeam[para1] = 2; PlayerInfo[para1][pTeam] = 2;
	}
	else if(level == 4 || level == 5 || level == 6 || level == 10) {
	    gTeam[para1] = 5; PlayerInfo[para1][pTeam] = 5;
	}
	else if(level == 9 || level == 13 || level == 14 || level == 16) {
	    gTeam[para1] = 4; PlayerInfo[para1][pTeam] = 4;
	}
	else if(level == 11) {
	    gTeam[para1] = 11; PlayerInfo[para1][pTeam] = 11;
	}
	PlayerInfo[para1][pRank] = 7; PlayerInfo[para1][pFactionJoin] = gettime(); SetPlayerToTeamColor(para1);
	pUpdateInt(para1, "Leader", PlayerInfo[para1][pLeader]); pUpdateInt(para1, "Member", PlayerInfo[para1][pMember]); pUpdateInt(para1, "Rank", PlayerInfo[para1][pRank]);
	pUpdateInt(para1, "FactionJoin", PlayerInfo[para1][pFactionJoin]); pUpdateInt(para1, "Team", PlayerInfo[para1][pTeam]);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `factions` SET `Leader` = '1' WHERE `ID` = '%d' LIMIT 1", level);
	mysql_tquery(SQL, gString);	
	va_SendClientMessageToAll(COLOR_GENANNOUNCE, "((AdmBot: %s a fost promovat la functia de lider al factiunii %s (promoted by %s).))", GetName(para1), NumeFactiune(PlayerInfo[para1][pMember]), GetName(playerid));
    if(PlayerInfo[para1][pMember] == 15) Iter_Add(Mecanici, para1);
    if(PlayerInfo[para1][pMember] == 9) Iter_Add(Reporters, para1);	
	if(IsACop(para1)) Iter_Add(Cops, para1);
	if(IsAMember(para1)) Iter_Add(Gangsters, para1);
	return 1; 
}
CMD:refill(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 15) return SCM(playerid, -1, "You are not a mechanic.");
	new id, money;
	if(sscanf(params, "ui", id, money)) return SCM(playerid, -1, "Syntax: /refill [name/playerid] [money]");
	if(money < 1 || money > 10000) return SCM(playerid, -1, "Price not lower then 1$, or above 10,000$."); 
	if(RefillOffer[id] == playerid) return SCM(playerid, -1, "This player have already a refill offer.");
	if(RepairTime[playerid] > 0) return SCM(playerid, -1, "You can use this command once per 60 seconds.");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "You can't offer refill to yourself.");
	if(GetDistanceBetweenPlayers(playerid, id) > 80 || !IsPlayerInAnyVehicle(id)) return SCM(playerid, -1, "That player is not near you / not in a car.");
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}You offered %s to refill his car for $%s.", GetName(id), FormatNumber(money));
	SCMf(id, -1, "%s wants to refill your car for $%s, type /accept refill %d to accept the offer.", GetName(playerid), FormatNumber(money), playerid);
	SendFamilyMessage(15, COLOR_LIGHTBLUE, "%s offered refill to %s with price $%s.", GetName(playerid), GetName(id), FormatNumber(money));
	RefillOffer[id] = playerid; RefillPrice[id] = money; RepairTime[playerid] = 60;
	return 1; 
}
CMD:repair(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 15) return SCM(playerid, -1, "You are not a mechanic.");
	new id, money;
	if(sscanf(params, "ui", id, money)) return SCM(playerid, -1, "Syntax: /repair [name/playerid] [money]");
	if(RepairOffer[id] == playerid) return SendClientMessage(playerid, COLOR_WHITE, "This player have already a repair offer.");
	if(RepairTime[playerid] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You need to wait 60 seconds to use this command again.");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
    if(GetDistanceBetweenPlayers(playerid, id) < 8.0 && IsPlayerInAnyVehicle(id)) {
	    if(id == playerid) return SendClientMessage(playerid, COLOR_WHITE, "You can't offer repair to yourself.");
	    SCMf(playerid, COLOR_PRINC, ">> {ffffff}You offered %s to fix his car for $%s.",PlayerInfo[id][pNormalName],FormatNumber(money));
		SCMf(id, -1, "%s wants to repair your car for $%s, type /accept repair %d to accept the offer.",PlayerInfo[playerid][pNormalName],FormatNumber(money),playerid);
		SendFamilyMessage(15, COLOR_LIGHTBLUE, "%s offered repair to %s with price $%s.", GetName(playerid), GetName(id), FormatNumber(money));
		RepairOffer[id] = playerid; RepairPrice[id] = money; RepairTime[playerid] = 60;	
	}
	return 1; 
}
CMD:tow(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 15) return SCM(playerid, -1, "Nu esti mecanic.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, -1, "Nu te afli la volanul unui vehicul.");
	new m = GetVehicleModel(GetPlayerVehicleID(playerid)), Float: pX, Float: pY, Float: pZ, Float: vX, Float: vY, Float: vZ, Found=0, vid = 0;
	if(m != 525) return SCM(playerid, -1, "Nu te afli intr-un vehicul de factiune.");
	if(barcadelay[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 120 de secunde.");
	GetPlayerPos(playerid, pX, pY, pZ);
	while((vid<MAX_VEHICLES)&&(!Found)) {
		vid++;
		GetVehiclePos(vid, vX, vY, vZ);
		if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid))) {
			if(IsABike(vid) || GetVehicleModel(vid) == 448 || GetVehicleModel(vid) == 461 || GetVehicleModel(vid) == 462 || GetVehicleModel(vid) == 463 || GetVehicleModel(vid) == 468 || GetVehicleModel(vid) == 471 || GetVehicleModel(vid) == 521 || GetVehicleModel(vid) == 522 || GetVehicleModel(vid) == 523) return SCM(playerid, -1, "Please chose another vehicle this is invalid model.");
			if(!IsAnOwnableCar(vid)) return SCM(playerid, -1, "Poti tracta doar vehicule personale.");
			Found=1;
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) {
				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			} else {
				AttachTrailerToVehicle(vid, GetPlayerVehicleID(playerid));
				SetPlayerCheckpoint(playerid, 1444.9878,2349.5447,10.8203, 6);
				SCM(playerid, COLOR_PRINC, "Urmeaza checkpoint-ul de pe minimap.");
				CP[playerid] = 34;
			}
		}
	}	
	if(!Found) return SCM(playerid, -1, "There is no car near to you.");
	return 1; 
}
CMD:unfreeze(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /unfreeze [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	TogglePlayerControllable(id, 1);
	SendAdmins(COLOR_PRINC, "(/unfreeze) {ffffff}%s unfrozen %s.", 1, GetName(playerid), GetName(id));
	return 1; 
}
CMD:freeze(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /freeze [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	TogglePlayerControllable(id, 0);
	SendAdmins(COLOR_PRINC, "(/freeze)) {ffffff}%s frozen %s.", 1, GetName(playerid), GetName(id));
	return 1; 
}
CMD:getveh(playerid, params[]) {
	if (PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new plo,virtuall = GetPlayerVirtualWorld(playerid),interiorr = GetPlayerInterior(playerid),Float:plocx,Float:plocy,Float:plocz;
	if(sscanf(params, "i",plo)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /getveh [car id]");
	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetVehiclePos(plo,plocx,plocy+4, plocz);
	GetVehiclePos(plo, old_veh_pos[plo][0], old_veh_pos[plo][1], old_veh_pos[plo][2]);
	LinkVehicleToInterior(plo, interiorr);
	SetVehicleVirtualWorld(plo, virtuall);
	SendAdmins(COLOR_PRINC, "(/getveh) {ffffff}Admin %s teleported vehicle %d to him.", 1, GetName(playerid), plo);
	return 1; 
}
CMD:fillgascan(playerid, params[]) {
	if(PlayerInfo[playerid][pGasCan] < 1) return SCM(playerid, -1, "You don't have a gas can. Go to a 24/7 shop to buy one.");
	if(PlayerInfo[playerid][pFuel] >= 20) return SCM(playerid, -1, "Deja ai canistra plina.");
	if(!IsAtGasStation(playerid)) return SCM(playerid, -1, "You are not near a gas station.");
	new price = 20 * 50, bid;
	SCMf(playerid, COLOR_DARKPINK, "Ai platit $%s pentru a umple canistra cu benzina.", FormatNumber(price));
	GivePlayerCash(playerid, -price);
	gString[0] = (EOS);
	mysql_format(SQL, gString, 144, "UPDATE `users` SET `Fuel` = '20' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);
    if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[33][bEntranceX], BizzInfo[33][bEntranceY], BizzInfo[33][bEntranceZ])) bid = 33;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[42][bEntranceX], BizzInfo[42][bEntranceY], BizzInfo[42][bEntranceZ])) bid = 42;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[43][bEntranceX], BizzInfo[43][bEntranceY], BizzInfo[43][bEntranceZ])) bid = 43;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[44][bEntranceX], BizzInfo[44][bEntranceY], BizzInfo[44][bEntranceZ])) bid = 44;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[45][bEntranceX], BizzInfo[45][bEntranceY], BizzInfo[45][bEntranceZ])) bid = 45;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[46][bEntranceX], BizzInfo[46][bEntranceY], BizzInfo[46][bEntranceZ])) bid = 46;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[47][bEntranceX], BizzInfo[47][bEntranceY], BizzInfo[47][bEntranceZ])) bid = 47;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[48][bEntranceX], BizzInfo[48][bEntranceY], BizzInfo[48][bEntranceZ])) bid = 48;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[49][bEntranceX], BizzInfo[49][bEntranceY], BizzInfo[49][bEntranceZ])) bid = 49;
	else if(IsPlayerInRangeOfPoint(playerid, 25.0, BizzInfo[50][bEntranceX], BizzInfo[50][bEntranceY], BizzInfo[50][bEntranceZ])) bid = 50;	
	PlayerInfo[playerid][pFuel] = 20; BizzInfo[bid][bTill] += price;
	mysql_format(SQL, gString, 144, "UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d'", BizzInfo[bid][bTill], bid);
	mysql_tquery(SQL, gString);
	return 1; 
}	
CMD:pin(playerid, params[]) {
	ShowPlayerDialogEx(playerid, DIALOG_PIN, DIALOG_STYLE_LIST, "Manage Pin", "Add/change pin\nRemove pin", "Select", "Exit");
	return true;
}
CMD:engine(playerid, params[]) {
    new idcar = GetPlayerVehicleID(playerid),vehicle = GetVehicleModel(idcar) - 400,engine,lights,alarm,doors,bonnet,boot,objective;
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "Nu esti soferul unei masini.");
    if(Gas[idcar] == 0) return SCM(playerid, COLOR_WHITE, "This car is out of fuel.");
    if(IsABike(idcar)) return SCM(playerid, COLOR_LIGHTGREEN3, "You can't do that for bikes!");
    if(EngineDelay [playerid] > 0) return SCMf(playerid, COLOR_WHITE, "Poti folosi aceasta comanda peste %d secunde!", EngineDelay [playerid]);
    if(Refueling[playerid] == 0) {
 	    if(vehEngine[idcar] == 0) {
			vehEngine[idcar] = 1;
            GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(idcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
            SetPVarInt(playerid, "Engine", 1);
            if(Undercover[playerid] != 0) {
            	sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* An unknown hitman starts the engine of his %s.", aVehicleNames[vehicle]);
            }
            else {
            	sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s starts the engine of his %s.", GetName(playerid), aVehicleNames[vehicle]);
			}
    	}
  	  	else if(vehEngine[idcar] == 1) {
			vehEngine[idcar] = 0;
			GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
  	    	SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
        	SetPVarInt(playerid, "Engine", 0);
        	if(Undercover[playerid] != 0) {
        		sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* An unknown hitman stops the engine of his %s.", aVehicleNames[vehicle]);
        	}
        	else {
            	sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s stops the engine of his %s.", GetName(playerid), aVehicleNames[vehicle]);
			}
    	}
    	EngineDelay [playerid] = 5;
	}
	return 1; 
}
CMD:disarm(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /disarm [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	ResetPlayerWeaponsEx(id); ResetPlayerWeapons(id);
	SendAdmins(COLOR_PRINC, "(/disarm) {ffffff}%s disarmed %s.", 1, GetName(playerid), GetName(id));
	return 1; 
}
CMD:anno(playerid, params[]) {
	if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 10 de secunde.");	
	new text[128];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(sscanf(params, "s[128]",text)) return SCM(playerid, -1, "Syntax: /anno [text]");
	va_SendClientMessageToAll(COLOR_GENANNOUNCE, "((%s says: %s))",PlayerInfo[playerid][pNormalName],text);
	sanctiondelay[playerid] = 10;
	return 1; 
}	
CMD:hanno(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	va_SendClientMessageToAll(COLOR_SKEMA2, "((%s says: {ffffff}Daca aveti o nelamurire legata de joc nu ezitati sa folositi comanda </n>))",PlayerInfo[playerid][pNormalName]);
	return 1; 
}
CMD:aanno(playerid, params[]) {	 
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	va_SendClientMessageToAll(COLOR_SKEMA2, "((%s says: {ffffff}Daca aveti vreo problema legata de joc nu ezitati sa folositi comanda </report>))",PlayerInfo[playerid][pNormalName]);
	return 1; 
}
CMD:forumanno(playerid, params[]) {	 
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	va_SendClientMessageToAll(COLOR_SKEMA2, "((%s says: {ffffff}In caz ca nu aveti, va asteptam cu un cont pe forumul nostru <redtimes.eu/forum>))",PlayerInfo[playerid][pNormalName]);
	return 1; 
}
CMD:ianno(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	va_SendClientMessageToAll(COLOR_SKEMA2, "((AdmBot says: {ffffff}Daca ai o problema legata de joc, poti contacta instagramul <@rovwk>}, vei primi foarte repede ajutor!))",PlayerInfo[playerid][pNormalName]);
	return 1; 
}
CMD:vanno(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	va_SendClientMessageToAll(COLOR_SKEMA2, "((AdmBot says: {ffffff}Va recomandam sa va instalati clientul 'sampvoice', pentru mai multe detalii",PlayerInfo[playerid][pNormalName]);
	va_SendClientMessageToAll(COLOR_SKEMA2, "{ffffff} va recomandam sa accesati pe web 'http://voice.redtimes.eu'))",PlayerInfo[playerid][pNormalName]);
	return 1; 
}
CMD:pay(playerid, params[]) {
	new id, moneys, playermoney;
	if(delaypay[playerid] > 0) return SCM(playerid, -1, "Ai folosit recent aceasta comanda, incearca peste cateva secunde.");
	if(sscanf(params, "ui",id,moneys)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /pay [name/playerid] [money]");
	if(moneys < 1 || moneys > 500000) return SCM(playerid, COLOR_WHITE, "Suma transferata poate fi intre $1 si $500,000.");
	if(id == playerid) return SCM(playerid, COLOR_WHITE, "You can't /pay yourself.");
	if(PlayerInfo[playerid][pConnectTime] < 3) return SCM(playerid, COLOR_WHITE, "Ai nevoie de minim 3 ore pentru a putea folosi comanda /pay.");
    if(id != INVALID_PLAYER_ID) {
		if (GetDistanceBetweenPlayers(playerid, id) < 5.0) {
			if(Spectate[id] != -1) return SCM(playerid, COLOR_WHITE, "This player is not near you.");
			playermoney = GetPlayerCash(playerid);
			if (moneys > 0 && playermoney >= moneys) {
				GivePlayerCash(playerid, -moneys);
				GivePlayerCash(id, moneys);
				SCMf(id, -1, "%s has paid you $%s.",PlayerInfo[playerid][pNormalName],FormatNumber(moneys));
				sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "%s takes out $%s in cash, and hands it to %s.", GetName(playerid), FormatNumber(moneys), GetName(id));
				delaypay[playerid] = 30;						
			}	
		}	
    }		
	return 1; 
}
CMD:number(playerid, params[]) {
	if(PlayerInfo[playerid][pPhoneBook] < 1) return SCM(playerid, -1, "Nu ai o carte de telefon.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /number [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Player not connected.");
	if(PlayerInfo[id][pPnumber] == 0) SCMf(playerid, COLOR_GREY, "Name: %s | Number: None", GetName(id));
	else SCMf(playerid, COLOR_GREY, "Name: %s | Number: %d", GetName(id), PlayerInfo[id][pPnumber]);
	return 1; 
}
CMD:me(playerid, params[]) {
	new result[128];
    if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(sscanf(params, "s[128]",result)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /me [action]");
	sendNearbyMessage(playerid, 12.0, COLOR_PURPLE, "* (/me) %s %s", GetName(playerid), result);	
	return 1; 
}
CMD:s(playerid, params[]) {
	new string[128],result[128];
    if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(sscanf(params, "s[128]",result)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /s [message]");
	if(PlayerInfo[playerid][pVIP] == 0) sendNearbyMessage(playerid, 30.0, -1, "%s shouts: %s!", PlayerInfo[playerid][pNormalName], result);
	if(PlayerInfo[playerid][pVIP] == 1) sendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "VIP %s shouts: %s!", GetName(playerid), result);
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pVIP] < 1) sendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "((Admin %s says: %s))", GetName(playerid), result); 
	if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pVIP] >= 1) sendNearbyMessage(playerid, 30.0, COLOR_YELLOW, "((Admin %s says: %s))", GetName(playerid), result); 
	format(string, sizeof(string), "(shouts) \"%s!\"", params);
	SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 30.0, 10000);
	return 1; 
}
CMD:unrentroom(playerid, params[]) {
    if(PlayerInfo[playerid][pSleeping] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "You sleeping, use /sleep first.");
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_WHITE, "{B8DBFF}You own this house.");
	if(PlayerInfo[playerid][pRented] == -1) return SCM(playerid, COLOR_WHITE, "{B8DBFF}You don't have rent a house.");
	PlayerInfo[playerid][pPhousekey] = 999;
	OnPropTextdrawUpdate(1,PlayerInfo[playerid][pRented]);
	PlayerInfo[playerid][pRented] = -1;
	SendClientMessage(playerid, COLOR_DARKPINK, "House unrented!");
	pUpdateInt(playerid, "House", PlayerInfo[playerid][pPhousekey]); pUpdateInt(playerid, "Rented", PlayerInfo[playerid][pRented]);
	return 1; 
}
CMD:up(playerid, params[]) {
	if (PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPosEx(playerid, slx, sly, slz+5.0);
	SCM(playerid, -1, "Your position has been changed.");
	return 1; 
}
CMD:down(playerid, params[]) {
	if (PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPosEx(playerid, slx, sly, slz-3.0);
	SCM(playerid, -1, "Your position has been changed.");
	return 1; 
}
CMD:ff(playerid, params[]) {
	if (PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SetPlayerPosEx(playerid, slx+6.0, sly+6.0, slz);
	SCM(playerid, -1, "Your position has been changed.");
	return 1; 
}
CMD:time(playerid, params[]) {
	if(delaypay[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 30 de secunde.");
	if(PlayerInfo[playerid][pSleeping] == 1) return true;
	new hour,minute,second;
	gettime(hour,minute,second);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}The current time is %d:%s%d (%d seconds).", hour, (minute < 10) ? ("0") : (""), minute, second);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Connected for %d seconds.", PlayerInfo[playerid][pPayDay]);
	sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s raises her hand and looks down at her watch.", PlayerInfo[playerid][pNormalName]);
	if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
	delaypay[playerid] = 30;
	return 1; 
}
CMD:lockhouse(playerid, params[]) {
	if(PlayerInfo[playerid][pPhousekey] == 999) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		new x = PlayerInfo[playerid][pPhousekey], str[256];
		if(HouseInfo[x][hLock] == 0) {
			HouseInfo[x][hLock] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "House locked.");
		}
		else {
			HouseInfo[x][hLock] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "House unlocked.");
		}
		mysql_format(SQL,str,sizeof(str),"UPDATE `houses` SET `Lockk`='%d' WHERE `ID`='%d'", HouseInfo[x][hLock], x);
		mysql_tquery(SQL,str);
		OnPropTextdrawUpdate(1, x);
	}
   	return 1; 
   }
CMD:lockbusiness(playerid, params[]) {
	if(PlayerInfo[playerid][pPbiskey] != 255) {
		new x = PlayerInfo[playerid][pPbiskey], str[256];
		if(BizzInfo[x][bLocked] == 0) {
			BizzInfo[x][bLocked] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "Business locked.");
		}
		else {
			BizzInfo[x][bLocked] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "Business unlocked.");
		}
		mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Locked`='%d' WHERE `ID`='%d'", BizzInfo[x][bLocked], x);
		mysql_tquery(SQL,str);
		OnPropTextdrawUpdate(2, x);
   	}
   	return 1; 
   }
CMD:usedrugs(playerid, parmas[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda cand te afli intr-un vehicul.");
	if(UsingDrugs[playerid] == 1) return SCM(playerid, -1, "You are already taking drugs.");
	if(PlayerInfo[playerid][pDrugs] < 1) return SCM(playerid, -1, "You don't have drugs.");
	if(DrugTimer[playerid] != 0) return SCM(playerid, -1, "Ai folosit recent aceasta comanda.");
	TogglePlayerControllable(playerid, 0);
	PlayerStoned[playerid] += 2;
   	sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s took some drugs out of his pocket.", GetName(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "Stai nemiscat 30 de secunde pentru ca drogurile sa-si faca efectul.");
	UsingDrugs[playerid] = 1; 	
	LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
    drug[playerid] = defer DrugEffectGone(playerid);
    if(quest_type[playerid] == quest_drog) quest_finish(playerid);
	return 1; 
}

CMD:getdrugs(playerid, params[]) {
	new dpoints = PlayerInfo[playerid][pDrugs], points, totaldrugs = dpoints + points, fid = PlayerInfo[playerid][pMember];
	if(sscanf(params, "i", points)) return SCM(playerid, -1, "Syntax: /getdrugs [amount]");
	if(points < 1 || points > 100) return SCM(playerid, -1, "Minim 1 drug, maxim 100 drugs.");
	if(totaldrugs > 99) return SCM(playerid, -1, "You can't have that amount of drugs.");
	if(PlayerInfo[playerid][pMember] < 1) {
		SetPlayerCheckpoint(playerid, 2130.2593,-1700.1193,15.0784, 4.0);
		CP[playerid] = 43;
		SCM(playerid, -1, "Nu te afli in locatia potrivita, ti-am setat un checkpoint.");	
		return true;
	}
	if(IsPlayerInRangeOfPoint(playerid, 50.0, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual]) {
		new money = points * 500;
		if(GetPlayerCash(playerid) < money) return SCM(playerid, -1, "You don't have enough money.");
		if(DynamicFactions[fid][fDrugs] < points) return SCM(playerid, -1, "Not enough drugs in faction safe.");
		DynamicFactions[fid][fDrugs] -= points; DynamicFactions[fid][fBank] += money;
		PlayerInfo[playerid][pDrugs] += points; pUpdateInt(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
		GivePlayerCash(playerid, -money);
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}Ai cumparat %d gramde de droguri pentru $%s.", points, FormatNumber(money));
		mysql_format(SQL, gString, 256, "UPDATE factions SET `Bank`='%d',`Drugs`='%d' WHERE `ID`='%d' LIMIT 1", DynamicFactions[fid][fBank], DynamicFactions[fid][fDrugs], fid);
		mysql_tquery(SQL, gString);
	}		
	return 1; 
}

CMD:gotohouse(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new housenum;
	if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /gotohouse [house id]");
	if(housenum < 0 || housenum > housess) return SendClientMessage(playerid, COLOR_WHITE, "Invalid house id.");
	SendAdmins(COLOR_PRINC,"(/gotohouse) {ffffff} %s teleported to house %d.",1, PlayerInfo[playerid][pNormalName],housenum);
	SetPlayerInterior(playerid,HouseInfo[housenum][hInterior]);
	SetPlayerPosEx(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
	PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInterior];
	PlayerInfo[playerid][pLocal] = housenum;
	InHouse[playerid] = housenum;
	SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hVirtual]);
	if(strlen(housestring[InHouse[playerid]]) > 0) {
		StopAudioStreamForPlayer(playerid);
		PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
	}
	return 1; 
}
alias:gotobusiness("gotobiz")
CMD:gotobusiness(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new housenum;
	if(sscanf(params, "d",housenum)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /gotobusiness [biz id]");
	if(housenum < 0 || housenum > 51) return SendClientMessage(playerid, COLOR_WHITE, "Invalid biz id.");
	if(housenum == 52 || housenum == 28) return SCM(playerid, -1, "Invalid id.");
	SetPlayerPosEx(playerid,BizzInfo[housenum][bEntranceX],BizzInfo[housenum][bEntranceY],BizzInfo[housenum][bEntranceZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SendAdmins(COLOR_PRINC,"(/gotobiz){ffffff} %s teleported to business %d.",1, PlayerInfo[playerid][pNormalName],housenum);
	return 1; 
}
CMD:gotohq(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new hqid;
	if(sscanf(params, "d", hqid)) {
		SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /gotohq [faction id]");
		SCM(playerid, COLOR_GREY, "HQ ID: LSPD (1) FBI (2) National Guard (3) Los Vagos (4) Grove Street (5) Los Aztecas (6) News Reporters (9)");
		SCM(playerid, COLOR_GREY, "HQ ID: Ballas (10) Hitman (11) Taxi (13) Paramedic (14) Tow Car Company (15) Uber (16)");
		return true;
	}
	if(hqid < 1 || hqid > 16 || hqid == 7 || hqid == 12) return SCM(playerid, -1, "Invalid hq id.");
	SetPlayerPosEx(playerid, DynamicFactions[hqid][fceX], DynamicFactions[hqid][fceY], DynamicFactions[hqid][fceZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SendAdmins(COLOR_PRINC, "(/gotohq) {ffffff}%s teleported to hq %d.", 1, PlayerInfo[playerid][pNormalName], hqid);
	return 1; 
}

CMD:buylevel(playerid, params[])
{
	new nxtlevel = PlayerInfo[playerid][pLevel], costlevel, expamount; 

	if(PlayerInfo[playerid][pLevel] == 1 || PlayerInfo[playerid][pLevel] == 2 || PlayerInfo[playerid][pLevel] == 3 || PlayerInfo[playerid][pLevel] == 4) 
	{
	    expamount = nxtlevel*2;
	    costlevel = nxtlevel*4000;
	}
	
	else if(PlayerInfo[playerid][pLevel] >= 5) 
	{
	    expamount = nxtlevel*levelexp;
	    costlevel = nxtlevel*levelcost;
	}	

	if(GetPlayerCash(playerid) < costlevel) return SCM(playerid, -1, "Nu ai destui bani.");
	if(PlayerInfo[playerid][pExp] < expamount) return SCM(playerid, -1, "Nu ai destule puncte de respect.");

	PlayerInfo[playerid][pLevel] ++;
	pUpdateInt(playerid, "Level", PlayerInfo[playerid][pLevel]);	

	GivePlayerCash(playerid, -costlevel);
	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);

	PlayerInfo[playerid][pExp] -= expamount;
	pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);

	SCMf(playerid, COLOR_SKEMA2, "(LevelUp) {ffffff}acum ai level %d.", PlayerInfo[playerid][pLevel]);

	if(PlayerInfo[playerid][pExp] > 0) return true; 

	else PlayerInfo[playerid][pExp] = 0;

	checkLevelProgress(playerid);

	return true;
}	

CMD:aaa2(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	SetPlayerVirtualWorld(playerid, 2); SetPlayerInterior(playerid, 0); SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125); 
	SCM(playerid, -1, "Welcome to LV airport (in virtual world).");
	SendAdmins(COLOR_PRINC, "(/aaa2) {ffffff}%s teleported in virtual 2", 1, GetName(playerid));
	return 1; 
}
CMD:aaa3(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	SetPlayerVirtualWorld(playerid, 1337); SetPlayerInterior(playerid, 0); SetPlayerPosEx(playerid, 400.4448,2502.6475,16.4844);
	SendAdmins(COLOR_PRINC, "(/aaa3) {ffffff}%s teleported in virtual 1337", 1, GetName(playerid));
	return 1; 
}	
CMD:e(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1) {
        new result[128];
        if(sscanf(params, "s[128]", result)) return SCM(playerid, -1, "Syntax: /e [message]");
        if(PlayerInfo[playerid][pAdmin] >= 1) SendAdmins(0xC56D30FF, "(%d) Admin %s: %s", 1, playerid, GetName(playerid), result), SendHelpers(0xC56D30FF, "(%d) Admin %s: %s", 1, playerid, GetName(playerid), result);
        else if(PlayerInfo[playerid][pHelper] >= 1) SendAdmins(0xC56D30FF, "(%d) Helper %s: %s", 1, playerid, GetName(playerid), result), SendHelpers(0xC56D30FF, "(%d) Helper %s: %s", 1, playerid, GetName(playerid), result);
    }
    return 1; 
}
alias:makeadmin("setadmin")
CMD:a(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new result[128];
	if(sscanf(params, "s[128]",result)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /a [message]");
	if(PlayerInfo[playerid][pAdmin] == 1) SendAdmins(COLOR_ADMCHAT, "(%d) Admin Level 1 %s: %s", 1, playerid, PlayerInfo[playerid][pNormalName], result);
	if(PlayerInfo[playerid][pAdmin] == 2) SendAdmins(COLOR_ADMCHAT, "(%d) Admin Level 2 %s: %s", 1, playerid, PlayerInfo[playerid][pNormalName], result);
	if(PlayerInfo[playerid][pAdmin] == 3) SendAdmins(COLOR_ADMCHAT, "(%d) Admin Level 3 %s: %s", 1, playerid, PlayerInfo[playerid][pNormalName], result);
	if(PlayerInfo[playerid][pAdmin] == 4) SendAdmins(COLOR_ADMCHAT, "(%d) Admin Level 4 %s: %s", 1, playerid, PlayerInfo[playerid][pNormalName], result);
	if(PlayerInfo[playerid][pAdmin] == 5) SendAdmins(COLOR_ADMCHAT, "(%d) Admin Level 5 %s: %s", 1, playerid, PlayerInfo[playerid][pNormalName], result);
	if(PlayerInfo[playerid][pAdmin] == 6) SendAdmins(COLOR_ADMCHAT, "(%d) co-owner %s: %s", 1, playerid, PlayerInfo[playerid][pNormalName], result);
	if(PlayerInfo[playerid][pAdmin] == 7) SendAdmins(COLOR_ADMCHAT, "(%d) owner %s: %s", 1, playerid, PlayerInfo[playerid][pNormalName], result);
	return 1; 
}
CMD:rc(playerid, params[]) {
	if(PlayerInfo[playerid][pReborn] < 1) return SCM(playerid, -1, AdminOnly);
	new result[128];
	if(sscanf(params, "s[128]",result)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /rchat [message]");
	if(PlayerInfo[playerid][pReborn] == 1) SendAdmins(COLOR_PURPLE, "(%d) reborned %s: %s", 1, playerid, PlayerInfo[playerid][pNormalName], result);
	return 1; 
}
CMD:cw(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You need to be in vehicle.");
	new message[128];
	gString[0] = (EOS);
	if(sscanf(params, "s[128]", message)) return SCM(playerid, -1, "Syntax: /cw [message]");
	format(gString, 128, "(Car Whisper) %s: %s", GetName(playerid), message);
	foreach(new i : Player) { if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) SCM(i, COLOR_YELLOW, gString); }
	return 1; 
}
CMD:skydive(playerid, params[]) {
	if (PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	GetPlayerPos(playerid, rrx, rry, rrz);
	GivePlayerWeaponEx(playerid, 46, 0);
	SetPlayerPosEx(playerid,rrx, rry, rrz+1500);
	SendAdmins(COLOR_PRINC, "(/flymode) {ffffff}%s is now in SkyDive", 1, GetName(playerid));
	return 1; 
}
CMD:live(playerid, params[]) {
	new hour, minute, second, giveplayerid;
	gettime(hour, minute, second);
	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, -1, "You are not a news reporter.");
	if(OnDuty[playerid] < 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece nu esti on duty.");
	if(hour >= 01 && hour < 08) return SCM(playerid, -1, "Nu poti folosi aceasta comanda intre orele 01 - 09.");
	if(sscanf(params, "u", giveplayerid)) return SCM(playerid, -1, "Syntax: /live [name/playerid]");
	if(!IsPlayerConnected(giveplayerid)) return SCM(playerid, -1, "Player not connected.");
	if(!IsANewsCar(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, -1, "You are not in a news van/news chopper.");
	if(!IsANewsCar(GetPlayerVehicleID(giveplayerid))) return SendClientMessage(playerid, -1, "That player is not in a news van/news chopper.");	
	if(giveplayerid == playerid) return SCM(playerid, -1, "You can't invite yourself to a live interview.");
	if(TalkingLive[giveplayerid] != 0) return SCM(playerid, -1, "This player is already in a live interview.");
	if(GetDistanceBetweenPlayers(playerid, giveplayerid) > 5.0) return SCM(playerid, -1, "This player is not near you.");
	SCMf(playerid, COLOR_LIGHTBLUE, "You invited %s to take a live interview.", GetName(giveplayerid));
	SCMf(giveplayerid, COLOR_LIGHTBLUE, "%s has invited you to take a live interview. (to accept the invitation, type '/accept live %d').", GetName(playerid), playerid);
	LiveOffer[giveplayerid] = playerid;
	return 1; 
}
CMD:endlive(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, -1, "You are not a news reporter.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SCM(playerid, -1, "Syntax: /endlive [name/playerid]");
	if(TalkingLive[giveplayerid] < 1) return SCM(playerid, -1, "This player don't have a live.");
	SCMf(playerid, COLOR_LIGHTBLUE, "You have stopped %s live interview!", GetName(giveplayerid));
	SCMf(giveplayerid, COLOR_LIGHTBLUE, "%s has stopped the live interview!", GetName(playerid));
	TogglePlayerControllable(playerid, 1); TogglePlayerControllable(giveplayerid, 1);
	TalkingLive[giveplayerid] = 0; TalkingLive[playerid] = 0;
	return 1; 
}
CMD:ticket(playerid, params[]) {
	if(GetPlayerCash(playerid) < 100000) return SCM(playerid, -1, "Acel player nu are suma respectiva de bani.");
	if(!IsACop(playerid)) return SCM(playerid, -1, "You are not a cop.");
	if(OnDuty[playerid] != 1) return SCM(playerid, -1, "You are not on duty.");
	new giveplayerid, money;
	if(sscanf(params, "ui", giveplayerid, money)) return SCM(playerid, -1, "Syntax: /ticket [name/playerid] [money]");
	if(!IsPlayerConnected(giveplayerid)) return SCM(playerid, -1, "Invalid id.");
	if(PlayerInfo[giveplayerid][pLevel] < 4) return SCM(playerid, -1, "Acel player nu are minim level 4.");
	if(giveplayerid == playerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
	if(money < 1 || money > 25000000) return SCM(playerid, -1, "Ticket money can't be below $1 or higher then $25,000,000.");
	if(GetDistanceBetweenPlayers(playerid, giveplayerid) > 8.0) return SCM(playerid, -1, "This player is not near you.");
	sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s writes up a ticket, and hands it to %s.", GetName(playerid), GetName(giveplayerid));
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have issued %s a ticket costing $%d.", GetName(giveplayerid), money);
	SCMf(giveplayerid, COLOR_GENANNOUNCE, "%s has issued you a ticket costing $%d - /accept ticket %d to pay the fine.", GetName(playerid), money, playerid);
	TicketOffer[giveplayerid] = playerid; TicketMoney[giveplayerid] = money;
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Raport6` = `Raport6` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);
	return 1; 
}
CMD:help(playerid, params[]) return ShowPlayerDialogEx(playerid,DIALOG_HELP,DIALOG_STYLE_LIST, "SERVER: Commands", "General\nChat\nFactions\nAnimations\nHousess\nBusinesses\nVehicles\nBank\nRob\nHelpers\nPremium\nVIP\nLeaders\nLegendary Account\nTranscendent car\nReborn Info\nPersonal Pet", "Select","Exit");
CMD:home(playerid, params[]) {
    if(PlayerInfo[playerid][pPhousekey] != 999) {
		if(arecpactiv(playerid)) return true;
    	new h;
    	h = PlayerInfo[playerid][pPhousekey];
    	SetPlayerCheckpoint(playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 5.0);
		CP[playerid] = 43;
		SendClientMessage(playerid, COLOR_WHITE, "A checkpoint has been set to your house.");
	}	
	return 1; 
}
CMD:stopanim(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command in a vehicle.");
	if(UsingDrugs[playerid] == 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece te droghezi.");
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
 	ClearAnimations(playerid);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
 	PlayerHandsup[playerid] = 0;
    return 1; 
}

CMD:ta(playerid, params[]) { 
	if(!IsACop(playerid)) return SendClientMessage(playerid, -1, "Nu esti politist.");
	if(!OnDuty[playerid]) return SendClientMessage(playerid, -1, "Nu esti la datorie.");
	switch(tazer[playerid]) {
		case 0: {
			tazer[playerid] = 1;
			GivePlayerWeaponEx(playerid, 23, 20);
		}
		case 1: {
			tazer[playerid] = 0;
			GivePlayerWeaponEx(playerid, 24, 999);
		}
	}
	sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s.", GetName(playerid), (tazer[playerid]) ? ("equiped his tazer") : ("put his tazer back"));
	return true;
}
alias:ta("tazer")
CMD:cuff(playerid, params[]) {
	if(!IsACop(playerid)) return SCM(playerid, -1, "You are not a cop.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SCM(playerid, -1, "Syntax: /cuff [name/playerid]");
	if(!IsPlayerConnected(giveplayerid)) return SCM(playerid, -1, "Player not connected.");
	if(OnDuty[playerid] != 1) return SCM(playerid, -1, "You are not on duty.");
	if(IsACop(giveplayerid)) return SCM(playerid, -1, "You can't cuff cops.");
	if(giveplayerid == playerid) return SCM(playerid, -1, "You can't cuff yourself.");
 	if(PlayerHandsup[giveplayerid] < 1 && !IsPlayerInAnyVehicle(giveplayerid)) return SCM(playerid, -1, "You can't cuff a player who don't have hands up.");
	if(PlayerCuffed2[giveplayerid] > 0) return SCM(playerid, -1, "This player is already cuffed.");
	if(GetDistanceBetweenPlayers(playerid, giveplayerid) > 8.0) return SCM(playerid, -1, "This player is not near you.");
	if(IsPlayerInAnyVehicle(giveplayerid)) TogglePlayerControllable(giveplayerid, 0);
	SCMf(giveplayerid, -1, "* You were Cuffed by %s, till uncuff.", GetName(playerid));
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}* You Cuffed %s, till uncuff.", GetName(giveplayerid));
	sendNearbyMessage(playerid, 3.0, COLOR_PURPLE, "* %s Hand Cuffs %s, so he wont go anywhere.", GetName(playerid), GetName(giveplayerid));
	GameTextForPlayer(giveplayerid, "~r~~h~Cuffed", 2500, 3);
	PlayerCuffed2[giveplayerid] = 1;
	SetPlayerAttachedObject(giveplayerid, 1, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
    SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
	return 1; 
}
CMD:uncuff(playerid, params[]) {
	if(!IsACop(playerid)) return SCM(playerid, -1, "You are not a cop.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SCM(playerid, -1, "Syntax: /uncuff [name/playerid]");
	if(!IsPlayerConnected(giveplayerid)) return SCM(playerid, -1, "Player not connected.");
	if(giveplayerid == playerid) return SCM(playerid, -1, "You can't uncuff yourself.");
	if(GetDistanceBetweenPlayers(playerid, giveplayerid) > 8.0) return SCM(playerid, -1, "This player is not near you.");
	if(PlayerCuffed2[giveplayerid] < 1) return SCM(playerid, -1, "This player is not cuffed.");
	if(IsPlayerInAnyVehicle(giveplayerid)) TogglePlayerControllable(giveplayerid, 1);
	SCMf(giveplayerid, -1, "* You were Uncuffed by %s.", GetName(playerid));
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}* You Uncuffed %s.", GetName(giveplayerid));
	GameTextForPlayer(giveplayerid, "~g~Uncuffed", 2500, 3);
	PlayerCuffed2[giveplayerid] = 0;
	SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
 	RemovePlayerAttachedObject(giveplayerid, 1);
	return 1; 
}
CMD:news(playerid, params[]) {
 	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, -1, "Nu faci parte din News Reporters.");
	if(OnDuty[playerid] < 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece nu esti on duty."); 	
 	if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Please wait 60 seconds.");
 	new result[128], hour, minute, second;
 	gettime(hour, minute, second);
	if(hour == 01 || hour == 02 || hour == 03 || hour == 04 || hour == 05 || hour == 06 || hour == 07 || hour == 08) return SCM(playerid, -1, "Nu poti folosi aceasta comanda intre orele 01 - 09."); 	
 	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
 	if(sscanf(params, "s[128]", result)) return SCM(playerid, -1, "Syntax: /news [message]");
 	if(!IsANewsCar(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "You are not in a news van/news chopper.");
 	gString[0] = (EOS);
 	format(gString, 256, "NR %s: %s", GetName(playerid), result);
 	OOCNews(COLOR_ORANGE, gString);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Raport7` = `Raport7` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", ""); 	
 	delayfactions[playerid] = 60;
	return 1; 
}
CMD:startq(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, -1, "Nu faci parte din News Reporters.");
	if(TalkingLive[playerid] < 1) return SCM(playerid, -1, "Nu esti in live.");
	if(QuestionsOn == 1) return SendClientMessage(playerid, COLOR_WHITE, "Deja sunt activate intrebarile.");
	QuestionsOn = 1;
	SendClientMessage(playerid, COLOR_DARKPINK, "Acum jucatorii pot pune intrebari folosind /question.");	
	return 1; 
}	
CMD:jobpack(playerid, params[]) {
	if(gettime() < GetPVarInt(playerid, "sprayDeelay")) return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda acum!");
	SetPVarInt(playerid, "sprayDeelay", gettime() + 5);
	if(PlayerInfo[playerid][pMoneyBag] < 1) return SCM(playerid, -1, "Nu ai un JobPack, il poti achizitiona din shop");
	SetPlayerAttachedObject(playerid, 0, 3026, 1, -0.166513, -0.078744, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	SendClientMessage(playerid, COLOR_DARKPINK, "JobPack-ul a fost atasat cu succes pe spatele tau.");
	SendClientMessage(playerid, COLOR_DARKPINK, "Cu acest ghiozdan castigul tau la joburi va fi marit considerabil.");
	return 1; 
}
CMD:penis(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, -1, AdminOnly);
	SetPlayerAttachedObject(playerid, 0, 19086, 1, -0.115055, 0.001037, 0.000000, 79.387626, 80.367675, 0.000000, 1.000000, 1.000000, 1.000000); // ChainsawDildo1 - pula
	return 1; 
}
CMD:santa(playerid, params[]) {
	if(PlayerInfo[playerid][pSantaHat] < 1) return SCM(playerid, -1, AdminOnly);
	if(santadelay[playerid] >= 1) return SCMf(playerid, -1, "Poti folosi aceasta comanda peste %d secunde", santadelay[playerid]);
	santadelay[playerid] = 60;
	SetPlayerAttachedObject(playerid, 0, 19065, 2, 0.121128, 0.023578, 0.001139, 222.540847, 90.773872, 211.130859, 1.098305, 1.122310, 1.106640); // SantaHat
	SendClientMessage(playerid, COLOR_DARKPINK, "santahat status: ON");
	return 1; 
}
CMD:stopq(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, -1, "Nu te afli in News Reporters.");
	if(QuestionsOn == 0) return SendClientMessage(playerid, COLOR_WHITE, "Intrebarile nu sunt activate.");
	QuestionsOn = 0;
	SendClientMessage(playerid, COLOR_DARKPINK, "Ai dezactivat intrebarile.");
	return 1; 
}
CMD:question(playerid, params[]) {
	new message[128];
	if(sscanf(params, "s[128]",message)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /question [message]");
	if(QuestionsOn == 0) return SCM(playerid, COLOR_WHITE, "Public questions are disabled.");
	if(strcmp(LiveQuestion[playerid], "NULL", true)) return SCM(playerid, COLOR_WHITE, "You can use this command once per 5 minutes.");
	gString[0] = (EOS);
	format(gString, 144, "Q from %s[%d]: %s", PlayerInfo[playerid][pNormalName], playerid, message);
	foreach(new i : Reporters) {
		if(PlayerInfo[i][pMember] == 9)	SendClientMessage(i, COLOR_PRINC, gString); 
	}
	format(gString, 144, "Intrebarea '%s' a fost trimisa reporterilor.",message);
	SendSplitMessage(playerid, COLOR_PRINC, gString);
	format(LiveQuestion[playerid], 128, message);
	TimerQuestion[playerid] = 300;
	return 1; 
}
CMD:aq(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 9) return SCM(playerid, -1, "Nu te afli in News Reporters.");
	if(TalkingLive[playerid] < 1) return SCM(playerid, -1, "Nu esti live.");
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /aq [name/playerid]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Player not connected.");
	if(!strcmp(LiveQuestion[id], "NULL", true)) return SCM(playerid, -1, "This player don't have a question.");
	va_SendClientMessageToAll(COLOR_LIGHTGREEN, "Intrebare de la %s: %s", GetName(id), LiveQuestion[id]);
	format(LiveQuestion[id], 128, "NULL");
	TimerQuestion[id] = -1;
	return 1; 
}	
CMD:ph(playerid, params[]) {
	new model = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(model == 448 || model == 461 || model == 462 || model == 463 || model == 468 || model == 471 || model == 481 || model == 509 || model == 510 || model == 521 || model == 522 || model == 523 || model == 581 || model == 586) {
		if(HaveHelmet[playerid] == 0) {
			HaveHelmet[playerid] = 1;
			SetPlayerAttachedObject(playerid, 5, 18645, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1);
			SCM(playerid, -1, "Ti-ai pus casca.");
		}
		else return SendClientMessage(playerid, COLOR_WHITE, "You have already an helmet.");
	}
	return 1; 
}
CMD:removehelmet(playerid, params[]) {
	if(HaveHelmet[playerid] == 1) {
		HaveHelmet[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 5);
		SCM(playerid, -1, "Ti-ai scos casca.");
	}
	return 1; 
}
CMD:frisk(playerid, params[]) {
    new giveplayerid, text1[20],text2[20], text4[20], Player_Weapons[13], Player_Ammos[13], i, weaponName[64];
    if(sscanf(params, "u",giveplayerid)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /frisk [name/playerid]");
	if(IsACop(playerid)) {
		if(giveplayerid != INVALID_PLAYER_ID) {
		    if (GetDistanceBetweenPlayers(playerid, giveplayerid) < 8.0) {
			    if(giveplayerid == playerid) return SendClientMessage(playerid, COLOR_WHITE, "You can't frisk yourself.");
			    if(PlayerInfo[giveplayerid][pDrugs] > 0) { text1 = "| Drugs."; } else { text1 = "| Empty Pocket."; }
			    if(PlayerInfo[giveplayerid][pMats] > 0) { text2 = "| Materials."; } else { text2 = "| Empty Pocket."; }
			    if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text4 = "| Phone Book."; } else { text4 = "| Empty Pocket."; }
			    SCMf(playerid, COLOR_PRINC, ">> {ffffff}** Items with {B8DBFF}%s{FFFFFF} **", PlayerInfo[giveplayerid][pNormalName]);
		        SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s, Grams:%d", text1,PlayerInfo[giveplayerid][pDrugs]);
				SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s, Materials:%d", text2,PlayerInfo[giveplayerid][pMats]);
				SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s.", text4);
                for(i = 1;i <= 12;i++)
                {
                    GetPlayerWeaponData(giveplayerid,i,Player_Weapons[i],Player_Ammos[i]);
                    if(Player_Weapons[i] != 0) {
						GetWeaponName(Player_Weapons[i],weaponName,64);
                        SCMf(playerid, -1,"{B8DBFF}* %s, Gun:{FFFFFF} %s{B8DBFF}, Ammo:{FFFFFF} %d",PlayerInfo[giveplayerid][pNormalName],weaponName,Player_Ammos[i]);
                    }
                }
				sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s has frisked %s for any illegal items.", PlayerInfo[playerid][pNormalName] ,PlayerInfo[giveplayerid][pNormalName]);
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "This player is not near you.");
		}
        else return SendClientMessage(playerid, COLOR_WHITE, "Player not connected.");
	}
    return 1; 
}
CMD:bat(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /bat [1-2]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /bat [1-2]");
	}
	return 1; 
}
CMD:signal(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /signal [1-2]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "POLICE", "CopTraf_Come", 4.0, 0, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "POLICE", "CopTraf_Stop", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /signal [1-2]");
	}
	return 1; 
}
CMD:nobreath(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /nobreath [1-3]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /nobreath [1-3]");
	}
	return 1; 
}
CMD:fallover(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /fallover [1-3]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0);
    	case 2: ApplyAnimation(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0);
     	case 3: ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /fallover [1-3]");
	}
	return 1; 
}
CMD:pedmove(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /pedmove [1-26]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1);
    	case 2: ApplyAnimation(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimation(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimation(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimation(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimation(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimation(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimation(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1);
     	case 9: ApplyAnimation(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1);
      	case 10: ApplyAnimation(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1);
       	case 11: ApplyAnimation(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimation(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimation(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimation(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimation(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimation(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1);
	    case 17: ApplyAnimation(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1);
	    case 18: ApplyAnimation(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1);
	    case 19: ApplyAnimation(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1);
	    case 20: ApplyAnimation(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1);
	    case 21: ApplyAnimation(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1);
	    case 22: ApplyAnimation(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1);
	    case 23: ApplyAnimation(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1);
     	case 24: ApplyAnimation(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1);
  		case 25: ApplyAnimation(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1);
  		case 26: ApplyAnimation(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /pedmove [1-26]");
	}
	return 1; 
}
CMD:getjiggy(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /getjiggy [1-9]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0);
      	case 4: ApplyAnimation(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0);
       	case 5: ApplyAnimation(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0);
        case 6: ApplyAnimation(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0);
       	case 7: ApplyAnimation(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0);
        case 8: ApplyAnimation(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0);
        case 9: ApplyAnimation(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /getjiggy [1-9]");
	}
	return 1; 
}
CMD:stripclub(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /stripclub [1-2]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "STRIP", "PLY_CASH", 4.0, 0, 0, 0, 0, 0);
       	case 2: ApplyAnimation(playerid, "STRIP", "PUN_CASH", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /stripclub [1-2]");
	}
	return 1; 
}
CMD:dj(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /dj [1-4]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0);
     	case 4: ApplyAnimation(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /dj [1-4]");
	}
	return 1; 
}
CMD:reload(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /reload - 1 (Desert Eagle), 2 (SPAS12), 3 (UZI/AK-47/M4A1)");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
 		case 3: ApplyAnimation(playerid, "UZI", "UZI_reload", 4.0,0,0,0,0,0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax: /reload - 1 (Desert Eagle), 2 (SPAS12), 3 (UZI/AK-47/M4A1)");
	}
	return 1; 
}
CMD:tag(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /tag [1-2]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 0, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /tag [1-2]");
	}
	return 1; 
}
CMD:cheer(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /cheer [1-8]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "ON_LOOKERS", "shout_02", 4.0, 0, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "ON_LOOKERS", "shout_in", 4.0, 0, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "RIOT", "RIOT_CHANT", 4.0, 0, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "RIOT", "RIOT_shout", 4.0, 0, 0, 0, 0, 0);
  		case 7: ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.0, 0, 0, 0, 0, 0);
  		case 8: ApplyAnimation(playerid, "OTB", "wtchrace_win", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /cheer [1-8]");
	}
	return 1; 
}
CMD:bar(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /bar [1-5]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0);
	    case 5: ApplyAnimation(playerid, "BAR", "BARman_idle", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /bar [1-5]");
	}
	return 1; 
}
CMD:showoff(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "Freeweights", "gym_free_celebrate", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:goggles(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:cry(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0);
	return 1; 
}
CMD:throw(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0);
	return true;}
CMD:robbed(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:hurt(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);
	return 1; 
}
CMD:handwash(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:stop(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "PED", "endchat_01", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:robman(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	return 1; 
}
CMD:finger(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:blob(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, -1);
	return 1; 
}
CMD:opendoor(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:wavedown(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:cpr(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:dive(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	ApplyAnimation(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0);
	return 1; 
}
CMD:box(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
	return 1; 
}
CMD:handsup(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(barcadelay[playerid] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda acum.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	PlayerHandsup[playerid] = 1;
	return 1; 
}
CMD:laugh(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:lookout(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:crossarms(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /crossarms [1-4]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
  		case 2: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /crossarms [1-4]");
	}
	return 1; 
}
CMD:lay(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /lay [1-3]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /lay [1-3]");
	}
	return 1; 
}
CMD:hide(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	return 1; 
}
CMD:vomit(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:wave(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /wave [1-3]");
    switch(anim) {
		case 1: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /wave [1-3]");
	}
	return 1; 
}
CMD:salute(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0);
	return 1; 
}
CMD:slapass(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:deal(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /deal [1-2]");
	switch(anim) {
  		case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /deal [1-2]");
 	}
	return 1; 
}
CMD:crack(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	return 1; 
}
CMD:wank(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
	return 1; 
}
CMD:gro(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
 	LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1; 
}
CMD:rap(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /rap [1-3]");
	switch(anim) {
  		case 1: ApplyAnimation(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0);
    	case 2: ApplyAnimation(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0);
     	case 3: ApplyAnimation(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0);
      	default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /rap [1-3]");
   	}
    return 1; 
}
CMD:pee(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
	return 1; 
}
CMD:crabs(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"MISC","Scratchballs_01", 4.0, 1, 0, 0, 0, 0);
	return 1; 
}
CMD:sit(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /sit [1-6]");
	switch(anim) {
  		case 1: ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0);
  		case 3: ApplyAnimation(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "PED", "SEAT_down", 4.0, 0, 1, 1, 1, 0);
  		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /sit [1-6]");
 	}
	return 1; 
}
CMD:siteat(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	new anim;
   	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /siteat [1-2]");
	switch(anim) {
  		case 1: ApplyAnimation(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /siteat [1-2]");
 	}
	return 1; 
}
CMD:drunk(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	LoopingAnim(playerid,"PED","WALK_DRUNK",4.0,1,1,1,1,0);
	return 1; 
}
CMD:bomb(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
   	ClearAnimations(playerid);
   	OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	return 1; 
}
CMD:chat(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /chat [1-7]");
	switch(anim) {
  		case 1: ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0);
  		case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.0, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.0, 0, 0, 0, 0, 0);
  		case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.0, 0, 0, 0, 0, 0);
  		case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.0, 0, 0, 0, 0, 0);
  		case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.0, 0, 0, 0, 0, 0);
	    case 7: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.0, 0, 0, 0, 0, 0);
  		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /chat [1-7]");
 	}
	return 1; 
}
CMD:taichi(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
    LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
	return 1; 
}
CMD:dance(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Animations are inaccessible on foot.");
	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /dance [1-4]");
	switch(anim) {
		case 1: SetPlayerSpecialAction(playerid, 5);
		case 2: SetPlayerSpecialAction(playerid, 6);
		case 3: SetPlayerSpecialAction(playerid, 7);
		case 4: SetPlayerSpecialAction(playerid, 8);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /dance [1-4]");
	}
	return 1; 
}
CMD:smoke(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	new anim;
	if(sscanf(params, "d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /smoke [1-2]");
	switch(anim) {
	    case 1: ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0);
	    case 2: ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /smoke [1-2]");
	}
	return 1; 
}
CMD:gesture(playerid, params[]) {
	if(PlayerInfo[playerid][pSleeping] > 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nu poti folosi o animatie deoarece dormi.");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{999999}Animations are inaccessible on foot.");
	new anim;
	if(sscanf(params,"d",anim)) return SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /gesture [1-15]");
	switch(anim) {
		case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0);
		case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0);
		case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0);
		case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0);
		case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0);
		case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0);
		case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0);
		case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0);
		case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
		case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0);
		case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0);
		case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0);
		case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0);
		case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0);
		case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0);
		default: SendClientMessage(playerid, COLOR_WHITE, "Syntax:{FFFFFF} /gesture [1-15]");
	}
	return 1; 
}
CMD:bbalance(playerid, params[]) {
	if (PlayerInfo[playerid][pPbiskey] == 255) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a business.");
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Business Vault Balance: $%d", BizzInfo[PlayerInfo[playerid][pPbiskey]][bTill]);
	return 1; 
}
CMD:bwithdraw(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPbiskey], cashdeposit;
	if(bouse == 255) return SCM(playerid, -1, "You don't own a business.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, BizzInfo[bouse][bEntranceX], BizzInfo[bouse][bEntranceY], BizzInfo[bouse][bEntranceZ])) return SCM(playerid, -1, "You need to be near your business to use this command.");
	if(sscanf(params, "d", cashdeposit)) return SCM(playerid, -1, "Syntax: /bwithdraw [money]");
	if(cashdeposit < 1) return true;
	if(cashdeposit > BizzInfo[bouse][bTill]) return SCM(playerid, -1, "You don't have enough money in your vauld.");
	GivePlayerCash(playerid, cashdeposit);
	BizzInfo[bouse][bTill] -= cashdeposit;
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have withdrawn $%s from your business vault.", FormatNumber(cashdeposit));
	gString[0] = (EOS);
	mysql_format(SQL, gString, 144, "UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d' LIMIT 1", BizzInfo[bouse][bTill], bouse);
	mysql_tquery(SQL, gString);
	return 1; 
}
CMD:bizfee(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPbiskey], fee;
	if(bouse == 255) return SCM(playerid, -1, "You don't own a business.");
	if(sscanf(params, "d", fee)) return SCM(playerid, -1, "Syntax: /bizfee [money]");
	if(fee < 1 || fee > 10000) return SCM(playerid, -1, "Minimum fee is $1 and maximum fee is $10,000.");
	BizzInfo[bouse][bEntranceCost] = fee;
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Business fee set to $%d.", BizzInfo[bouse][bEntranceCost]);
	gString[0] = (EOS);
	mysql_format(SQL, gString, 144, "UPDATE `bizz` SET `EntranceCost` = '%d' WHERE `ID` = '%d' LIMIT 1", BizzInfo[bouse][bEntranceCost], bouse);
	mysql_tquery(SQL, gString);
	OnPropTextdrawUpdate(2, bouse);
	return 1; 
}
CMD:bizname(playerid, params[]) {
	new bouse = PlayerInfo[playerid][pPbiskey], result[60], result2[60];
	if(bouse == 255) return SCM(playerid, -1, "You don't own a business.");
	if(sscanf(params, "s[60]", result)) return SCM(playerid, -1, "Syntax: /bizname [text]");
	if(strlen(result) > 20) return SCM(playerid, -1, "Maximum caracters is 20.");
	mysql_real_escape_string(result, result2);
	strmid(BizzInfo[bouse][bMessage], result, 0, 64, 255);
	SCMf(playerid, COLOR_PRINC, ">> {ffffff}Business name set to %s.", BizzInfo[bouse][bMessage]);
	gString[0] = (EOS);
	mysql_format(SQL, gString, 144, "UPDATE `bizz` SET `Message` = '%s' WHERE `ID` = '%d' LIMIT 1", result2, bouse);
	mysql_tquery(SQL, gString);
	OnPropTextdrawUpdate(2, bouse);
	return 1; 
}	
CMD:sellbiztostate(playerid, params[]) {
	if(PlayerInfo[playerid][pPbiskey] == 255) return SendClientMessage(playerid, COLOR_WHITE, "You don't own a bussines.");
	if(strcmp(PlayerInfo[playerid][pNormalName], BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0) {
		SellHouseID[playerid] = PlayerInfo[playerid][pPbiskey];
	 	ShowPlayerDialogEx(playerid, DIALOG_SELLBIZTOSTATE, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to sell your biz for $30.000.000?", "Yes", "No");
	}
	return 1; 
}
CMD:forum(playerid, params[]) return SCM(playerid, COLOR_PRINC, "Forumul serverului este redtimes.eu/forum");
CMD:buyfood(playerid, params[]) {
	new Float: health, bid = InBussines[playerid];
	if(!IsPlayerInRangeOfPoint(playerid, 30.0, 363.134, -74.8469, 1001.51) && !IsPlayerInRangeOfPoint(playerid, 30.0, 364.9539,-11.4784,1001.8516) && !IsPlayerInRangeOfPoint(playerid, 30.0, 372.1959,-133.0945,1001.4922)) return SCM(playerid, -1, "Nu esti intr-un business potrivit.");
	if(InBussines[playerid] < 1) return SCM(playerid, -1, "Nu te afli intr-un business potrivit.");
	GetPlayerHealth(playerid, health);
	if(GetPlayerCash(playerid) < 100) return SCM(playerid, -1, "You don't have enough money.");
	if(health >= 95) return SCM(playerid, -1, "Nu poti manca deoarece viata ta este plina.");
	SetPlayerHealthEx(playerid, 100.0);
	GivePlayerCash(playerid, -100);
	BizzInfo[bid][bTill] += 100;
	gString[0] = (EOS);
	mysql_format(SQL,gString,144,"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d' LIMIT 1",BizzInfo[bid][bTill],bid);
	mysql_tquery(SQL,gString);
	SCM(playerid, COLOR_PURPLE, "You ate (100 health).");	
	if(quest_type[playerid] == quest_food) quest_finish(playerid);
	return 1; 
}
CMD:elevator(playerid, params[]) {
	if(!IsACop(playerid)) return SCM(playerid,COLOR_WHITE,"You are not a cop.");
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1568.5184,-1690.2205,5.8906)) SetPlayerPosEx(playerid,1564.8662,-1666.4962,28.3956);
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1564.8662,-1666.4962,28.3956)) SetPlayerPosEx(playerid,1568.5184,-1690.2205,5.8906);
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2340.2810,2456.5625,14.9688)) SetPlayerPosEx(playerid,2339.3237,2461.2197,38.6837);
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2339.3237,2461.2197,38.6837)) SetPlayerPosEx(playerid,2340.2810,2456.5625,14.9688);
	return 1; 
}
public OnPlayerCommandReceived(playerid, cmd[], params[], flags) {
    if(mutecomenzi[playerid] >= 1) return false;
    if(iGMXTick <= 60  && iGMXTick != 0) return false;
    if(gPlayerLogged[playerid] < 1) {
        defer KickEx(playerid);
        return false;
    }
    antispamcomenzi[playerid] ++;
    if(antispamcomenzi[playerid] == 5) {
        SCM(playerid, -1, "Nu mai poti utiliza comenzi timp de 5 secunde, motiv: spam.");
        mutecomenzi[playerid] = 5;
        return false;
    }
    new word[30];
    new Cache: adv = mysql_query(SQL, "SELECT * FROM `adv`");
    for(new ix, jx = cache_get_row_count (); ix != jx; ++ix) {
        cache_get_field_content(ix, "word", word);
        if(strfind(cmd, word, true) != -1) {
            PlayerInfo[playerid][pMuteTime] = 30;
            SCM(playerid, -1, "Ai primit mute 30 de secunde, motiv: Posibila reclama / limbaj vulgar.");
           	SendAdmins(COLOR_SKEMA2, "%s (%d / level %d) may be server advertising (%s) and muted 30 seconds.", 1, GetName(playerid), playerid, PlayerInfo[playerid][pLevel], cmd);
            return false;  
        }
    }
    cache_delete(adv);
    return 1; 
}
public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags) {
	if(gPlayerLogged[playerid] < 1) {
		defer KickEx(playerid);
		return true;
	}
	if(result == -1) return SCM(playerid, COLOR_WHITE, "ERROR: This command doesn't exist. Type /help!");

	printf("*(command logs) %s: %s %s", GetName(playerid), cmd);
	return 1; 
}

function ChatMessage(Float:radi, playerid, string[])
{
	if(gPlayerLogged[playerid] < 1) return SCM(playerid, -1, "Nu poti scrie in acest moment.");

	new stringg[144], playername[30], Distance2, Float: x, Float: y, Float: z, Float: Distance; GetPlayerPos(playerid, x, y, z);
	new functie[20];
	if(PlayerInfo[playerid][pAdmin] >= 1) functie = "(a) ";
	if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[playerid][pAdmin] == 0) functie = "(h) ";

	GetPlayerName(playerid, playername, sizeof(playername));
	GetPlayerPos(playerid, x, y, z);

	foreach(new i : Player)
	{
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
		{
			if(!BigEar[i])
			{
				Distance = GetPlayerDistanceFromPoint(i, x, y, z);
				Distance2 = floatround(Distance, floatround_round);

				if(Distance2 >= 0 && Distance2 <= 16) 
				{
					if(PlayerInfo[playerid][pPremiumAccount] == 0) format(stringg, sizeof(stringg), "{CECECE}%s:{FFFFFF} %s", playername, string);
					
					if(PlayerInfo[playerid][pPremiumAccount] == 1 || PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1) {
						switch(PlayerInfo[playerid][pColor]) {
							case 0: format(stringg, sizeof(stringg), "{CECECE}%s:{FFFFFF} %s", playername, string);
							case 1: format(stringg, sizeof(stringg), "{0087FE}%s:{FFFFFF} %s", playername, string);
							case 2: format(stringg, sizeof(stringg), "{4700C2}%s:{FFFFFF} %s", playername, string);
							case 3: format(stringg, sizeof(stringg), "{EBFF00}%s:{FFFFFF} %s", playername, string);
							case 4: format(stringg, sizeof(stringg), "{EF00FF}%s:{FFFFFF} %s", playername, string);
							case 5: format(stringg, sizeof(stringg), "{40FF00}%s:{FFFFFF} %s", playername, string);
							case 6: format(stringg, sizeof(stringg), "{0E7F03}%s:{FFFFFF} %s", playername, string);
							case 7: format(stringg, sizeof(stringg), "{0E7F03}%s:{FFFFFF} %s", playername, string);
							case 8: format(stringg, sizeof(stringg), "{FF9A00}%s:{FFFFFF} %s", playername, string);
							case 9: format(stringg, sizeof(stringg), "{6E6E6E}%s:{FFFFFF} %s", playername, string);
							case 10: format(stringg, sizeof(stringg), "{FF4C9D}%s:{FFFFFF} %s", playername, string);
							case 11: format(stringg, sizeof(stringg), "{F4FA58}%s:{FFFFFF} %s", playername, string);
							case 12: format(stringg, sizeof(stringg), "{00BFFF}%s:{FFFFFF} %s", playername, string);
							case 13: format(stringg, sizeof(stringg), "{819FF7}%s:{FFFFFF} %s", playername, string);
							case 14: format(stringg, sizeof(stringg), "{FE9A2E}%s:{FFFFFF} %s", playername, string);
							case 15: format(stringg, sizeof(stringg), "{FA8258}%s:{FFFFFF} %s", playername, string);
							case 16: format(stringg, sizeof(stringg), "{00FF40}%s:{FFFFFF} %s", playername, string);
							case 17: format(stringg, sizeof(stringg), "{D358F7}%s:{FFFFFF} %s", playername, string);
							case 18: format(stringg, sizeof(stringg), "{4169E1}%s:{FFFFFF} %s", playername, string);
							case 19: format(stringg, sizeof(stringg), "{9ACD32}%s:{FFFFFF} %s", playername, string);
							case 20: format(stringg, sizeof(stringg), "{F0E68C}%s:{FFFFFF} %s", playername, string);
							case 21: format(stringg, sizeof(stringg), "{BDB76B}%s:{FFFFFF} %s", playername, string);
							case 22: format(stringg, sizeof(stringg), "{FF1493}%s:{FFFFFF} %s", playername, string);
							case 23: format(stringg, sizeof(stringg), "{9966CC}%s:{FFFFFF} %s", playername, string);
							case 24: format(stringg, sizeof(stringg), "{F0B2B2}%s:{FFFFFF} %s", playername, string);
							case 25: format(stringg, sizeof(stringg), "{DB7093}%s:{FFFFFF} %s", playername, string);
							case 26: format(stringg, sizeof(stringg), "{E60032}%s:{FFFFFF} %s", playername, string);
							case 27: format(stringg, sizeof(stringg), "{AB0000}%s:{FFFFFF} %s", playername, string);
							case 28: format(stringg, sizeof(stringg), "{FF6347}%s:{FFFFFF} %s", playername, string);
						}	
					}	
					
					SendClientMessage(i, COLOR_WHITE, stringg);					
				}
			}
		}
	}

	antispamcomenzi[playerid] ++;

	if(antispamcomenzi[playerid] == 5)
	{
		SCM(playerid, -1, "Ai primit mute 5 secunde, motiv: spam.");
		PlayerInfo[playerid][pMuteTime] = 5;
		return false;
	}

	return true;
}

function CrimInRange(Float:radi, playerid,copid) {
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid)) {
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi))) {
			return true;
		}
	}
	return 0; } 
function OnPropTextdrawUpdate(update, h) {
	new type[20], locked[20], tenants=0, selltext[64];
	gString[0] = (EOS);
	switch(update) {
		case 1: {
			if(HouseInfo[h][hInteriorType] == 0) format(type, sizeof type, "Small");
			if(HouseInfo[h][hInteriorType] == 1) format(type, sizeof type, "Medium");
			if(HouseInfo[h][hInteriorType] == 2) format(type, sizeof type, "Big");
			if(HouseInfo[h][hLock] == 1) format(locked, sizeof locked, "\n(locked)");
			switch(HouseInfo[h][hOwned]) {
				case 0: {
					DestroyDynamic3DTextLabel(HouseLabel[h]);
					format(gString, 200, "{FFFFFF}House{11AD95}  %d \n{11AD95}  %s \n{FFFFFF}Size:{11AD95}  %s \n{FFFFFF}Price:{11AD95}  $%s (/buyhouse) \n{FFFFFF}Level:{11AD95}  %d %s", h, HouseInfo[h][hDiscription], type, FormatNumber(HouseInfo[h][hValue]), HouseInfo[h][hLevel], locked);
					HouseLabel[h] = CreateDynamic3DTextLabel(gString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
					DestroyDynamicPickup(HousePickup[h]);
					DestroyDynamicPickup(GaragePickup[h]);
					HousePickup[h] = CreateDynamicPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);	
				}
				case 1: {
					format(gString, 256, "SELECT * FROM `users` WHERE `Rented` = '%d' AND `Status`='1'", h);
					new Cache: membresult = mysql_query(SQL, gString);
					for(new i, j = cache_get_row_count (); i != j; ++i) tenants++;
					cache_delete(membresult);
					if(HouseInfo[h][hPrice] > 0) format(selltext, sizeof selltext, "\n{FFFFFF}Price:{11AD95}  $%s (/buyhouse)", FormatNumber(HouseInfo[h][hPrice]));
					if(HouseInfo[h][hRentabil] == 1) {
						DestroyDynamic3DTextLabel(HouseLabel[h]);
						format(gString, 300, "{FFFFFF}House{11AD95}  %d \n{11AD95}  %s \n{FFFFFF}Owner:{11AD95}  %s \n{FFFFFF}Tenants:{11AD95}  %d \n{FFFFFF}Size:{11AD95}  %s \n{FFFFFF}Rent:{11AD95}  $%d (/rentroom) %s %s", h, HouseInfo[h][hDiscription], HouseInfo[h][hOwner], tenants, type, HouseInfo[h][hRent], selltext, locked);
						HouseLabel[h] = CreateDynamic3DTextLabel(gString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
						DestroyDynamicPickup(HousePickup[h]);
						DestroyDynamicPickup(GaragePickup[h]);
						HousePickup[h] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);

						if(HouseInfo[h][hGarage] == 1)
						{
							DestroyDynamic3DTextLabel(GarageLabel[h]);
							GaragePickup[h] = CreateDynamicPickup(1318, 23, HouseInfo[h][hGarageX], HouseInfo[h][hGarageY], HouseInfo[h][hGarageZ]);
							GarageLabel[h] = CreateDynamic3DTextLabel("{ff0000}garage\n{ffffff}type /entergarage to enter the garage", 0x9C0000F7, HouseInfo[h][hGarageX], HouseInfo[h][hGarageY], HouseInfo[h][hGarageZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
						}
					} else {
						DestroyDynamic3DTextLabel(HouseLabel[h]);
						format(gString, 300, "{FFFFFF}House{11AD95}  %d \n{11AD95}  %s \n{FFFFFF}Owner:{11AD95}  %s \n{FFFFFF}Tenants:{11AD95}  %d \n{FFFFFF}Size:{11AD95}  %s %s %s", h, HouseInfo[h][hDiscription], HouseInfo[h][hOwner], tenants, type, selltext, locked);
						HouseLabel[h] = CreateDynamic3DTextLabel(gString, 0x9C0000F7, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
						DestroyDynamicPickup(HousePickup[h]);
						DestroyDynamicPickup(GaragePickup[h]);
						HousePickup[h] = CreateDynamicPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
					
						if(HouseInfo[h][hGarage] == 1)
						{
							DestroyDynamic3DTextLabel(GarageLabel[h]);
							GaragePickup[h] = CreateDynamicPickup(1318, 23, HouseInfo[h][hGarageX], HouseInfo[h][hGarageY], HouseInfo[h][hGarageZ]);\
							GarageLabel[h] = CreateDynamic3DTextLabel("garage\ntype /entergarage to enter the garage", 0x9C0000F7, HouseInfo[h][hGarageX], HouseInfo[h][hGarageY], HouseInfo[h][hGarageZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
						}					
					}
				}
			}
		}
		case 2: {
			switch(BizzInfo[h][bOwned]) {
				case 0: {
					DestroyDynamic3DTextLabel(BizzLabel[h]);
					if(BizzInfo[h][bLocked] == 0) format(gString, 200, "{7E689B}%s \n{ffffff}Business {7E689B}#%d \n {ffffff}Price: {7E689B}$%s (/buybusiness) \n{ffffff}Level: {7E689B}%d", BizzInfo[h][bMessage], h, FormatNumber(BizzInfo[h][bBuyPrice]), BizzInfo[h][bLevelNeeded]);
					else format(gString, 200, "{7E689B}%s \n{ffffff}Business {7E689B}#%d \n {ffffff}Price: {7E689B}$%s (/buybusiness) \n{ffffff}Level: {7E689B}%d \n(locked)", BizzInfo[h][bMessage], h, FormatNumber(BizzInfo[h][bBuyPrice]), BizzInfo[h][bLevelNeeded]);
					BizzLabel[h] = CreateDynamic3DTextLabel(gString, 0x0053CFD1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
				}
				case 1: {
					DestroyDynamic3DTextLabel(BizzLabel[h]);
					if(BizzInfo[h][bPrice] > 0) {
						if(BizzInfo[h][bLocked] == 0) format(gString, 200, "{7E689B}%s \n{ffffff}Business {7E689B}#%d \n{ffffff}Owner: {7E689B}%s \n{ffffff}Fee: {7E689B}$%s \n{ffffff}Price: {7E689B}$%s (/buybusiness)", BizzInfo[h][bMessage], h, BizzInfo[h][bOwner], FormatNumber(BizzInfo[h][bEntranceCost]), FormatNumber(BizzInfo[h][bPrice]));
						else format(gString, 200, "{FF000}%s \n{ffffff}Business {0068CF}#%d \n{ffffff}Owner: {7E689B}%s \n{ffffff}Fee: {7E689B}$%s \n{ffffff}Price: {7E689B}$%s (/buybusiness) \n(locked)", BizzInfo[h][bMessage], h, BizzInfo[h][bOwner], FormatNumber(BizzInfo[h][bEntranceCost]), FormatNumber(BizzInfo[h][bPrice]));
					} else {
						if(BizzInfo[h][bLocked] == 0) format(gString, 200, "{7E689B}%s \n{ffffff}Business {7E689B}#%d \n{ffffff}Owner: {7E689B}%s \n{ffffff}Fee: {7E689B}$%s", BizzInfo[h][bMessage], h, BizzInfo[h][bOwner], FormatNumber(BizzInfo[h][bEntranceCost]));
						else format(gString, 200, "{7E689B}%s \n{ffffff}Business {7E689B}#%d \n{ffffff}Owner: {7E689B}%s \n{ffffff}Fee: {7E689B}$%s \n(locked)", BizzInfo[h][bMessage], h, BizzInfo[h][bOwner], FormatNumber(BizzInfo[h][bEntranceCost]));
					}
					BizzLabel[h] = CreateDynamic3DTextLabel(gString, 0x0053CFD1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
				}
			}
		}
	}
	return 1; 
}
stock Carspeed(playerid) {
	new Float:SpeedX, Float:SpeedY, Float:SpeedZ;
    GetVehicleVelocity(GetPlayerVehicleID(playerid),SpeedX,SpeedY,SpeedZ);
    return floatround(1.61*floatsqroot(floatpower(floatabs(SpeedX), 2.0) + floatpower(floatabs(SpeedY), 2.0) + floatpower(floatabs(SpeedZ), 2.0)) * 99.38);
}
stock save_raport(playerid, id) {	
	if(id > 7 || id < 1) return 1;	
	PlayerInfo[playerid][pRaport][id-1]++;	
	gString[0] = (EOS);
	format(gString, 10, "Raport%d", id);
	pUpdateInt(playerid, gString, PlayerInfo[playerid][pRaport][id-1]);
	return 1;
}
stock SetVehicleToRespawnEx2(carid) {
	foreach(new i : Player) {
		for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
			if(PlayerInfo[i][pCarID][v] == carid) {
				new engine,lights,alarm,doors,bonnet,boot,objective,Float:PosX,Float:PosY,Float:PosZ;
				GetVehiclePos(carid, PosX, PosY, PosZ);
				StopBlinkNeons(carid);
				DestroyVehicle(PlayerInfo[i][pCarID][v]);
				PlayerInfo[i][pCarID][v] = CreateVehicle(PlayerInfo[i][pCarModel][v],PosX,PosY,PosZ,PlayerInfo[i][pCarAngle][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v],-1);
				SetVehicleNumberPlate(PlayerInfo[i][pCarID][v], CarPlate[i][v]);
				SetVehicleHealth(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarHP][v]);
				UpdateVehicleDamageStatus(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarDamage1][v], PlayerInfo[i][pCarDamage2][v], PlayerInfo[i][pCarDamage3][v], PlayerInfo[i][pCarDamage4][v]);
				Gas[PlayerInfo[i][pCarID][v]] = PlayerInfo[i][pCarGas][v];
				if(PlayerInfo[i][pCarLock][v] == 0) {
					GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
				}
				else {
					GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
				}
				for(new d; d < 17; d++)
				{
					if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
				}
				ChangeVehiclePaintjob(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarPaintJ][v]);
				vehEngine[PlayerInfo[i][pCarID][v]] = 0;
			}
		}
	}
	return 1; 
}
stock SetVehicleToRespawnEx(carid) {
	new found;
	for(new x = 0; x < sizeof(VehicleInfo); x++) {
		if(VehicleInfo[x][vehCarID] == carid) {
			new str[30];
			StopBlinkNeons(carid);
			DestroyVehicle(carid);
			if(VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 411 || VehicleInfo[x][vehGroup] == 2 && VehicleInfo[x][vehModel] == 541 || VehicleInfo[x][vehGroup] == 1 && VehicleInfo[x][vehModel] == 411 || VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 468 || VehicleInfo[x][vehGroup] == 8 && VehicleInfo[x][vehModel] == 470) {
				VehicleInfo[x][vehCarID] = CreateVehicle(VehicleInfo[x][vehModel], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ], VehicleInfo[x][vehRotation], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2], 1800, 1);
			} else {
				VehicleInfo[x][vehCarID] = CreateVehicle(VehicleInfo[x][vehModel], VehicleInfo[x][vehPosX], VehicleInfo[x][vehPosY], VehicleInfo[x][vehPosZ], VehicleInfo[x][vehRotation], VehicleInfo[x][vehColor1], VehicleInfo[x][vehColor2], 1800);
			}
			if(VehicleInfo[x][vehGroup] == 0) {
				format(str,sizeof(str),"LT %d",VehicleInfo[x][vehCarID]);
				SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
			}
			else if(VehicleInfo[x][vehGroup] > 0) {
				if(VehicleInfo[x][vehGroup] > 9) {
					format(str,sizeof(str),"F%d %d",VehicleInfo[x][vehGroup],VehicleInfo[x][vehCarID]);
					SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
				} else if(VehicleInfo[x][vehGroup] < 10) {
					format(str,sizeof(str),"F0%d %d",VehicleInfo[x][vehGroup],VehicleInfo[x][vehCarID]);
					SetVehicleNumberPlate(VehicleInfo[x][vehCarID],str);
				}
			}
			if(VehicleInfo[x][vehGroup] == 8 || VehicleInfo[x][vehGroup] == 2 || VehicleInfo[x][vehGroup] == 1) {
				if(VehicleInfo[x][vehModel] == 411) {
					object = CreateObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
					AttachObjectToVehicle(object, VehicleInfo[x][vehCarID],  0.010000, -0.060000, 0.689999, 0.000000, 0.000000, 0.000000);
				}
			}			
			found = 1;
		}
	}
	if(found == 0)  {
		if(IsAnOwnableCar(carid)) {
			foreach(new i : Player) {
				for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
					if(PlayerInfo[i][pCarID][v] == carid) {
						new engine,lights,alarm,doors,bonnet,boot,objective;
						StopBlinkNeons(carid);
						DestroyVehicle(PlayerInfo[i][pCarID][v]);
						PlayerInfo[i][pCarID][v] = CreateVehicle(PlayerInfo[i][pCarModel][v],PlayerInfo[i][pCarLocX][v],PlayerInfo[i][pCarLocY][v],PlayerInfo[i][pCarLocZ][v],PlayerInfo[i][pCarAngle][v],PlayerInfo[i][pCarColor1][v],PlayerInfo[i][pCarColor2][v],-1);
						SetVehicleNumberPlate(PlayerInfo[i][pCarID][v], CarPlate[i][v]);
						SetVehicleHealth(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarHP][v]);
						UpdateVehicleDamageStatus(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarDamage1][v], PlayerInfo[i][pCarDamage2][v], PlayerInfo[i][pCarDamage3][v], PlayerInfo[i][pCarDamage4][v]);
						Gas[PlayerInfo[i][pCarID][v]] = PlayerInfo[i][pCarGas][v];
						if(PlayerInfo[i][pCarLock][v] == 0) {
							GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,0,bonnet,boot,objective);
						} else {
							GetVehicleParamsEx(PlayerInfo[i][pCarID][v],engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(PlayerInfo[i][pCarID][v],VEHICLE_PARAMS_OFF,lights,alarm,1,bonnet,boot,objective);
						}
						for(new d; d < 17; d++) {
							if(CarMod[i][v][d] != 0) AddVehicleComponent(PlayerInfo[i][pCarID][v],CarMod[i][v][d]);
						}
						ChangeVehiclePaintjob(PlayerInfo[i][pCarID][v], PlayerInfo[i][pCarPaintJ][v]);
						vehEngine[PlayerInfo[i][pCarID][v]] = 0;

						if(PlayerInfo[i][pCarTranscendent][v] >= 1) SetVehicleHealth(PlayerInfo[i][pCarID][v], 1200.0);
					}
				}
			}
		}
		else SetVehicleToRespawn(carid);
	}
	return 1; 
}

function check_adblocker(playerid, text[]) {
	new word[64];
	for(new ix, jx = cache_get_row_count(); ix != jx; ix++) {
        cache_get_field_content(ix, "word", word);
        if(strfind(text, word, true) != -1) {
            PlayerInfo[playerid][pMuteTime] = 30;
            SendAdmins(COLOR_SKEMA2, "%s (%d / level %d) may be server advertising (%s) and muted 30 seconds.", 1, GetName(playerid), playerid, PlayerInfo[playerid][pLevel], text);
            SCM(playerid, -1, "Ai primit mute 30 de secunde, motiv: Posibila reclama."); 
            return false;
        }
    }
    return true;
}

public OnPlayerText(playerid, text[]) {
    if(!gPlayerLogged[playerid]) return false;
    new szMessage[1000],string[128],word[30],tmp[256],var100[256],resulttt[256],result3[144];
    if(PlayerInfo[playerid][pMuteTime] >= 1) {
        SCM(playerid, -1, "Nu poti vorbi deoarece ai mute.");
        return false;
    }
    if(Mobile[playerid] != -1) format(result3, sizeof(result3),"(cellphone) %s: %s", PlayerInfo[playerid][pNormalName], text);
    else format(result3, sizeof(result3),"%s: %s", PlayerInfo[playerid][pNormalName], text);
    mysql_real_escape_string(result3, resulttt);
    mysql_format(SQL, var100, sizeof(var100), "INSERT INTO chat_logs (`playerid`,`text`,`where`) VALUES ('%d','%s','chat')", PlayerInfo[playerid][pSQLID], resulttt);
    mysql_tquery(SQL, var100);

    
	mysql_format(SQL, var100, sizeof(var100), "SELECT * FROM `adv`");
	mysql_tquery(SQL, var100, "check_adblocker", "is", playerid, word);


    if(Iter_Contains(PlayerPaint, playerid)) {
    	format(mesajsmek, sizeof mesajsmek, "{d062fc}%s[%d kills]{ffffff}: %s", GetName(playerid), paintkills[playerid],text);
    	SendPaintMessage(-1, mesajsmek);
    	return false;
    }
    format(string, sizeof(string), "\"%s\"", text);
    SetPlayerChatBubble(playerid, text, COLOR_CHATBUBBLE, 10.0, 10000);
    if(TalkingLive[playerid] != 0) {
        if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9) {
            format(string, sizeof(string), "NR %s: %s", PlayerInfo[playerid][pNormalName], text);
            OOCNews(COLOR_LIGHTGREEN, string);
        }
        else {
            format(string, sizeof(string), "LivePlayer %s: %s", PlayerInfo[playerid][pNormalName], text);
            OOCNews(COLOR_LIGHTGREEN, string);
        }
        return false;
    }
    if(Mobile[playerid] != -1) {
        new idx;
        tmp = strtok(text, idx);
        format(string, sizeof string, "(cellphone) %s: %s", GetName(playerid), text);
        sendNearbyMessage(playerid, 20.0, COLOR_FADE1, string);
        if(Mobile[playerid] != -2 && Mobile[playerid] != -3 && Mobile[playerid] != -4) {
            if(IsPlayerConnected(Mobile[playerid])) {
                if(Mobile[Mobile[playerid]] == playerid) {
                    if(PlayerInfo[Mobile[playerid]][pSpeaker] == 1) {
                        new Float:posx, Float:posy, Float:posz;
                        new Float:oldposx, Float:oldposy, Float:oldposz;
                        new Float:tempposx, Float:tempposy, Float:tempposz;
                        GetPlayerPos(Mobile[playerid], oldposx, oldposy, oldposz);
                        foreach(new i : Player) {
                            if(GetPlayerInterior(Mobile[playerid]) == GetPlayerInterior(i) && GetPlayerVirtualWorld(Mobile[playerid]) == GetPlayerVirtualWorld(i)) {
                                if(!BigEar[i]) {
                                    GetPlayerPos(i, posx, posy, posz);
                                    tempposx = (oldposx -posx);
                                    tempposy = (oldposy -posy);
                                    tempposz = (oldposz -posz);
                                    new Float:radi = 20;
                                    if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16))) {
                                        SendSplitMessage(i, COLOR_FADE1, string);
                                    }
                                    else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8))) {
                                        SendSplitMessage(i, COLOR_FADE2, string);
                                    }
                                    else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4))) {
                                        SendSplitMessage(i, COLOR_FADE3, string);
                                    }
                                    else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2))) {
                                        SendSplitMessage(i, COLOR_FADE4, string);
                                    }
                                    else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) {
                                        SendSplitMessage(i, COLOR_FADE5, string);
                                    }
                                }
                                else {
                                    SendSplitMessage(i, COLOR_FADE1, string);
                                }
                            }
                        }
                    }
                    else {
                        SendClientMessage(Mobile[playerid], COLOR_SKEMA,string);
                    }
                }
            }
            else {
                SendClientMessage(playerid, COLOR_SKEMA,"Theres nobody there.");
            }
        }
        else {
            if(Mobile[playerid] == -2) {
                if(!strcmp(text, "LSPD", true) || !strcmp(text, "police", true)) {
                    Mobile[playerid] = -3;
                    SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: You have reached the Los Santos Police emergency hotline; can you describe the crime?");
                }
                else if(!strcmp(text, "LSFMD", true) || !strcmp(text, "medic", true) || !strcmp(text, "ambulance", true)) {
                    Mobile[playerid] = -4;
                    SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: This is the Los Santos Fire & Medic Department emergency hotline; describe the emergency, please.");
                }
                else SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Sorry, I didn't quite understand that... speak again?");
            }
            else if(Mobile[playerid] == -3) {
                SendFamilyMessage(2, COLOR_LIGHTBLUE, "Dispatch: %s has reported: '%s'", PlayerInfo[playerid][pNormalName], text);
                SendFamilyMessage(1, COLOR_LIGHTBLUE, "Dispatch: %s has reported: '%s'", PlayerInfo[playerid][pNormalName], text);
                SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Thank you for reporting this incident; a patrol unit is now on its way.");
                SendClientMessage(playerid, COLOR_WHITE, "Your call has been terminated by the other party.");
                RemovePlayerAttachedObject(playerid, 4);
                Mobile[playerid] = -1;
                CellTime[playerid] = 0;
                PlayerInfo[playerid][pSpeaker] = 0;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
            }
            else if(Mobile[playerid] == -4) {
                SendFamilyMessage(14, COLOR_LIGHTBLUE, "Dispatch: %s has reported: '%s'", PlayerInfo[playerid][pNormalName], text);
                SendClientMessage(playerid, COLOR_WHITE, "(cellphone) 112: Thank you for reporting this incident; we are on our way.");
                SendClientMessage(playerid, COLOR_WHITE, "Your call has been terminated by the other party.");
                RemovePlayerAttachedObject(playerid, 4);
                Mobile[playerid] = -1;
                CellTime[playerid] = 0;
                PlayerInfo[playerid][pSpeaker] = 0;
                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
            }
        }
        format(string, sizeof(string), "(cellphone) \"%s\"", text);
        SetPlayerChatBubble(playerid, string, COLOR_CHATBUBBLE, 10.0, 10000);
        return false;
    }
    if (realchat) {
        if(gPlayerLogged[playerid] == 0) {
            return false;
        }
        format(szMessage, sizeof(szMessage), "%s",text);
        new len = strlen(szMessage),
            _iL = len / EX_SPLITLENGTHH;
        if((len % EX_SPLITLENGTHH)) _iL++;
        new _Line[EX_SPLITLENGTHH+5];
        new _:_i@Index;
        while(_i@Index < _iL)
        {
            if(_i@Index == 0)
                strmid(_Line, szMessage, (_i@Index * EX_SPLITLENGTHH), (_i@Index * EX_SPLITLENGTHH) + EX_SPLITLENGTHH);
            else
                strmid(_Line, szMessage, (_i@Index * EX_SPLITLENGTHH), (_i@Index * EX_SPLITLENGTHH) + EX_SPLITLENGTHH);
 
            if(_iL > 1)
            {
                if(_i@Index > 0)
                {
                    format(_Line, sizeof _Line, "... %s", _Line);
                }
            }
            ChatMessage(25.0, playerid, _Line);
            _i@Index++;
        }
        format(szMessage, sizeof(szMessage), "\"%s\"", text);
        SetPlayerChatBubble(playerid, szMessage, COLOR_CHATBUBBLE, 15.0, 10000);
        return false;
    }
    return 1; 
}
function FixHour(hour) {
	hour = timeshift+hour;
	if (hour < 0) {
		hour = hour+24;
	}
	else if (hour > 23) {
		hour = hour-24;
	}
	shifthour = hour;
	return 1; 
}
timer lspdgateclose[9000]() {
    MoveObject(gatelspd, 1592.67676, -1638.05225, 14.95110, 1.5, -1000.0, -1000.0, -1000.0);
    return 1; 
}
timer lspdbarclose[9000]() {
    MoveDynamicObject(lspdbar, 1544.7007, -1630.7527, 13.2983, 1.5,0.0000, 90.0200, 90.0000);
    return 1; 
}
timer lvpdgateclose[9000]() {
    MoveDynamicObject(gatelvpd, 2335.89282, 2444.87451, 7.29770, 1.5, -1000.0, -1000.0, -1000.0);
    return 1; 
}
timer lvpdgateclose2[9000]() {
    MoveDynamicObject(gatelvpd2, 2294.02222, 2503.16650, 4.70800, 1.5, -1000.0, -1000.0, -1000.0);
    return 1; 
}
timer lvpdbarclose[9000]() {
    MoveDynamicObject(lvpdbar, 2238.22021, 2450.44312, 10.58781, 1.5,0.0000, 90.0200, 90.0000);
    return 1; 
}          
public OnVehicleDeath(vehicleid) {
 	new engine,lights,alarm,doors,bonnet,boot,objective;
 	vehEngine[vehicleid] = 0;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
 	SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
 	StopBlinkNeons(vehicleid);
    DeleteVehicle(vehicleid);

	if(Carspawn[vehicleid] != 0) {
		DestroyVehicle(Carspawn[vehicleid]);
		Carspawn[vehicleid] = 0;
	}	

	if(carrent[vehicleid] != 0)
	{
		foreach(new x : Player)
		{
			if(GetPVarInt(x, "rent_take") == vehicleid)
			{
				DeletePVar(x, "rent_take");

				SCM(x, -1, "Vehiculul tau inchiriat a fost distrus.");
			}	
		}

		carrent[vehicleid] = 0;

		DestroyVehicle(vehicleid);
	}

	StopAudioStreamForPlayersInCar(vehicleid);
 	return 1; 
 }
function Float:GetDistance(playerid, Float:x, Float:y) {
	new Float:x2, Float:y2, Float:z2;
	GetPlayerPos(playerid, x2, y2, z2);
	x = x - x2;
	y = y - y2;
	return floatsqroot(x*x+y*y);
}
stock BanCheck(playerid) {
	new admin[30], reason[64], permanent, days, bandays, ban;
	gString[0] = (EOS);
	format(gString, 256, "SELECT * FROM bans WHERE `Name` = '%s' AND `Active` = '1' LIMIT 1", GetName(playerid));
	new Cache: banuri = mysql_query(SQL, gString);
	if(cache_get_row_count() > 0) {
		cache_get_field_content(0, "AdminName", admin, SQL, 30);
		cache_get_field_content(0, "Reason", reason, SQL, 30);
		permanent = cache_get_field_content_int(0, "Permanent");
		days 	  = cache_get_field_content_int(0, "Days");
		if(permanent > 0) {
			SCMf(playerid, COLOR_GREY, "Banned by: %s, reason: %s.", admin, reason);
			SCM(playerid, COLOR_GREY, "Permanent ban.");
			SCM(playerid, COLOR_GREY, "Poti face o cerere de unban pe panel.redtimes.eu.");
			defer KickEx(playerid);
		} else {
			SCMf(playerid, COLOR_GREY, "Banned by: %s, reason: %s, days: %d.", admin, reason, days);
			SCMf(playerid, COLOR_GREY, "Poti face o cerere de unban pe panel.redtimes.eu.");
			new query[256];
			format(query, sizeof query, "SELECT * FROM users WHERE `name` = '%s' LIMIT 1", GetName(playerid));
			new Cache: smekerie = mysql_query(SQL, query);		
			bandays = cache_get_field_content_int(0, "BanDays");
			ban = cache_get_field_content_int(0, "Ban");
			if(bandays == 0 && ban == 1) {
				gString[0] = (EOS);
				mysql_format(SQL, gString, 256, "UPDATE `users` SET `Ban` = '0' WHERE `Name` = '%s' LIMIT 1", GetName(playerid));
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "UPDATE `bans` SET `Active` = '0' WHERE `Name` = '%s' LIMIT 1", GetName(playerid));
				mysql_tquery(SQL, gString);
				SCM(playerid, -1, "Unban automatically, please relog.");
				SendAdmins(COLOR_PRINC, "AdmWarning: {ffffff}User %s unbanned automatically by AdmBot.", 1, GetName(playerid));
			}			
			cache_delete(smekerie);
			defer KickEx(playerid);
		}
	}
	cache_delete(banuri);
	gString[0] = (EOS);
	new name[32];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	format(gString, sizeof(gString), "SELECT * FROM users WHERE `name` = '%s' LIMIT 1", name);
	new Cache: abcd = mysql_query(SQL, gString);
	if(cache_get_row_count() > 0) gPlayerAccount[playerid] = 1;
	else gPlayerAccount[playerid] = 0;
	cache_delete(abcd);
	return true;
}
new desiredModel[MAX_PLAYERS], desiredModelPrice[MAX_PLAYERS];
new clanVehs[9] = { 411, 541, 560, 451, 429, 495, 579, 562, 480 };
new clanVehsPrices[9] = { 50000000, 45000000, 42500000, 40000000, 35000000, 30000000, 25000000, 20000000, 10000000 };
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {
	new vehicleid = GetPlayerVehicleID(playerid), string[300];
	if(strfind(inputtext, "%", true) != -1) {
		SCM(playerid, -1, "SERVER: Invalid dialog input.");
		ShowPlayerDialogEx(playerid, dialogid, DIALOG_STYLE_INPUT, "Invalid dialog input", "Invalid dialog input", "OK", "Exit");
		return true;
	}
	if(strfind(inputtext, "`", true) != -1) {
		SCM(playerid, -1, "SERVER: Invalid dialog input.");
		ShowPlayerDialogEx(playerid, dialogid, DIALOG_STYLE_INPUT, "Invalid dialog input", "Invalid dialog input", "OK", "Exit");
		return true;
	}	
	if(strfind(inputtext, "'", true) != -1) {
		SCM(playerid, -1, "SERVER: Invalid dialog input.");
		ShowPlayerDialogEx(playerid, dialogid, DIALOG_STYLE_INPUT, "Invalid dialog input", "Invalid dialog input", "OK", "Exit");
		return true;
	}	
	if(dialogID[playerid] == -1) {
		SendAdmins(COLOR_LIGHTRED, "Kick: %s was kicked by AdmBot, reason: cheats(crasher/troll-hack/fakekill/dialoghider)", 1, GetName(playerid));			
		Kick(playerid);
		return true;
	}
	dialogID[playerid] = -1;
	switch(dialogid) {	
		case 6267: {
			if(!response) return true;
			switch(listitem) {
				case 0: SCM(playerid, -1, "server: nick color changed.");
				case 1: SCM(playerid, -1, "server: nick color changed.");
				case 2: SCM(playerid, -1, "server: nick color changed.");
				case 3: SCM(playerid, -1, "server: nick color changed.");
				case 4: SCM(playerid, -1, "server: nick color changed.");
				case 5: SCM(playerid, -1, "server: nick color changed.");
				case 6: SCM(playerid, -1, "server: nick color changed.");
				case 7: SCM(playerid, -1, "server: nick color changed.");
				case 8: SCM(playerid, -1, "server: nick color changed.");
				case 9: SCM(playerid, -1, "server: nick color changed.");
				case 10: SCM(playerid, -1, "server: nick color changed.");
				case 11: SCM(playerid, -1, "server: nick color changed.");
				case 12: SCM(playerid, -1, "server: nick color changed.");
				case 13: SCM(playerid, -1, "server: nick color changed.");
				case 14: SCM(playerid, -1, "server: nick color changed.");
				case 15: SCM(playerid, -1, "server: nick color changed.");
				case 16: SCM(playerid, -1, "server: nick color changed.");
				case 17: SCM(playerid, -1, "server: nick color changed.");
				case 18: SCM(playerid, -1, "server: nick color changed.");
				case 19: SCM(playerid, -1, "server: nick color changed.");
				case 20: SCM(playerid, -1, "server: nick color changed.");
				case 21: SCM(playerid, -1, "server: nick color changed.");
				case 22: SCM(playerid, -1, "server: nick color changed.");
				case 23: SCM(playerid, -1, "server: nick color changed.");
				case 24: SCM(playerid, -1, "server: nick color changed.");
				case 25: SCM(playerid, -1, "server: nick color changed.");
			}
			PlayerInfo[playerid][pColor] = listitem; pUpdateInt(playerid, "Color", listitem);
		}		
        case DIALOG_NEONTYPES:
        {
            if(response == 1)
            {
                switch(listitem)
                {
                    case 0: ShowPlayerDialogEx(playerid, DIALOG_SOLID, DIALOG_STYLE_LIST, "Neon", "Blue\nGreen\nPink\nRed\nWhite\nYellow", "Select", "Cancel");
                    //case 1: cmd_removeneon(playerid);
                }
            }
        }
        case DIALOG_SOLID: {
            if(response == 1) {
                if(IsNeonActive(GetPlayerVehicleID(playerid))) return SendClientMessage(playerid, -1, "{F81414}Eroare: {FFFFFF}Mai intai sterge neon-ul actual.");
                switch(listitem) {
                    case 0: SetBlueNeons(GetPlayerVehicleID(playerid));
                    case 1: SetGreenNeons(GetPlayerVehicleID(playerid));
                    case 2: SetPinkNeons(GetPlayerVehicleID(playerid));
                    case 3: SetRedNeons(GetPlayerVehicleID(playerid));
                    case 4: SetWhiteNeons(GetPlayerVehicleID(playerid));
                    case 5: SetYellowNeons(GetPlayerVehicleID(playerid));
                }
            }
        }    
		case DIALOG_BUYGARAGE:
		{
			if(!response) return true;

			ShowPlayerDialogEx(playerid, DIALOG_BUYGARAGE+1000, DIALOG_STYLE_LIST, "Buy garage", "Buy with $800,000,000", "Select", "Exit");
		}		
		case DIALOG_BUYGARAGE+1000:
		{
			if(!response) return true;

			switch(listitem)
			{
				case 0:
				{
					if(GetPlayerCash(playerid) < 800000000) return SCM(playerid, -1, "Ai nevoie de minim $800,000,000.");

					new casa = PlayerInfo[playerid][pPhousekey];
					new Float: x, Float: y, Float: z; GetPlayerPos(playerid, x, y, z);

					HouseInfo[casa][hGarage] = 1;
					HouseInfo[casa][hGarageX] = x;
					HouseInfo[casa][hGarageY] = y; 
					HouseInfo[casa][hGarageZ] = z;

					GivePlayerCash(playerid, -800000000);

					gString[0] = (EOS);

					mysql_format(SQL, gString, sizeof(gString), "UPDATE `houses` SET `Garage` = '1', `GarageX` = '%f', `GarageY` = '%f', `GarageZ` = '%f' WHERE `ID` = '%d' LIMIT 1", x, y, z, casa);
					mysql_tquery(SQL, gString);

					OnPropTextdrawUpdate(1, casa);

					SCM(playerid, -1, "Ai cumparat garajul in aceasta pozitie.");					
				}
			}
		}
		case DIALOG_BUYGARAGE+2000:
		{
			if(!response) return true;

			new casa = PlayerInfo[playerid][pPhousekey];

			HouseInfo[casa][hGarage] = 0;
			HouseInfo[casa][hGarageX] = 0;
			HouseInfo[casa][hGarageY] = 0;
			HouseInfo[casa][hGarageZ] = 0;

			DestroyDynamic3DTextLabel(GarageLabel[casa]);

			GivePlayerCash(playerid, 250000000);

			gString[0] = (EOS);

			mysql_format(SQL, gString, sizeof(gString), "UPDATE `houses` SET `Garage` = '0', `GarageX` = '0', `GarageY` = '0', `GarageZ` = '0' WHERE `ID` = '%d' LIMIT 1", casa);
			mysql_tquery(SQL, gString);

			SCM(playerid, -1, "Ai vandut garajul la stat.");			
		}                	
		case 7879:
		{
			if(!response) return true;

			switch(listitem)
			{
				case 0: 
				{
		            PlayerInfo[playerid][pColor] = 0;

		            SCM(playerid, -1, "server: nick color changed.");
				}

				case 1:
				{
		            PlayerInfo[playerid][pColor] = 26;

		            SCM(playerid, -1, "server: nick color changed.");
				}

				case 2:
				{
		            PlayerInfo[playerid][pColor] = 27;

		            SCM(playerid, -1, "server: nick color changed.");
				}	

				case 3:
				{
		            PlayerInfo[playerid][pColor] = 28;

		            SCM(playerid, -1, "server: nick color changed.");
				}	
			}

			pUpdateInt(playerid, "Color", PlayerInfo[playerid][pColor]);
		}		
		case DIALOG_NGNAB: {
			if(response) {
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehiclePos(GetPlayerVehicleID(playerid), 135.3798,1947.1385,19.3638);
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) SetPlayerPosEx(playerid, 135.3798,1947.1385,19.3638);
			}
			if(!response) {
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehiclePos(GetPlayerVehicleID(playerid), 135.3267,1936.3209,19.2716);
				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) SetPlayerPosEx(playerid, 135.3267,1936.3209,19.2716);
			}
		}	
		/*case DIALOG_BATTLE:
		{
		    if(!response) return true;
		 
		    switch(listitem)
		    {
		        case 0:
		        {
		            new szDialog[128], szDialog2[512];
		 
		            strcat(szDialog2, "quest info\t\n");
		 
		           	for(new i = 0; i < 8; i++)
		            {
		                format(szDialog, sizeof(szDialog), "%s\t%s\n", battle_missions_name(i));
		                strcat(szDialog2, szDialog);
		            }
		 
		            ShowPlayerDialogEx(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "winter activities", szDialog2, "Close", "");         
		        }      
		    }
		}*/
		case DIALOG_SOUVENIRESHOP:
		{
			if(!response) return true;
			
			switch(listitem)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pPremiumPoints] < 7000) return SCM(playerid, -1, "Ai nevoie de 7,000 de puncte premium.");
				
					InsertCar(playerid, 61, 3);

					PlayerInfo[playerid][pPremiumPoints] -= 7000;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);

					SCM(playerid, COLOR_DCHAT, "(Souvenire Shop) {ffffff}ai cumparat un Infernus souvenire pentru 7,000 de puncte premium.");
				}

				case 1:
				{
					if(PlayerInfo[playerid][pPremiumPoints] < 5000) return SCM(playerid, -1, "Ai nevoie de 5,000 de puncte premium.");
				
					InsertCar(playerid, 59, 3);

					PlayerInfo[playerid][pPremiumPoints] -= 5000;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);

					SCM(playerid, COLOR_DCHAT, "(Souvenire Shop) {ffffff}ai cumparat un Bullet souvenire pentru 5,000 de puncte premium.");					
				}
			}	
		}	
		case DIALOG_PAGETWO: {
			if(!response) return true;
		    switch(listitem) {
			  case 0: {
					if(PlayerInfo[playerid][pPremiumPoints] < 60) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPremiumPoints] -= 60; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				}
				case 1: ShowPlayerDialogEx(playerid, DIALOG_CARBUY8, DIALOG_STYLE_LIST, "SERVER: Vehicle Dealership", "Sparrow - 300 premium points\nHotring Racer B - 400 premium points\nHotring Racer A - 400 premium points\nVortex - 400 premium points\nHotring Racer - 400 premium points\nMaverick - 500 premium points\nInfernus - 500 premium points", "Select", "Close");
				case 2: ShowPlayerDialogEx(playerid, DIALOG_BUYVOUCHERS, DIALOG_STYLE_LIST, "SHOP", "{ffffff}Normal Voucher - {7E689B}60 {ffffff}premium points\nPremium Voucher - {7E689B}200 {ffffff}premium points\nExtra Voucher - {7E689B}500 {ffffff}premium points", "Buy", "Close");
				case 3: {
					if(PlayerInfo[playerid][pGoldenAccount] >= 1) return SCM(playerid, -1, "Ai deja cont Legendary.");
					if(PlayerInfo[playerid][pPremiumPoints] < 420) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pGoldenAccount] = 1; pUpdateInt(playerid, "GoldenAccount", 1);
					PlayerInfo[playerid][pPremiumPoints] -= 420; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Legendary Account using 420 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 420 premium points to buy a Legendary Account.");
				}
				case 4: {
					if(PlayerInfo[playerid][pPremiumPoints] < 500) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pLevel] += 1; pUpdateInt(playerid, "Level", PlayerInfo[playerid][pLevel]);
					PlayerInfo[playerid][pPremiumPoints] -= 500; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a level up for 500 premium points", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "ai cumparat un level up pentru 500 puncte premium (trebuie sa dai relog pentru a se updata).");
					checkLevelProgress(playerid);
				}
				case 5: {
					if(PlayerInfo[playerid][pPremiumPoints] < 200) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					if(PlayerInfo[playerid][pMoneyBag] >= 1) return SCM(playerid, -1, "Ai deja JobPack-ul cumparat!");
					PlayerInfo[playerid][pMoneyBag] = 1; pUpdateInt(playerid, "MoneyBag", PlayerInfo[playerid][pMoneyBag]);
					PlayerInfo[playerid][pPremiumPoints] -= 200; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a JobPack for 200 premium points", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "(/shop) ai cumparat cu succes un JobPack (-200 puncte premium), acum ai acces la comanda /jobpack.");
				}		
				case 6: ShowPlayerDialogEx(playerid, DIALOG_SOUVENIRESHOP, DIALOG_STYLE_TABLIST_HEADERS, "Souvenire vehicles", "Model\tName\tPrice\n411\tInfernus\t7,000 PP\n541\tBullet\t5,000 PP", "Buy", "Exit");		
				case 7:
				{
					if(PlayerInfo[playerid][pNeon] >= 1) return SCM(playerid, -1, "Deja ai cumparat deja acest item.");
					if(PlayerInfo[playerid][pPremiumPoints] < 850) return SCM(playerid, -1, "Ai nevoie de 850 de premium points.");

					PlayerInfo[playerid][pPremiumPoints] -= 850;
					PlayerInfo[playerid][pNeon] = 1;

					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					pUpdateInt(playerid, "Neon", 1);

					SendAdmins(COLOR_RED, "%s [user: %d] bought a neon vehicle using 850 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);

					SCM(playerid, -1, "(/shop) {ffffff}ai cumparat neon vehicle, acum ai acces la /neon.");											
				}
				case 8: {
					if(PlayerInfo[playerid][pPremiumPoints] < 600) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					if(PlayerInfo[playerid][pWitch] >= 1) return SCM(playerid, -1, "Ai deja acest item cumparat!");
					PlayerInfo[playerid][pWitch] = 1; pUpdateInt(playerid, "Witch", PlayerInfo[playerid][pWitch]);
					PlayerInfo[playerid][pPremiumPoints] -= 600; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Witch Hat for 600 premium points", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "(/shop) ai cumparat cu succes WhitChat (-600 puncte premium), acum ai acces la comanda /witchhat.");
				}
				case 9: {
					if(PlayerInfo[playerid][pReborn] >= 1) return SCM(playerid, -1, "Ai deja gradul de reborn.");
					if(PlayerInfo[playerid][pLevel] < 50) return SCM(playerid, -1, "Nu ai minim nivel 50.");
					if(PlayerInfo[playerid][pPremiumPoints] < 500) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pReborn] = 1; pUpdateInt(playerid, "Reborn", 1);
					PlayerInfo[playerid][pPremiumPoints] -= 500; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Reborn Account using 500 premium points", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 500 premium points to buy Reborn Account");
					PlayerInfo[playerid][pLevel] = 5; pUpdateInt(playerid, "Level", 5);
				}	
				case 10: {
					if(PlayerInfo[playerid][pMp3] >= 1) return SCM(playerid, -1, "Ai deja un mp3");
					if(PlayerInfo[playerid][pPremiumPoints] < 500) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pMp3] = 1; pUpdateInt(playerid, "Mp3", 1);
					PlayerInfo[playerid][pPremiumPoints] -= 500; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Mp3 using 500 premium points", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 150 premium points to buy mp3 player");
				}	
				case 11: {
					if(PlayerInfo[playerid][pPet] >= 1) return SCM(playerid, -1, "Ai deja un pet");
					if(PlayerInfo[playerid][pPremiumPoints] < 300) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPet] = 1; pUpdateInt(playerid, "Pet", 1);
					PlayerInfo[playerid][pPremiumPoints] -= 300; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Pet using 300 premium points", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 300 premium points to buy Personal Pet");
				}
			}
		}
		case DIALOG_AMANET:
		{
		    if(!response) return true;
		 
		    switch(listitem)
		    {
		        case 0:
		        {
		            SCM(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Poti amaneta un vehicul folosind /v - vehicul - amaneteaza.");
		        }
		 
		        case 1:
		        {
		            if(amanet_stock(playerid)) return true;
		            if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		            {
		                new casa = PlayerInfo[playerid][pPhousekey], money;
		 
		                strmid(HouseInfo[casa][hOwner], "amanet", 0, 25, 255);
		 
		                HouseInfo[casa][hOwned] = 1;
		                HouseInfo[casa][hPrice] = 0;
		 
		                gString[0] = (EOS);
		 
		                mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Owned` = '1', `Prices` = '0', `Owner` = 'amanet' WHERE `ID` = '%d' LIMIT 1", casa);
		                mysql_tquery(SQL, gString);
		 
		                PlayerInfo[playerid][pPhousekey] = 999;
		                PlayerInfo[playerid][pRented] = -1;
		                PlayerInfo[playerid][pSpawnChange] = 0;
		 
		                pUpdateInt(playerid, "House", 999);
		                pUpdateInt(playerid, "SpawnChange", 0);
		 
		                OnPropTextdrawUpdate(1,casa);
		 
		                money = HouseInfo[casa][hValue]/2;
		 
		                GivePlayerCash(playerid, money);
		 
		                PlayerInfo[playerid][pDaysAmanet] = 3;
		                PlayerInfo[playerid][pMoneyAmanet] = money;
		                PlayerInfo[playerid][pHouseAmanet] = casa;
		 
		                pUpdateInt(playerid, "DaysAmanet", 3);
		                pUpdateInt(playerid, "MoneyAmanet", money);
		                pUpdateInt(playerid, "HouseAmanet", casa);
		 
		                SCMf(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ti-ai amanetat casa %d si ai primit $%s.", casa, FormatNumber(money));
		                SCM(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ai timp 3 zile pentru a recupera casa.");            
		            }
		        }
		 
		        case 2:
		        {
		            if(amanet_stock(playerid)) return true;
		 
		            new bizz = PlayerInfo[playerid][pPbiskey];
		 
		            if(bizz >= 255) return SCM(playerid, -1, "Nu ai o afacere.");
		 
		            new cash = BizzInfo[bizz][bBuyPrice]/2;
		 
		            GivePlayerCash(playerid, cash);
		 
		            strmid(BizzInfo[bizz][bOwner], "amanet", 0, 25, 255);
		 
		            BizzInfo[bizz][bPrice] = 0;
		            BizzInfo[bizz][bOwned] = 1;
		 
		            gString[0] = (EOS);
		 
		            mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Owned` = '1', `Prices` = '0', `Owner` = 'amanet' WHERE `ID` = '%d' LIMIT 1", bizz);
		            mysql_tquery(SQL, gString);
		 
		            PlayerInfo[playerid][pMoneyAmanet] = cash;
		            PlayerInfo[playerid][pDaysAmanet] = 3;
		            PlayerInfo[playerid][pBusinessAmanet] = bizz;
		 
		            pUpdateInt(playerid, "MoneyAmanet", cash);
		            pUpdateInt(playerid, "DaysAmanet", 3);
		            pUpdateInt(playerid, "BusinessAmanet", bizz);
		 
		            OnPropTextdrawUpdate(2, bizz);
		 
		            SCMf(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ti-ai amanetat afacerea %d pentru $%s.", bizz, FormatNumber(cash));
		            SCM(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ai timp 3 zile pentru a recupera afacerea.");
		 
		            PlayerInfo[playerid][pPbiskey] = 255;
		            pUpdateInt(playerid, "Bizz", 255);                 
		        }
		 
		        case 3:
		        {
		            if(PlayerInfo[playerid][pCarAmanet] < 1) return SCM(playerid, -1, "Nu ai un vehicul amanetat.");
		            if(GetPlayerCash(playerid) < PlayerInfo[playerid][pMoneyAmanet]) return SCM(playerid, -1, "Nu ai destui bani.");
		 
		            GivePlayerCash(playerid, -PlayerInfo[playerid][pMoneyAmanet]);
		 
		            gString[0] = (EOS);
		 
		            mysql_format(SQL, gString, 256, "UPDATE `cars` SET `Owner` = '%s' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pCarAmanet]);
		            mysql_tquery(SQL, gString);
		 
		            SCMf(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ti-ai recuperat vehiculul (%d) si ai platit $%s.", PlayerInfo[playerid][pCarAmanet], FormatNumber(PlayerInfo[playerid][pMoneyAmanet]));
		            SCM(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Daca vehiculele nu se updateaza dai relog.");
		 
		            PlayerInfo[playerid][pMoneyAmanet] = 0;
		            PlayerInfo[playerid][pDaysAmanet] = 0;
		            PlayerInfo[playerid][pCarAmanet] = 0;
		 
		            pUpdateInt(playerid, "MoneyAmanet", 0);
		            pUpdateInt(playerid, "DaysAmanet", 0);
		            pUpdateInt(playerid, "CarAmanet", 0);
		 
		            LoadCar(playerid);
		        }
		 
		        case 4:
		        {
		            if(PlayerInfo[playerid][pHouseAmanet] < 1) return SCM(playerid, -1, "Nu ai o casa amanetata.");
		            if(GetPlayerCash(playerid) < PlayerInfo[playerid][pMoneyAmanet]) return SCM(playerid, -1, "Nu ai destui bani.");
		 
		            GivePlayerCash(playerid, -PlayerInfo[playerid][pMoneyAmanet]);
		 
		            new casa = PlayerInfo[playerid][pHouseAmanet];
		 
		            strmid(HouseInfo[casa][hOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
		 
		            HouseInfo[casa][hPrice] = 0;
		 
		            gString[0] = (EOS);
		 
		            mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Owned` = '1', `Prices` = '0', `Owner` = '%s' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pNormalName], casa);
		            mysql_tquery(SQL, gString);
		 
		            PlayerInfo[playerid][pPhousekey] = casa;
		            pUpdateInt(playerid, "House", casa);
		 
		            OnPropTextdrawUpdate(1, casa); 
		 
		            SCMf(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ti-ai recuperat casa %d pentru $%s.", casa, FormatNumber(PlayerInfo[playerid][pMoneyAmanet]));                  
		 
		            PlayerInfo[playerid][pDaysAmanet] = 0;
		            PlayerInfo[playerid][pMoneyAmanet] = 0;
		            PlayerInfo[playerid][pHouseAmanet] = 0;
		 
		            pUpdateInt(playerid, "DaysAmanet", 0);
		            pUpdateInt(playerid, "MoneyAmanet", 0);
		            pUpdateInt(playerid, "HouseAmanet", 0);
		        }
		 
		        case 5:
		        {
		            if(PlayerInfo[playerid][pBusinessAmanet] < 1) return SCM(playerid, -1, "Nu ai o afacere amentata.");
		            if(GetPlayerCash(playerid) < PlayerInfo[playerid][pMoneyAmanet]) return SCM(playerid, -1, "Nu ai destui bani.");
		       
		            GivePlayerCash(playerid, -PlayerInfo[playerid][pMoneyAmanet]);
		 
		            new bizz = PlayerInfo[playerid][pBusinessAmanet];
		 
		            strmid(BizzInfo[bizz][bOwner], PlayerInfo[playerid][pNormalName], 0, 25, 255);
		 
		            BizzInfo[bizz][bPrice] = 0;
		            BizzInfo[bizz][bOwned] = 1;
		 
		            gString[0] = (EOS);
		 
		            mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Prices` = '0', `Owned` = '1', `Owner` = '%s' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pNormalName], bizz);
		            mysql_tquery(SQL, gString);
		 
		            PlayerInfo[playerid][pPbiskey] = bizz;
		            pUpdateInt(playerid, "Bizz", bizz);
		 
		            OnPropTextdrawUpdate(2, bizz);
		 
		            SCMf(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ti-ai recuperat afacerea %d pentru $%s.", bizz, FormatNumber(PlayerInfo[playerid][pMoneyAmanet]));
		 
		            PlayerInfo[playerid][pDaysAmanet] = 0;
		            PlayerInfo[playerid][pMoneyAmanet] = 0;
		            PlayerInfo[playerid][pBusinessAmanet] = 0;
		 
		            pUpdateInt(playerid, "DaysAmanet", 0);
		            pUpdateInt(playerid, "MoneyAmanet", 0);
		            pUpdateInt(playerid, "BusinessAmanet", 0);
		        }
		    }
		}	
		case DIALOG_PET: {
			if(!response) return true;
			switch(listitem) {
				case 0: { if(PlayerInfo[playerid][pPetStatus] == 0) AttachPet(playerid); else RemovePet(playerid); } 
				case 1: {
					gString[0] = (EOS);
					format(gString, sizeof gString, "{FF0000}Numele petului tau este: %s\n{FFFFFF}Daca doresti sa-l redenumesti introdu in casuta de mai jos numele dorit:", PlayerInfo[playerid][pPetName]); //pUpdateInt(playerid, "PetName", 1);
	                ShowPlayerDialogEx(playerid, DIALOG_PETx, DIALOG_STYLE_INPUT, "Change pet name", gString, "Change", "Exit");
				}
				case 2: ViewPet(playerid);
				case 3: {
					if(PlayerInfo[playerid][pPetPoints] < PlayerInfo[playerid][pPetLevel] * 100) {
						gString[0] = (EOS);
						format(gString, sizeof gString, "You don't have %d Pet Points. You have only %d Pet Points.", PlayerInfo[playerid][pPetLevel] * 100, PlayerInfo[playerid][pPetPoints]); SCM(playerid, COLOR_GREY, gString);
						return 1; 
					}

					if(GetPlayerCash(playerid) < PlayerInfo[playerid][pPetLevel] * 100) {
						gString[0] = (EOS);
						format(gString, sizeof gString, "You need %s$ to upgrade the pet.", FormatNumber(PlayerInfo[playerid][pPetLevel] * 100)); SCM(playerid, COLOR_GREY, gString);
						return true;
					}
					GivePlayerCash(playerid, - PlayerInfo[playerid][pPetLevel] * 1000);
					PlayerInfo[playerid][pPetPoints] -= PlayerInfo[playerid][pPetLevel] * 100; PlayerInfo[playerid][pPetLevel] += 1;
					pUpdateInt(playerid, "PetPoints", PlayerInfo[playerid][pPetPoints]); pUpdateInt(playerid, "PetLevel", PlayerInfo[playerid][pPetLevel]);

					gString[0] = (EOS);
					format(gString, sizeof gString, "Congratulations! Your pet is now of level %d.", PlayerInfo[playerid][pPetLevel]); SCM(playerid, COLOR_GREY, gString); AttachPet(playerid);
				}
				case 4: { ShowPlayerDialogEx(playerid, DIALOG_PETSKIN, DIALOG_STYLE_TABLIST_HEADERS, "Change pet look", "Name\tModel\nParrot\t19078\nDolphin\t1607\nTurtle\t1609\nShark\t1608\nHippo\t1371", "Change", "Exit"); }
			}
			return true;
		}
		case DIALOG_PETSKIN: {
			if(!response) return true;
			switch(listitem) {
				case 0: PlayerInfo[playerid][pPetSkin] = 19079; 
				case 1: PlayerInfo[playerid][pPetSkin] = 1607;
				case 2: PlayerInfo[playerid][pPetSkin] = 1609;
				case 3: PlayerInfo[playerid][pPetSkin] = 1608;
				case 4: PlayerInfo[playerid][pPetSkin] = 1371;
			}
			AttachPet(playerid);
			pUpdateInt(playerid, "PetSkin", PlayerInfo[playerid][pPetSkin]);
			SCM(playerid, COLOR_PRINC, "(Pet): {FFFFFF}Modelul animalului tau de companie a fost schimbat.");
			return true;
		}
		case DIALOG_PETx: {
			if(!response) return true;
			if(!isnull(inputtext)) {
				if(strlen(inputtext) >= 1 && strlen(inputtext) <= 14) {
                   	format(PlayerInfo[playerid][pPetName], 30, inputtext);
                   	gString[0] = (EOS);
					format(gString, sizeof gString, "(Pet): {FFFFFF}Numele petului tau este acum %s.", inputtext); SCM(playerid, COLOR_PRINC, gString);
					pUpdateStr(playerid, "PetName", PlayerInfo[playerid][pPetName]);
					RemovePet(playerid); AttachPet(playerid);
				}
				else {
					gString[0] = (EOS);
					format(gString, sizeof gString, "Nume invalid\n Numele trebuie sa contina intre 4 si 12 caractere si nu trebuie sa contina caractere speciale."); 
                    ShowPlayerDialogEx(playerid, DIALOG_PETx, DIALOG_STYLE_INPUT, "Change pet name", gString, "Change", "Exit");
				}
			}
			else {
				gString[0] = (EOS);
				format(gString, sizeof gString, "Nume invalid\n Numele trebuie sa contina intre 4 si 12 caractere si nu trebuie sa contina caractere speciale."); 
                ShowPlayerDialogEx(playerid, DIALOG_PETx, DIALOG_STYLE_INPUT, "Change pet name", gString, "Change", "Exit");
			}
		}	
		case DIALOG_PETSHOP: {
			if(response) {

				SCM(playerid, -1,"You have bought a personal pet.");

				PlayerInfo[playerid][pPremiumPoints] -= 300; PlayerInfo[playerid][pPet] = 1;

				pUpdateInt(playerid, "Pet", PlayerInfo[playerid][pPet]);
				pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				
				gString[0] = (EOS);
				SCM(playerid, -1,"You paid 300 premium points to buy a personal pet.");

			}
		}	
		case DIALOG_PIN:
		{
			if(!response) return true;

			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialogEx(playerid, DIALOG_LOGIN_PIN, DIALOG_STYLE_INPUT, "Change Pin", "Introdu noul pin", "Insert", "Exit");
				}	

				case 1:
				{
					PlayerInfo[playerid][pPinCode] = 0;
					pUpdateInt(playerid, "PinCode", 0);

					SCM(playerid, COLOR_PRINC, "(PIN): {ffffff}Ti-ai inlaturat pinul de pe cont.");	
				}
			}
		}
		case DIALOG_LOGIN_PIN:
		{
			if(!response) return true;
			if(!IsNumeric(inputtext)) return true;

			new pin = strval(inputtext);

			if(strlen(inputtext) != 4) return SCM(playerid, -1, "Pinul trebuie sa fie format din 4 cifre.");

			PlayerInfo[playerid][pPinCode] = pin;
			pUpdateInt(playerid, "PinCode", pin);

			SCMf(playerid, COLOR_PRINC, ">>{ffffff}Codul tau pin este %d.", pin);
			SCMf(playerid, COLOR_PRINC, ">>{ffffff}Daca ai o problema deschide un ticket pe panel.");

		}	
		case DIALOG_PIN2: 
		{
			if(!response) return ShowPlayerDialogEx(playerid, DIALOG_PIN2, DIALOG_STYLE_INPUT, "Pin", "Please enter a pin code", "Insert", "Exit");
			if(!IsNumeric(inputtext)) return ShowPlayerDialogEx(playerid, DIALOG_PIN2, DIALOG_STYLE_INPUT, "Pin", "Codul pin trebuie sa fie format din 4 cifre", "Insert", "Exit");

			new pin = strval(inputtext);

			if(strlen(inputtext) != 4) return ShowPlayerDialogEx(playerid, DIALOG_PIN2, DIALOG_STYLE_INPUT, "Pin", "Codul pin trebuie sa fie format din 4 cifre", "Insert", "Exit");
	
			PlayerInfo[playerid][pPinCode] = pin;
			pUpdateInt(playerid, "PinCode", pin);	
		}
		case DIALOG_PIN3:
		{
			if(!response)
			{

				defer KickEx(playerid);

				return true;
			}

			if(response) 
			{
				new pin = strval(inputtext);

				if(PlayerInfo[playerid][pPinCode] != pin)
				{

    				ShowPlayerDialogEx(playerid, DIALOG_PIN3, DIALOG_STYLE_INPUT, "Login with pin", "Please enter your pin code", "Insert", "Kick");
				
					return true;
				}
				SCM(playerid, COLOR_PRINC, "(InfoPin): {ffffff}Distractie placuta!");
			}	
		}
		case DIALOG_TRYLUCKY: {
			if(!response) return 1;
			if(GetPlayerCash(playerid) <= strval(inputtext)) return SCM(playerid, COLOR_GREY, "Nu ai aceasta suma la tine!"); 
			if(strval(inputtext) < 10000000) return SCM(playerid, COLOR_GREY, "Suma minima este de $10.000.000");
			new castig = 1 + random(10);
			switch(castig) {
				case 1: {
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
				case 2: {
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
				case 3: {
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
				case 4: {
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
				case 5: {
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
				case 6: {
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
				case 7: {
					new stringsds[128];
					GivePlayerCash(playerid, strval(inputtext)*2);
					SCMf(playerid, COLOR_PRINC, "Azi ai avut noroc si ai {FFFFFF}castigat{CC0000} $%s!", FormatNumber(strval(inputtext)*2));
					format(stringsds, sizeof(stringsds), "%s a avut noroc si a {FFFFFF}castigat{CC0000} $%s!", GetName(playerid), FormatNumber(strval(inputtext)*2));
					SendClientMessageToAll(COLOR_PRINC, stringsds);
				}
				case 8: {
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
				case 9: {
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
				case 10:{
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				} 
				case 11:{
					GivePlayerCash(playerid, -strval(inputtext));
					SCMf(playerid, COLOR_PRINC, "Azi nu ai avut noroc si ai {FFFFFF}pierdut{CC0000} $%s!", FormatNumber(strval(inputtext)));
				}
			}
		}							
		case DIALOG_QUITGROUP: {
			if(!response) return true;
			new string2[128];
			format(string2, sizeof string2, "%s left faction %s (rank %d) after %d days using /quitgroup, with 20 FP.", GetName(playerid), NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank], GetDaysFromTimestamp(PlayerInfo[playerid][pFactionJoin]));
			gString[0] = (EOS);
			mysql_format(SQL, gString, 256, "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','0')", string2, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL,gString);
			if(PlayerInfo[playerid][pMember] == 9) Iter_Remove(Reporters, playerid);
			if(IsACop(playerid)) Iter_Remove(Cops, playerid);	
			if(IsAMember(playerid)) Iter_Remove(Gangsters, playerid);
			SpawnPlayer(playerid); SetPlayerSkin(playerid, 250); SetPlayerArmour(playerid, 0); ResetPlayerWeapons(playerid); ResetPlayerWeaponsEx(playerid);
			PlayerInfo[playerid][pRank] = 0; PlayerInfo[playerid][pMember] = 0; PlayerInfo[playerid][pFactionJoin] = 0; PlayerInfo[playerid][pFpunish] = 20;
			gTeam[playerid] = 3; PlayerInfo[playerid][pTeam] = 3; PlayerInfo[playerid][pModel] = 250;
			pUpdateInt(playerid, "Team", 3); pUpdateInt(playerid, "Member", 0); pUpdateInt(playerid, "Rank", 0); pUpdateInt(playerid, "Model", 250);
			pUpdateInt(playerid, "FPunish", 20); pUpdateInt(playerid, "FWarn", 0); pUpdateInt(playerid, "FactionJoin", 0);	
		}	
      	case DIALOG_RULETA_BLACK:{
            if(rlstarted) return SCM(playerid, -1, "The roulette is already started.");
            new money = strval(inputtext);
            if(money < 10000 || money > 50000000) return SCM(playerid, -1, "You can only bet money between $10.000 and $50.000.000.");
            if(rlbet[playerid][RL_BLACK] != 0) return SCM(playerid, -1, "You had already bet on black.");
            if(GetPlayerCash(playerid) < money) return SCM(playerid, -1, "You don't have enough money.");
            rlbet[playerid][RL_BLACK] = money; GivePlayerCash(playerid , - money); pUpdateInt(playerid, "Money", GetPlayerCash(playerid));
            SCMf(playerid, COLOR_PRINC, ">> {ffffff}You've bet $%s on black | Winning precent: 48 | Winning money: x2", FormatNumber(money));
        }
        case DIALOG_RULETA_GREEN:{
            if(rlstarted) return SCM(playerid, -1, "The roulette is already started.");
            new money = strval(inputtext);
            if(money < 10000 || money > 50000000) return SCM(playerid, -1, "You can only bet money between $10.000 and $50.000.000.");
            if(rlbet[playerid][RL_GREEN] != 0) return SCM(playerid, -1, "You had already bet on green.");
            if(GetPlayerCash(playerid) < money) return SCM(playerid, -1, "You don't have enough money.");
            rlbet[playerid][RL_GREEN] = money; GivePlayerCash(playerid , - money); pUpdateInt(playerid, "Money", GetPlayerCash(playerid));
            SCMf(playerid, COLOR_PRINC, ">> {ffffff}You've bet $%s on green | Winning precent: 2 | Winning money: x14", FormatNumber(money));
        }
        case DIALOG_RULETA_RED:{
            if(rlstarted) return SCM(playerid, -1, "The roulette is already started.");
            new money = strval(inputtext);
            if(money < 10000 || money > 50000000) return SCM(playerid, -1, "You can only bet money between $10.000 and $50.000.000.");
            if(rlbet[playerid][RL_RED] != 0) return SCM(playerid, -1, "You had already bet on red.");
            if(GetPlayerCash(playerid) < money) return SCM(playerid, -1, "You don't have enough money.");
            rlbet[playerid][RL_RED] = money; GivePlayerCash(playerid , - money); pUpdateInt(playerid, "Money", GetPlayerCash(playerid));
            SCMf(playerid, COLOR_PRINC, ">> {ffffff}You've bet $%s on red | Winning precent: 48 | Winning money: x2", FormatNumber(money));
        }		
		case DIALOG_STAFF:
		{
			if(!response) return true;

			new sresult[1000], sdialog2[1000], sdialog[1000], Player, name[64], admin, laston[64], Cache: result, warninings;

			gString[0] = (EOS);

			switch(listitem)
			{
				case 0:
				{
					format(gString, sizeof(gString), "SELECT * FROM `users` WHERE `Admin` > '0' ORDER BY `Admin` DESC");
					result = mysql_query(SQL, gString);

					strcat(sdialog2, "Name\tStatus\tActivity\tStaff Warns\n");

					for(new i, j = cache_get_row_count(); i < j; i++)
					{
						cache_get_field_content(i, "name", sresult); format(name, 64, sresult);
						admin = cache_get_field_content_int(i, "Admin");
						cache_get_field_content(i, "lastOn", sresult); format(laston, 64, "%s", sresult);
						Player = cache_get_field_content_int(i, "HelpedPlayers");
						warninings = cache_get_field_content_int(i, "StaffWarns");

						format(sdialog, sizeof sdialog, "(%d) %s\t%s\t%d\t%d/3\n", admin, name, laston, Player, warninings);
						strcat(sdialog2, sdialog);
					}

					cache_delete(result);

					ShowPlayerDialogEx(playerid, DIALOG_GOL, DIALOG_STYLE_TABLIST_HEADERS, "Administrators", sdialog2, "Close", "");

				}	

				case 1:
				{
					format(gString, sizeof(gString), "SELECT * FROM `users` WHERE `Helper` > '0' ORDER BY `Helper` DESC");
					result = mysql_query(SQL, gString);

					strcat(sdialog2, "Name\tStatus\tActivity\tStaff Warns\n");

					for(new i, j = cache_get_row_count(); i < j; i++)
					{
						cache_get_field_content(i, "name", sresult); format(name, 64, sresult);
						admin = cache_get_field_content_int(i, "Helper");
						cache_get_field_content(i, "lastOn", sresult); format(laston, 64, "%s", sresult);
						Player = cache_get_field_content_int(i, "HelpedPlayers");
						warninings = cache_get_field_content_int(i, "StaffWarns");

						format(sdialog, sizeof sdialog, "(%d) %s\t%s\t%d\t%d/3\n", admin, name, laston, Player, warninings);
						strcat(sdialog2, sdialog);
					}

					cache_delete(result);

					ShowPlayerDialogEx(playerid, DIALOG_GOL, DIALOG_STYLE_TABLIST_HEADERS, "Helpers", sdialog2, "Close", "");
				}
			}
		}
		case DIALOG_GO: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					SetPlayerPosEx(playerid, -1399.4966,994.9622,1024.0919);
					SetPlayerInterior(playerid, 15); SetPlayerVirtualWorld(playerid, 69);
				}
				case 1: {
					SetPlayerPosEx(playerid, -2318.1743,-1638.0083,483.7031);
					SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
				}
				case 2: {
					SetPlayerPosEx(playerid, 1412.0887,-1699.8264,13.5395);
					SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
				}
				case 3: {
					SetPlayerPosEx(playerid, 1477.1122,1713.9915,10.8125);
					SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
				}
				case 4: {
					SetPlayerPosEx(playerid, 140.2305,1370.0297,1083.8652);
					SetPlayerInterior(playerid, 5); SetPlayerVirtualWorld(playerid, 1337);
				}	
				case 5: {
					SetPlayerPosEx(playerid, 1530.7354,-1671.6074,13.3828);
					SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
				}
				case 6: {
					SetPlayerPosEx(playerid, 1910.9034,1240.4482,62.8863); 
					SetPlayerVirtualWorld(playerid, 0); SetPlayerInterior(playerid, 0);
				}
				case 7: {
					SetPlayerPosEx(playerid, 346.5843,-1607.4335,50.2109); 
					SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
				}
				case 8: {
					SetPlayerPosEx(playerid, 1204.809936,-11.586799,1000.921875);
					SetPlayerInterior(playerid, 2); SetPlayerVirtualWorld(playerid, 1337);
				}
				case 9: {
					SetPlayerPosEx(playerid, -2640.762939,1406.682006,906.460937);
					SetPlayerInterior(playerid, 3); SetPlayerVirtualWorld(playerid, 1337);
				}				
			}
		}		
		case DIALOG_RENTVEH:
		{
			if(!response) return true;

			new carid, Float: x, Float: y, Float: z; GetPlayerPos(playerid, x, y, z);

			switch(listitem)
			{
				case 0:
				{
					if(rent_sultan < 1) return SCM(playerid, -1, "Acest vehicul nu este in stock.");

					carid = CreateVehicle(560, x, y, z, 0.0, -1, -1, -1);
					carrent[carid] = carid;	

					rent_sultan --;			
				}

				case 1:
				{
					if(rent_nrg < 1) return SCM(playerid, -1, "Acest vehicul nu este in stock.");

					carid = CreateVehicle(522, x, y, z, 0.0, -1, -1, -1);
					carrent[carid] = carid;	

					rent_nrg --;				
				}

				case 2:
				{
					if(rent_super < 1) return SCM(playerid, -1, "Acest vehicul nu este in stock.");

					carid = CreateVehicle(506, x, y, z, 0.0, -1, -1, -1);
					carrent[carid] = carid;	

					rent_super --;				
				}

				case 3:
				{
					if(rent_sandking < 1) return SCM(playerid, -1, "Acest vehicul nu este in stock.");


					carid = CreateVehicle(495, x, y, z, 0.0, -1, -1, -1);
					carrent[carid] = carid;	

					rent_sandking --;				
				}

				case 4:
				{
					if(rent_flash < 1) return SCM(playerid, -1, "Acest vehicul nu este in stock.");

					carid = CreateVehicle(565, x, y, z, 0.0, -1, -1, -1);
					carrent[carid] = carid;			

					rent_flash --;		
				}

				case 5:
				{
					if(rent_comet < 1) return SCM(playerid, -1, "Acest vehicul nu este in stock.");

					carid = CreateVehicle(480, x, y, z, 0.0, -1, -1, -1);
					carrent[carid] = carid;

					rent_comet --; 					
				}

				case 6:
				{
					if(rent_mtb < 1) return SCM(playerid, -1, "Acest vehicul nu este in stock.");

					carid = CreateVehicle(510, x, y, z, 0.0, -1, -1, -1);
					carrent[carid] = carid;	

					rent_mtb --;				
				}
			}

			BizzInfo[31][bTill] += 25000;
			Gas[carid] = 100;

			SetPVarInt(playerid, "rent_take", carid);
			PutPlayerInVehicleEx(playerid, carid, 0);
			GivePlayerCash(playerid, -50000);

			SCM(playerid, -1, "Ai inchiriat un vehicul, foloseste /unrentveh daca vrei sa renunti la el.");
		}					
		case DIALOG_SPECIALSKIN:
		{
			if(!response) return true;

			switch(listitem)
			{
				case 0:
				{	
					if(PlayerInfo[playerid][pPremiumAccount] < 1) return SCM(playerid, -1, "Nu ai acces la aceasta comanda.");
					
					SetPlayerSkin(playerid, 121);

					PlayerInfo[playerid][pModel] = 121;
					pUpdateInt(playerid, "Model", 121);

					SCM(playerid, COLOR_GREEN, "(premium skin): {ffffff}ai primit skin-ul 121.");
				}
				case 1:
				{
					if(PlayerInfo[playerid][pVIP] < 1) return SCM(playerid, -1, "Nu ai acces la aceasta comanda.");

					SetPlayerSkin(playerid, 271);

					PlayerInfo[playerid][pModel] = 271;
					pUpdateInt(playerid, "Model", 271);

					SCM(playerid, COLOR_GREEN, "(vip skin): {ffffff}ai primit skin-ul 271.");
				}
				case 2:
				{
					if(PlayerInfo[playerid][pGoldenAccount] < 1) return SCM(playerid, -1, "Nu ai acces la aceasta comanda.");

					SetPlayerSkin(playerid, 115);

					PlayerInfo[playerid][pModel] = 115;
					pUpdateInt(playerid, "Model", 115);

					SCM(playerid, COLOR_GREEN, "(Legendary skin): {ffffff}ai primit skin-ul 115.");
				}
				case 3:
				{
					if(PlayerInfo[playerid][pPet] < 1) return SCM(playerid, -1, "Nu ai acces la aceasta comanda.");

					SetPlayerSkin(playerid, 167);

					PlayerInfo[playerid][pModel] = 167;
					pUpdateInt(playerid, "Model", 167);

					SCM(playerid, COLOR_GREEN, "(Pet Chicken): {ffffff}ai primit skin-ul 167.");
				}
			}
		}
		case DIALOG_FREE: {
			if(response) {
				new bani = 15000*PlayerInfo[playerid][pRob];
				GivePlayerCash(playerid, bani);	
				SCMf(playerid, COLOR_PRINC, "* Ai vandut %d free points pentru $%s.", PlayerInfo[playerid][pRob], FormatNumber(bani));
				PlayerInfo[playerid][pRob] = 0; pUpdateInt(playerid, "Rob", 0);
			}	
			return true;
		}
		case DIALOG_JAIL: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pEscapePoints] < 10) return SCM(playerid, -1, "Nu ai 10 escape points.");
					SetPlayerPosEx(playerid, 154.5347,1903.2224,18.7462); SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 1);
					SCM(playerid, COLOR_LIGHTBLUE, "* Mergi la unul dintre gardurile numerotate pentru a evada.");
				} 
				case 1: {
					if(GetPlayerCash(playerid) < 25000000) return SCM(playerid, -1, "Nu ai $25,000,000.");
					PlayerInfo[playerid][pJailed] = 0; PlayerInfo[playerid][pJailTime] = 0;
					pUpdateInt(playerid, "Jailed", 0); pUpdateInt(playerid, "JailTime", 0);
					PlayerTextDrawHide(playerid, Jailtime[playerid]);
					SetPlayerPosEx(playerid, 1539.9564,-1675.2482,13.5497);
					SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
					SCM(playerid, COLOR_PRINC, "Ai iesit din inchisoare deoarece ai platit $25,000,000.");
					GivePlayerCash(playerid, -25000000);
				}
			}
		}
        case DIALOG_FRIENDS_INFO: return cmd_friends(playerid);
        case DIALOG_FRIENDS_MANAGE:{
            if(!response) return cmd_friends(playerid);
            switch(listitem) {
                case 0: {
                    gString[0] = (EOS);
                    format(gString, 256, "SELECT * FROM `users` WHERE `id` = '%d'", BrwFriend[playerid]);
                    new Cache: frlist = mysql_query(SQL, gString);
                    new level, name[25], ph, on, fgid;
                    for(new i; i != 1; ++i) {
                        level = cache_get_field_content_int(i, "Level");
                        ph = cache_get_field_content_int(i, "PhoneNr");
                        cache_get_field_content(i, "name", name);
                        foreach(new ix : Player) { if(PlayerInfo[ix][pSQLID] == BrwFriend[playerid]) on = 1; fgid = ix; break;  }
                        if(on == 1) format(gString, 300, "{ffffff}%s(%d) - {00ff00}ONLINE{ffffff}\nPhone no: %d\nLevel: %d",name,fgid, ph, level);
                        else format(gString, 300, "{ffffff}%s - {7E689B}OFFLINE{ffffff}\nPhone no: %d\nLevel: %d",name, ph, level);                          

                    }
                    cache_delete(frlist);
                    ShowPlayerDialogEx(playerid, DIALOG_FRIENDS_INFO, DIALOG_STYLE_MSGBOX, "Informations", gString, "Back", "");
                }
                case 1:{
                    gString[0] = (EOS);
                    mysql_format(SQL, gString, sizeof(gString), "DELETE FROM `friends` WHERE `pid`='%d' AND `fid` ='%d'", PlayerInfo[playerid][pSQLID],BrwFriend[playerid]);
                    mysql_tquery(SQL, gString, "", "");
                    SCM(playerid, COLOR_PRINC, "Friend Deleted.");
                }
            }
        }
        case DIALOG_FRIENDS_ADD: {
            if(!response) return true;
            new id;
            if(sscanf(inputtext, "u", id)) return ShowPlayerDialogEx(playerid, DIALOG_FRIENDS_ADD, DIALOG_STYLE_INPUT, "Add friend", "Type ID of the player you want to add as a friend:", "Ok", "Cancel");
            if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Player not connected");
            if(playerid == id) return SCM(playerid, -1, "You can't add yourself.");
            gString[0] = EOS; format(gString, 128, "SELECT * FROM `friends` WHERE `pid` = '%d' AND `fid` = '%d'", PlayerInfo[playerid][pSQLID],  PlayerInfo[id][pSQLID]);
            new Cache: frcheck = mysql_query(SQL, gString);
            if(cache_get_row_count() != 0) return SCM(playerid, COLOR_PRINC, "This player is already on your list.");
            cache_delete(frcheck);
            new day, month, year, hour, minute, second;
            gettime(hour, minute, second); getdate(year, month, day);
            mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `friends` (`pid` , `fid`, `since`, `name`) VALUES ('%d', '%d', '%d/%d/%d - %d:%d:%d', '%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[id][pSQLID], day, month, year, hour, minute, second,  PlayerInfo[id][pNormalName]);
            mysql_tquery(SQL, gString);
            SCM(playerid, COLOR_YELLOW, "Friend added.");
            SCMf(id, COLOR_YELLOW, "* %s has added you to their friend list.", GetName(playerid));
        }
        case DIALOG_FRIENDS: {
            if(!response) return true;
            if(!listitem){
                gString[0] = EOS; format(gString, 128, "SELECT * FROM `friends` WHERE `pid` = '%d'", PlayerInfo[playerid][pSQLID]);
                new Cache: frlist = mysql_query(SQL, gString);
                new mid;
                for(new i, j = cache_get_row_count (); i != j; ++i) mid++;
                cache_delete(frlist);
                if(PlayerInfo[playerid][pVIP] == 0 && mid >= 15) return SCM(playerid, COLOR_PRINC, "Poti avea maxim 15 prieteni.");
                if(PlayerInfo[playerid][pVIP] == 1 && mid >= 20) return SCM(playerid, COLOR_PRINC, "Poti avea maxim 20 de prieteni.");
                ShowPlayerDialogEx(playerid, DIALOG_FRIENDS_ADD, DIALOG_STYLE_INPUT, "Add friend", "Type ID of the player you want to add as a friend:", "Ok", "Cancel");
            }
            else {
                BrwFriend[playerid] = SelFriend[playerid][listitem - 1];
                ShowPlayerDialogEx(playerid, DIALOG_FRIENDS_MANAGE, DIALOG_STYLE_LIST, "Manage friend", "Informations\nDelete friend", "Ok", "Back");
            }
        }	
		case DIALOG_CHEATS: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(ac_allowed == 0) ac_allowed = 1;
					else ac_allowed = 0;
				}	
				case 1: {
					if(ac_speedhack == 0) ac_speedhack = 1;
					else ac_speedhack = 0;	
				}	
				case 2: {
					if(ac_onplayerdeath == 0) ac_onplayerdeath = 1;
					else ac_onplayerdeath = 0;
				}
				case 3: {
					if(ac_trolltimer == 0) ac_trolltimer = 1, acdebugserver = 0;
					else ac_trolltimer = 0, acdebugserver = 0;
				}
				case 4: {
					if(ac_crasher == 0) ac_crasher = 1;
					else ac_crasher = 0;
		 		}
		 		case 5: {
		 			if(ac_fakedamage == 0) ac_fakedamage = 1;
		 			else ac_fakedamage = 0;
		 		}
		 		case 6: {
		 			if(ac_teleport == 0) ac_teleport = 1;
		 			else ac_teleport = 0; 	
		 		}
		 		case 7: {
		 			if(blockattack == 0) blockattack = 1;
		 			else blockattack = 0;		
		 		}
		 		case 8: {
		 			if(ac_fly == 0) ac_fly = 1;
		 			else ac_fly = 0;		
		 		}
		 		case 9: {
		 			if(ac_bullets == 0) ac_bullets = 1;
		 			else ac_bullets = 0;		
		 		}		
		 		case 10: {
		 			if(ac_trollvehicle == 0) ac_trollvehicle = 1;
		 			else ac_trollvehicle = 0;
		 		}		 			 				 		
			}
			SCM(playerid, COLOR_DARKPINK, "Changed status.");
		}        	
		case DIALOG_QUESTS: {
			if(!response) return true;
			switch(listitem) {
				case 0: quest_type[playerid] = quest_barbut;
				case 1:	quest_type[playerid] = quest_drog;
				case 2: quest_type[playerid] = quest_find;
				case 3: quest_type[playerid] = quest_credit;
				case 4: quest_type[playerid] = quest_benzina;
				case 5: quest_type[playerid] = quest_flori;
				case 6: quest_type[playerid] = quest_depozit;
				case 7: quest_type[playerid] = quest_food; 
				case 8: quest_type[playerid] = quest_sellcar;
				case 9: quest_type[playerid] = quest_skin;
				case 10: quest_type[playerid] = quest_news;
				case 11: quest_type[playerid] = quest_farmer;
				case 12: {
					if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted.");
					quest_type[playerid] = quest_rob;
				}
				case 13: quest_type[playerid] = quest_contract;
				case 14: quest_type[playerid] = quest_rent;
				case 15: quest_type[playerid] = quest_crate;
			}
			if(last_quest[playerid] == quest_type[playerid]) return SCM(playerid, -1, "Deja ai facut acest quest."), quest_type[playerid] = -1;
			SetPVarInt(playerid, "questget", 1);
			SCMf(playerid, COLOR_PRINC, "(Quests Place): {ffffff}%s.", quest_name(quest_type[playerid]));
			SCM(playerid, COLOR_PRINC, "(Quests Place): {ffffff}Finalizeaza misiunea pentru a castiga premiul.");		
		}        
		case DIALOG_TOG: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					switch(seeClanChat[playerid]) {
						case 0: {
							seeClanChat[playerid] = 1;
							SCM(playerid, COLOR_PRINC, "Clan chat is now enabled.");	
						}
						case 1: {
							seeClanChat[playerid] = 0;
							SCM(playerid, COLOR_PRINC, "Clan chat is now disabled.");
						}
					}
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumAccount] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, "Doar utilizatorii premium pot folosi aceasta optiune.");
					switch(HidePM[playerid]) {
						case 0: {
							HidePM[playerid] = 1;
							SCM(playerid, COLOR_PRINC, "Whisper chat is now enabled.");
						}
						case 1: {	
							HidePM[playerid] = 0;
							SCM(playerid, COLOR_PRINC, "Whisper chat is now disabled.");
						}
					}
				}
				case 2: {
					switch(gFam[playerid]) {
						case 0: {
							gFam[playerid] = 1;
							SCM(playerid, COLOR_PRINC, "Faction chat is now disabled.");
						}
						case 1: {
							gFam[playerid] = 0;
							SCM(playerid, COLOR_PRINC, "Faction chat is now enabled.");
						}
					}
				}
				case 3: {
					switch(gNews[playerid]) {
						case 0: {
							gNews[playerid] = 1;
							SCM(playerid, COLOR_PRINC, "News chat is now disabled.");
						}
						case 1: {
							gNews[playerid] = 0;
							SCM(playerid, COLOR_PRINC, "News chat is now enabled.");
						}
					}
				}
				case 4: {
					if(PlayerInfo[playerid][pLeader] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, "Nu poti accesa aceasta optiune deoarece nu esti lider.");
					switch(toglc[playerid]) {
						case 0: {
							toglc[playerid] = 1;
							SCM(playerid, COLOR_PRINC, "Leader chat is now disabled.");
						}
						case 1: {
							toglc[playerid] = 0;
							SCM(playerid, COLOR_PRINC, "Leader chat is now enabled.");
						}
					}
				}
				case 5: {
					if(PlayerInfo[playerid][pVIP] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, "Nu poti accesa aceasta optiune deoarece nu esti utilizator vip.");
					switch(togvip[playerid]) {
						case 0: {
							togvip[playerid] = 1;
							SCM(playerid, COLOR_PRINC, "VIP chat is now disabled.");
						}
						case 1: {
							togvip[playerid] = 0;
							SCM(playerid, COLOR_PRINC, "VIP chat is now enabled.");
						}
					}
				}
				case 6: {
					switch(togdamage[playerid]) {
						case 0: {
							togdamage[playerid] = 1;
							SCM(playerid, COLOR_PRINC, "Damage Informer is now disabled.");
						}
						case 1: {
							togdamage[playerid] = 0;
							SCM(playerid, COLOR_PRINC, "Damage Informer is now enabled.");
						}
					}
				}
			}
		}		
		case DIALOG_LICENTE: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 200000) return SCM(playerid, -1, "Nu ai 200,000$.");
					if(PlayerInfo[playerid][pGunLicSuspend] >= 1) return SCM(playerid, -1, "Licenta ta de arme este suspendata momentan.");
					if(PlayerInfo[playerid][pGunLic] >= 1) return SCM(playerid, -1, "Deja ai aceasta licenta.");
					GivePlayerCash(playerid, -200000);
					PlayerInfo[playerid][pGunLic] = 50;
					pUpdateInt(playerid, "GunLic", 50);
					SCM(playerid, COLOR_PRINC, "[Licenses]: {ffffff}Ai platit 200,000$ pentru licenta de arme(50 de ore).");
				}
				case 1: {
					if(GetPlayerCash(playerid) < 150000) return SCM(playerid, -1, "Nu ai 150,000$.");
					if(PlayerInfo[playerid][pFlyLic] >= 1) return SCM(playerid, -1, "Deja ai aceasta licenta.");
					GivePlayerCash(playerid, -150000);
					PlayerInfo[playerid][pFlyLic] = 50;
					pUpdateInt(playerid, "FlyLic", 50);
					SCM(playerid, COLOR_PRINC, "[Licenses]: {ffffff}Ai platit 150,000$ pentru licenta de zbor(50 de ore).");
				}
				case 2: {
					if(GetPlayerCash(playerid) < 100000) return SCM(playerid, -1, "Nu ai 100,000$.");
					if(PlayerInfo[playerid][pBoatLic] >= 1) return SCM(playerid, -1, "Deja ai aceasta licenta.");
					GivePlayerCash(playerid, -100000);
					PlayerInfo[playerid][pBoatLic] = 50; 
					pUpdateInt(playerid, "BoatLic", 50);
					SCM(playerid, COLOR_PRINC, "[Licenses]: {ffffff}Ai platit 100,000$ pentru licenta de navigatie(50 de ore).");
				}
			}
		}
		case DIALOG_NOSTOCK: {
			if(!response) return true;
			hidePlayerDialog(playerid);
			BuyCar[playerid] = 0;
		}
		case DIALOG_CARBUY5: {
			if(!response) return true;
			new num = BuyCar[playerid];
			if(GetPlayerCash(playerid) < Stock[num][vPrice]) return SCM(playerid, -1, "You don't have enough money.");
			if(Stock[num][vStock] > 0) InsertCar(playerid, num, 0);
			else ShowPlayerDialogEx(playerid, DIALOG_NOSTOCK, DIALOG_STYLE_MSGBOX, "Out of stock", "You can't buy this vehicle from the dealership. Out of stock.", "Close", "");
			BuyCar[playerid] = -1;
		}
		case DIALOG_CARBUY2: {
			if(!response) return true;
			new num = listitem + 1;
			BuyCar[playerid] = num;
			gString[0] = (EOS);
			format(gString, 256, "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialogEx(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, "Dealership", gString, "Buy", "Close");
		}
		case DIALOG_CARBUY3: {
			if(!response) return true;
			new cheapcars;
			for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++) {
				if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 5200000) cheapcars = xf;
			}	
			new num = listitem + cheapcars + 1;
			BuyCar[playerid] = num;
			gString[0] = (EOS);
			format(gString, 256, "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialogEx(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, "Dealership", gString, "Buy", "Close");
		}
		case DIALOG_CARBUY4: {
			if(!response) return true;
			new regcheapcars;
			for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++) {
				if(Stock[xf][vPrice] > 5200000 && Stock[xf][vPrice] <= 17000000) regcheapcars = xf;
			}
			new num = listitem + regcheapcars + 1;
			BuyCar[playerid] = num;
			gString[0] = (EOS);
			format(gString, 256, "Vehicle name: %s\nVehicle price: %s\nNumber of cars available: %d\nTop speed: %s km/h", Stock[num][vName], FormatNumber(Stock[num][vPrice]), Stock[num][vStock], FormatNumber(Stock[num][vSpeed]));
			ShowPlayerDialogEx(playerid, DIALOG_CARBUY5, DIALOG_STYLE_MSGBOX, "Dealership", gString, "Buy", "Close");
		}
		case DIALOG_CARBUY: {
			if(!response) return true;
			gString[0] = (EOS);
			new stringzz[2100];
			switch(listitem) {
				case 0: {
					for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++) {
						if(Stock[xf][vPrice] > 0 && Stock[xf][vPrice] <= 5200000) {
							format(gString, 256, "%s | Price: $%s | %d in stock\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
							strcat(stringzz, gString);
						}
					}
					ShowPlayerDialogEx(playerid, DIALOG_CARBUY2, DIALOG_STYLE_LIST, "SERVER: Vehicle Dealership", stringzz, "Select", "Close");					
				}
				case 1: {
					for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++) {
						if(Stock[xf][vPrice] > 5200001 && Stock[xf][vPrice] <= 17000000) {
							format(gString, 256, "%s | Price: $%s | %d in stock\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
							strcat(stringzz, gString);
						}
					}
					ShowPlayerDialogEx(playerid, DIALOG_CARBUY3, DIALOG_STYLE_LIST, "SERVER: Vehicle Dealership", stringzz, "Select", "Close");					
				}
				case 2: {
					for(new xf = 0; xf < MAX_PERSONAL_CARS; xf++) {
						if(Stock[xf][vPrice] >= 17000001 && Stock[xf][vPrice] < 350000000) {
							format(gString, 256, "%s | Price: $%s | %d in stock\n", Stock[xf][vName], FormatNumber(Stock[xf][vPrice]), Stock[xf][vStock]);
							strcat(stringzz, gString);
						}
					}
					ShowPlayerDialogEx(playerid, DIALOG_CARBUY4, DIALOG_STYLE_LIST, "SERVER: Vehicle Dealership", stringzz, "Select", "Close");					
				}
				case 3: ShowPlayerDialogEx(playerid, DIALOG_CARBUY8, DIALOG_STYLE_LIST, "SERVER: Vehicle Dealership", "Sparrow - 250 premium points\nHotring Racer B - 400 premium points\nHotring Racer A - 400 premium points\nVortex - 300 premium points\nHotring Racer - 400 premium points\nMaverick - 500 premium points\nInfernus - 500 premium points", "Select", "Close");
			}		
		}
		case DIALOG_CARBUY8: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pPremiumPoints] < 300) return SCM(playerid, -1, "Nu ai minim 300 premium points.");
					InsertCar(playerid, 62, 1);
					PlayerInfo[playerid][pPremiumPoints] -= 300; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Sparrow from Dealership for 250 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]); 
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 400) return SCM(playerid, -1, "Nu ai minim 400 premium points.");
					InsertCar(playerid, 63, 1);
					PlayerInfo[playerid][pPremiumPoints] -= 400; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Hotring Racer B from Dealership for 400 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 2: {
					if(PlayerInfo[playerid][pPremiumPoints] < 400) return SCM(playerid, -1, "Nu ai minim 400 premium points.");
					InsertCar(playerid, 64, 1);
					PlayerInfo[playerid][pPremiumPoints] -= 400; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Hotring Racer A from Dealership for 400 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 3: {
					if(PlayerInfo[playerid][pPremiumPoints] < 400) return SCM(playerid, -1, "Nu ai minim 400 premium points.");
					InsertCar(playerid, 65, 1);
					PlayerInfo[playerid][pPremiumPoints] -= 400; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Vortex from Dealership for 300 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);			
				}
				case 4: {
					if(PlayerInfo[playerid][pPremiumPoints] < 400) return SCM(playerid, -1, "Nu ai minim 400 premium points.");
					InsertCar(playerid, 66, 1);
					PlayerInfo[playerid][pPremiumPoints] -= 400; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Hotring Racer from Dealership for 400 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);					
				}
				case 5: {
					if(PlayerInfo[playerid][pPremiumPoints] < 500) return SCM(playerid, -1, "Nu ai minim 500 premium points.");
					InsertCar(playerid, 67, 1);
					PlayerInfo[playerid][pPremiumPoints] -= 500; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Maverick from Dealership for 500 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 6: {
					if(PlayerInfo[playerid][pPremiumPoints] < 500) return SCM(playerid, -1, "Nu ai minim 500 premium points.");
					InsertCar(playerid, 61, 1);
					PlayerInfo[playerid][pPremiumPoints] -= 500; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Infernus from Dealership for 500 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
			}
		}
		case DIALOG_NEWPASS: {
			if(!response) return true;
			new length = strlen(inputtext);
			if(length == 0 || length > 15) return SCM(playerid, -1, "Please enter another password (maximum 15 characters).");
			format(PlayerInfo[playerid][pKey], 129, MD5_Hash(inputtext));
			SCM(playerid, COLOR_SKEMA2, "Password changed.");
			SCMf(playerid, COLOR_SKEMA2, "Your new password is: %s", inputtext);
			SendAdmins(COLOR_PRINC, "%s [user: %d] changed his password.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
			pUpdateStr(playerid, "password", PlayerInfo[playerid][pKey]);
			gString[0] = (EOS);
		    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s changed password')", PlayerInfo[playerid][pSQLID], GetName(playerid));
		    mysql_tquery(SQL, gString, "", "");				
		}
		case DIALOG_CLAN_TAG:
		{
			if(!response) return true;

			new tagclan[24], clan = PlayerInfo[playerid][pClan];

			switch(listitem)
			{
				case 0: format(tagclan, sizeof tagclan, "%s", PlayerInfo[playerid][pNormalName]);
				case 1: format(tagclan, sizeof tagclan, "%s%s", PlayerInfo[playerid][pNormalName], clanVariables[clan][clanTag]);
			}

			SetPlayerName(playerid, tagclan);
			SCMf(playerid, COLOR_GREY, "Your nickname is now %s.", tagclan);

			PlayerInfo[playerid][pClanTag] = listitem;
			pUpdateInt(playerid, "ClanTag", listitem);

		}		
		case DIALOG_VIPWHEELS: {
			if(!response) return 1;
			switch(listitem) {
				case 0:
				{
					new idcar=-1, carid = GetPlayerVehicleID(playerid);
					for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
					{
						if(carid == PlayerInfo[playerid][pCarID][vv])
						{
							idcar = vv;
						}
					}
					if(idcar == -1) return SCM(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.");
					if(carid == PlayerInfo[playerid][pCarID][idcar])
					{
						if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
						{
							AddVehicleComponent(carid, 1080); CarMod[playerid][idcar][15] = 1080;
						}
					}
				}
				case 1:
				{
					new idcar=-1, carid = GetPlayerVehicleID(playerid);
					for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
					{
						if(carid == PlayerInfo[playerid][pCarID][vv])
						{
							idcar = vv;
						}
					}
					if(idcar == -1) return SCM(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.");
					if(carid == PlayerInfo[playerid][pCarID][idcar])
					{
						if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
						{
							AddVehicleComponent(carid, 1083); CarMod[playerid][idcar][15] = 1083;
						}
					}
				}
				case 2:
				{
					new idcar=-1, carid = GetPlayerVehicleID(playerid);
					for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++)
					{
						if(carid == PlayerInfo[playerid][pCarID][vv])
						{
							idcar = vv;
						}
					}
					if(idcar == -1) return SCM(playerid, COLOR_LIGHTGREEN3, "Poti folosi aceasta comanda doar pe vehicule VIP.");
					if(carid == PlayerInfo[playerid][pCarID][idcar])
					{
						if(PlayerInfo[playerid][pCarVIP][idcar] > 0)
						{
							AddVehicleComponent(carid, 1073); CarMod[playerid][idcar][15] = 1073;
						}
					}
				}
			}
		}
		case DIALOG_CLAN: {
			if(!response) return true;
			switch(listitem) {
				case 0 : SendClientMessage(playerid, -1, "/clan - clan menu, /c - clan chat, /cinvite - invite member to clan, /quitclan - quit the clan");
				case 1: {
					gString[0] = (EOS);
					mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `Clan` = '%d' ORDER BY `CRank` DESC", PlayerInfo[playerid][pClan]);
					mysql_tquery(SQL, gString, "showClanMembers", "d", playerid);
				}
				case 2: ShowPlayerDialogEx(playerid, DIALOG_CLANSETTINGS, DIALOG_STYLE_LIST, "Clan Options:", "Ranknames\nColor", "Ok", "Exit");
				case 3: {
					gString[0] = (EOS);
					format(gString, sizeof(gString), "{FFFFFF}Clanul tau are la dispozitie {AA3333}%s${FFFFFF}.\nBanii acestia se castiga la fiecare zona de clan castigata.\nCu acesti bani puteti cumpara vehicule clanului.", FormatNumber(clanVariables[PlayerInfo[playerid][pClan]][clanSafe]));
					ShowPlayerDialogEx(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Clan safe:", gString, "Ok", "");
				}
				case 4: {
					new count = 1; gString[0] = (EOS);
					format(gString, sizeof(gString), "Vehicul\tID InGame\n{FFFF00}[+} buy a clan vehicle\n");
					for(new i = 1; i <= serverClanVehicles; i++) {
						if(clanVehiclesVariables[i][clanVehicleClan] == PlayerInfo[playerid][pClan]) {
							format(gString, sizeof(gString), "%s%s\t%d\n", gString, aVehicleNames[clanVehiclesVariables[i][clanVehicleModel] - 400], clanVehiclesVariables[i][clanVehicleInGame]);
							Selected[playerid][count] = i;
							count ++;
						}
					} ShowPlayerDialogEx(playerid, DIALOG_CLANVEHS, DIALOG_STYLE_TABLIST_HEADERS, "Clan Vehicles", gString, "Ok", "Exit");
				}
				case 5: {
					new zone[30]; gString[0] = (EOS);
					format(gString, sizeof(gString), "#ID\tClan\tZona\n");
					for(new i = 1; i <= serverClanZones; i++) {
						if(!clanZoneVariables[i][clanZoneClan]) format(string, sizeof string, "Nimeni");
						else format(string, sizeof string, "%s", clanVariables[clanZoneVariables[i][clanZoneClan]][clanName]);
						Get3DZone(clanZoneVariables[i][clanZoneObjX], clanZoneVariables[i][clanZoneObjY], clanZoneVariables[i][clanZoneObjZ], zone, 30);
						format(gString, sizeof(gString), "%s#%d\t%s\t%s\n", gString, i, string, zone);
					} ShowPlayerDialogEx(playerid, DIALOG_CLANCHECKPOINTTURF, DIALOG_STYLE_TABLIST_HEADERS, "Zone de clanuri:", gString, "Ok", "Exit");
				}
			}
		}
		case DIALOG_CLANVEHS: {
			if(!response) return true;
			if(listitem == 0) {
				if(PlayerInfo[playerid][pCRank] < 7) return SCM(playerid, -1, "Only leaders.");
				gString[0] = (EOS);
				format(gString, sizeof(gString), "Model\tPrice\nInfernus\t50.000.000$\nBullet\t45.000.000$\nSultan\t42.500.000$\nTurismo\t40.000.000$\nBanshee\t35.000.000$\nSandking\t30.000.000$\nHuntley\t25.000.000$\nElegy\t20.000.000$\nComet\t10.000.000$");
				ShowPlayerDialogEx(playerid, DIALOG_BUYCLANVEH, DIALOG_STYLE_TABLIST_HEADERS, "Buy a clan vehicle", gString, "Ok", "Cancel");
			} else {
				Selected2[playerid] = Selected[playerid][listitem]; new i = Selected2[playerid]; gString[0] = (EOS);
				format(gString, sizeof(gString), "Item\tValoare curenta\nSchimba rank\trank %d\nSchimba culoarea 1\tculoarea %d\nSchimba culoarea 2\tculoarea %d\nParcheaza vehicul\nLocalizeaza vehicul\nRespawneaza vehicul", clanVehiclesVariables[i][clanVehicleRank], clanVehiclesVariables[i][clanVehicleColor1], clanVehiclesVariables[i][clanVehicleColor2]);
				ShowPlayerDialogEx(playerid, DIALOG_CLANVEHS + 2050, DIALOG_STYLE_TABLIST_HEADERS, "Clan vehicles:", gString, "Ok", "Exit");
			}
		}
		case DIALOG_CLANVEHS + 2051: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 7) return true;
			if(strval(inputtext) < 1 || strval(inputtext) > 5) return SendClientMessage(playerid, -1, "Rank invalid.");
			new i = Selected2[playerid]; gString[0] = (EOS);
			clanVehiclesVariables[i][clanVehicleRank] = strval(inputtext);
			mysql_format(SQL, gString, sizeof(gString), "UPDATE `clanvehicles` SET `clanVehicleRank` = '%d' WHERE `clanVehicleID` = '%d'", strval(inputtext), clanVehiclesVariables[i][clanVehicleID]);
			mysql_tquery(SQL, gString, "", "");
			SCM(playerid, COLOR_DARKPINK, "Rank schimbat cu succes.");
		}
		case DIALOG_CLANVEHS + 2052: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 7) return true;
			if(strval(inputtext) < 0 || strval(inputtext) > 255) return SendClientMessage(playerid, -1, "Culoare invalid.");
			new i = Selected2[playerid]; gString[0] = (EOS);
			clanVehiclesVariables[i][clanVehicleColor1] = strval(inputtext);
			mysql_format(SQL, gString, sizeof(gString), "UPDATE `clanvehicles` SET `clanVehicleColor1` = '%d' WHERE `clanVehicleID` = '%d'", strval(inputtext), clanVehiclesVariables[i][clanVehicleID]);
			mysql_tquery(SQL, gString, "", "");
			SCM(playerid, COLOR_DARKPINK, "Culoare schimbata cu succes.");
			DestroyVehicle(clanVehiclesVariables[i][clanVehicleInGame]);
			DestroyDynamicObject(clanVehiclesVariables[i][clanVehicleObject]);
			createClanVehicle(i);
		}
		case DIALOG_CLANVEHS + 2053: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 7) return true;
			if(strval(inputtext) < 0 || strval(inputtext) > 255) return SendClientMessage(playerid, -1, "Culoare invalid.");
			new i = Selected2[playerid]; gString[0] = (EOS);
			clanVehiclesVariables[i][clanVehicleColor2] = strval(inputtext);
			mysql_format(SQL, gString, sizeof(gString), "UPDATE `clanvehicles` SET `clanVehicleColor2` = '%d' WHERE `clanVehicleID` = '%d'", strval(inputtext), clanVehiclesVariables[i][clanVehicleID]);
			mysql_tquery(SQL, gString, "", "");
			SCM(playerid, COLOR_DARKPINK, "Culoare schimbata cu succes.");
			DestroyVehicle(clanVehiclesVariables[i][clanVehicleInGame]);
			DestroyDynamicObject(clanVehiclesVariables[i][clanVehicleObject]);
			createClanVehicle(i);
		}
		case DIALOG_CLANVEHS + 2050: {
			if(!response) return true;
			new i = Selected2[playerid], Float: x, Float: y, Float: z, Float: a;
			switch(listitem) {
				case 0: ShowPlayerDialogEx(playerid, DIALOG_CLANVEHS + 2051, DIALOG_STYLE_INPUT, "Clan change rank:", "Scrie mai jos rankul pe care vrei sa-l aiba aceasta masina.", "Ok", "Cancel");
				case 1: ShowPlayerDialogEx(playerid, DIALOG_CLANVEHS + 2052, DIALOG_STYLE_INPUT, "Clan change color:", "Scrie mai jos culoarea pe care vrei sa o aiba aceasta masina.", "Ok", "Cancel");
				case 2: ShowPlayerDialogEx(playerid, DIALOG_CLANVEHS + 2053, DIALOG_STYLE_INPUT, "Clan change color:", "Scrie mai jos culoarea pe care vrei sa o aiba aceasta masina.", "Ok", "Cancel");
				case 3: {
					if(PlayerInfo[playerid][pCRank] < 7) return true;
					if(GetPlayerVehicleID(playerid) != clanVehiclesVariables[i][clanVehicleInGame]) return SendClientMessage(playerid, -1, "Trebuie sa fii in acel vehicul pentru a-l parca.");
					GetVehiclePos(GetPlayerVehicleID(playerid), x, y, z); GetVehicleZAngle(GetPlayerVehicleID(playerid), a); gString[0] = (EOS);
					DestroyVehicle(clanVehiclesVariables[i][clanVehicleInGame]);
					DestroyDynamicObject(clanVehiclesVariables[i][clanVehicleObject]);
					clanVehiclesVariables[i][clanVehicleX] = x; clanVehiclesVariables[i][clanVehicleY] = y; clanVehiclesVariables[i][clanVehicleZ] = z; clanVehiclesVariables[i][clanVehicleA] = a;
					mysql_format(SQL, gString, sizeof(gString), "UPDATE `clanvehicles` SET `clanVehicleX` = '%f', `clanVehicleY` = '%f', `clanVehicleZ` = '%f', `clanVehicleA` = '%f' WHERE `clanVehicleID` = '%d'", x, y, z, a, clanVehiclesVariables[i][clanVehicleID]);
					mysql_tquery(SQL, gString, "", "");
					SCM(playerid, COLOR_DARKPINK, "Ai parcat vehiculul clanului cu succes.");
					createClanVehicle(i);
				}
				case 4: {
					GetVehiclePos(clanVehiclesVariables[i][clanVehicleInGame], x, y, z);
					SetPlayerCheckpoint(playerid, x, y, z, 5.0);
					SCM(playerid, COLOR_DARKPINK, "Serverul ti-a setat un checkpoint la vehiculul respectiv.");
					CP[playerid] = 43;
				}
				case 5: {
					if(IsVehicleOccupied(clanVehiclesVariables[i][clanVehicleInGame])) return SCM(playerid, -1, "Acest vehicul este utilizat.");
					SetVehicleToRespawn(clanVehiclesVariables[i][clanVehicleInGame]);
					SCM(playerid, -1, "Ai respawnat vehiculul cu succes.");
				}
			}
		}
		case DIALOG_BUYCLANVEH: {
			if(!response) return true;
			gString[0] = (EOS); desiredModel[playerid] = clanVehs[listitem]; desiredModelPrice[playerid] = clanVehsPrices[listitem];
			format(gString, sizeof(gString), "Esti sigur ca vrei sa cumperi acest %s? Te va costa %s$ din seiful clanului.", aVehicleNames[desiredModel[playerid] - 400], FormatNumber(desiredModelPrice[playerid]));
			ShowPlayerDialogEx(playerid, DIALOG_BUYCLANVEH + 2000, DIALOG_STYLE_MSGBOX, "Buy a clan vehicle..", gString, "Ok", "Cancel");
		}
		case DIALOG_BUYCLANVEH + 2000: {
			if(!response) return true;
			if(clanVariables[PlayerInfo[playerid][pClan]][clanSafe] < desiredModelPrice[playerid]) return SendClientMessage(playerid, -1, "Clanul tau nu are suficienti bani in seif.");
			SCM(playerid, -1, "Processing your request..");
			mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `clanvehicles` (`clanVehicleModel` , `clanVehicleClan`) VALUES ('%d', '%d')", desiredModel[playerid], PlayerInfo[playerid][pClan]);
			mysql_tquery(SQL, gString, "insertClanVehicles", "ddd", playerid, desiredModel[playerid], PlayerInfo[playerid][pClan]);
		}
		case DIALOG_CLANCHECKPOINTTURF: {
			if(!response) return true;
			CP[playerid] = 43;
			SetPlayerCheckpoint(playerid, clanZoneVariables[listitem + 1][clanZoneObjX], clanZoneVariables[listitem + 1][clanZoneObjY], clanZoneVariables[listitem + 1][clanZoneObjZ], 10.0);
			SCMf(playerid, COLOR_PRINC, "Serverul ti-a setat un checkpoint la zona de clan %d.", listitem + 1);
		}
		case DIALOG_CLANMEMBERS: {
			if(!response)return true;
			gString[0] = (EOS); Selected2[playerid] = Selected[playerid][listitem];
			mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `id` = '%d'", Selected[playerid][listitem]);
			mysql_tquery(SQL, gString, "checkClanMember", "d", playerid);
		}
		case DIALOG_CLANMEMBERS2: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 5) return true;
			ShowPlayerDialogEx(playerid, DIALOG_CLANMEMBERS3, DIALOG_STYLE_LIST, "Manage User:", "Set clan rank\nSet clan warns\nUninvite from clan", "Select", "Exit");
		}
		case DIALOG_CLANMEMBERS3: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pCRank] < 7) return SCM(playerid, -1, "Nu ai rank 7.");
					gString[0] = (EOS);
					format(gString, sizeof(gString), "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\n%s", (PlayerInfo[playerid][pCRank] == 7) ? ("Rank 6\nRank 7 - vei primi rank 6") : (""));
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_RANK, DIALOG_STYLE_LIST, "Set a rank:", gString, "Ok", "Exit");
				}
				case 1: {
					if(PlayerInfo[playerid][pCRank] < 6) return true;
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_WARNS, DIALOG_STYLE_LIST, "Set warns:", "0/3 Warns\n1/3 Warns\n2/3 Warns", "Ok", "Exit");
				}
				case 2: {
					if(PlayerInfo[playerid][pCRank] < 6) return true;
					gString[0] = (EOS);
					mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `id` = '%d'", Selected2[playerid]);
					mysql_tquery(SQL, gString, "clanUninvite", "d", playerid);
				}
			}
		}
		case DIALOG_CLAN_WARNS: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `id` = '%d'", Selected2[playerid]);
			mysql_tquery(SQL, gString, "clanWarn", "dd", playerid, listitem);
		}
		case DIALOG_CLAN_RANK: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 7) return true;
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `id` = '%d'", Selected2[playerid]);
			switch(listitem) {
				case 0..5: 	mysql_tquery(SQL, gString, "clanChangeRank", "dddd", playerid, CLAN_CHANGE_RANK_LOWER_7, listitem + 1, PlayerInfo[playerid][pClan]);
				case 6: mysql_tquery(SQL, gString, "clanChangeRank", "dddd", playerid, CLAN_CHANGE_RANK_EQUAL_7, listitem + 1, PlayerInfo[playerid][pClan]);
			}
		}
		case DIALOG_CLANSETTINGS: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			switch(listitem) {
				case 0: {
					new clan = PlayerInfo[playerid][pClan]; gString[0] = (EOS);
					format(gString, sizeof(gString), "Rank 1: %s\nRank 2: %s\nRank 3: %s\nRank 4: %s\nRank 5: %s\nRank 6: %s\nRank 7: %s", clanVariables[clan][clanRankName1], clanVariables[clan][clanRankName2], clanVariables[clan][clanRankName3], clanVariables[clan][clanRankName4], clanVariables[clan][clanRankName5], clanVariables[clan][clanRankName6], clanVariables[clan][clanRankName7]);
					ShowPlayerDialogEx(playerid, DIALOG_CLAN_CHANGERANK, DIALOG_STYLE_LIST, "Clan RankNames:", gString, "Ok", "Exit");
				}
				case 1: ShowPlayerDialogEx(playerid, DIALOG_CLAN_COLOR, DIALOG_STYLE_INPUT, "Clan Colors:", "You can visit https://www.webpagefx.com/web-design/color-picker/ to pick a color.", "Ok", "Exit");
			}
		}
		case DIALOG_CLAN_CHANGERANK: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			gString[0] = (EOS);
			format(gString, sizeof(gString), "Current clan rank %d: %s\n\nSet a new rank name:", listitem + 1, getClanNameByID(PlayerInfo[playerid][pClan], listitem + 1));
			ShowPlayerDialogEx(playerid, DIALOG_CLAN_CHANGERANK2, DIALOG_STYLE_INPUT, "Clan Colors:", gString, "Ok", "Exit"); Selected2[playerid] = listitem + 1;
		}
		case DIALOG_CLAN_CHANGERANK2: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			switch(Selected2[playerid]) {
				case 1: format(clanVariables[PlayerInfo[playerid][pClan]][clanRankName1], 32, "%s", inputtext);
				case 2: format(clanVariables[PlayerInfo[playerid][pClan]][clanRankName2], 32, "%s", inputtext);
				case 3: format(clanVariables[PlayerInfo[playerid][pClan]][clanRankName3], 32, "%s", inputtext);
				case 4: format(clanVariables[PlayerInfo[playerid][pClan]][clanRankName4], 32, "%s", inputtext);
				case 5: format(clanVariables[PlayerInfo[playerid][pClan]][clanRankName5], 32, "%s", inputtext);
				case 6: format(clanVariables[PlayerInfo[playerid][pClan]][clanRankName6], 32, "%s", inputtext);
				case 7: format(clanVariables[PlayerInfo[playerid][pClan]][clanRankName7], 32, "%s", inputtext);
			}
			mysql_format(SQL, gString, sizeof(gString), "UPDATE `clans` SET `clanRankName%d` = '%e' WHERE `clanID` = '%d'", Selected2[playerid], inputtext, PlayerInfo[playerid][pClan]);
			mysql_tquery(SQL, gString, "", "");
			SCMf(playerid, -1, "{%s}Clan rank %d: %s", clanVariables[PlayerInfo[playerid][pClan]][clanColor], Selected2[playerid], inputtext);
		}
		case DIALOG_CLAN_COLOR: {
			if(!response) return true;
			if(PlayerInfo[playerid][pCRank] < 6) return true;
			if(strlen(inputtext) != 6) return SendClientMessage(playerid, -1, "Culoare invalida.");
			format(clanVariables[PlayerInfo[playerid][pClan]][clanColor], 20, "%s", inputtext);
			mysql_format(SQL, gString, sizeof(gString), "UPDATE `clans` SET `clanColor` = '%e' WHERE `clanID` = '%d'", inputtext, PlayerInfo[playerid][pClan]);
			mysql_tquery(SQL, gString, "", "");
			SCMf(playerid, -1, "Clan color changed to {%s}%s{FFFFFF}.", clanVariables[PlayerInfo[playerid][pClan]][clanColor], clanVariables[PlayerInfo[playerid][pClan]][clanColor]);
		}
		case DIALOG_QUITCLAN: {
			if(!response) return true;
			new clan = PlayerInfo[playerid][pClan];
			SendToClan(clan, -1, "{%s}[CLAN] %s has left the clan (using /quitclan).", clanVariables[clan][clanColor], GetName(playerid));
			SCMf(playerid, -1, "{%s}You have left the %s.", clanVariables[clan][clanColor], clanVariables[clan][clanName]);
			gString[0] = (EOS);	
	   	    mysql_format(SQL, gString, 300, "INSERT INTO `clan_logs` (`clanid`, `text`) VALUES ('%d', '%s a parasit clanul.')", PlayerInfo[playerid][pClan], GetName(playerid));
	   		mysql_tquery(SQL, gString, "", "");	
			SetPlayerName(playerid, PlayerInfo[playerid][pNormalName]);
			pUpdateInt(playerid, "Clan", 0); PlayerInfo[playerid][pClan] = 0;
			pUpdateInt(playerid, "CRank", 0); PlayerInfo[playerid][pCRank] = 0;
			pUpdateInt(playerid, "ClanWarns", 0); PlayerInfo[playerid][pCWarns] = 0;
			pUpdateInt(playerid, "ClanJoin", 0);
			playerTextDrawSetString(playerid, LogoTD, "%s/RPG.BLACK~p~MOON~w~.RO", PlayerInfo[playerid][pNormalName]);
            PlayerTextDrawShow(playerid, LogoTD);			
		}
		case DIALOG_CHOOSECLANNAME: {
			if(!response) return ShowPlayerDialogEx(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Scrie mai jos numele pe care il doresti clanului.", "Ok", "");
			if(strlen(inputtext) < 3 || strlen(inputtext) > 20) return ShowPlayerDialogEx(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Scrie mai jos numele pe care il doresti clanului.", "Ok", "");
			mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `clans` WHERE `clanName` = '%e'", inputtext);
			mysql_tquery(SQL, gString, "checkClanName", "ds", playerid, inputtext);
		}
		case DIALOG_CHOOSECLANTAG: {
			if(!response) return ShowPlayerDialogEx(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag:", "Scrie mai jos tagul pe care il doresti clanului.", "Ok", "");
			if(strlen(inputtext) < 2 || strlen(inputtext) > 5) return ShowPlayerDialogEx(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag:", "Scrie mai jos tagul pe care il doresti clanului.", "Ok", "");
			mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `clans` WHERE `clanTag` = '%e'", inputtext);
			mysql_tquery(SQL, gString, "checkClanTag", "ds", playerid, inputtext);
		}
		case DIALOG_VEHSPAWN: {
			if(!response) return true;
			new s = listitem;
			format(gString, 128, "Manage your %s", aVehicleNames[PlayerInfo[playerid][pCarModel][s] - 400]);
			SelectedCar[playerid] = s;
			ShowPlayerDialogEx(playerid, DIALOG_VEHSPAWNCAR, DIALOG_STYLE_LIST, gString, "{FFFFFF}Vehicle Info\nTow Vehicle (/park)\nFind Vehicle\nBuy Insurance\nClear Age and KM - 20 premium points\nUnstuck Vehicle\nUpgrade to vip vehicle - {7E689B}250 premium points\nAdd rainbow - {7E689B}150 premium points\n{ffffff}Activate rainbow\nAmaneteaza\nUpgrade to transcendent -{7E689B} $900.000.000\n(T) Get vehicle to you", "Select", "Close");
		}
		case DIALOG_VEHSPAWNCAR: {
		    if(!response) return true;
		    switch(listitem) {
		        case 0 : {
		            new i = SelectedCar[playerid], speed = MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]);
		            gString[0] = (EOS);
		            format(gString, 256, "Vehicle Model: %d\nDistance Traveled: %.0f KM\nVehicle Age: %d days\nInsurance Price: $%s\nInsurance Points: %d\nTop speed: %d km/h", PlayerInfo[playerid][pCarModel][i], PlayerInfo[playerid][pCarKM][i], GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][i]), FormatNumber(PlayerInfo[playerid][pCarInsPrice][i]), PlayerInfo[playerid][pCarIns][i], speed);
		            ShowPlayerDialogEx(playerid, DIALOG_VEHINFO, DIALOG_STYLE_MSGBOX, "Vehicle Info", gString, "Close", "");
		        }
		        case 1: {
		        	//vehicle spawn
		            new i = SelectedCar[playerid], engine, lights, alarm, doors, bonnet, boot, objective;
		            if(IsTrailerAttachedToVehicle(PlayerInfo[playerid][pCarID][i])) return SCM(playerid, -1, "On a mission right now, can't use this command.");
		            if(!CarTow(PlayerInfo[playerid][pCarID][i]) && PlayerInfo[playerid][pCarID][i] != 0) return SCM(playerid, -1, "The car is in use and it can't be towed.");
		            if(PlayerInfo[playerid][pCarID][i] != 0) DestroyVehicle(PlayerInfo[playerid][pCarID][i]);
		            if(GetPlayerCash(playerid) < 2000) return SCM(playerid, -1, "Ai nevoie de minim 2,000$ pentru a folosi aceasta comanda.");	
		            LoadCar(playerid);
		            PlayerInfo[playerid][pCarID][i] = CreateVehicle(PlayerInfo[playerid][pCarModel][i], PlayerInfo[playerid][pCarLocX][i], PlayerInfo[playerid][pCarLocY][i], PlayerInfo[playerid][pCarLocZ][i], PlayerInfo[playerid][pCarAngle][i], PlayerInfo[playerid][pCarColor1][i], PlayerInfo[playerid][pCarColor2][i], -1);
		            RepairVehicle(PlayerInfo[playerid][pCarID][i]);
		            SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][i], CarPlate[playerid][i]);
		            if(PlayerInfo[playerid][pCarTranscendent][i] < 1) SetVehicleHealth(PlayerInfo[playerid][pCarID][i], 1000);
		            if(PlayerInfo[playerid][pCarTranscendent][i] >= 1) SetVehicleHealth(PlayerInfo[playerid][pCarID][i], 1200);
		            UpdateVehicleDamageStatus(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarDamage1][i], PlayerInfo[playerid][pCarDamage2][i], PlayerInfo[playerid][pCarDamage3][i], PlayerInfo[playerid][pCarDamage4][i]);
		            Gas[PlayerInfo[playerid][pCarID][i]] = PlayerInfo[playerid][pCarGas][i];
		            if(PlayerInfo[playerid][pCarLock][i] == 0) { GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i], engine, lights, alarm, doors, bonnet, boot, objective); SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i], VEHICLE_PARAMS_OFF, lights, alarm, 0, bonnet, boot, objective); }
		            else { GetVehicleParamsEx(PlayerInfo[playerid][pCarID][i], engine, lights, alarm, doors, bonnet, boot, objective); SetVehicleParamsEx(PlayerInfo[playerid][pCarID][i], VEHICLE_PARAMS_OFF, lights, alarm, 1, bonnet, boot, objective); }
		            for(new d; d < 17; d++) { if(CarMod[playerid][i][d] != 0) AddVehicleComponent(PlayerInfo[playerid][pCarID][i], CarMod[playerid][i][d]); }
		            ChangeVehiclePaintjob(PlayerInfo[playerid][pCarID][i], PlayerInfo[playerid][pCarPaintJ][i]);
		            vehEngine[PlayerInfo[playerid][pCarID][i]] = 0;
					if(strlen(CarVipName[playerid][i]) > 0) SetVipText(playerid, i);
		            SCM(playerid, -1, "Your vehicle has been now spawned!");
		            GivePlayerCash(playerid, -2000);

		            if(IsPlayerInRangeOfPoint(playerid, 25.0, 486.0312,-429.1757,2758.0149) && GetVehicleVirtualWorld(PlayerInfo[playerid][pCarID][i]) != playerid + 1)
					{
						SetVehicleVirtualWorld(PlayerInfo[playerid][pCarID][i], playerid + 1);

						SCM(playerid, -1, "updated vehicle virtual world");
					}
		        
					if(PlayerInfo[playerid][pCarSouvenrire][i] == 1 && PlayerInfo[playerid][pCarModel][i] == 411)
					{
						for(new x; x < 5; x++)
						{
						    if(souvenire_objects[PlayerInfo[playerid][pCarID][i]][x]) DestroyDynamicObject(souvenire_objects[PlayerInfo[playerid][pCarID][i]][x]);
						    souvenire_objects[PlayerInfo[playerid][pCarID][i]][x] = 0;
						}

						//souvenire_objects[PlayerInfo[playerid][pCarID][i]][3] = CreateObject(19314,0,0,-1000,0,0,0,100);
						//souvenire_objects[PlayerInfo[playerid][pCarID][i]][4] = CreateObject(1146,0,0,-1000,0,0,0,100);
						
						souvenire_objects[PlayerInfo[playerid][pCarID][i]][3] = CreateDynamicObject(19314, 0, 0, -1000, 0, 0, 0);
						souvenire_objects[PlayerInfo[playerid][pCarID][i]][4] = CreateDynamicObject(1146, 0, 0, -1000, 0, 0, 0);

						AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[playerid][pCarID][i]][3], PlayerInfo[playerid][pCarID][i], 0.011, 2.877, -0.378, 94.500, -77.999, -11.599);
						AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[playerid][pCarID][i]][4], PlayerInfo[playerid][pCarID][i], 0.000, -2.311, 0.360, 0.000, 0.000, 0.000);
						
						//AttachObjectToVehicle(souvenire_objects[PlayerInfo[playerid][pCarID][i]][3], PlayerInfo[playerid][pCarID][i], 0.011, 2.877, -0.378, 94.500, -77.999, -11.599);
						//AttachObjectToVehicle(souvenire_objects[PlayerInfo[playerid][pCarID][i]][4], PlayerInfo[playerid][pCarID][i], 0.000, -2.311, 0.360, 0.000, 0.000, 0.000);
						AddVehicleComponent(PlayerInfo[playerid][pCarID][i], 1079);						
					}	

					if(PlayerInfo[playerid][pCarSouvenrire][i] == 1 && PlayerInfo[playerid][pCarModel][i] == 541)
					{
						for(new x; x < 3; x++)
						{
						    if(souvenire_objects[PlayerInfo[playerid][pCarID][i]][x]) DestroyDynamicObject(souvenire_objects[PlayerInfo[playerid][pCarID][i]][x]);
						    souvenire_objects[PlayerInfo[playerid][pCarID][i]][x] = 0;
						}

						souvenire_objects[PlayerInfo[playerid][pCarID][i]][0] = CreateDynamicObject(1003,0,0,-1000,0,0,0);

						AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[playerid][pCarID][i]][0], PlayerInfo[playerid][pCarID][i], 0.000000,-2.025000,0.300000,0.000000,0.000000,0.000000);
						AddVehicleComponent(PlayerInfo[playerid][pCarID][i], 1079);						
					}		
		        }
		        case 2: {
		            new  i = SelectedCar[playerid];
		            if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "On a mission right now, can't use this command.");
		            if(arecpactiv(playerid)) return true;
		            if(PlayerInfo[playerid][pCarID][i] != 0) LocateCar(PlayerInfo[playerid][pCarID][i], playerid);
		            else return SCM(playerid, -1, "This vehicle is not spawned.");
		        }
		        case 3: {
		            new i = SelectedCar[playerid];
		            gString[0] = (EOS);
		            if(PlayerInfo[playerid][pCarIns][i] < 5) { format(gString, 128, "You want to buy 1 insurance for $%d?", PlayerInfo[playerid][pCarInsPrice][i]); ShowPlayerDialogEx(playerid, DIALOG_INSURANCEBUY, DIALOG_STYLE_MSGBOX, "Insurance", gString, "Yes", "No"); }
		            else ShowPlayerDialogEx(playerid, DIALOG_INSURANCEBUY2, DIALOG_STYLE_MSGBOX, "Insurance", "You can't have more than 5 insurance.", "Ok", "");
		        }
		        case 4: {
		            if(PlayerInfo[playerid][pPremiumPoints] < 20) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
		            new idcar = SelectedCar[playerid];
		            PlayerInfo[playerid][pPremiumPoints] -= 20; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
		            PlayerInfo[playerid][pCarKM][idcar] = 0.0; PlayerInfo[playerid][pCarKMLast][idcar] = 0; PlayerInfo[playerid][pCarBuyTime][idcar] = gettime();
		            cUpdate(playerid, idcar, cKMx);
		            cUpdate(playerid, idcar, cKMLastx);
		            cUpdate(playerid, idcar, cDaysx);
		            SCM(playerid, COLOR_PRINC, "You paid 20 premium points to clear your car KM & days.");           
		        }
		        case 5: {
		            new i = SelectedCar[playerid];
		            if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "On a mission right now, can't use this command.");
		            if(arecpactiv(playerid)) return true;
		            if(PlayerInfo[playerid][pCarID][i] != 0) ShowPlayerDialogEx(playerid, DIALOG_UNSTUCK, DIALOG_STYLE_MSGBOX, "Unstuck car", "Aceasta optiune a fost creata pentru cei care nu-si pot gasi masina folosind optiunea din /v.\nFolosind aceasta optiune vei avea masina spawnata intr-o parcare din LV.\n\nEsti sigur ca vrei sa faci asta?", "Yes", "No");
		            else return SCM(playerid, -1, "This vehicle is not spawned.");
		        }
		        case 6: {
		        	if(PlayerInfo[playerid][pPremiumPoints] < 250) return SCM(playerid, -1, "Ai nevoie de minim 250 puncte premium.");
		        	new idcar = SelectedCar[playerid];
		        	if(PlayerInfo[playerid][pCarVIP][idcar] == 1) return SCM(playerid, -1, "Acest vehicul este deja VIP.");
		        	if(PlayerInfo[playerid][pCarModel][idcar] != 411 && PlayerInfo[playerid][pCarModel][idcar] != 541 && PlayerInfo[playerid][pCarModel][idcar] != 560) return SCM(playerid, -1, "Poti pune VIP doar pe Infernus, Bullet si Sultan.");
		        	PlayerInfo[playerid][pPremiumPoints] -= 250; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
		        	PlayerInfo[playerid][pCarVIP][idcar] = 1;
		         	gString[0] = (EOS);
		         	mysql_format(SQL, gString, 256, "UPDATE `cars` SET `VIP` = '1' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pCar][idcar]);
		         	mysql_tquery(SQL, gString);
		         	SCM(playerid, COLOR_PRINC, "Ai platit 250 puncte premium pentru a face acest vehicul VIP. Poti folosi comenzile /vipname si /vipnamecolor.");
		         	SendAdmins(COLOR_PRINC, "%s [user: %d] bought vip vehicle with 250 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
		        }
		        case 7:
		        {
		        	if(PlayerInfo[playerid][pPremiumPoints] < 150) return SCM(playerid, -1, "Ai nevoie de minim 150 puncte premium.");
		        	new idcar = SelectedCar[playerid];
		        	if(PlayerInfo[playerid][pCarRainbow][idcar] == 1) return SCM(playerid, -1, "Acest vehicul este deja rainbow.");

		        	PlayerInfo[playerid][pPremiumPoints] -= 150; 
		        	pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);

		        	PlayerInfo[playerid][pCarRainbow][idcar] = 1;

		        	gString[0] = (EOS);

		        	mysql_format(SQL, gString, sizeof(gString), "UPDATE `cars` SET `RainBow` = '1' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pCar][idcar]);
		        	mysql_tquery(SQL, gString);

		        	SCM(playerid, COLOR_PRINC, "Ai platit 150 puncte premium pentru a face acest vehicul rainbow.");
		        	SendAdmins(COLOR_PRINC, "%s [user: %d] bought a rainbow vehicle with 150 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);						
		        }
		        case 8:
		        {
		        	new idcar = SelectedCar[playerid];

		        	if(PlayerInfo[playerid][pCarRainbow][idcar] < 1) return SCM(playerid, -1, "Acest vehicul nu este rainbow.");
		        	if(GetPlayerVehicleID(playerid) != PlayerInfo[playerid][pCarID][idcar]) return SCM(playerid, -1, "Nu te afli in aceasta masina.");

		        	DeletePVar(playerid, "start_rainbow");
		        	stop timerrainbow[playerid];

		        	timerrainbow[playerid] = defer timer_rainbow(playerid);
		        	rainbowspeed[playerid] = 1000;

		        	SetPVarInt(playerid, "start_rainbow", 1);

		        	SCM(playerid, COLOR_PRINC, "Ai activat rainbow-ul. Alege viteza.");

		        	ShowPlayerDialogEx(playerid, DIALOG_RAINBOW, DIALOG_STYLE_LIST, "Rainbow", "Speed 3\nSpeed 2\nSpeed 1", "Select", "Exit");
		        }		
		        case 9:
		        {
					if(amanet_stock(playerid)) return true;
					 
					new i = SelectedCar[playerid], value, cashveh;
					 
					if(PlayerInfo[playerid][pCarID][i] < 1) return SCM(playerid, -1, "Vehiculul trebuie spawnat.");
					 
					gString[0] = (EOS);
					 
					format(gString, 256, "SELECT * FROM `stock` WHERE `vid`='%d'", PlayerInfo[playerid][pCarModel][i]);
					new Cache: result = mysql_query(SQL, gString);
					for(new pl, j = cache_get_row_count (); pl != j; ++pl) value = cache_get_field_content_int(pl, "Price");
					cache_delete(result);
					 
					cashveh = floatround(floatmul(value,0.60),floatround_ceil);                
					 
					PlayerInfo[playerid][pDaysAmanet] = 3;
					PlayerInfo[playerid][pCarAmanet] = PlayerInfo[playerid][pCar][i];
					PlayerInfo[playerid][pMoneyAmanet] = cashveh;
					 
					pUpdateInt(playerid, "DaysAmanet", 3);
					pUpdateInt(playerid, "CarAmanet", PlayerInfo[playerid][pCar][i]);
					pUpdateInt(playerid, "MoneyAmanet", cashveh);
					 
					gString[0] = (EOS);
					 
					mysql_format(SQL, gString, 256, "UPDATE `cars` SET `Owner` = 'amanet' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pCar][i]);
					mysql_tquery(SQL, gString);
					 
					GivePlayerCash(playerid, cashveh);
					 
					SCMf(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ti-ai amanetat vehiculul (%d) pentru $%s.", PlayerInfo[playerid][pCar][i], FormatNumber(cashveh));
					SCM(playerid, COLOR_SKEMA2, "(amanet) {ffffff}Ai timp 3 zile pentru a recupera vehiculul.");
					 
					PlayerInfo[playerid][pCar][i] = -1;
					DestroyVehicle(PlayerInfo[playerid][pCarID][i]);
					PlayerInfo[playerid][pCarID][i] = 0;
					CarID[playerid] = -1;              
					PlayerInfo[playerid][pCarModel][i] = 0; PlayerInfo[playerid][pCarLocX][i] = 0.0; PlayerInfo[playerid][pCarLocY][i] = 0.0;
					PlayerInfo[playerid][pCarLocZ][i] = 0.0; PlayerInfo[playerid][pCarAngle][i] = 0.0; PlayerInfo[playerid][pCarBuyTime][i] = 0;
					PlayerInfo[playerid][pCarColor1][i] = 1; PlayerInfo[playerid][pCarColor2][i] = 1; PlayerInfo[playerid][pCarLock][i] = 0;
					PlayerInfo[playerid][pCarInsPrice][i] = 0; PlayerInfo[playerid][pCarIns][i] = 0; PlayerInfo[playerid][pCarKM][i] = 0.0;
					PlayerInfo[playerid][pCarKMLast][i] = 0; PlayerInfo[playerid][pCarGas][i] = 100; PlayerInfo[playerid][pCarHP][i] = 0.0;
					PlayerInfo[playerid][pCarDamage1][i] = 0; PlayerInfo[playerid][pCarPaintJ][i] = 6; PlayerInfo[playerid][pCarDamage2][i] = 0;
					PlayerInfo[playerid][pCarDamage3][i] = 0; PlayerInfo[playerid][pCarDamage4][i] = 0; PlayerInfo[playerid][pCarRainbow][i] = 0;
					PlayerInfo[playerid][pCarVIP][i] = 0; PlayerInfo[playerid][pCarVipColor][i] = 0; CarVipName[playerid][i] = "";                         
					CarPlate[playerid][i] = ""; CarOwner[playerid][i] = "";
					for(new s; s < 17; s++) CarMod[playerid][i][s] = 0;
					LoadCar(playerid);		        	
		        }       
		        case 10:
		        {
		        	new i = SelectedCar[playerid];

		        	if(PlayerInfo[playerid][pCarTranscendent][i] >= 1) return SCM(playerid, -1, "Vehiculul deja este transcendent.");
		        	if(GetPlayerCash(playerid) < 900000000) return SCM(playerid, -1, "Nu ai $900.000.000.");

		        	GivePlayerCash(playerid, -900000000);

					PlayerInfo[playerid][pCarTranscendent][i] = 1;

		        	gString[0] = (EOS);

		        	mysql_format(SQL, gString, 256, "UPDATE `cars` SET `Transcendent` = '1' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pCar][i]);
		        	mysql_tquery(SQL, gString);	

		        	SCM(playerid, -1, "Ti-ai upgradat vehiculul la transcendent.");
		        }          	
		        case 11:
		        {
		        	new i = SelectedCar[playerid];

		        	if(PlayerInfo[playerid][pCarTranscendent][i] < 1) return SCM(playerid, -1, "Vehiculul tau nu este transcendent.");
		        	if(PlayerInfo[playerid][pCarID][i] < 1) return SCM(playerid, -1, "Vehiculul nu este spawnat.");
		        	if(barcadelay[playerid] >= 1) return SCMf(playerid, -1, "Poti folosi aduci masina la tine peste %d secunde.", barcadelay[playerid]);

		        	new Float: x, Float: y, Float: z; GetPlayerPos(playerid, x, y, z);

		        	SetVehiclePos(PlayerInfo[playerid][pCarID][i], x, y, z);

		        	barcadelay[playerid] = 60;

		        	SCM(playerid, -1, "Vehiculul a fost teleportat.");
		        }		 		        
		    }
		}
		case DIALOG_RAINBOW:
		{
			if(!response) return true;

			switch(listitem)
			{
				case 0: rainbowspeed[playerid] = 500;
				case 1: rainbowspeed[playerid] = 1000;
				case 2: rainbowspeed[playerid] = 2000;
			}

			SCM(playerid, COLOR_PRINC, "speed updated.");
		}		
		case DIALOG_VIPNAMECOLOR: {
			if(!response) return true;
			if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You are not in a vehicle.");
			new carid = GetPlayerVehicleID(playerid), idcar = -1;
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) if(carid == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
			if(idcar == -1) return SCM(playerid, -1, "Poti folosi aceasta comanda doar pe vehicule VIP.");
			if(carid == PlayerInfo[playerid][pCarID][idcar] && PlayerInfo[playerid][pCarVIP][idcar] > 0) {
				PlayerInfo[playerid][pCarVipColor][idcar] = listitem;
				gString[0] = (EOS);
				mysql_format(SQL, gString, 256, "UPDATE `cars` SET `VipColor` = '%d' WHERE `ID` = '%d' LIMIT 1", listitem, PlayerInfo[playerid][pCar][idcar]);
				mysql_tquery(SQL, gString);
				SCM(playerid, COLOR_LIGHTGREEN3, "Color update.");	
				SetVipText(playerid, idcar);
			}
		}
		case DIALOG_UNSTUCK: {
			if(!response) return true;
			new i = SelectedCar[playerid];
			PlayerInfo[playerid][pCarLocX][i] = 2350.6128; PlayerInfo[playerid][pCarLocY][i] = 1405.0007; PlayerInfo[playerid][pCarLocZ][i] = 42.5548; 
			PlayerInfo[playerid][pCarAngle][i] = 90.0;			
			cUpdate(playerid, i, cLocationxx);
			cUpdate(playerid, i, cLocationyx);
			cUpdate(playerid, i, cLocationzx);
			cUpdate(playerid, i, cAnglex);
			SetVehicleToRespawnEx(PlayerInfo[playerid][pCarID][i]);
			SetPlayerCheckpoint(playerid, 2350.6128,1405.0007,42.5548, 4.0);
			CP[playerid] = 1012;
			SCM(playerid, COLOR_PRINC, "Your car was respawned in a parking lot in LV. Go to checkpoint to find your car.");
		}
		case DIALOG_REPORT: {
			if(!response) return true;
			switch(listitem) {
				case 0: SCM(playerid, -1, "Pentru a raporta un bug acceseaza in browser redtimes.eu/forum");
				case 1: SCM(playerid, -1, "Mai multe detalii despre donatii accesati in browser panel.redtimes.eu/payment.");
				case 2: {
					SCM(playerid, -1, "Your report has been sent successfully.");
					format(string, 144, "Report from %s(%d): Sunt blocat/nu vad nimic.", GetName(playerid), playerid);
					SendAdmins(COLOR_LIGHTRED, string, 1);
					format(reporttext[playerid], 144, string);
					reportstuck[playerid] = 1;
				}
				case 3: {
					SCM(playerid, -1, "Your report has been sent successfully.");
					format(string, 144, "Report from %s(%d): Vreau sa fac o afacere, am nevoie de un admin.", GetName(playerid), playerid);
					SendAdmins(COLOR_LIGHTRED, string,1);
					format(reporttext[playerid], 144, string);
					reportdat[playerid] = 1;
				}
				case 4: ShowPlayerDialogEx(playerid, DIALOG_REPORTALTAPROBLEMA, DIALOG_STYLE_INPUT, "SERVER: Report System", "Scrie mai jos problema pe care o ai.\nNu scrie 'am nevoie de un admin', scrie exact ce problema ai.", "Sent", "Exit");
			}
		}
		case DIALOG_REPORTALTAPROBLEMA: {
			if(!response) return true;
			if(strlen(inputtext) < 3 || strlen(inputtext) > 60) return SCM(playerid, -1, "Reportul tau este prea lung sau prea scurt pentru a fi trimis.");
			mysql_real_escape_string(inputtext, string);
			SCM(playerid, -1, "Your report has been sent successfully.");
			format(string, 144, "Report from %s(%d): %s", GetName(playerid), playerid, string);
			SendAdmins(COLOR_LIGHTRED, string, 1);
			format(reporttext[playerid], 144, string);
			reportdat[playerid] = 1;
		}
		case DIALOG_LOCATIONTUNNING: {
			if(!response) return true;
			switch(listitem) {
				case 0: SetPlayerCheckpoint(playerid, 1041.4601,-1027.3486,32.1016, 3.0);
				case 1: SetPlayerCheckpoint(playerid, 2386.7939,1042.0736,10.8203, 3.0);
				case 2: SetPlayerCheckpoint(playerid, -2712.6958,217.1315,4.2393, 3.0);
			}
			CP[playerid] = 43;
		}
		case DIALOG_LOCATIONLS: {
			if(!response) return true;
			switch(listitem) {
				case 0: SetPlayerCheckpoint(playerid, 860.0737,-1675.0240,13.5469, 3.0);
				case 1: SetPlayerCheckpoint(playerid, 1456.9272,-1138.0020,23.9746, 3.0);
				case 2: SetPlayerCheckpoint(playerid, 1460.2300,-1010.7000,26.8438, 3.0);
				case 3: SetPlayerCheckpoint(playerid, 517.7751,-1296.5032,17.2422, 3.0);
				case 4: SetPlayerCheckpoint(playerid, 2229.2395,-1721.8770,13.5670, 3.0);
				case 5: SetPlayerCheckpoint(playerid, 1367.8861,-1279.8185,13.5469, 3.0);
				case 6: SetPlayerCheckpoint(playerid, 1012.8378,-935.3508,42.1797, 3.0);
				case 7: SetPlayerCheckpoint(playerid, 1087.6459,-922.9970,43.3906, 3.0);
				case 8: SetPlayerCheckpoint(playerid, 1024.7943,-1031.2222,31.9956, 3.0);
			}
			CP[playerid] = 43;
		}
					case DIALOG_LOCATION: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					SetPlayerCheckpoint(playerid, 2200.7825,1393.9137,11.0625, 3.0);
					CP[playerid] = 43;
				}
				case 1: ShowPlayerDialogEx(playerid, DIALOG_LOCATIONLS, DIALOG_STYLE_LIST, "Locations LS", "24/7 Store\nClothing Store\nBank\nRent Car\nGym\nGun Shop\nGas Station\nSex Shop\nPay N Spray", "Select", "Exit");
				case 2: ShowPlayerDialogEx(playerid, DIALOG_HQS, DIALOG_STYLE_LIST, "Faction HQS", "Los Santos Police Department\nHitman Agency\nFBI\nNews Reporters\nGrove Street\nBallas\nLos Aztecas\nParamedic Department\nLos Vagos\nTaxi LV\nTow Car Company\nUber Company\nNational Guard\nLas Venturas Police Departament", "Select", "Exit");
				case 3: ShowPlayerDialogEx(playerid, DIALOG_LOCATIONTUNNING, DIALOG_STYLE_LIST, "Tunnings", "Tunning Los Santos\nTunning Las Venturas\nTunning San Fierro", "Select", "Exit");
				case 4: {
					SetPlayerCheckpoint(playerid, 1412.0887,-1699.8264,13.5395, 3.0);
					CP[playerid] = 43;
				}
				case 5: {
					SetPlayerCheckpoint(playerid, 328.3534,-1513.1687,36.0391, 3.0);
					CP[playerid] = 43;
				}
				case 6: {
					SetPlayerCheckpoint(playerid, 597.5396,-1246.9562,18.2512, 3.0);
					CP[playerid] = 43;
				}
				case 7: {
					SetPlayerCheckpoint(playerid, 1100.4784,-2588.7307,7.6044, 3.0);
					CP[playerid] = 43;
				}
				case 8: {
					SetPlayerCheckpoint(playerid, 1647.2550,-2141.5505,13.5547, 3.0);
					CP[playerid] = 43;
				}
				case 9: {
					SetPlayerCheckpoint(playerid, 2313.5137,-1347.6245,24.0227, 3.0);
					CP[playerid] = 43;
				}	
				case 10: {
					SetPlayerCheckpoint(playerid, 1793.0321,-2046.7078,13.5593, 3.0);
					CP[playerid] = 43;
				}
				case 11: {
					SetPlayerCheckpoint(playerid, 2021.6022,1007.7497,10.8203, 3.0);
					CP[playerid] = 43;
				}
				case 12: {
					SetPlayerCheckpoint(playerid, 1102.4135,-1458.0602,15.7969, 3.0);
					CP[playerid] = 43;
				}
				case 13: {
					SetPlayerCheckpoint(playerid, 1329.0900,-1557.5757,13.5469, 3.0);
					CP[playerid] = 43;
				}
				case 14: ShowPlayerDialogEx(playerid, DIALOG_GPSother, DIALOG_STYLE_LIST, "Other locations", "Licenses\nCrates\nTryLucky Place\nCar Seller", "Select", "Cancel");
			}
		}
		case DIALOG_GPSother: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					SetPlayerCheckpoint(playerid, 872.3606,-1646.2646,13.5469, 3.0);
					CP[playerid] = 43;
				}
				case 1: {
					SetPlayerCheckpoint(playerid, 1247.0133,-871.0790,42.8828, 3.0);
					CP[playerid] = 43;					
				}					
				case 2: {
					SetPlayerCheckpoint(playerid, 884.2180,-1646.2377,13.5469, 3.0);
					CP[playerid] = 43;					
				}
				case 3: {
					SetPlayerCheckpoint(playerid, 338.1959,-1522.3083,33.2143, 3.0);
					CP[playerid] = 43;					
				}
			}
		}
		case DIALOG_INSURANCEBUY: {
			if(!response) return true;
			new i = SelectedCar[playerid], inscarpricee = PlayerInfo[playerid][pCarInsPrice][i];
			PlayerInfo[playerid][pCarIns][i] ++;
			SCMf(playerid, COLOR_PRINC, ">> {ffffff}Car insurance purchased for $%s.", FormatNumber(inscarpricee));
			GivePlayerCash(playerid, -inscarpricee);
			cUpdate(playerid, i, cInsurancecarx);
		}
		case DIALOG_CARDAMAGE: {
		    if(response) {
	        	new carid = GetPlayerVehicleID(playerid);
				if(carid == 0) return SCM(playerid,COLOR_WHITE,"You are not in vehicle.");
				for(new v; v < 10; v++) {
					if(carid == PlayerInfo[playerid][pCarID][v]) {
						new inscarp = PlayerInfo[playerid][pCarInsPrice][v];
	         			if (PlayerInfo[playerid][pCarIns][v] == 0) {
	         				if(GetPlayerCash(playerid) >= inscarp) {
	     		    			PlayerInfo[playerid][pCarIns][v] = 1;
	      		    			GivePlayerCash(playerid, - inscarp);
								cUpdate(playerid, v, cInsurancecarx);
								SCM(playerid, COLOR_GREEN3, "Insurance paid. Now you can use your car.");
								return true;
	 						} else {
	      	    				SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
	         	    			RemovePlayerFromVehicle(playerid);
							}
	 					}
	     			}
				}
			}
			else return RemovePlayerFromVehicle(playerid);
			return true;
	    }
	    case DIALOG_SELLHIDDEN: {
	    	if(!response) return true;
	    	new id = SellHiddenID[playerid], price = SellHiddenPrice[playerid];
	    	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Player not connected.");
	    	hiddenoffer[id] = playerid; hiddenprice[id] = price;
	    	SCMf(id, COLOR_PRINC, "(Trade): {ffffff}%s iti ofera o culoare hidden pentru $%s, foloseste /accept hidden %d.", GetName(playerid), FormatNumber(price), playerid);
	    	SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}I-ai oferit o culoare hidden lui %s pentru $%s.", GetName(id), FormatNumber(price));
	    	SellHiddenID[playerid] = -1; SellHiddenPrice[playerid] = 0; SellTradeTimer[playerid] = 120;
	    }
	    case DIALOG_TRADECAR: {
	    	if(!response) return true;
	    	new id = SellTradeID[playerid], idcar1 = SelectedCar[playerid], idcar2 = SelectedCar[id], price = SellTradePrice[playerid], hidden[64];
	    	if(PlayerInfo[playerid][pCarColor1][idcar1] >= 128 || PlayerInfo[playerid][pCarColor2][idcar1]) format(hidden, 64, "hidden colors: %d, %d", PlayerInfo[playerid][pCarColor1][idcar1],PlayerInfo[playerid][pCarColor2][idcar1]);
	    	else format(hidden, 64, "no hidden colors");
	   	    tradecars[id] = PlayerInfo[playerid][pCarID][idcar1]; tradecars2[id] = PlayerInfo[id][pCarID][idcar2]; tradetype[id] = PlayerInfo[playerid][pCar][idcar1];
			tradetype2[id] = PlayerInfo[id][pCar][idcar2]; tradeofferer[id] = playerid; tradediff[id] = price;
	    	SCM(playerid, COLOR_BLUE, "The offer was sent!");
			SCMf(id, COLOR_PRINC, "(Trade): {ffffff}%s iti ofera masina lui %s [age: %d, KM: %.0f, %s] + $%s pentru masina ta (%s).",GetName(playerid),aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar1]),PlayerInfo[playerid][pCarKM][idcar1],hidden,FormatNumber(price),aVehicleNames[PlayerInfo[id][pCarModel][idcar2] - 400]);
			SCMf(id, COLOR_PRINC, "(Trade): {ffffff}Scrie /accept tradecar %d pentru a accepta aceasta oferta",playerid);
			SellTradeID[playerid] = -1; SellTradePrice[playerid] = 0; SellTradeTimer[playerid] = 120;
	    }
		case DIALOG_SELLCARTO: {
			if(!response) return true;
			new idcar = SelectedCar[playerid], id = SellTradeID[playerid], price = SellTradePrice[playerid], hidden[64];
			if(!IsPlayerConnected(id)) return SCM(playerid, -1, "That player is not connected.");
			primesccar[id] = PlayerInfo[playerid][pCarID][idcar]; cartype[id] = PlayerInfo[playerid][pCar][idcar]; 
			ofercar[id] = playerid; carprice[id] = price;
			SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You have offered your car(%s) to %s(%d) for $%s.", aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400],PlayerInfo[id][pNormalName],id,FormatNumber(price));
			if(PlayerInfo[playerid][pCarColor1][idcar] >= 128 || PlayerInfo[playerid][pCarColor2][idcar] >= 128) format(hidden, 64,"hidden colors: %d, %d",PlayerInfo[playerid][pCarColor1][idcar],PlayerInfo[playerid][pCarColor2][idcar]);
			else format(hidden, 64, "no hidden colors");
			SCMf(id, COLOR_PRINC, "(Trade): {ffffff}%s vrea sa-ti vanda masina %s [age: %d, km: %.0f, %s] pentru $%s, foloseste /accept car %d.", GetName(playerid), aVehicleNames[PlayerInfo[playerid][pCarModel][idcar] - 400], GetDaysFromTimestamp(PlayerInfo[playerid][pCarBuyTime][idcar]), PlayerInfo[playerid][pCarKM][idcar], hidden, FormatNumber(price), playerid);
			SellTradeID[playerid] = -1; SellTradePrice[playerid] = 0; SellTradeTimer[playerid] = 120;	
		}
		case DIALOG_PLATE: {
			if(!response) return true;
			if(strlen(inputtext) > 10) {
				ShowPlayerDialogEx(playerid, DIALOG_PLATE, DIALOG_STYLE_INPUT, "License plate registration", "{FFFFFF}ERROR: Your license plate exceeded the limit of 10 characters.\n\nPlease enter a license plate for your vehicle.\n\nThere is only two conditions:\n- The license plate must be unique\n- The license can be alphanumerical, but it must consist of only 10 characters.", "Select", "");
				return true;
			}	
			if(strfind(inputtext, "{", true) != -1 || strfind(inputtext, "}", true) != -1) return SendClientMessage(playerid, COLOR_WHITE, "Nu poti folosi caracterul '{' in /carplate.");
			new idcar = -1, plate[25];
			for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) {
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
			}
			if(idcar == -1) return SCM(playerid, -1, "You are not in your car.");
			SetVehicleNumberPlate(idcar, inputtext);	
			mysql_real_escape_string(inputtext, plate);	
			strmid(CarPlate[playerid][idcar], plate, 0, strlen(plate), 999);
			GivePlayerCash(playerid, -10000);
			SCM(playerid, COLOR_WHITE, "Car plate will change at next car respawn.");	
			cUpdate(playerid, idcar, cLicensex);
		}	
		case DIALOG_CARSELL: {
		    if(!response) return true;
			new idcar = GetPlayerVehicleID(playerid), value;
			new engine,lights,alarm,doors,bonnet,boot,objective;
	    	if(IsPlayerInVehicle(playerid,CarID[playerid])) {
				if(GetPlayerVehicleID(playerid) == CarID[playerid]) {
					for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
						if(PlayerInfo[playerid][pCarID][v] == CarID[playerid]) {
							gString[0] = (EOS);
						    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s selling vehicle model %d to Dealership')", PlayerInfo[playerid][pSQLID], GetName(playerid), PlayerInfo[playerid][pCarModel]);
						    mysql_tquery(SQL, gString, "", "");									
							mysql_format(SQL, gString, 256, "DELETE FROM `cars` WHERE `ID`='%d'", PlayerInfo[playerid][pCar][v]);
							mysql_tquery(SQL,gString);
							PlayerInfo[playerid][pCar][v] = -1;
							format(gString, 256, "SELECT * FROM `stock` WHERE `vid`='%d'", PlayerInfo[playerid][pCarModel][v]);
							new Cache: result = mysql_query(SQL, gString);
							for(new i, j = cache_get_row_count (); i != j; ++i) value = cache_get_field_content_int(i, "Price");
							cache_delete(result);
							vehEngine[idcar] = 0;
							StopBlinkNeons(CarID[playerid]);
							GetVehicleParamsEx(idcar,engine,lights,alarm,doors,bonnet,boot,objective);
							SetVehicleParamsEx(idcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
							SetPVarInt(playerid, "Engine", 0);
							DestroyVehicle(CarID[playerid]);
							PlayerInfo[playerid][pCarID][v] = 0;
							TogglePlayerControllable(playerid, 1);
							new cashveh = floatround(floatmul(value,0.60),floatround_ceil);
							GivePlayerCash(playerid, cashveh);
							SCMf(playerid, COLOR_PRINC, ">> {ffffff}You sold your car (%s) to the DealerShip for $%s!",aVehicleNames[PlayerInfo[playerid][pCarModel][v] - 400], FormatNumber(cashveh));
							CarID[playerid] = -1;
							PlayerInfo[playerid][pCarStage][v] = 0; PlayerInfo[playerid][pCarStageKM][v] = 0;
							PlayerInfo[playerid][pCarModel][v] = 0; PlayerInfo[playerid][pCarLocX][v] = 0.0; PlayerInfo[playerid][pCarLocY][v] = 0.0;
							PlayerInfo[playerid][pCarLocZ][v] = 0.0; PlayerInfo[playerid][pCarAngle][v] = 0.0; PlayerInfo[playerid][pCarBuyTime][v] = 0;
							PlayerInfo[playerid][pCarColor1][v] = 1; PlayerInfo[playerid][pCarColor2][v] = 1; PlayerInfo[playerid][pCarLock][v] = 0; 
							PlayerInfo[playerid][pCarInsPrice][v] = 0; PlayerInfo[playerid][pCarIns][v] = 0; PlayerInfo[playerid][pCarKM][v] = 0.0;
							PlayerInfo[playerid][pCarKMLast][v] = 0; PlayerInfo[playerid][pCarGas][v] = 100; PlayerInfo[playerid][pCarHP][v] = 0.0;
							PlayerInfo[playerid][pCarDamage1][v] = 0; PlayerInfo[playerid][pCarPaintJ][v] = 6; PlayerInfo[playerid][pCarDamage2][v] = 0;
							PlayerInfo[playerid][pCarDamage3][v] = 0; PlayerInfo[playerid][pCarDamage4][v] = 0;	PlayerInfo[playerid][pCarRainbow][v] = 0; 	
							PlayerInfo[playerid][pCarVIP][v] = 0; PlayerInfo[playerid][pCarVipColor][v]	= 0; CarVipName[playerid][v] = "";							
							CarPlate[playerid][v] = ""; CarOwner[playerid][v] = "";
							for(new s; s < 17; s++) CarMod[playerid][v][s] = 0;
							cUpdate(playerid, v, cModsx); cUpdate(playerid, v, cPaintJx); cUpdate(playerid, v, cLocationxx);
							cUpdate(playerid, v, cLocationyx); cUpdate(playerid, v, cLocationzx); cUpdate(playerid, v, cAnglex);
							cUpdate(playerid, v, cColorOnex); cUpdate(playerid, v, cColorTwox); cUpdate(playerid, v, cValuex);
							cUpdate(playerid, v, cLicensex); cUpdate(playerid, v, cLockx); cUpdate(playerid, v, cInscarpricex);
							cUpdate(playerid, v, cInsurancecarx); cUpdate(playerid, v, cKMx); cUpdate(playerid, v, cDaysx);
							cUpdate(playerid, v, cHPx); cUpdate(playerid, v, cDamage1x); cUpdate(playerid, v, cDamage2x);
							cUpdate(playerid, v, cDamage3x); cUpdate(playerid, v, cDamage4x); cUpdate(playerid, v, cGasx);
							LoadCar(playerid);
							}
					}
				}
			}
		}
		case DIALOG_REGISTER2: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					PlayerInfo[playerid][pSex] = 1; pUpdateInt(playerid, "Sex", 1); pUpdateInt(playerid, "Model", 250);
					RegistrationStep[playerid] = 3; SetPlayerSkin(playerid, 250);
					SCM(playerid, COLOR_PRINC, "Good! Gender set to: man.");
					ShowPlayerDialogEx(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Character age", "Type the age of your character bellow:", "Ok", "");				
				}
				case 1: {
					PlayerInfo[playerid][pSex] = 2; pUpdateInt(playerid, "Sex", 2); pUpdateInt(playerid, "Model", 216);
					RegistrationStep[playerid] = 3; SetPlayerSkin(playerid, 216);
					SCM(playerid, COLOR_PRINC, "Good! Gender set to: female.");
					ShowPlayerDialogEx(playerid, DIALOG_REGISTER3, DIALOG_STYLE_INPUT, "Character age", "Type the age of your character bellow:", "Ok", "");					
				}
			}
		}
		case DIALOG_REGISTER3: {
			if(!response) return true;
			new tmppass[64];
			mysql_real_escape_string(inputtext, tmppass);
			new age = strval(tmppass);
			if(age < 1 && age > 100) return ShowPlayerDialogEx(playerid,DIALOG_REGISTER2,DIALOG_STYLE_INPUT,"Your age:","Please enter below the age of your character:","Ok","");
			PlayerInfo[playerid][pAge] = age; pUpdateInt(playerid, "Age", PlayerInfo[playerid][pAge]);
			RegistrationStep[playerid] = 4;
			ShowPlayerDialogEx(playerid, DIALOG_REGISTER4, DIALOG_STYLE_INPUT, "Email", "(ex: my_email@yahoo.com)", "Ok", "");			
		}	
		case DIALOG_REGISTER4:
		{
			if(response)
			{	
				if(strlen(inputtext) < 15 || strlen(inputtext) > 30)
				{
					SCM(playerid, -1, "Adresa ta de email trebuie sa fie intre 15 caractere si 30 de caractere.");
					ShowPlayerDialogEx(playerid, DIALOG_REGISTER4, DIALOG_STYLE_INPUT, "Email", "(ex: my_email@yahoo.com)", "Ok", "");

					return true;
				}

				DisablePlayerCheckpoint(playerid);
				DisablePlayerRaceCheckpoint(playerid);

				SCMf(playerid, COLOR_PRINC, "Email has been set: %s.", inputtext);
				SendAdmins(COLOR_PRINC, "New account: %s [%d - user: %d] - email: %s.", 1, GetName(playerid), playerid, PlayerInfo[playerid][pSQLID]+7000, inputtext);
				SendHelpers(COLOR_PRINC, "New account: %s [%d - user: %d] - email: %s.", 1, GetName(playerid), playerid, PlayerInfo[playerid][pSQLID]+7000,inputtext);	

				RegistrationStep[playerid] = 0;
				PlayerInfo[playerid][pLevel] = 3;
				PlayerInfo[playerid][pCarLic] = 50;
				PlayerInfo[playerid][pTut] = 1;
				PlayerInfo[playerid][pAccount] = 500000;

				ResetPlayerCash(playerid);
				StopAudioStreamForPlayer(playerid);
				SetPlayerScore(playerid, 1);
				GivePlayerCash(playerid, 50000000);
				TogglePlayerSpectating(playerid, false);
				SetPlayerInterior(playerid, false);
				clearchat(playerid);

				new casa = random(51);

				RegistrationStep[playerid] = 0;
				PlayerInfo[playerid][pLevel] = 3;
				PlayerInfo[playerid][pCarLic] = 50;
				PlayerInfo[playerid][pTut] = 1;
				PlayerInfo[playerid][pNormalVoucher] = 1;
				PlayerInfo[playerid][pAccount] = 500000;

				ResetPlayerCash(playerid);
				StopAudioStreamForPlayer(playerid);
				SetPlayerScore(playerid, 1);
				GivePlayerCash(playerid, 50000000);
				TogglePlayerSpectating(playerid, false);
				SetPlayerInterior(playerid, false);
				clearchat(playerid);

				PlayerInfo[playerid][pRented] = casa;
				PlayerInfo[playerid][pSpawnChange] = 0;
				PlayerInfo[playerid][pPhousekey] = casa;

				gString[0] = (EOS);

				mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Level` = '3', `CarLic` = '50', `Bank` = '500000', `NormalVoucher` = '1', `Tutorial` = '1', `TutFinish` = '1', `Email` = '%s' WHERE `id` = '%d' LIMIT 1", inputtext, PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, gString);

				mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `CarLic` = '10', `GunLic` = '10', `FlyLic` = '10', `BoatLic` = '10' WHERE `ID` = '%d'", PlayerInfo[playerid][pSQLID]);
				mysql_tquery(SQL, gString);

				SCM(playerid, -1, "Daca ai intrebari legate de joc, foloseste /n si helperii vor incerca sa te ajute.");
			    SCM(playerid, -1, "Poti folosi si /help pentru comenzi de baza.");
			    SCM(playerid, -1, "Ai primit $50.000.000, un voucher normal (/vouchers), nivel 3 si licenta de condus!");
				//SCMf(playerid, COLOR_PRINC, ">> {ffffff}Ai primit chirie la casa %d de pe server. Poti folosi comanda /unrentroom pentru a renunta la ea.", casa);
				SCM(playerid, -1, "Distractie placuta!");

				ShowPlayerDialogEx(playerid, DIALOG_PIN2, DIALOG_STYLE_INPUT, "Pin", "Please enter a pin code", "Insert", "Exit");				

				SpawnPlayer(playerid);

				checkLevelProgress(playerid);	
			}	
		}
		case DIALOG_TRANSFER: {
			if(!response) return true;
			if(PlayerInfo[playerid][pAccount] < TransferMoney[playerid]) return SCM(playerid, -1, "Nu ai banii necesari.");
			PlayerInfo[playerid][pAccount] -= TransferMoney[playerid]; pUpdateInt(playerid, "Bank", PlayerInfo[playerid][pAccount]);
			PlayerInfo[TransferOffer[playerid]][pAccount] += TransferMoney[playerid]; pUpdateInt(TransferOffer[playerid], "Bank", PlayerInfo[TransferOffer[playerid]][pAccount]);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SCMf(playerid, -1, "{52CC52}You have transferd $%s to %s's account", FormatNumber(TransferMoney[playerid]), GetName(TransferOffer[playerid]));
		   	SCMf(TransferOffer[playerid], -1, "{52CC52}You have recieved $%s to into your account from %s.", FormatNumber(TransferMoney[playerid]), GetName(playerid));
		   	SendAdmins(COLOR_RED, "%s has transferred $%s to %s.", 1, GetName(playerid), FormatNumber(TransferMoney[playerid]), GetName(TransferOffer[playerid]));
			gString[0] = (EOS);
		    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s used /transfer %s [amount] $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[TransferOffer[playerid]][pSQLID], GetName(playerid), GetName(TransferOffer[playerid]), FormatNumber(TransferMoney[playerid]));
		    mysql_tquery(SQL, gString, "", "");	    
		}
		case DIALOG_HQS: {
			if(!response) return true;
	        switch(listitem) {
	            case 0: {
	 				SetPlayerCheckpoint(playerid,1554.6610,-1675.6371,16.1953,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Los Santos Police Department.");
				}
				case 1: {
					SetPlayerCheckpoint(playerid,1081.0226,-345.1430,73.9839,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Hitman Agency.");
				}
				case 2: {
					SetPlayerCheckpoint(playerid,626.9644,-571.7349,17.9207,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Federal Bureau of Investigations.");
				}
				case 3: {
					SetPlayerCheckpoint(playerid,-329.2862,1536.9629,76.6117,4.0);
				   	SCM(playerid, COLOR_PRINC, "Checkpoint set on faction News Reporters.");
				}
				case 4: {
					SetPlayerCheckpoint(playerid,2495.2554,-1689.8365,14.6800,4.0);
					SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Grove Street.");
				}
				case 5: {
					SetPlayerCheckpoint(playerid,1455.0133,750.8113,11.0234,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Ballas.");
				}
				case 6: {
					SetPlayerCheckpoint(playerid,1457.4807,2772.9023,10.8203,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Los Aztecas.");
				}
	            case 7: {
   					SetPlayerCheckpoint(playerid,1614.92480, 1816.09631, 10.91310,4.0);
				   	SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Paramedic Department.");
	            }
				case 8: {
					SetPlayerCheckpoint(playerid,691.5792,-1275.9344,13.5607,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Los Vagos.");
				}
				case 9: {
					SetPlayerCheckpoint(playerid,937.0784,1733.2496,8.8516,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Taxi Las Venturas.");
				}
				case 10: {
					SetPlayerCheckpoint(playerid, 1441.7904,2360.1353,10.8203, 4.0);
					SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Tow Car Company.");
				}
				case 11:
				{
					SetPlayerCheckpoint(playerid, 1752.4957,-1894.0701,13.5574, 4.0);
					SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Uber Company.");					
				}		
				case 12: {
					SetPlayerCheckpoint(playerid,200.766,1869.49,13.147,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction National Guard.");
				}		
				case 13: {
					SetPlayerCheckpoint(playerid,2286.9487,2431.9595,10.8203,4.0);
				    SCM(playerid, COLOR_PRINC, "Checkpoint set on faction Las Venturas Police Department.");
				}								
			}
			CP[playerid] = 43;			
		}
		case Dialog_gunshop: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 2000) return SCM(playerid, -1, "Ai nevoie de minim 2,000$.");
					sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s bought a baseball bat.", GetName(playerid));
					GivePlayerCash(playerid, -2000);
					GivePlayerWeaponEx(playerid, 5, 1);
				}
				case 1: {
					if(GetPlayerCash(playerid) < 3000) return SCM(playerid, -1, "Ai nevoie de minim 3,000$.");					
					sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s bought a SD Pistol.", GetName(playerid));
					GivePlayerCash(playerid, -3000); 
					GivePlayerWeaponEx(playerid, 23, 100);						
				}
				case 2: {
					if(GetPlayerCash(playerid) < 5000) return SCM(playerid, -1, "Ai nevoie de minim 5,000$.");					
					sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s bought a Desert eagle.", GetName(playerid));
					GivePlayerCash(playerid, -5000);
					GivePlayerWeaponEx(playerid, 24, 100);											
				} 
				case 3: {
					if(GetPlayerCash(playerid) < 8000) return SCM(playerid, -1, "Ai nevoie de minim 8,000$.");					
					sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s bought a Shotgun.", GetName(playerid));
					GivePlayerCash(playerid, - 8000);
					GivePlayerWeaponEx(playerid, 25, 100);
				}
				case 4: {
					if(GetPlayerCash(playerid) < 7000) return SCM(playerid, -1, "Ai nevoie de minim 7,000$.");
					sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s bought a MP5.", GetName(playerid));
					GivePlayerCash(playerid, - 7000);
					GivePlayerWeaponEx(playerid, 29, 150);
				}
				case 5: {
					if(GetPlayerCash(playerid) < 10000) return SCM(playerid, -1, "Ai nevoie de minim 10,000$.");					
					sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s bought a AK47.", GetName(playerid));
					GivePlayerCash(playerid, - 10000);
					GivePlayerWeaponEx(playerid, 30, 200);
				}
				case 6: {
					if(GetPlayerCash(playerid) < 10000) return SCM(playerid, -1, "Ai nevoie de minim 10,000$.");
					sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s bought a M4.", GetName(playerid));
					GivePlayerCash(playerid, - 10000);
					GivePlayerWeaponEx(playerid, 31, 200);					
				}
			}
		}
		case DIALOG_RADIO: {
			if(!response) return true;
			switch(listitem) {
			    case 0: {
					StopAudioStreamForPlayersInCar(vehicleid);
	                vehRadio[vehicleid] = 0;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
			    }
				case 1: {
					StopAudioStreamForPlayersInCar(vehicleid);
	                PlayAudioStreamForPlayersInCar(vehicleid, "http://redtimes.eu/radiored.mp3");
	                vehRadio[vehicleid] = 1;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 2: {
	                StopAudioStreamForPlayersInCar(vehicleid);
	                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiobandit.ro:8000");
	                vehRadio[vehicleid] = 2;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 3: {
	                StopAudioStreamForPlayersInCar(vehicleid);
	                PlayAudioStreamForPlayersInCar(vehicleid, "http://radiotaraf.com/live.m3u");
	                vehRadio[vehicleid] = 3;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 4: {
	                StopAudioStreamForPlayersInCar(vehicleid);
	                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiohot.ro:8000/");
	                vehRadio[vehicleid] = 4;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 5: {
	                StopAudioStreamForPlayersInCar(vehicleid);
	                PlayAudioStreamForPlayersInCar(vehicleid, "http://dance.radiogangsta.ro:8800");
	                vehRadio[vehicleid] = 5;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
	            case 6: {
	                StopAudioStreamForPlayersInCar(vehicleid);
	                PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radiogangsta.ro:8800");
	                vehRadio[vehicleid] = 6;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 7: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
	                vehRadio[vehicleid] = 7;
					SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 8: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
	                vehRadio[vehicleid] = 8;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 9: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
	                vehRadio[vehicleid] = 9;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 10: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://www.listenlive.eu/bbcradio1.m3u");
	                vehRadio[vehicleid] = 10;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 11: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://dubstep.fm/128.pls");
	                vehRadio[vehicleid] = 11;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 12: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://www.radio-hit.ro/asculta.m3u");
	                vehRadio[vehicleid] = 12;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 13: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://live.radioclubmix.ro:9999");
	                vehRadio[vehicleid] = 13;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 14: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://80.86.106.136/listen.pls");
	                vehRadio[vehicleid] = 14;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 15: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://www.radiozu.ro/live.m3u");
	                vehRadio[vehicleid] = 15;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 16: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://livemp3.radiopopular.ro:7777");
	                vehRadio[vehicleid] = 16;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
				case 17: {
	                StopAudioStreamForPlayersInCar(vehicleid);
					PlayAudioStreamForPlayersInCar(vehicleid, "http://radio.trap.fm/listen128.pls");
	                vehRadio[vehicleid] = 17;
	                SCM(playerid, COLOR_WHITE, "Ai schimbat frecventa radio.");
	            }
			}			
		}
		case DIALOG_MP3: {
			if(!response) return true;
			switch(listitem) {
			    case 0: {
					PlayAudioStreamForPlayer(playerid, "");
			    }
				case 1: {
	                PlayAudioStreamForPlayer(playerid, "http://redtimes.eu/radiored.mp3");
	                SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 2: {
	                PlayAudioStreamForPlayer(playerid, "http://live.radiobandit.ro:8000");
	                SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 3: {
	                PlayAudioStreamForPlayer(playerid, "http://radiotaraf.com/live.m3u");
	                SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 4: {
	                PlayAudioStreamForPlayer(playerid, "http://live.radiohot.ro:8000/");
	                SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 5: {
	                PlayAudioStreamForPlayer(playerid, "http://dance.radiogangsta.ro:8800");
	                SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
	            case 6: {
	                PlayAudioStreamForPlayer(playerid, "http://live.radiogangsta.ro:8800");
	                SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 7: {
					PlayAudioStreamForPlayer(playerid, "http://7619.live.streamtheworld.com:80/977_HITS_SC");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 8: {
					PlayAudioStreamForPlayer(playerid, "http://7639.live.streamtheworld.com:80/977_MIX_SC");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 9: {
					PlayAudioStreamForPlayer(playerid, "http://7579.live.streamtheworld.com:80/977_ALTERN_SC");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 10: {
					PlayAudioStreamForPlayer(playerid, "http://www.listenlive.eu/bbcradio1.m3u");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 11: {
					PlayAudioStreamForPlayer(playerid, "http://dubstep.fm/128.pls");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 12: {
					PlayAudioStreamForPlayer(playerid, "http://www.radio-hit.ro/asculta.m3u");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 13: {
					PlayAudioStreamForPlayer(playerid, "http://live.radioclubmix.ro:9999");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 14: {
					PlayAudioStreamForPlayer(playerid, "http://80.86.106.136/listen.pls");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 15: {
					PlayAudioStreamForPlayer(playerid, "http://www.radiozu.ro/live.m3u");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 16: {
					PlayAudioStreamForPlayer(playerid, "http://livemp3.radiopopular.ro:7777");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
				case 17: {
					PlayAudioStreamForPlayer(playerid, "http://radio.trap.fm/listen128.pls");
					SetPlayerAttachedObject(playerid, 4, 19421, 2, 0.050000, -0.014999, 0.000000, 95.000000, 183.000000, 89.000000, 1, 1, 1, 0xffffffff);
	            }
			}			
		}
		case DIALOG_HUD: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pHUD1] == 0) {
						format(string,200,"{C0C0C0}Grey\n{7E689B}Red\n{00FF00}Green\n{0000FF}Blue\n{FFFF00}Yellow");
						ShowPlayerDialogEx(playerid,DIALOG_HUD1,DIALOG_STYLE_LIST, "HUD Options: HP Color", string, "Select","Close");								
					} else {
						PlayerInfo[playerid][pHUD1] = 0;
						PlayerTextDrawHide(playerid, HUD[1][playerid]);
					}
				}
				case 1: {
					if(PlayerInfo[playerid][pHUD2] == 0) {
						format(string,200,"{C0C0C0}Grey\n{7E689B}Red\n{00FF00}Green\n{0000FF}Blue\n{FFFF00}Yellow");
						ShowPlayerDialogEx(playerid,DIALOG_HUD2,DIALOG_STYLE_LIST, "HUD Options: Armour Color", string, "Select","Close");							
					} else {
						PlayerInfo[playerid][pHUD2] = 0;
						PlayerTextDrawHide(playerid, HUD[2][playerid]);
					}
				}
				case 2: {
					switch(PlayerInfo[playerid][pHUD3]) {
						case 1: {
							PlayerInfo[playerid][pHUD3] = 0;
							PlayerTextDrawHide(playerid, HUD[3][playerid]);
						}
						case 0: PlayerInfo[playerid][pHUD3] = 1;
					}
					pUpdateInt(playerid, "HUD3", PlayerInfo[playerid][pHUD3]);
				}
			}
		}
		case DIALOG_HUD1: {
			if(!response) return true;
			switch(listitem) {
				case 0: PlayerInfo[playerid][pHUD1] = 1;					
				case 1: PlayerInfo[playerid][pHUD1] = 2;
				case 2: PlayerInfo[playerid][pHUD1] = 3;
				case 3: PlayerInfo[playerid][pHUD1] = 4;
				case 4: PlayerInfo[playerid][pHUD1] = 5;				
			}
			pUpdateInt(playerid, "HUD1", PlayerInfo[playerid][pHUD1]);
		}
		case DIALOG_HUD2: {
		    if(!response) return true;
			switch(listitem) {
				case 0: PlayerInfo[playerid][pHUD2] = 1;
				case 1: PlayerInfo[playerid][pHUD2] = 2;
				case 2: PlayerInfo[playerid][pHUD2] = 3;
				case 3: PlayerInfo[playerid][pHUD2] = 4;
				case 4: PlayerInfo[playerid][pHUD2] = 5;	
			}
			pUpdateInt(playerid, "HUD2", PlayerInfo [playerid] [pHUD2]);
		}
		case DIALOG_HELP: {
			if(!response) return true;
			switch(listitem) {
				case 0: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: General Commands", "/stats /accept /eject /ad /admins\n/helpers /time /id /changepass /pay\n/buylevel /fill /fillgascan /gps /shop\n/contract /service /buydrink /licenses","Back","Exit");
				case 1: {
	   				format(string, sizeof(string), "/sms (OOCly SMS another player)\n/w(hisper)\n/me (action)\n/wt (walkie talkie)");
	  	    		ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Chat Commands", string, "Back", "Exit");					
				}
				case 2: {
					switch(PlayerInfo[playerid][pMember]) {
						case 0: SCM(playerid, -1, "Nu esti intr-o factiune.");
						case 1: {
							format(string, sizeof(string), "/mdc /su /arrest\n/m(egaphone) /tazer /cuff /confiscate /takedrugs\n/uncuff /frisk /clear /d(epartments) /r(adio) /wanted\n/ticket /duty /gdeposit /startradar /stopradar");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");							
						}
						case 2: {
							format(string, sizeof(string), "/mdc /su /arrest /confiscate /takedrugs /m(egaphone)\n/tazer /cuff /duty /wanted\n/uncuff /frisk /clear /d(epartments) /r(adio) /gdeposit /startradar /stopradar");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");							
						}
						case 3: {
							format(string, sizeof(string), "/mdc /su /arrest /confiscate /takedrugs /wanted\n/m(egaphone) /tazer /cuff /duty\n/uncuff /frisk /clear /d(epartments) /r(adio) /gdeposit /startradar /stopradar");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 4: {
					    	format(string, sizeof(string), "/order /attack /f /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 5: {
					    	format(string, sizeof(string), "/order /attack /f /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 6: {
					    	format(string, sizeof(string), "/order /attack /f /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 8: {
					    	format(string, sizeof(string), "/mdc /su /arrest\n/m(egaphone) /tazer /cuff /confiscate /takedrugs\n/uncuff /frisk /clear /d(epartments) /r(adio) /wanted\n/ticket /duty /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 9: {
	    					format(string, sizeof(string), "/news /live /endlive /gdeposit");
	    					ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");								
						}
						case 10: {
					    	format(string, sizeof(string), "/order /attack /f /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");								
						}
						case 11: {
	    					format(string, sizeof(string), "/contracts /gethit /order /f /undercover /cancelhit /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 12: {
							format(string, sizeof(string), "/f /startlesson /stoplesson /givelicence /gdeposit /givegun");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 13: {
	    					format(string, sizeof(string), "/fare /taxi /f /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 14: {
	    					format(string, sizeof(string), "/medic cancel /medic accept /heal /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 15: {
							format(string, sizeof string, "/tow /refill /repair /duty");
							ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}
						case 16: {
	    					format(string, sizeof(string), "/fare /uber /f /gdeposit");
	  	    				ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Group Commands", string, "Back", "Exit");
						}						
					}
				}
				case 3: {
				    format(string, sizeof(string), "/handsup /drunk /bomb /laugh /lookout /robman /crossarms /sit /siteat /hide /vomit\n/wave /slapass /deal /crack /smoke /chat /dance /finger /taichi /pedmove /bat");
					strcat(string, "\n/blob /opendoor /wavedown /reload /cpr /dive");
	    			ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Animations Commands", string, "Back", "Exit");
				}
				case 4: {
					format(string, sizeof(string), "{FFFFFF}General Commands:\n/home\n\nHouse Owner Commands\n/sellhouse\n/lockhouse");
					strcat(string, "\n/setrent\n/sellhousetostate\n/tenants\n/evict <playerid>\n/evictall\n/hwithdraw\n/hbalance\n/housename");
					ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: House Commands", string, "Back", "Exit");					
				}
				case 5: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Business Commands", "/bizfee /bizname /lockbusiness /sellbiztostate /sellbusiness /bwithdraw /bbalance", "Back", "Exit");
				case 6: {
					SCM(playerid, -1, "You need level 3 to buy a car. To buy a car you can go to the car dealership. If you don't know where the dealership is located, use /gps.");
					SCM(playerid, -1, "General commands: /lock, /park, /engine, /carradio, /eject, /carcolor /removetuning, /carplate");
					SCM(playerid, -1, "General commands: /sellcar, /sellcarto, /tradecar, /givekey, /v.");
				}	
				case 7: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Bank Commands", "/withdraw /deposit", "Back", "Exit");
				case 8: {
					format(string, sizeof(string), "You can use /rob starting at level 3. To rob, you need to go inside a business and use command /rob.");
					ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Rob", string, "Back", "Exit");
				}
				case 9: {
					if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, "Nu esti helper.");
					ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Helpers", "/reports /nmute /nre /unstuck /kick /re /hduty /e /da /slap /nr /questions /ndelete /acolor", "Back", "Exit");
				}
				case 10: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Premium", "Benefits Premium:\n/tog - whisper\n4 slots vehicles\ntag on panel\nlevel < 10 - 100,000$ at payday\nlevel > 20 - 200,000$ at payday\n8 rob points at rob\n/specialskin", "Back", "Exit");
				case 11: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: VIP", "Benefits VIP:\n/vipchat\n-2 FP(payday)\n/s with yellow color\n20 slots /friends\ntag on panel\n/specialskin", "Back", "Exit");
				case 12: {
					if(PlayerInfo[playerid][pLeader] < 1) return SCM(playerid, -1, "Nu esti lider.");
					ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Leaders", "/members /fvrespawn /invite /lockhq /changerank /gmotd /l", "Back", "Exit");
				}
				case 13: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Legendary Account", "- Functia se poate cumpara cu 420 puncte premium folosind /shop.\nInteres dublu la banca.\nLimita la punctele de rob este scoasa.\n/specialskin", "Back", "Exit");
				case 14: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER: Transcendent vehicle", "- Functia se poate cumpara cu $900,000,000/masina.\niti poti baga 300L de benzina la alimentare\niti poti repara masina folosind comanda [/tf]\niti poti adauga nos pe masina folosind comanda [/tnos]\niti poti trage masina la tine (/v - vehiculul - (T) Get vehicle to you)", "Back", "Exit");
				case 15: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER:Reborn Info", "contul reborn se poate cumpara din /shop\ndupa ce iti vei cumpara contul reborn niveul tau va scadea la 5\ntag special pe panel (reborned)\nacces la comanda [/find] fara a detine jobul detective\nacces la comanda [/nos] pentru a-ti adauga nitro odata la un minut\nacces la comanda [/flip] odata la un minut.", "Back", "Exit");
				case 16: ShowPlayerDialogEx(playerid, DIALOG_HELP2, DIALOG_STYLE_MSGBOX, "SERVER:Personal Pet", "- interes mai mare la farmer\n- interes mai mare la fisherman\n- tag pet acces pe panel\n- skin special in /specialskin\n- animal de companie pe umar", "Back", "Exit");
			}
		}
		case DIALOG_HELP2: {
			if(!response) return true;
  			ShowPlayerDialogEx(playerid,DIALOG_HELP,DIALOG_STYLE_LIST, "SERVER: Commands", "General\nChat\nGroups\nAnimations\nHouses\nBusinesses\nVehicles\nBank\nRob\nHelpers\nPremium\nVIP\nLeaders\nLegendary Account", "Select","Exit");
		}
		case DIALOG_MEMBERS: {
			if(!response) return true;
			if(listitem >= 0) {
				if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, -1, "Nu esti lider sau colider.");
				new name[30], result[30], test[5];	
				gString[0] = (EOS);
				format(gString, 300, "SELECT * FROM `users` WHERE `id`='%d'", Selected[playerid][listitem]);
				new Cache: membresult = mysql_query(SQL, gString);
				for(new i, j = cache_get_row_count (); i != j; ++i) {
					cache_get_field_content(i, "name", result); format(name, 30, result);
					cache_get_field_content(i, "Rank", result); format(test, 5, result);
				}
				cache_delete(membresult);
				Selected2[playerid] = Selected[playerid][listitem];
				format(string, sizeof(string), "%s - %s", test, name);
				ShowPlayerDialogEx(playerid, DIALOG_MEMBERS2, DIALOG_STYLE_LIST, string, "Change Rank\nFaction Warn\nClear FW\nUninvite - 20 FP\nUninvite - 0 FP", "Ok", "Exit");
			}
		}
		case DIALOG_MEMBERS2: {
			if(!response) return true;
			new rank, ftime, result[30], name[30], frank;
			gString[0] = (EOS);
			switch(listitem) {
				case 0: SCM(playerid, -1, "Syntax: /changerank [name/playerid] [rank]");
				case 1: {
					if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SCM(playerid, -1, "You can't give a fw to yourself.");
					foreach(new i : Player) {
						if(PlayerInfo[i][pSQLID] == Selected2[playerid]) {
							if(PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 7 || PlayerInfo[playerid][pRank] == 6 && PlayerInfo[i][pRank] == 6) return SCM(playerid, -1, "You can't give a FW to a member with rank 6-7.");
						}
					}
					format(gString, 256, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL, gString);
					for(new i, j = cache_get_row_count (); i != j; ++i) {
						rank = cache_get_field_content_int(i, "Rank");
					}
					cache_delete(membresult);
					if(PlayerInfo[playerid][pRank] == 6 && rank == 6 || PlayerInfo[playerid][pRank] == 6 && rank == 7) return SCM(playerid, -1, "You can't give a FW to a member with rank 6-7.");
					ShowPlayerDialogEx(playerid, DIALOG_FWARN, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-i dai FW acelui membru?", "Da", "Nu");
				}
				case 2: {
					if(PlayerInfo[playerid][pRank] < 6) return SCM(playerid, -1, "Only leaders have acces to fw clear.");
					ShowPlayerDialogEx(playerid, DIALOG_FUNWARN, DIALOG_STYLE_MSGBOX, "Esti sigur?", "Esti sigur ca vrei sa-i stergi FW acelui membru?", "Da", "Nu");
				}
				case 3: {
					if(PlayerInfo[playerid][pRank] != 7) return SCM(playerid, -1, "Only leaders can uninvite a member.");
					if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SCM(playerid, -1, "You can't uninvite yourself.");
					format(gString, 256, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL, gString);
					for(new i, j = cache_get_row_count (); i != j; ++i) {
						ftime = cache_get_field_content_int(i, "FactionJoin");
						frank = cache_get_field_content_int(i, "Rank");
						cache_get_field_content(i, "name", result); format(name, 30, result);				
					}
					cache_delete(membresult);
					if(frank == 7) return SCM(playerid, -1, "You can't uninvite a leader.");
					format(gString, 256, "Esti pe cale sa-i dai uninvite lui %s CU 20 FP.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:", name, GetDaysFromTimestamp(ftime));
					ShowPlayerDialogEx(playerid, DIALOG_FPUNINVITE, DIALOG_STYLE_INPUT, "Uninvite - 20 FP", gString, "Uninvite", "Exit");
				}
				case 4: {
					if(PlayerInfo[playerid][pRank] != 7) return SCM(playerid, -1, "Only leaders can uninvite a member.");
					if(PlayerInfo[playerid][pSQLID] == Selected2[playerid]) return SCM(playerid, -1, "You can't uninvite yourself.");
					format(gString, 256, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
					new Cache: membresult = mysql_query(SQL, gString);
					for(new i, j = cache_get_row_count (); i != j; ++i) {
						ftime = cache_get_field_content_int(i, "FactionJoin");
						frank = cache_get_field_content_int(i, "Rank");
						cache_get_field_content(i, "name", result); format(name, 30, result);
					}
					cache_delete(membresult);
					if(frank == 7) return SCM(playerid, -1, "You can't uninvite a leader.");
					format(gString, 256, "Esti pe cale sa-i dai uninvite lui %s FARA FP.\nAcesta are %d zile in factiune.\nScrie motivul pentru uninvite mai jos:", name, GetDaysFromTimestamp(ftime));
					ShowPlayerDialogEx(playerid, DIALOG_NOUNINVITE, DIALOG_STYLE_INPUT, "Uninvite - 0 FP", gString, "Uninvite", "Exit");			
				}
			}
		}		
		case DIALOG_FPUNINVITE: {
			if(!response) return true;
			if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta actiune peste 60 de secunde.");
			new result[30], name[30], rank, ftime, reason[64], idd, fhid, test, string2[144];
			gString[0] = (EOS);
			format(gString, 256, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,gString);
			for(new i, j = cache_get_row_count (); i != j; ++i) {
				cache_get_field_content(i, "name", result); format(name, 30, result);
				ftime = cache_get_field_content_int(i, "FactionJoin");
				rank = cache_get_field_content_int(i, "Rank");
				idd = cache_get_field_content_int(i, "id");
			}
			cache_delete(membresult);
			format(gString, 256, "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", idd);
			new Cache: abx = mysql_query(SQL, gString);
			fhid = cache_get_field_content_int(0, "id");
			cache_delete(abx);
			mysql_real_escape_string(inputtext, reason);
			format(gString, 144, "%s was uninvited by %s from faction %s (rank %d) after %d days, with FP. Reason: %s.", name, GetName(playerid), DynamicFactions[PlayerInfo[playerid][pMember]][fName], rank, GetDaysFromTimestamp(ftime), reason);
			mysql_real_escape_string(gString, string2);
			gString[0] = (EOS);
			mysql_format(SQL, gString, 256, "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
			mysql_tquery(SQL, gString);
			mysql_format(SQL, gString, 256, "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, idd, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, gString);
			SCM(playerid, -1, "Acel player a primit uninvite.");
			mysql_format(SQL,gString,256,"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='20',`FWarn`='0',`FactionJoin`='0' WHERE `id`='%d'",Selected2[playerid]);
			mysql_tquery(SQL,gString);
			foreach(new i : Player) {
				if(PlayerInfo[i][pSQLID] == Selected2[playerid]) {
					gTeam[i] = 3; PlayerInfo[i][pTeam] = 3;  PlayerInfo[i][pMember] = 0; PlayerInfo[i][pRank] = 0; PlayerInfo[i][pLeader] = 0; PlayerInfo[i][pFACWarns] = 0;
					PlayerInfo[i][pFpunish] = 20; PlayerInfo[i][pFactionJoin] = 0; PlayerInfo[i][pModel] = 250;	SetPlayerArmourEx(i, 0); tazer[i] = 0; OnDuty[i] = 0;	
					SetPlayerSkin(i, 250); SpawnPlayer(i);
					SCMf(i, COLOR_SKEMA2, "You were uninvited by %s from your faction after %d days, with FP. Reason: %s.", GetName(playerid), GetDaysFromTimestamp(ftime), reason);	
					test++;	
				}
			}	
			sanctiondelay[playerid] = 60;
		}
		case DIALOG_NOUNINVITE: {
			if(!response) return true;
			if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta actiune peste 60 de secunde.");
			gString[0] = (EOS);
			new result[30], name[30], rank, ftime, reason[64], idd, fhid, test, string2[144];
			format(gString, 256, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,gString);
			for(new i, j = cache_get_row_count (); i != j; ++i) {
				cache_get_field_content(i, "name", result); format(name, 30, result);
				ftime = cache_get_field_content_int(i, "FactionJoin");
				rank = cache_get_field_content_int(i, "Rank");
				idd = cache_get_field_content_int(i, "id");		
			}
			cache_delete(membresult);
			format(gString, 256, "SELECT * FROM `faction_logs` WHERE `player`='%d' ORDER BY `id` DESC LIMIT 1", idd);
			new Cache: abx = mysql_query(SQL, gString);
			fhid = cache_get_field_content_int(0, "id");
			cache_delete(abx);
			mysql_real_escape_string(inputtext, reason);
			format(gString, 144, "%s was uninvited by %s from faction %s (rank %d) after %d days, without FP. Reason: %s.", name, GetName(playerid), DynamicFactions[PlayerInfo[playerid][pMember]][fName], rank, GetDaysFromTimestamp(ftime), reason);
			mysql_real_escape_string(gString, string2);
			gString[0] = (EOS);
			mysql_format(SQL, gString, 256, "DELETE FROM `faction_logs` WHERE `id`='%d'", fhid);
			mysql_tquery(SQL, gString);
			mysql_format(SQL, gString, 256, "INSERT INTO `faction_logs` (`text`,`player`,`leader`) VALUES ('%s','%d','%d')", string2, idd, PlayerInfo[playerid][pSQLID]);
			mysql_tquery(SQL, gString);
			SCM(playerid, -1, "Acel player a primit uninvite.");			
			mysql_format(SQL,gString,256,"UPDATE users SET `Team`='3',`Member`='0',`Leader`='0',`Rank`='0',`Model`='250',`FPunish`='0',`FWarn`='0',`FactionJoin`='0' WHERE `id`='%d'",Selected2[playerid]);
			mysql_tquery(SQL,gString);
			foreach(new i : Player) {
				if(PlayerInfo[i][pSQLID] == Selected2[playerid]) {
					gTeam[i] = 3; PlayerInfo[i][pTeam] = 3;  PlayerInfo[i][pMember] = 0; PlayerInfo[i][pRank] = 0; PlayerInfo[i][pLeader] = 0; PlayerInfo[i][pFACWarns] = 0;
					PlayerInfo[i][pFpunish] = 0; PlayerInfo[i][pFactionJoin] = 0; PlayerInfo[i][pModel] = 250;	SetPlayerArmourEx(i, 0); tazer[i] = 0; OnDuty[i] = 0;	
					SetPlayerSkin(i, 250); SpawnPlayer(i);
					SCMf(i, COLOR_SKEMA2, "You were uninvited by %s from your faction after %d days, without FP. Reason: %s.", GetName(playerid), GetDaysFromTimestamp(ftime), reason);
					test++;		
				}
			}
			sanctiondelay[playerid] = 60;
		}
		case DIALOG_FWARN: {
			if(!response) return true;
			gString[0] = (EOS);
			new fwarn, name2[30], result[30];
			format(gString, 128, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL, gString);
			for(new i, j = cache_get_row_count (); i != j; ++i) {
				cache_get_field_content(i, "name", result); format(name2, 30, result);
				fwarn = cache_get_field_content_int(i, "FWarn");
			}
			cache_delete(membresult);
			if(fwarn == 2) return SCM(playerid, -1, "Poti da maxim 2 FW unui membru.");
			gString[0] = (EOS);
			mysql_format(SQL, gString, 150, "UPDATE users SET FWarn = FWarn+1 WHERE id = %d", Selected2[playerid]);
			mysql_tquery(SQL, gString);
			SCM(playerid, -1, "Acel player a primit FW.");
			foreach(new i : Player) {
				if(PlayerInfo[i][pSQLID] == Selected2[playerid]) {
					PlayerInfo[i][pFACWarns] ++;
					SCMf(i, COLOR_GENANNOUNCE, "%s ti-a dat un FW.", GetName(playerid));
				}
			}
		}	
		case DIALOG_FUNWARN: {
			if(!response) return true;
			new fwarn, name2[30], result[30];
			gString[0] = (EOS);
			format(gString, 128, "SELECT * FROM `users` WHERE `id`='%d'", Selected2[playerid]);
			new Cache: membresult = mysql_query(SQL,gString);
			for(new i, j = cache_get_row_count (); i != j; ++i) {
				cache_get_field_content(i, "name", result); format(name2, 30, result);
				fwarn = cache_get_field_content_int(i, "FWarn");
			}
			cache_delete(membresult);	
			if(fwarn == 0) return SendClientMessage(playerid, COLOR_WHITE, "Acel membru nu are niciun FW."); 
		 	gString[0] = (EOS);
		 	mysql_format(SQL, gString, 150, "UPDATE users SET FWarn = FWarn-1 WHERE id = %d", Selected2[playerid]);
		 	mysql_tquery(SQL, gString);
		 	SCM(playerid, -1, "Acelui player i-a fost scos un FW.");
		 	foreach(new i : Player) {
		 		if(PlayerInfo[i][pSQLID] == Selected2[playerid]) {
		 			PlayerInfo[i][pFACWarns] --;
		 			SCMf(i, COLOR_GENANNOUNCE, "%s ti-a fost scos un FW.", GetName(playerid));
		 		}
		 	}
		}				
		case DIALOG_BUYWALKIE: {
			if(!response) return true;
			if(PlayerInfo[playerid][pPremiumPoints] < 50) return SCM(playerid, -1, "Nu ai suficiente premium points.");
			if(IsNumeric(inputtext)) {
				if(strlen(inputtext) == 3) {
					new numb = strval(inputtext), str2[200];
					if((inputtext[0] != '0')) {
						format(str2, sizeof(str2), "SELECT * FROM `frequencies` WHERE `freqid`='%d'", numb);
						new Cache: xd = mysql_query(SQL, str2);
						if(cache_get_row_count() > 0) {
							cache_delete(xd);
							SCM(playerid, -1, "This frequency number exist.");
							return true;
						}
						cache_delete(xd);
						PlayerInfo[playerid][pPremiumPoints] -= 50;
						pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
						mysql_format(SQL, str2, sizeof(str2),"INSERT INTO `frequencies` (`freqid`,`ownerid`) VALUES ('%d','%d')", numb, PlayerInfo[playerid][pSQLID]);
						mysql_tquery(SQL, str2, "", "");
						SCMf(playerid, COLOR_PRINC, "You bought frequency #%d for 50 premium points.", numb);
						SCMf(playerid, COLOR_PRINC, ">> {ffffff}You are now broadcasting at the frequency of #%d khz.", numb);
						WTChannel[playerid] = numb; pUpdateInt(playerid, "WTChannel", WTChannel[playerid]);
						SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a personal frequency using 50 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					}
				}
			}
		}
		case DIALOG_VOUCHERS: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pNormalVoucher] < 1) return SCM(playerid, -1, "Nu ai un normal voucher.");
					PlayerInfo[playerid][pNormalVoucher] --; pUpdateInt(playerid, "NormalVoucher", PlayerInfo[playerid][pNormalVoucher]);
					PlayerInfo[playerid][pPremiumPoints] += 50; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "(Voucher): {ffffff}Ai primit 50 de puncte premium folosind un normal voucher.");
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumVoucher] < 1) return SCM(playerid, -1, "Nu ai un premium voucher.");
					PlayerInfo[playerid][pPremiumVoucher] --; pUpdateInt(playerid, "PremiumVoucher", PlayerInfo[playerid][pPremiumVoucher]);
					PlayerInfo[playerid][pPremiumPoints] += 190; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "(Voucher): {ffffff}Ai primit 190 de puncte premium folosind un premium voucher.");
				}
				case 2: {
					if(PlayerInfo[playerid][pExtraVoucher] < 1) return SCM(playerid, -1, "Nu ai un extra voucher.");
					PlayerInfo[playerid][pExtraVoucher] --; pUpdateInt(playerid, "ExtraVoucher", PlayerInfo[playerid][pExtraVoucher]);
					PlayerInfo[playerid][pPremiumPoints] += 0; pUpdateInt(playerid, "ExtraVoucher", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "(Voucher): {ffffff}Ai primit 490 de puncte premium folosind un extra voucher.");
				}
			}
		}
		case DIALOG_ADMINSHOP: {
			if(!response) return true;
			if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
			switch(listitem) {
				case 0: SCM(playerid, -1, "+ 1 token atunci cand rezolvati un report.");
				case 1: {
					if(PlayerInfo[playerid][pTokens] < 400) return SCM(playerid, -1, "Nu ai 400 tokens.");
					if(PlayerInfo[playerid][pFpunish] < 1) return SCM(playerid, -1, "Nu ai faction punish.");
					PlayerInfo[playerid][pFpunish] = 0; pUpdateInt(playerid, "FPunish", 0);
					PlayerInfo[playerid][pTokens] -= 400; pUpdateInt(playerid, "Tokens", PlayerInfo[playerid][pTokens]);
					SCM(playerid, COLOR_PRINC, "Ai cumparat clear faction punish (- 400 tokens).");
				}
				case 2: {
					if(PlayerInfo[playerid][pTokens] < 500) return SCM(playerid, -1, "Nu ai 500 tokens.");
					if(PlayerInfo[playerid][pWarns] < 1) return SCM(playerid, -1, "Nu ai niciun warn.");
					PlayerInfo[playerid][pWarns] = 0; pUpdateInt(playerid, "Warnings", 0);
					PlayerInfo[playerid][pTokens] -= 500; pUpdateInt(playerid, "Tokens", PlayerInfo[playerid][pTokens]);
					SCM(playerid, COLOR_PRINC, "Ai cumparat clear warns (- 500 tokens).");
				}
				case 3: {
					if(PlayerInfo[playerid][pTokens] < 380) return SCM(playerid, -1, "Nu ai 380 tokens.");
					PlayerInfo[playerid][pHiddenColor] ++; pUpdateInt(playerid, "HiddenColor", PlayerInfo[playerid][pHiddenColor]);
					PlayerInfo[playerid][pTokens] -= 380; pUpdateInt(playerid, "Tokens", PlayerInfo[playerid][pTokens]);
					SCM(playerid, COLOR_PRINC, "Ai cumparat o culoare hidden (- 380 tokens).");
				}
				case 4: {
					if(PlayerInfo[playerid][pTokens] < 600) return SCM(playerid, -1, "Nu ai 600 tokens.");
					if(PlayerInfo[playerid][pCarSlots] >= 10) return SCM(playerid, -1, "Deja ai 10 sloturi.");
					PlayerInfo[playerid][pCarSlots] ++; pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);
					PlayerInfo[playerid][pTokens] -= 600; pUpdateInt(playerid, "Tokens", PlayerInfo[playerid][pTokens]);
					SCM(playerid, COLOR_PRINC, "Ai cumparat un slot de vehicule (- 600 tokens).");
				}
			}	
		}
		case DIALOG_GOLDENSHOP: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
			  		SCM(playerid, -1, "Pentru mai multe detalii accesati panel-ul.");
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 180) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPremiumPoints] -= 180; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					InsertCar(playerid, 66, 1);
					SCM(playerid, COLOR_PRINC, "Ti-ai cumparat Hotring Racer folosind 180 premium points (Legendary shop).");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Hotring Racer using 180 premium points (Legendary shop).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 2: {
					if(PlayerInfo[playerid][pPremiumPoints] < 180) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPremiumPoints] -= 180; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					InsertCar(playerid, 64, 1);
					SCM(playerid, COLOR_PRINC, "Ti-ai cumparat Hotring Racer folosind 180 premium points (Legendary shop).");
					if(PlayerInfo[playerid][pCarSlots] >= 10) return SCM(playerid, -1, "Ai deja 10 sloturi de vehicule.");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Hotring Racer using 180 premium points (Legendary shop).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 3: {
					if(PlayerInfo[playerid][pPremiumPoints] < 180) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPremiumPoints] -= 180; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					InsertCar(playerid, 63, 1);
					SCM(playerid, COLOR_PRINC, "Ti-ai cumparat Hotring Racer folosind 180 premium points (Legendary shop).");
					if(PlayerInfo[playerid][pCarSlots]) return SCM(playerid, -1, "Nu ai sloturi disponibile.");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Hotring Racer using 180 premium points (Legendary shop).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 4: {
					if(PlayerInfo[playerid][pPremiumPoints] < 220) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPremiumPoints] -= 220; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					InsertCar(playerid, 67, 1);
					SCM(playerid, COLOR_PRINC, "Ti-ai cumparat Maverick folosind 220 premium points (Legendary shop).");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Maverick using 220 premium points (Legendary shop).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);					
				}
				case 5: {
					if(PlayerInfo[playerid][pPremiumPoints] < 150) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPremiumPoints] -= 150; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					InsertCar(playerid, 62, 1);
					SCM(playerid, COLOR_PRINC, "Ti-ai cumparat Sparrow folosind 150 premium points (Legendary shop).");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Sparrow using 150 premium points (Legendary shop).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);					
				}
				case 6: {
					if(PlayerInfo[playerid][pPremiumPoints] < 190) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPremiumPoints] -= 190; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					InsertCar(playerid, 65, 1);
					SCM(playerid, COLOR_PRINC, "Ti-ai cumparat Vortex folosind 190 premium points (Legendary shop).");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Vortex using 190 premium points (Legendary shop).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 7: {
					if(PlayerInfo[playerid][pPremiumPoints] < 100) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					PlayerInfo[playerid][pPremiumPoints] -= 100; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					InsertCar(playerid, 68, 1);
					SCM(playerid, COLOR_PRINC, "Ti-ai cumparat Stretch folosind 100 premium points (Legendary shop).");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Stretch using 100 premium points (Legendary shop).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}	
				case 8: {
					if(PlayerInfo[playerid][pPremiumPoints] < 15) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					if(PlayerInfo[playerid][pCarSlots] >= 10) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't buy more than 10 vehicle slots.");
					PlayerInfo[playerid][pCarSlots] ++; pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);
					PlayerInfo[playerid][pPremiumPoints] -= 15; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "Ti-ai cumparat un slot de vehicul folosind 15 premium points (Legendary shop).");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a vehicle slot using 15 premium points (Legendary shop).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}				
			}
		}	
		case DIALOG_SHOPPREMIUM: {
			if(!response) return true;
		    switch(listitem) {
			  	case 0: {
			  		SCM(playerid, -1, "Mai multe detalii gasiti pe /panel la Shop - premium.");
			  	}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 300) return SCM(playerid, -1, "Nu ai suficiente premium points.");
				    if(PlayerInfo[playerid][pPremiumAccount] > 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You already have a premium account.");
					PlayerInfo[playerid][pPremiumPoints] -= 300; PlayerInfo[playerid][pPremiumAccount] = 1;
					if(PlayerInfo[playerid][pCarSlots] <= 8) PlayerInfo[playerid][pCarSlots] += 2;
					if(PlayerInfo[playerid][pCarSlots] == 9) PlayerInfo[playerid][pCarSlots] += 1;
					pUpdateInt(playerid, "Premium", PlayerInfo[playerid][pPremiumAccount]); pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);
					SCM(playerid, COLOR_PRINC, "(!) You have bought a premium account(-300 premium points).");
					SCM(playerid, COLOR_PRINC, "(!) You can own now 4 cars instead of 2.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a premium account using 300 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 2: {
				    if(PlayerInfo[playerid][pPremiumPoints] < 30) return SCM(playerid, -1, "Nu ai suficiente premium points.");
					ShowPlayerDialogEx(playerid, DIALOG_CHANGENAME, DIALOG_STYLE_INPUT, "Change name:", "Please enter your desired name below:", "Ok", "Cancel");
				}
				case 3: {
					if(PlayerInfo[playerid][pPremiumPoints] < 200) return SCM(playerid, -1, "Nu ai suficiente premium points.");
				    if(PlayerInfo[playerid][pFpunish] <= 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have faction punish.");
					PlayerInfo[playerid][pPremiumPoints] -= 200; 
					PlayerInfo[playerid][pFpunish] = 0;
					pUpdateInt(playerid, "FPunish", 0); 
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "You paid 200 premium points to clear your FP.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a clear faction punish using 200 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 4: {
					if(PlayerInfo[playerid][pPremiumPoints] < 50) return SCM(playerid, -1, "Nu ai suficiente premium points.");
					if(PlayerInfo[playerid][pWarns] <= 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have any warn.");
					PlayerInfo[playerid][pPremiumPoints] -= 50; PlayerInfo[playerid][pWarns] = 0;
					pUpdateInt(playerid, "Warnings", PlayerInfo[playerid][pWarns]); pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "You paid 50 premium points to clear your warns.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a clear warns using 50 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 5: {
					if(PlayerInfo[playerid][pPremiumPoints] < 30) return SCM(playerid, -1, "Nu ai suficiente premium points.");
					PlayerInfo[playerid][pPremiumPoints] -= 30; PlayerInfo[playerid][pHiddenColor] += 1;
					pUpdateInt(playerid, "HiddenColor", PlayerInfo [playerid] [pHiddenColor]); pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "You paid 30 premium points to buy a hidden color.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a hidden color using 30 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 6: {
					if(PlayerInfo[playerid][pPremiumPoints] <= 0) return SCM(playerid, -1, "Nu ai suficiente premium points.");
					PlayerInfo[playerid][pPremiumPoints] -= 1; PlayerInfo[playerid][pFWorks] += 5;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]); pUpdateInt(playerid, "FWorks", PlayerInfo[playerid][pFWorks]);
					SCM(playerid, COLOR_PRINC, "You paid 1 premium point to buy 5 fireworks.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a 5 fireworks using 1 premium point.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 7: {
					if(PlayerInfo[playerid][pPremiumAccount] < 1) return SCM(playerid, -1, "Ai nevoie de cont premium.");
					if(PlayerInfo[playerid][pPremiumPoints] < 200) return SCM(playerid, COLOR_LIGHTGREEN3, "You don't have enough premium points.");
					if(PlayerInfo[playerid][pCarSlots] >= 10) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't buy more than 10 vehicle slots.");
					PlayerInfo[playerid][pPremiumPoints] -= 200; PlayerInfo[playerid][pCarSlots] += 1;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]); pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);
					SCM(playerid, COLOR_PRINC, "You paid 35 premium points to get a vehicle slot.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a vehicle slot using 200 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 8: {
					if(PlayerInfo[playerid][pPremiumPoints] < 50) return SCM(playerid, -1, "Nu ai suficiente premium points.");
					ShowPlayerDialogEx(playerid, DIALOG_BUYWALKIE, DIALOG_STYLE_INPUT, "Buy frequency", "Type the frequency that you want to buy bellow. You can only buy a frequency 3 number frequency (100-999).\nYou'll be able to set a password for your frequency.\nPrice: 25 premium points.", "Buy", "Close");
				}
				case 9: {
					if(PlayerInfo[playerid][pPremiumPoints] <= 39) return SCM(playerid, -1, "Nu ai suficiente premium points.");
					if(PlayerInfo[playerid][pPhone] == 1) return SendClientMessage(playerid, COLOR_WHITE, "You have already an iPhone.");
					ShowPlayerDialogEx(playerid, DIALOG_IPHONE, DIALOG_STYLE_INPUT, "iPhone", "Choose a phone number:", "Ok", "Cancel");
				}
				case 10: {
					if(PlayerInfo[playerid][pPremiumPoints] < 400) return SendClientMessage(playerid, -1, "Nu ai suficiente puncte premium.");
					if(PlayerInfo[playerid][pClan] != 0) return SendClientMessage(playerid, -1, "Deja esti intr-un clan.");
					SCM(playerid, -1, "Processing your request..");
					mysql_tquery(SQL, "INSERT INTO `clans` (`clanName`) VALUES ('New Clan')", "insertServerClan", "d", playerid);
				}
				case 11: {
					if(PlayerInfo[playerid][pPremiumPoints] < 270) return SCM(playerid, -1, "Nu ai suficiente puncte premium.");
					if(PlayerInfo[playerid][pVIP] == 1) return SCM(playerid, -1, "Deja esti utilizator VIP.");
					PlayerInfo[playerid][pVIP] = 1; pUpdateInt(playerid, "VIP", 1);
					Iter_Add(Vips, playerid);
					PlayerInfo[playerid][pPremiumPoints] -= 270; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "(!) You have bought a VIP account, type /help(-270 premium points).");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a vip account using 270 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
 				case 12:
 				{
					if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) 
					{
						new casa = PlayerInfo[playerid][pPhousekey]; 

						if(!IsPlayerInRangeOfPoint(playerid, 15.0, HouseInfo[casa][hEntrancex], HouseInfo[casa][hEntrancey], HouseInfo[casa][hEntrancez])) return SCM(playerid, -1, "Nu te afli in apropierea casei.");

						ShowPlayerDialogEx(playerid, DIALOG_BUYGARAGE, DIALOG_STYLE_MSGBOX, "Buy garage", "Esti sigur ca vrei sa cumperi garajul in aceasta pozitie?\nAceasta nu poate fi modificata.\nPretul este de $800,000,000.", "Buy", "Exit"); 
					}	
				}				
			}
		}
		/*case DIALOG_WINTERSHOP: { 
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pGloburi] < 32) return SCM(playerid, -1, "Nu ai suficiente globuri.");
				    if(PlayerInfo[playerid][pFpunish] <= 0) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't have faction punish.");
					PlayerInfo[playerid][pGloburi] -= 32; 
					PlayerInfo[playerid][pFpunish] = 0;
					pUpdateInt(playerid, "FPunish", 0); 
					pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SCM(playerid, COLOR_PRINC, "You paid 32 globes to clear your FP.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a clear faction punish using 32 globuri.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 1: {
					if(PlayerInfo[playerid][pGloburi] < 20) return SCM(playerid, -1, "Nu ai suficiente globuri.");
					PlayerInfo[playerid][pGloburi] -= 20; PlayerInfo[playerid][pHiddenColor] += 1;
					pUpdateInt(playerid, "HiddenColor", PlayerInfo [playerid] [pHiddenColor]); pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SCM(playerid, COLOR_PRINC, "You paid 20 globes to buy a hidden color.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a hidden color using 20 globuri.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}	
				case 2: {
					if(PlayerInfo[playerid][pPremiumAccount] < 1) return SCM(playerid, -1, "Ai nevoie de cont premium.");
					if(PlayerInfo[playerid][pGloburi] < 150) return SCM(playerid, COLOR_LIGHTGREEN3, "You don't have enough globuri.");
					if(PlayerInfo[playerid][pCarSlots] >= 10) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You can't buy more than 10 vehicle slots.");
					PlayerInfo[playerid][pGloburi] -= 150; PlayerInfo[playerid][pCarSlots] += 1;
					pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]); pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);
					SCM(playerid, COLOR_PRINC, "You paid 150 globes to get a vehicle slot.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a vehicle slot using 150 globuri.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}	
				case 3: {
					if(PlayerInfo[playerid][pGloburi] < 180) return SCM(playerid, -1, "Nu ai suficiente globuri.");
					if(PlayerInfo[playerid][pVIP] == 1) return SCM(playerid, -1, "Deja esti utilizator VIP.");
					PlayerInfo[playerid][pVIP] = 1; pUpdateInt(playerid, "VIP", 1);
					Iter_Add(Vips, playerid);
					PlayerInfo[playerid][pGloburi] -= 180; pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SCM(playerid, COLOR_PRINC, "(!) You have bought a VIP account, type /help(-180 globuri).");
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a vip account using 180 globuri.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 4:
				{
					if(PlayerInfo[playerid][pNeon] >= 1) return SCM(playerid, -1, "Deja ai cumparat deja acest item.");
					if(PlayerInfo[playerid][pGloburi] < 170) return SCM(playerid, -1, "Ai nevoie de 1800 de globuri.");

					PlayerInfo[playerid][pGloburi] -= 170;
					PlayerInfo[playerid][pNeon] = 1;

					pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					pUpdateInt(playerid, "Neon", 1);

					SendAdmins(COLOR_RED, "%s [user: %d] bought a neon vehicle using 170 globes.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);

					SCM(playerid, -1, "(/shop) {ffffff}ai cumparat neon vehicle, acum ai acces la /neon.");											
				}
				case 5: {
					if(PlayerInfo[playerid][pGloburi] < 16) return SCM(playerid, -1, "Nu ai suficiente globuri.");
					if(PlayerInfo[playerid][pSantaHat] >= 1) return SCM(playerid, -1, "Ai deja acest item cumparat!");
					PlayerInfo[playerid][pSantaHat] = 1; pUpdateInt(playerid, "SantaHat", PlayerInfo[playerid][pSantaHat]);
					PlayerInfo[playerid][pGloburi] -= 16; pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Santa Hat for 16 globuri", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "(/shop) ai cumparat cu succes WhitChat (-16 globuri), acum ai acces la comanda /santa.");
				}

				case 6: {
					if(PlayerInfo[playerid][pMp3] >= 1) return SCM(playerid, -1, "Ai deja un mp3");
					if(PlayerInfo[playerid][pGloburi] < 200) return SCM(playerid, -1, "Nu ai suficiente globuri.");
					PlayerInfo[playerid][pMp3] = 1; pUpdateInt(playerid, "Mp3", 1);
					PlayerInfo[playerid][pGloburi] -= 200; pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Mp3 using 200 globuri", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 200 globes to buy mp3 player");
				}
				case 7: {
					if(PlayerInfo[playerid][pGloburi] < 800) return SCM(playerid, -1, "Nu ai suficiente globuri.");
					PlayerInfo[playerid][pGloburi] -= 800; pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Blooding Banger for a 800 globuri", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 800 globes to buy a ZR-350");
					InsertCar(playerid, 69, 3);
				}	
				case 8: {
					if(PlayerInfo[playerid][pGloburi] < 1000) return SCM(playerid, -1, "Nu ai suficiente globuri.");
					PlayerInfo[playerid][pGloburi] -= 1000; pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a Monster Truck for a 1,000 globuri", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 1,000 globes to buy a Monster Truck");
					InsertCar(playerid, 72, 3);
				}
				case 9: {
					if(PlayerInfo[playerid][pGloburi] < 1000) return SCM(playerid, -1, "Nu ai suficiente globuri.");
					PlayerInfo[playerid][pGloburi] -= 1000; pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a jetpack for a 1000 globes", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 10,000 globes to buy a jetpack");
					PlayerInfo[playerid][pJetpack] = 1; pUpdateInt(playerid, "Jetpack", PlayerInfo[playerid][pJetpack]);
				}	
				case 11: {
					if(PlayerInfo[playerid][pGloburi] < 99999999) return SCM(playerid, -1, "");
					PlayerInfo[playerid][pGloburi] -= 30099999990; pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] convert globes to premium points(+500pp)", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_PRINC, "You paid 5,000 globes to buy a dune");
					PlayerInfo[playerid][pPremiumPoints] += 0;
					pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				}				
			}
		}
		*/
		case DIALOG_BUYVOUCHERS: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pPremiumPoints] < 60) return SCM(playerid, -1, "Nu ai 60 premium points.");
					PlayerInfo[playerid][pPremiumPoints] -= 60; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					PlayerInfo[playerid][pNormalVoucher] ++; pUpdateInt(playerid, "NormalVoucher", PlayerInfo[playerid][pNormalVoucher]);
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a normal voucher using 60 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_SKEMA2, "You paid 60 premium points to buy a normal voucher.");
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 200) return SCM(playerid, -1, "Nu ai 200 premium points.");
					PlayerInfo[playerid][pPremiumPoints] -= 200; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					PlayerInfo[playerid][pPremiumVoucher] ++; pUpdateInt(playerid, "PremiumVoucher", PlayerInfo[playerid][pPremiumVoucher]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a premium voucher using 200 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_SKEMA2, "You paid 200 premium points to buy a premium voucher.");
				}	
				case 2: {
					if(PlayerInfo[playerid][pPremiumPoints] < 9999999999999) return SCM(playerid, -1, "sistem dezactivat.");
					PlayerInfo[playerid][pPremiumPoints] -= 9999999999; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					PlayerInfo[playerid][pExtraVoucher] ++; pUpdateInt(playerid, "ExtraVoucher", PlayerInfo[playerid][pExtraVoucher]);
					SendAdmins(COLOR_PRINC, "%s [user: %d] bought a extra voucher using 500 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
					SCM(playerid, COLOR_SKEMA2, "You paid 500 premium points to buy a premium voucher.");
				}			
			}
		}
		case DIALOG_SIM: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 50000000) return SCM(playerid, -1, "Nu ai $50,000,000.");
					PlayerInfo[playerid][pMiniCrate] ++; pUpdateInt(playerid, "MiniCrate", PlayerInfo[playerid][pMiniCrate]);
					SCM(playerid, COLOR_PRINC, "You paid 50,000,000$ to buy a Lowest Crate.");
					GivePlayerCash(playerid, -50000000);
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a Lowest Crate using 50,000,000$.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 50) return SCM(playerid, -1, "Nu ai 50 premium points.");
					PlayerInfo[playerid][pMiniCrate] ++; pUpdateInt(playerid, "MiniCrate", PlayerInfo[playerid][pMiniCrate]);
					PlayerInfo[playerid][pPremiumPoints] -= 50; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "You paid 50 premium points to buy a Lowest Crate.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a Lowest Crate using 50 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
			}
		}
		case DIALOG_MEGA: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 65000000) return SCM(playerid, -1, "Nu ai $65,000,000.");
					GivePlayerCash(playerid, -65000000); 
					SCM(playerid, COLOR_PRINC, "You paid 65,000,000$ to buy a Middle Crate.");
					PlayerInfo[playerid][pBigCrate] ++; pUpdateInt(playerid, "BigCrate", PlayerInfo[playerid][pBigCrate]);
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a Middle Crate using 65,000,000$.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 65) return SCM(playerid, -1, "Nu ai 65 premium points.");
					PlayerInfo[playerid][pPremiumPoints] -= 65; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "You paid 65 premium points to buy a Middle Crate.");
					PlayerInfo[playerid][pBigCrate] ++; pUpdateInt(playerid, "BigCrate", PlayerInfo[playerid][pBigCrate]);
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a Middle Crate using 65 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
			}
		}
		case DIALOG_SPECIAL: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 150000000) return SCM(playerid, -1, "Nu ai 150,000,000$.");
					PlayerInfo[playerid][pGigantCrate] ++; pUpdateInt(playerid, "GigantCrate", PlayerInfo[playerid][pGigantCrate]);
					GivePlayerCash(playerid, -150000000);
					SCM(playerid, COLOR_PRINC, "You paid 150,000,000$ to buy a Millenium Crate.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a Millenium Crate using 150,000,000$.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 150) return SCM(playerid, -1, "Nu ai 150 premium points.");
					PlayerInfo[playerid][pGigantCrate] ++; pUpdateInt(playerid, "GigantCrate", PlayerInfo[playerid][pGigantCrate]);
					PlayerInfo[playerid][pPremiumPoints] -= 150; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "You paid 45 premium points to buy a Millenium Crate.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a Millenium Crate using 150 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
			}
		}
		case DIALOG_XCRATE: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 450000000) return SCM(playerid, -1, "Nu ai $450,000,000.");
					PlayerInfo[playerid][pXcrate] ++; pUpdateInt(playerid, "xcrate", PlayerInfo[playerid][pXcrate]);
					SCM(playerid, COLOR_PRINC, "You paid 450,000,000$ to buy a Magistrate Crate.");
					GivePlayerCash(playerid, -450000000);
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a Magistrate using 450,000,000$.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
				case 1: {
					if(PlayerInfo[playerid][pPremiumPoints] < 450) return SCM(playerid, -1, "Nu ai 450 premium points.");
					PlayerInfo[playerid][pXcrate] ++; pUpdateInt(playerid, "xcrate", PlayerInfo[playerid][pXcrate]);
					PlayerInfo[playerid][pPremiumPoints] -= 450; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
					SCM(playerid, COLOR_PRINC, "You paid 450 premium points to buy a Magistrate Crate.");
					SendAdmins(COLOR_SKEMA2, "%s [user: %d] bought a Magistrate Crate using 450 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
				}
			}
		}
		case DIALOG_CRATES: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(PlayerInfo[playerid][pMiniCrate] < 1) return SCM(playerid, -1, "You have no crate.");
					PlayerInfo[playerid][pMiniCrate] --; pUpdateInt(playerid, "MiniCrate", PlayerInfo[playerid][pMiniCrate]);
					sim[playerid] = 1;
					if(quest_type[playerid] == quest_crate) quest_finish(playerid);
				}
				case 1: {
					if(PlayerInfo[playerid][pBigCrate] < 1) return SCM(playerid, -1, "You have no crate.");
					PlayerInfo[playerid][pBigCrate] --; pUpdateInt(playerid, "BigCrate", PlayerInfo[playerid][pBigCrate]);
					mega[playerid] = 1;
					if(quest_type[playerid] == quest_crate) quest_finish(playerid);
				}
				case 2: {
					if(PlayerInfo[playerid][pGigantCrate] < 1) return SCM(playerid, -1, "You have no crate.");
					PlayerInfo[playerid][pGigantCrate] --; pUpdateInt(playerid, "GigantCrate", PlayerInfo[playerid][pGigantCrate]);
					special[playerid] = 1;
					if(quest_type[playerid] == quest_crate) quest_finish(playerid);
				}
				case 3: {
					if(PlayerInfo[playerid][pXcrate] < 1) return SCM(playerid, -1, "You have no crate.");
					PlayerInfo[playerid][pXcrate] --; pUpdateInt(playerid, "xcrate", PlayerInfo[playerid][pXcrate]);
					xcrate[playerid] = 1;
					if(quest_type[playerid] == quest_crate) quest_finish(playerid);
				}
				case 4: {
					if(PlayerInfo[playerid][pTimeCrate] >= 1) return SCMf(playerid, COLOR_PRINC, ">> {ffffff}Poti deschide acest crate peste %d payday-uri.", PlayerInfo[playerid][pTimeCrate]);
					PlayerInfo[playerid][pTimeCrate] = 4; pUpdateInt(playerid, "TimeCrate", PlayerInfo[playerid][pTimeCrate]);
					timecrate[playerid] = 1;
					if(quest_type[playerid] == quest_crate) quest_finish(playerid);				
				}
			}	
			cratetimer[playerid] = 10; 
		}		
		case DIALOG_RAMHQ: {
			if(!response) return true;
			new fid = BreachID[playerid];
			sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s breaks down the door and enters the building.", GetName(playerid));
			SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
			SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]);
			SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
			InHQ[playerid] = fid;
		}		
		case DIALOG_RAMHOUSE: {
			if(!response) return true;
			new i = BreachID[playerid];
			if(IsACop(playerid)) sendNearbyMessage(playerid, 30.0, COLOR_PURPLE,"* %s breaks down the door and enters the house.", GetName(playerid));
		 	if(PlayerInfo[playerid][pMember] == 11) sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* Unknown hitman breaks down the door and enters the house.");
			SetPlayerInterior(playerid, HouseInfo[i][hInterior]);
			SetPlayerPosEx(playerid, HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
			PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior]; PlayerInfo[playerid][pLocal] = i; 
			InHouse[playerid] = i;
			SetPlayerVirtualWorld(playerid, HouseInfo[i][hVirtual]);
			if(strlen(housestring[InHouse[playerid]]) > 0) {
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
			}
		}
		case DIALOG_RAMBIZ: {
			if(!response) return true;
			new i = BreachID[playerid];
			if(IsACop(playerid)) sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s breaks down the door and enters the business.", GetName(playerid));
			if(PlayerInfo[playerid][pMember] == 11) sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* Unknown hitman breaks down the door and enters the business.");
			SetPlayerInterior(playerid, BizzInfo[i][bInterior]);
			SetPlayerPosEx(playerid, BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]);
			PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior]; PlayerInfo[playerid][pLocal] = i+99;
			SetPlayerVirtualWorld(playerid, BizzInfo[i][bVirtual]);
			InBussines[playerid] = i;
		}
		case DIALOG_ATM_MENU: {
			if(!response) return true;
			switch(listitem) {
				case 0: SCMf(playerid, COLOR_PRINC, ">> {ffffff}Your bank account balance is currently standing at $%s.", FormatNumber(PlayerInfo[playerid][pAccount]));
				case 1: ShowPlayerDialogEx(playerid, DIALOG_ATM_WITHDRAW, DIALOG_STYLE_INPUT, "SERVER: ATM", "Please specify the amount of money that you'd like to withdraw.\n\nYou can withdraw up to $10,000 from this ATM.\n\nNote: This ATM charges $10 from any withdrawals you make.", "OK", "Cancel");
			}
		}
		case DIALOG_ATM_WITHDRAW: {
			if(!response) return true;
			if(PlayerInfo[playerid][pAccount] < strval(inputtext)) return SCM(playerid, -1, "Nu ai bani in banca.");
			if(strval(inputtext) < 2 || strval(inputtext) > 10000) return SCM(playerid, -1, "You do not have enough money to withdraw this amount.");
			GivePlayerCash(playerid, strval(inputtext));
			PlayerInfo[playerid][pAccount] -= strval(inputtext); pUpdateInt(playerid, "Bank", PlayerInfo[playerid][pAccount]);
			SCMf(playerid, COLOR_PRINC, ">> {ffffff}Ai retras $%s din banca.", FormatNumber(strval(inputtext)));
		}
		case DIALOG_SELLHOUSETOSTATE: {
			if(!response) return true;
			if(PlayerInfo[playerid][pPhousekey] != SellHouseID[playerid]) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't own this house anymore.");
			new house = PlayerInfo[playerid][pPhousekey];
			HouseInfo[house][hLock] = 0; HouseInfo[house][hOwned] = 1; 
			HouseInfo[house][hRentabil] = 1; HouseInfo[house][hRent] = 5; 
			PlayerInfo[playerid][pRented] = 0;
			HouseInfo[house][hPrice] = 0;
			strmid(HouseInfo[house][hOwner], "AdmBot", 0, strlen("AdmBot"), 255);	
			ConsumingMoney[playerid] = 1;
			GivePlayerCash(playerid, 15000000);
			SCM(playerid, -1, "You have sold your house to state for $15,000,000.");
			PlayerInfo[playerid][pPhousekey] = 999; PlayerInfo[playerid][pRented] = -1;
			if(PlayerInfo[playerid][pLocal] == house) {
				SetPlayerInterior(playerid, 0);
				SetPlayerPosEx(playerid, HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
				PlayerInfo[playerid][pInt] = 0;
			}
			pUpdateInt(playerid, "Rented", PlayerInfo[playerid][pRented]); pUpdateInt(playerid, "House", PlayerInfo[playerid][pPhousekey]);
			mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Arm`='0',`Lockk`='0',`Owned`='1',`Owner`='AdmBot',`Rentabil`='1',`Rent`='5', `Prices` = '0', `Value` = '0' WHERE `ID`='%d'", HouseInfo[house][hID]);
			mysql_tquery(SQL, gString);
			mysql_format(SQL, gString, 256, "UPDATE `users` SET `House`='%d' WHERE `name`='AdmBot'", house);
			mysql_tquery(SQL, gString);		
			OnPropTextdrawUpdate(1,house);	
		}
		case DIALOG_SELLBIZTOSTATE: {
			if(!response) return true;
			if(PlayerInfo[playerid][pPbiskey] != SellHouseID[playerid]) return SendClientMessage(playerid, COLOR_LIGHTGREEN3, "You don't own this business anymore.");
			new bouse = PlayerInfo[playerid][pPbiskey];
			BizzInfo[bouse][bLocked] = 1; 
			BizzInfo[bouse][bOwned] = 1; 
			BizzInfo[bouse][bEntranceCost] = 5;
			BizzInfo[bouse][bPrice] = 0;
			BizzInfo[bouse][bBuyPrice] = 0;
			strmid(BizzInfo[bouse][bOwner], "AdmBot", 0, strlen("AdmBot"), 255);
			GivePlayerCash(playerid, 1);
			SendClientMessage(playerid, COLOR_WHITE, "You have sold your business for $1.");
			PlayerInfo[playerid][pPbiskey] = 255;
			mysql_format(SQL, gString, 184, "UPDATE `bizz` SET `Locked`='0', `Owned`='1', `Till`='0',`Owner`='AdmBot',`EntranceCost`='5000', `BuyPrice` = '0', `Prices` = '0' WHERE `ID`='%d'", bouse);
			mysql_tquery(SQL, gString);
			mysql_format(SQL, gString, 184, "UPDATE `users` SET `Bizz`='%d' WHERE `name`='AdmBot'", bouse);	
			mysql_tquery(SQL, gString);		
			pUpdateInt(playerid, "Bizz", PlayerInfo[playerid][pPbiskey]);
			OnPropTextdrawUpdate(2,bouse);
		}
		case DIALOG_IPHONE: {
			if(!response) return true;
			if(!IsNumeric(inputtext)) return true;
			if(strlen(inputtext) != 4) return true;
			new numb = strval(inputtext);
			gString[0] = (EOS);
			format(gString, 256, "SELECT * FROM `users` WHERE `PhoneNr` = '%d' ORDER BY `id` ASC", numb);
			new Cache: res = mysql_query(SQL, gString);
			if(cache_get_row_count() != 0) return SCM(playerid, -1, "Acel numar de telefon este folosit de un alt player.");
			else {
				PlayerInfo[playerid][pPremiumPoints] -= 40; PlayerInfo[playerid][pPhone] = 1; PlayerInfo[playerid][pPnumber] = numb;
				pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]); pUpdateInt(playerid, "Phone", PlayerInfo[playerid][pPhone]);
				SCMf(playerid, COLOR_GREEN, "You bought an iPhone with 40 premium points. Your phone number is %d.", numb);
				SCM(playerid, COLOR_GREEN, "To deactivate calls and receive only SMS, use /turn off calls.");
				SCM(playerid, COLOR_GREEN, "To respond to last SMS received, use /reply [text].");
				pUpdateInt(playerid, "PhoneNr", PlayerInfo[playerid][pPnumber]);
				SendAdmins(COLOR_PRINC, "%s [user: %d] bought a iPhone (%d) using 40 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], numb);				
				gString[0] = (EOS);
				mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `shop_logs` (`playerid`,`playername`,`text`) VALUES ('%d','%s','%s paid 40 premium points for iPhone')", PlayerInfo[playerid][pSQLID], PlayerInfo[playerid][pNormalName], PlayerInfo[playerid][pNormalName]);
				mysql_tquery(SQL, gString, "", "");
			}
			cache_delete(res);
		}
		case DIALOG_BUG: {
			if(!response) {
				SCM(playerid, -1, "Ai primit kick deoarece ai refuzat sa-ti schimbi numele");
				defer KickEx(playerid);
				return true;
			}
			if(strlen(inputtext) < 3 || strlen(inputtext) > 18) {
				SCM(playerid, -1, "Numele tau trebuie sa fie cuprins intre 3 si 18 caractere.");
				defer KickEx(playerid);
				return true;
			}	
			new escape[30];
			mysql_real_escape_string(inputtext, escape);
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `name` = '%s'", escape);
			mysql_tquery(SQL, gString, "manevrabug", "d", playerid);	
			format(WantName[playerid], 30, escape);
		}
		case DIALOG_CHANGENAME: {
			if(response) {
				if(!isnull(inputtext)) {
					new lungime = strlen(inputtext), newname = MySQLCheckAccount(inputtext), escape[30];
					if(lungime < 3 && lungime > 18) return SCM(playerid, -1, "Numele tau trebuie sa fie intre 3 caractere si 18 de caractere.");	
					if(newname != 0) return SCM(playerid, -1, "This name already exist.");
					mysql_real_escape_string(inputtext, escape);
					format(WantName[playerid], 30, escape);
					SendAdmins(COLOR_SKEMA2, "NameChange: %s [%d] wants to change his name to %s.", 1, GetName(playerid), playerid, escape);
					SendAdmins(COLOR_PRINC, "(!) nu acceptati numele daca contine diactritice / simboluri / spatiu / 20+ caractere", 1);
					TypeName[playerid] = 2;
					SCM(playerid, COLOR_PRINC, "Wait for an admin to accept your change name request.");
				}
			}
			if(!response && forcenamechange[playerid] >= 1) defer KickEx(playerid);				
		}
		case DIALOG_SEXSHOP: {
			if(!response) return true;
			new str[184];
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-100); BizzInfo[InBussines[playerid]][bTill] += 100;
					mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
					mysql_tquery(SQL,str);
					GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
					GivePlayerWeaponEx(playerid, 10, 1);
				}
				case 1: {
					if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-100); BizzInfo[InBussines[playerid]][bTill] += 100;
					mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
					mysql_tquery(SQL,str);
					GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
					GivePlayerWeaponEx(playerid, 11, 1);
				}
				case 2: {
					if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-100); BizzInfo[InBussines[playerid]][bTill] += 100;
					mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
					mysql_tquery(SQL,str);
					GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
					GivePlayerWeaponEx(playerid, 13, 1);
				}
				case 3: {
					if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-100); BizzInfo[InBussines[playerid]][bTill] += 100;
					mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
					mysql_tquery(SQL,str);
					GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
					GivePlayerWeaponEx(playerid, 12, 1);
				}
				case 4: {
					if(GetPlayerCash(playerid) <= 149) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-150); BizzInfo[InBussines[playerid]][bTill] += 150;
					mysql_format(SQL,str,sizeof(str),"UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d'",BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
					mysql_tquery(SQL,str);
					GameTextForPlayer(playerid, "~r~-$150", 3000, 1);
					GivePlayerWeaponEx(playerid, 14, 1);
					if(quest_type[playerid] == quest_flori) quest_finish(playerid);
				}				
			}
		}
		case DIALOG_BAR: {
			if(!response) return true;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-50); BizzInfo[InBussines[playerid]][bTill] += 50;
					GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				}
				case 1: {
					if(GetPlayerCash(playerid) <= 49) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-50); BizzInfo[InBussines[playerid]][bTill] += 50;
					GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				}
				case 2: {
					if(GetPlayerCash(playerid) <= 59) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-60); BizzInfo[InBussines[playerid]][bTill] += 60;
					GameTextForPlayer(playerid, "~r~-$60", 3000, 1);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				}
				case 3: {
					if(GetPlayerCash(playerid) <= 99) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
					GivePlayerCash(playerid,-100); BizzInfo[InBussines[playerid]][bTill] += 100;
					GameTextForPlayer(playerid, "~r~-$100", 3000, 1);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
				}				
			}
			gString[0] = (EOS);
			mysql_format(SQL, gString, 200, "UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d' LIMIT 1", BizzInfo[InBussines[playerid]][bTill], InBussines[playerid]);
			mysql_tquery(SQL, gString);			
		}
		case Dialog_24: {
			if(!response) return true;
			new bid = InBussines[playerid], randphone;
			switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) < 500) return SCM(playerid, -1, "You don't have enough money.");
					if(PlayerInfo[playerid][pPhone] == 1) return SCM(playerid, -1, "You have an iPhone.");
					GivePlayerCash(playerid, -500); BizzInfo[bid][bTill] += 500;
					GameTextForPlayer(playerid, "~r~-$500", 3000, 1);
					do 
					{
						randphone = 10000 + random(89999);
						PlayerInfo[playerid][pPnumber] = randphone;
					}					
					while(NumberUsed(playerid));
					SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have purchased a cell phone! Your number is %d.", randphone);
					pUpdateInt(playerid, "PhoneNr", PlayerInfo[playerid][pPnumber]);
				}
				case 1: {
					if(GetPlayerCash(playerid) < 50) return SCM(playerid, -1, "You don't have enough money.");
					GivePlayerCash(playerid, -50); BizzInfo[bid][bTill] += 50;
					GameTextForPlayer(playerid, "~r~-$50", 3000, 1);
					PlayerInfo[playerid][pPhoneBook] = 1;
					SCM(playerid, -1, "You have purchased a phonebook. Use /number to trace a number down!");
					pUpdateInt(playerid, "Phonebook", PlayerInfo[playerid][pPhoneBook]);					
				}
				 case 2: {
					if(GetPlayerCash(playerid) < 500) return SCM(playerid, -1, "You don't have enough money.");
					PlayerInfo[playerid][pCredits] += 300;
					GivePlayerCash(playerid, -500); BizzInfo[bid][bTill] += 500; 
					GameTextForPlayer(playerid, "~r~-$500", 3000, 1);
					SCM(playerid, -1, "You have purchased a phone credit voucher.");
					pUpdateInt(playerid, "CreditsF", PlayerInfo[playerid][pCredits]);
					if(quest_type[playerid] == quest_credit) quest_finish(playerid);			
				}
				case 3: {
					if(GetPlayerCash(playerid) < 2000) return SCM(playerid, -1, "You don't have enough money.");
					GivePlayerCash(playerid, -2000); BizzInfo[bid][bTill] += 2000; PlayerInfo[playerid][pWTalkie] = 1;
					pUpdateInt(playerid, "WTalkie", 1);
					GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
					SCM(playerid, -1, "You have purchased a walkie talkie - use /setfrequency to tune it, and /wt to speak.");				
				}
				case 4: {
					if(GetPlayerCash(playerid) < 2000) return SCM(playerid, -1, "You don't have enough money.");
					GivePlayerCash(playerid, -2000); BizzInfo[bid][bTill] += 2000;
					GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
					SCM(playerid, -1, "You have purchased a digital camera.");
					GivePlayerWeaponEx(playerid, 43, 60);			
				}
				case 5: {
					if(GetPlayerCash(playerid) < 5000) return SCM(playerid, -1, "You don't have enough money.");
					GivePlayerCash(playerid, -5000); BizzInfo[bid][bTill] += 5000; 
					GameTextForPlayer(playerid, "~r~-$5,000", 3000, 1);
					SCM(playerid, -1, "You have purchased a gas can.");
					PlayerInfo[playerid][pGasCan] = 1; pUpdateInt(playerid, "GasCan", 1);			
				}
			}
			gString[0] = (EOS);
			mysql_format(SQL, gString, 200, "UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d' LIMIT 1", BizzInfo[bid][bTill], bid);
			mysql_tquery(SQL, gString);
		}
		case Dialog_Gym: {
			if(!response) return true;
	        switch(listitem) {
				case 0: {
					if(GetPlayerCash(playerid) <= 5999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
	                GivePlayerCash(playerid, -6000);
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
					SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
					GameTextForPlayer(playerid, "~r~-$6,000", 3000, 1);
	                PlayerInfo[playerid][pFightStyle] = 1; BizzInfo[InBussines[playerid]][bTill] += 6000;
	            }
				case 1: {
					if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
	                GivePlayerCash(playerid, -10000);
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
					GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
	                PlayerInfo[playerid][pFightStyle] = 2; BizzInfo[InBussines[playerid]][bTill] += 10000;
	            }
				case 2: {
					if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
	                GivePlayerCash(playerid, -10000);
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
					SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
					GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
					PlayerInfo[playerid][pFightStyle] = 3; BizzInfo[InBussines[playerid]][bTill] += 10000;
	            }
				case 3: {
					if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
	                GivePlayerCash(playerid, -10000);
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
					SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
					GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
					PlayerInfo[playerid][pFightStyle] = 4; BizzInfo[InBussines[playerid]][bTill] += 10000;
	            }
				case 4: {
					if(GetPlayerCash(playerid) <= 9999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
	                GivePlayerCash(playerid, -10000);
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
					SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
					GameTextForPlayer(playerid, "~r~-$10,000", 3000, 1);
					PlayerInfo[playerid][pFightStyle] = 5; BizzInfo[InBussines[playerid]][bTill] += 10000;
	            }
				case 5: {
					if(GetPlayerCash(playerid) <= 1999) return SendClientMessage(playerid, COLOR_WHITE, "You don't have enough money.");
	                GivePlayerCash(playerid, -2000);
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
					SendClientMessage(playerid, COLOR_WHITE, "You have successfully purchased this style of fighting.");
					GameTextForPlayer(playerid, "~r~-$2,000", 3000, 1);
					PlayerInfo[playerid][pFightStyle] = 0; BizzInfo[InBussines[playerid]][bTill] += 2000;
	            }
			}
			pUpdateInt(playerid, "FightStyle", PlayerInfo[playerid][pFightStyle]);
			gString[0] = (EOS);
			mysql_format(SQL, gString, 200, "UPDATE `bizz` SET `Till` = '%d' WHERE `ID` = '%d' LIMIT 1", BizzInfo[InBussines[playerid]][bTill],InBussines[playerid]);
			mysql_tquery(SQL, gString);			
  		}
	 	case DIALOG_LOGIN1: {
	 		if(!response) return ShowPlayerDialogEx(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"Register: Password","\nPlease enter your desired password below!","Register","Cancel");
	 		if(strlen(inputtext) > 3 && strlen(inputtext) < 20)
	 		{
				OnPlayerRegister(playerid,inputtext);

				SetPVarInt(playerid, "password_insert", 1);
			}	
	 		else ShowPlayerDialogEx(playerid,DIALOG_LOGIN1,DIALOG_STYLE_PASSWORD,"Register: Password","Your password must exceed 4 characters!\n\nPlease enter your desired password below!","Register","Cancel");
	 	}
	 	case DIALOG_LOGIN2: {
	 		if(!response) {
	 			defer KickEx(playerid);
	 			return true;
	 		}
	 		if(strlen(inputtext)) {
	 			SetPVarInt(playerid, "password_insert", 1);
	 			new tmppass[129];
				mysql_real_escape_string(inputtext, tmppass);
				OnPlayerLogin(playerid, MD5_Hash(tmppass));
	 		} else {
	 			gPlayerLogTries[playerid] -= 1;
	 			if(gPlayerLogTries[playerid] == 1 || gPlayerLogTries[playerid] == 0) SCM(playerid, COLOR_PRINC, "Incorrect password.");
	 			ShowPlayerDialogEx(playerid,DIALOG_LOGIN2,DIALOG_STYLE_PASSWORD,"SERVER: Login","Welcome to the RedTimes RPG Server.\n\nPlease enter your password below!","Login","Cancel");
	 			if(gPlayerLogTries[playerid] == -1) {
	 				defer KickEx(playerid);
	 				SCM(playerid, COLOR_SKEMA2, "You have used all available login attempts.");
	 			}
	 		}
	 	}
	}	
	return 1; 
}	
function SetPlayerHealthEx(playerid, Float: health) {
	SetPlayerHealth(playerid, health);
	Health[playerid] = health;
	return 1; 
}
function GetPlayerHealthEx(playerid, &Float:health) {
	health = Health[playerid];
	return 1; 
}
function SetPlayerArmourEx(playerid, Float: armour) {
	SetPlayerArmour(playerid, armour);
	Armour[playerid] = armour;
	return 1; 
}
function GetPlayerArmourEx(playerid, &Float:armour) {
	armour = Armour[playerid];
	return 1; 
}
public OnPlayerStreamIn(playerid, forplayerid) {
	new iswar = 0, attackers, defenders,no;
    if(contract_get[playerid] >= 0) ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
    for(new i = 1; i < sizeof(Turfs) && iswar == 0; i++)
    {
        attackers = WarInfo[i][wAttacker];
		defenders = WarInfo[i][wFaction];
        if(WarInfo[i][wTime] > 1 && attackers != 0 && defenders != 0) {
			if((PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders)) iswar = 1;
		}
    }
	if(PlayerInfo[playerid][pWantedLevel] >= 1 && IsACop(forplayerid) && OnDuty[forplayerid] == 1) {
		no = 1;
	}
	if(iswar == 1) {
		if((PlayerInfo[playerid][pMember] == attackers || PlayerInfo[playerid][pMember] == defenders) && (PlayerInfo[forplayerid][pMember] == attackers || PlayerInfo[forplayerid][pMember] == defenders)) {
			SetPlayerMarkerForPlayer(playerid, forplayerid, GetPlayerColor(forplayerid));
			SetPlayerMarkerForPlayer(forplayerid, playerid, GetPlayerColor(playerid));
		}
		else {
			if(no == 0 && !Iter_Contains(PlayerPaint, playerid) && !Iter_Contains(PlayerPaint, forplayerid)) {
				SetPlayerMarkerForPlayer(playerid, forplayerid, (GetPlayerColor(forplayerid) & 0xFFFFFF00));
				SetPlayerMarkerForPlayer(forplayerid, playerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
			}
		}
	}
	else {
		if(no == 0 && !Iter_Contains(PlayerPaint, playerid) && !Iter_Contains(PlayerPaint, forplayerid)) {
			SetPlayerMarkerForPlayer(playerid, forplayerid, (GetPlayerColor(forplayerid) & 0xFFFFFF00));
			SetPlayerMarkerForPlayer(forplayerid, playerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
		}
	}
	return 1; 
}
public OnPlayerStreamOut(playerid, forplayerid) {
    SetPlayerMarkerForPlayer(playerid, forplayerid, (GetPlayerColor(forplayerid) & 0xFFFFFF00));
	SetPlayerMarkerForPlayer(forplayerid, playerid, (GetPlayerColor(playerid) & 0xFFFFFF00));
	return 1; 
}
public OnVehicleStreamIn(vehicleid, forplayerid) {
	for(new v; v < MAX_PERSONAL_VEHICLES; v++)
	{
		if(PlayerInfo[forplayerid][pCarID][v] == vehicleid) {
			SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
		}
	}
	for(new vv; vv < MAX_VEHICLES; vv++)
	{
		if(vv == HireCar[forplayerid]) {
			SetVehicleParamsForPlayer(vv,forplayerid,0,0);
		}
	}
	return 1; 
}
// ------- CAR SYSTEM --------- //
function IsAnOwnableCar(vehicleid) {
	foreach(new i : Player) {
		for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
			if(PlayerInfo[i][pCarID][v] == vehicleid) return true;
		}
	}
	return 0; }
function InsertCar(playerid,stockid,premium) {
	new total, idcar, model = Stock[stockid][vModel], value = Stock[stockid][vPrice];
	BuyCar[playerid] = -1;	
	if(GetPlayerCash(playerid) < value && premium == 0) return SCM(playerid, -1, "You don't have enough money to purchase this vehicle.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
		if(PlayerInfo[playerid][pCar][v] != -1) total++;
	}
	if(total+1 > PlayerInfo[playerid][pCarSlots]) return SCM(playerid, -1, "Nu ai sloturi disponibile.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
		if(PlayerInfo[playerid][pCar][v] == -1) {
			idcar = v;
			break;
		}
	}	
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "INSERT INTO cars (Model) VALUES (%d)", model);
	new Cache:ids = mysql_query(SQL, gString);
	new idd = cache_insert_id();
	cache_delete(ids);
	PlayerInfo[playerid][pCar][idcar] = idd;
	new randomspawn = random(4);
	switch(randomspawn) {
		case 0: { PlayerInfo[playerid][pCarLocX][idcar] = 2803.9131; PlayerInfo[playerid][pCarLocY][idcar] = -1428.8040; PlayerInfo[playerid][pCarLocZ][idcar] = 39.7849; PlayerInfo[playerid][pCarAngle][idcar] = 179.3463; }
		case 1: { PlayerInfo[playerid][pCarLocX][idcar] = 282.4061; PlayerInfo[playerid][pCarLocY][idcar] = -1531.4332; PlayerInfo[playerid][pCarLocZ][idcar] = 24.3208; PlayerInfo[playerid][pCarAngle][idcar] = 234.3460; }
		case 2: { PlayerInfo[playerid][pCarLocX][idcar] = 292.0149; PlayerInfo[playerid][pCarLocY][idcar] = -1517.7657; PlayerInfo[playerid][pCarLocZ][idcar] = 24.3208; PlayerInfo[playerid][pCarAngle][idcar] = 234.9508; }
		case 3: { PlayerInfo[playerid][pCarLocX][idcar] = 387.5909; PlayerInfo[playerid][pCarLocY][idcar] = -1520.0852; PlayerInfo[playerid][pCarLocZ][idcar] = 32.5342; PlayerInfo[playerid][pCarAngle][idcar] = 14.3073; }
		case 4: { PlayerInfo[playerid][pCarLocX][idcar] = 2351.4856; PlayerInfo[playerid][pCarLocY][idcar] = 1412.3184; PlayerInfo[playerid][pCarLocZ][idcar] = 42.5474; PlayerInfo[playerid][pCarAngle][idcar] = 89.7437; }
	}				
	if(premium == 0) {
		GivePlayerCash(playerid, -value);
		Stock[stockid][vStock] --;
		mysql_format(SQL, gString, 256, "UPDATE stock SET Stock='%d' WHERE ID='%d' LIMIT 1", Stock[stockid][vStock], stockid);
		mysql_tquery(SQL, gString);
		SendAdmins(COLOR_PRINC, "%s [user: %d] bought a %s [vehicle: %d] from Dealership for $%s.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], aVehicleNames[Stock[stockid][vModel] - 400], PlayerInfo[playerid][pCar][idcar], FormatNumber(value)); 
	}
    PlayerInfo[playerid][pCarModel][idcar] = model; PlayerInfo[playerid][pCarColor1][idcar] = 1; PlayerInfo[playerid][pCarColor2][idcar] = 1;
    format(gString, 64, "{FA5778}%d", (100000000 + random(9999999999)));
    strmid(CarPlate[playerid][idcar], gString, 0, 20, 255);
    strmid(CarOwner[playerid][idcar], PlayerInfo[playerid][pNormalName], 0, 50, 255);
    PlayerInfo[playerid][pCarStage][idcar] = 0; PlayerInfo[playerid][pCarStageKM][idcar] = 0;
	PlayerInfo[playerid][pCarLock][idcar] = 0; PlayerInfo[playerid][pCarInsPrice][idcar] = 0; PlayerInfo[playerid][pCarIns][idcar] = 10;
	PlayerInfo[playerid][pCarKM][idcar] = 0.0; PlayerInfo[playerid][pCarKMLast][idcar] = 0; PlayerInfo[playerid][pCarHP][idcar] = 1000.0;
	PlayerInfo[playerid][pCarDamage1][idcar] = 0; PlayerInfo[playerid][pCarDamage2][idcar] = 0; PlayerInfo[playerid][pCarDamage3][idcar] = 0;
	PlayerInfo[playerid][pCarDamage4][idcar] = 0; PlayerInfo[playerid][pCarGas][idcar] = 200; PlayerInfo[playerid][pCarPaintJ][idcar] = 6;
	CarVipName[playerid][idcar] = ""; PlayerInfo[playerid][pCarVIP][idcar] = 0; PlayerInfo[playerid][pCarVipColor][idcar] = 0;	   
	for(new s; s < 17; s++) CarMod[playerid][idcar][s] = 0; 
	PlayerInfo[playerid][pCarBuyTime][idcar] = gettime(); PlayerInfo[playerid][pCarRainbow][idcar] = 0;
	cUpdate(playerid, idcar, cModsx); cUpdate(playerid, idcar, cPaintJx); cUpdate(playerid, idcar, cLocationxx); cUpdate(playerid, idcar, cLocationyx);
	cUpdate(playerid, idcar, cLocationzx); cUpdate(playerid, idcar, cAnglex); cUpdate(playerid, idcar, cColorOnex); cUpdate(playerid, idcar, cColorTwox);
	cUpdate(playerid, idcar, cValuex); cUpdate(playerid, idcar, cLicensex); cUpdate(playerid, idcar, cLockx); cUpdate(playerid, idcar, cInscarpricex);
	cUpdate(playerid, idcar, cInsurancecarx); cUpdate(playerid, idcar, cKMx); cUpdate(playerid, idcar, cDaysx); cUpdate(playerid, idcar, cHPx);
	cUpdate(playerid, idcar, cKMLastx); cUpdate(playerid, idcar, cDamage1x); cUpdate(playerid, idcar, cDamage2x); cUpdate(playerid, idcar, cDamage3x);
	cUpdate(playerid, idcar, cDamage4x); cUpdate(playerid, idcar, cGasx); cUpdate(playerid, idcar, cOwnerx);	
    PlayerInfo[playerid][pCarID][idcar] = CreateVehicle(PlayerInfo[playerid][pCarModel][idcar],PlayerInfo[playerid][pCarLocX][idcar],PlayerInfo[playerid][pCarLocY][idcar],PlayerInfo[playerid][pCarLocZ][idcar],PlayerInfo[playerid][pCarAngle][idcar],1,1,-1);
    SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][idcar],CarPlate[playerid][idcar]);
    Gas[PlayerInfo[playerid][pCarID][idcar]] = 100;
    LocateCar(PlayerInfo[playerid][pCarID][idcar], playerid); 
    masini++;
    if(premium == 3)
    {
    	PlayerInfo[playerid][pCarSouvenrire][idcar] = 1;

    	gString[0] = (EOS);

    	mysql_format(SQL, gString, 256, "UPDATE `cars` SET `Souvenire` = '1' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[playerid][pCar][idcar]);
    	mysql_tquery(SQL, gString);

		if(PlayerInfo[playerid][pCarSouvenrire][idcar] == 1 && PlayerInfo[playerid][pCarModel][idcar] == 411)
		{
			for(new x; x < 5; x++)
			{
			    DestroyDynamicObject(souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][x]);
			    souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][x] = 0;
			}

			souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][3] = CreateDynamicObject(19314,0,0,-1000,0,0,0,100);
			souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][4] = CreateDynamicObject(1146,0,0,-1000,0,0,0,100);
			

			AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][3], PlayerInfo[playerid][pCarID][idcar], 0.011, 2.877, -0.378, 94.500, -77.999, -11.599);
			AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][4], PlayerInfo[playerid][pCarID][idcar], 0.000, -2.311, 0.360, 0.000, 0.000, 0.000);
			AddVehicleComponent(PlayerInfo[playerid][pCarID][idcar], 1079);							
		}		

		if(PlayerInfo[playerid][pCarSouvenrire][idcar] == 1 && PlayerInfo[playerid][pCarModel][idcar] == 541)
		{
			for(new x; x < 3; x++)
			{
			    DestroyDynamicObject(souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][x]);
			    souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][x] = 0;
			}

			souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][0] = CreateDynamicObject(1003,0,0,-1000,0,0,0,100);

			AttachDynamicObjectToVehicle(souvenire_objects[PlayerInfo[playerid][pCarID][idcar]][0], PlayerInfo[playerid][pCarID][idcar], 0.000000,-2.025000,0.300000,0.000000,0.000000,0.000000);
			AddVehicleComponent(PlayerInfo[playerid][pCarID][idcar], 1079);						
		}
    }
    

    SCM(playerid, COLOR_GREEN, "Congratulations! You just purchased the vehicle.");
    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s buying model id %d for $%s at dealership')", PlayerInfo[playerid][pSQLID], GetName(playerid), model, FormatNumber(value));
    mysql_tquery(SQL, gString, "", "");	
	return 1; 
}
function GiveVehicle(playerid,model) {
	new total, idcar;
	BuyCar[playerid] = -1;	
	for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
		if(PlayerInfo[playerid][pCar][v] != -1) total++;
	}
	if(total+1 > PlayerInfo[playerid][pCarSlots]) return SCM(playerid, -1, "Nu ai sloturi disponibile.");
	for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
		if(PlayerInfo[playerid][pCar][v] == -1) {
			idcar = v;
			break;
		}
	}	
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "INSERT INTO cars (Model) VALUES (%d)", model);
	new Cache:ids = mysql_query(SQL, gString);
	new idd = cache_insert_id();
	cache_delete(ids);
	PlayerInfo[playerid][pCar][idcar] = idd;
	new randomspawn = random(10);
	switch(randomspawn) {
		case 0: { PlayerInfo[playerid][pCarLocX][idcar] = 1502.2595; PlayerInfo[playerid][pCarLocY][idcar] = -2211.7642; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2778; PlayerInfo[playerid][pCarAngle][idcar] = 180.4713; }
		case 1: { PlayerInfo[playerid][pCarLocX][idcar] = 1546.1351; PlayerInfo[playerid][pCarLocY][idcar] = -2361.1863; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2817; PlayerInfo[playerid][pCarAngle][idcar] = 358.8504; }
		case 2: { PlayerInfo[playerid][pCarLocX][idcar] = 1391.5481; PlayerInfo[playerid][pCarLocY][idcar] = -2330.4927; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2740; PlayerInfo[playerid][pCarAngle][idcar] = 178.5904; }
		case 3: { PlayerInfo[playerid][pCarLocX][idcar] = 1391.5653; PlayerInfo[playerid][pCarLocY][idcar] = -2313.4729; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2740; PlayerInfo[playerid][pCarAngle][idcar] = 179.1013; }
		case 4: { PlayerInfo[playerid][pCarLocX][idcar] = 1407.1638; PlayerInfo[playerid][pCarLocY][idcar] = -2262.4263; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2740; PlayerInfo[playerid][pCarAngle][idcar] = 359.0999; }
		case 5: { PlayerInfo[playerid][pCarLocX][idcar] = 1388.3356; PlayerInfo[playerid][pCarLocY][idcar] = -2225.5757; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2740; PlayerInfo[playerid][pCarAngle][idcar] = 359.5505; }
		case 6: { PlayerInfo[playerid][pCarLocX][idcar] = 1495.7770; PlayerInfo[playerid][pCarLocY][idcar] = -2211.9548; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2740; PlayerInfo[playerid][pCarAngle][idcar] = 0.5737; }
		case 7: { PlayerInfo[playerid][pCarLocX][idcar] = 1454.4115; PlayerInfo[playerid][pCarLocY][idcar] = -2347.2227; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2740; PlayerInfo[playerid][pCarAngle][idcar] = 179.9350; }
		case 8: { PlayerInfo[playerid][pCarLocX][idcar] = 1559.9786; PlayerInfo[playerid][pCarLocY][idcar] = -2312.4121; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2748; PlayerInfo[playerid][pCarAngle][idcar] = 269.5829; }
		case 9: { PlayerInfo[playerid][pCarLocX][idcar] = 1559.7522; PlayerInfo[playerid][pCarLocY][idcar] = -2254.3694; PlayerInfo[playerid][pCarLocZ][idcar] = 13.2747; PlayerInfo[playerid][pCarAngle][idcar] = 270.4350; }
	}	
    PlayerInfo[playerid][pCarModel][idcar] = model; PlayerInfo[playerid][pCarColor1][idcar] = 1; PlayerInfo[playerid][pCarColor2][idcar] = 1;
    format(gString, 64, "{FA5778}HD-%d", (1000000 + random(99999999)));
    strmid(CarPlate[playerid][idcar], gString, 0, 20, 255);
    strmid(CarOwner[playerid][idcar], PlayerInfo[playerid][pNormalName], 0, 50, 255);
	PlayerInfo[playerid][pCarLock][idcar] = 0; PlayerInfo[playerid][pCarInsPrice][idcar] = 0; PlayerInfo[playerid][pCarIns][idcar] = 10;
	PlayerInfo[playerid][pCarKM][idcar] = 0.0; PlayerInfo[playerid][pCarKMLast][idcar] = 0; PlayerInfo[playerid][pCarHP][idcar] = 1000.0;
	PlayerInfo[playerid][pCarDamage1][idcar] = 0; PlayerInfo[playerid][pCarDamage2][idcar] = 0; PlayerInfo[playerid][pCarDamage3][idcar] = 0;
	CarVipName[playerid][idcar] = ""; PlayerInfo[playerid][pCarVIP][idcar] = 0; PlayerInfo[playerid][pCarVipColor][idcar] = 0;	   
	for(new s; s < 17; s++) CarMod[playerid][idcar][s] = 0; 
	PlayerInfo[playerid][pCarBuyTime][idcar] = gettime();
	cUpdate(playerid, idcar, cModsx); cUpdate(playerid, idcar, cPaintJx); cUpdate(playerid, idcar, cLocationxx); cUpdate(playerid, idcar, cLocationyx);
	cUpdate(playerid, idcar, cLocationzx); cUpdate(playerid, idcar, cAnglex); cUpdate(playerid, idcar, cColorOnex); cUpdate(playerid, idcar, cColorTwox);
	cUpdate(playerid, idcar, cValuex); cUpdate(playerid, idcar, cLicensex); cUpdate(playerid, idcar, cLockx); cUpdate(playerid, idcar, cInscarpricex);
	cUpdate(playerid, idcar, cInsurancecarx); cUpdate(playerid, idcar, cKMx); cUpdate(playerid, idcar, cDaysx); cUpdate(playerid, idcar, cHPx);
	cUpdate(playerid, idcar, cKMLastx); cUpdate(playerid, idcar, cDamage1x); cUpdate(playerid, idcar, cDamage2x); cUpdate(playerid, idcar, cDamage3x);
	cUpdate(playerid, idcar, cDamage4x); cUpdate(playerid, idcar, cGasx); cUpdate(playerid, idcar, cOwnerx);	
    PlayerInfo[playerid][pCarID][idcar] = CreateVehicle(PlayerInfo[playerid][pCarModel][idcar],PlayerInfo[playerid][pCarLocX][idcar],PlayerInfo[playerid][pCarLocY][idcar],PlayerInfo[playerid][pCarLocZ][idcar],PlayerInfo[playerid][pCarAngle][idcar],1,1,-1);
    SetVehicleNumberPlate(PlayerInfo[playerid][pCarID][idcar],CarPlate[playerid][idcar]);
    Gas[PlayerInfo[playerid][pCarID][idcar]] = 100;
    LocateCar(PlayerInfo[playerid][pCarID][idcar], playerid); 
    masini++;
    SCM(playerid, COLOR_GREEN, "Congratulations! You just purchased the vehicle.");
    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s buying model id %d at gifting')", PlayerInfo[playerid][pSQLID], GetName(playerid), model);
    mysql_tquery(SQL, gString);	
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "INSERT INTO `car_logs` (`playerid`, `playername`, `carid`, `text`) VALUES ('%d','%s','%d','%s buying vehicle %d from Dealership')", PlayerInfo[playerid][pSQLID], PlayerInfo[playerid][pNormalName], idd, PlayerInfo[playerid][pNormalName], idd);
	mysql_tquery(SQL, gString);	    
	return 1; 
}	
function cUpdate(playerid, id, type) {
	gString[0] = (EOS);
	switch(type) {
		case cLocationxx: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Locationx`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocX][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
	    case cLocationyx: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Locationy`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocY][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
	    case cLocationzx: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Locationz`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLocZ][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cAnglex: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Angle`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarAngle][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cLockx: {
			mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Lockk`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarLock][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
		}
		case cInsurancecarx: {
			mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Insurancecar`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarIns][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
		}
		case cInscarpricex: {
			mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Inscarprice`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarInsPrice][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
		}
		case cKMx: {
			mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `KM`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarKM][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
		}
		case cKMLastx: {
			mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `LastKM`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarKMLast][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
		}
		case cDaysx: {
			mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `BuyTime`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarBuyTime][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
		}
		case cHPx: {
			mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `HP`='%f' WHERE `ID`='%d'",PlayerInfo[playerid][pCarHP][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
		}
		case cGasx: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Gas`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarGas][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cDamage1x: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Damage1`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage1][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cDamage2x: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Damage2`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage2][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cDamage3x: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Damage3`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage3][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cDamage4x: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Damage4`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarDamage4][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cModsx: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `mod1`='%d',`mod2`='%d',`mod3`='%d',`mod4`='%d',`mod5`='%d',`mod6`='%d',`mod7`='%d',`mod8`='%d',`mod9`='%d',`mod10`='%d',`mod11`='%d',`mod12`='%d',`mod13`='%d',`mod14`='%d',`mod15`='%d',`mod16`='%d',`mod17`='%d' WHERE `ID`='%d'",
			CarMod[playerid][id][0],
			CarMod[playerid][id][1],
			CarMod[playerid][id][2],
			CarMod[playerid][id][3],
			CarMod[playerid][id][4],
			CarMod[playerid][id][5],
			CarMod[playerid][id][6],
			CarMod[playerid][id][7],
			CarMod[playerid][id][8],
			CarMod[playerid][id][9],
			CarMod[playerid][id][10],
			CarMod[playerid][id][11],
			CarMod[playerid][id][12],
			CarMod[playerid][id][13],
			CarMod[playerid][id][14],
			CarMod[playerid][id][15],
			CarMod[playerid][id][16],
			PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
	    case cLicensex: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `License`='%s' WHERE `ID`='%d'",CarPlate[playerid][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cPaintJx: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `PaintJ`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarPaintJ][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cColorOnex: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `ColorOne`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarColor1][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
	    case cColorTwox: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `ColorTwo`='%d' WHERE `ID`='%d'",PlayerInfo[playerid][pCarColor2][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cOwnerx: {
	        mysql_format(SQL,gString,sizeof(gString),"UPDATE `cars` SET `Owner`='%s' WHERE `ID`='%d'",CarOwner[playerid][id],PlayerInfo[playerid][pCar][id]);
			mysql_tquery(SQL,gString);
	    }
		case cStagex: {
	    	mysql_format(SQL, gString, sizeof(gString), "UPDATE `cars` SET `Stage`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pCarStage][id], PlayerInfo[playerid][pCar][id]);
	    	mysql_tquery(SQL, gString);
	    }
	    case cStageKMx: {
	    	mysql_format(SQL, gString, sizeof(gString), "UPDATE `cars` SET `StageKM`='%d' WHERE `ID`='%d'", PlayerInfo[playerid][pCarStageKM][id], PlayerInfo[playerid][pCar][id]);
	    	mysql_tquery(SQL, gString);
	   	}		    
	}
	return 1; 
}
stock IsACBUGWeapon(playerid) {
	if (IsPlayerConnected(playerid) && (gPlayerLogged[playerid] == 1)) {
	    new wID = GetPlayerWeapon (playerid) ;
	    if (wID == 24 || wID == 25 || wID == 27 || wID == 34) return 1 ;
	}
	return 0 ; }
function ClearWanted(playerid) {
	new string[80];
	format(string,sizeof(string),"None");
	strmid(WantedName[playerid], string, 0, strlen(string), 255);
	WantedReason[playerid] = 999;
	return 1; 
}
stock PutPlayerInVehicleEx(playerid, vehicleid,seatid) {
	PlayerEnterTime[playerid] += 221;
	LastVeh[playerid] = vehicleid;
	PutPlayerInVehicle(playerid, vehicleid,seatid);
	return 1; 
}
stock RemovePlayerFromVehicleEx(playerid) {
	PlayerEnterTime[playerid]+=221;
	RemovePlayerFromVehicle(playerid);
	return 1; 
}
public OnQueryError(errorid, error[], callback[], query[], connectionHandle) {
	print("====================================================================");
	printf("Error ID: %d, Error: %s", errorid, error);
	printf("Callback: %s", callback);
	printf("gQuery: %s", query);
	print("====================================================================");
	return 1; 
}
stock strmatch(const String1[], const String2[]) {
 	if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1))) {
  		return true;
 	}
 	else {
  		return false;
 	}
}
stock SetPlayerPosEx(playerid, Float:X, Float:Y, Float:Z) {
    SetPlayerPos(playerid, X, Y, Z);
    SetCameraBehindPlayer(playerid);
    fly_warnings[playerid] = 1;
    return 1; 
}
// ---- clans ---- //
function LoadClanZonesVariables() {
	new string[50];
	serverClanZones = cache_num_rows();
	for(new i = 1; i <= serverClanZones; i++) {
		clanZoneVariables[i][clanZoneID] = cache_get_field_content_int(i - 1, "zoneID");
		clanZoneVariables[i][clanZoneClan] = cache_get_field_content_int(i - 1, "zoneClan");
		clanZoneVariables[i][clanZoneMinX] = cache_get_field_content_float(i - 1, "zoneMinX");
		clanZoneVariables[i][clanZoneMinY] = cache_get_field_content_float(i - 1, "zoneMinY");
		clanZoneVariables[i][clanZoneMaxX] = cache_get_field_content_float(i - 1, "zoneMaxX");
		clanZoneVariables[i][clanZoneMaxY] = cache_get_field_content_float(i - 1, "zoneMaxY");
		clanZoneVariables[i][clanZoneObjX] = cache_get_field_content_float(i - 1, "zoneObjX");
		clanZoneVariables[i][clanZoneObjY] = cache_get_field_content_float(i - 1, "zoneObjY");
		clanZoneVariables[i][clanZoneObjZ] = cache_get_field_content_float(i - 1, "zoneObjZ");
		clanZoneVariables[i][clanZoneObjRotX] = cache_get_field_content_float(i - 1, "zoneObjRotX");
		clanZoneVariables[i][clanZoneObjRotY] = cache_get_field_content_float(i - 1, "zoneObjRotY");
		clanZoneVariables[i][clanZoneObjRotZ] = cache_get_field_content_float(i - 1, "zoneObjRotZ");
		clanZoneVariables[i][clanZoneObject] = CreateDynamicObject(19353, clanZoneVariables[i][clanZoneObjX], clanZoneVariables[i][clanZoneObjY], clanZoneVariables[i][clanZoneObjZ], clanZoneVariables[i][clanZoneObjRotX], clanZoneVariables[i][clanZoneObjRotY], clanZoneVariables[i][clanZoneObjRotZ], -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD);
		clanZoneVariables [i][clanZoneTurf] = GangZoneCreateEx(clanZoneVariables[i][clanZoneMinX], clanZoneVariables[i][clanZoneMinY], clanZoneVariables[i][clanZoneMaxX], clanZoneVariables[i][clanZoneMaxY], i, 1.0);
		clanZoneVariables[i][clanZoneAttacked] = 0;
		clanZoneVariables[i][clanZoneProcent] = 0;

		if(clanZoneVariables[i][clanZoneClan] == 0) format(string, 50, "None");
		else format(string, 50, "{%s}%s", clanVariables[clanZoneVariables[i][clanZoneClan]][clanColor], clanVariables[clanZoneVariables[i][clanZoneClan]][clanName]);
		SetDynamicObjectMaterialText(clanZoneVariables[i][clanZoneObject], 0, string, OBJECT_MATERIAL_SIZE_256x128, "Arial", 28, 0, 0xFFFF9200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	} printf("[LOADING] Clan Zones: %d", serverClanZones);
	return 1; 
}
function LoadClanVariables() {
	serverClans = cache_num_rows();
	for(new i = 1; i <= serverClans; i++) {
		new row = cache_get_field_content_int(i - 1, "clanID");
		clanVariables[row][clanID] = row;
		clanVariables[row][clanSlots] = cache_get_field_content_int(i - 1, "clanSlots");
		clanVariables[row][clanSafe] = cache_get_field_content_int(i - 1, "clanSafe");
		cache_get_field_content(i - 1, "clanName", clanVariables[row][clanName], SQL, 50);
		cache_get_field_content(i - 1, "clanTag", clanVariables[row][clanTag], SQL, 20);
		cache_get_field_content(i - 1, "clanColor", clanVariables[row][clanColor], SQL, 20);
		cache_get_field_content(i - 1, "clanRankName1", clanVariables[row][clanRankName1], SQL, 32);
		cache_get_field_content(i - 1, "clanRankName2", clanVariables[row][clanRankName2], SQL, 32);
		cache_get_field_content(i - 1, "clanRankName3", clanVariables[row][clanRankName3], SQL, 32);
		cache_get_field_content(i - 1, "clanRankName4", clanVariables[row][clanRankName4], SQL, 32);
		cache_get_field_content(i - 1, "clanRankName5", clanVariables[row][clanRankName5], SQL, 32);
		cache_get_field_content(i - 1, "clanRankName6", clanVariables[row][clanRankName6], SQL, 32);
		cache_get_field_content(i - 1, "clanRankName7", clanVariables[row][clanRankName7], SQL, 32);
		//printf("%d | clanid %d | %s | slots %d", i, clanVariables[i][clanID], clanVariables[i][clanName], clanVariables[i][clanSlots]);
	} printf("[LOADING] Clans: %d", serverClans);
	return 1; 
}
function LoadClanVehicles() {
	serverClanVehicles = cache_num_rows();
	for(new i = 1; i <= serverClanVehicles; i++) {
		clanVehiclesVariables[i][clanVehicleID] = cache_get_field_content_int(i - 1, "clanVehicleID");
		clanVehiclesVariables[i][clanVehicleClan] = cache_get_field_content_int(i - 1, "clanVehicleClan");
		clanVehiclesVariables[i][clanVehicleRank] = cache_get_field_content_int(i - 1, "clanVehicleRank");
		clanVehiclesVariables[i][clanVehicleModel] = cache_get_field_content_int(i - 1, "clanVehicleModel");
		clanVehiclesVariables[i][clanVehicleColor1] = cache_get_field_content_int(i - 1, "clanVehicleColor1");
		clanVehiclesVariables[i][clanVehicleColor2] = cache_get_field_content_int(i - 1, "clanVehicleColor2");
		clanVehiclesVariables[i][clanVehicleX] = cache_get_field_content_float(i - 1, "clanVehicleX");
		clanVehiclesVariables[i][clanVehicleY] = cache_get_field_content_float(i - 1, "clanVehicleY");
		clanVehiclesVariables[i][clanVehicleZ] = cache_get_field_content_float(i - 1, "clanVehicleZ");
		clanVehiclesVariables[i][clanVehicleA] = cache_get_field_content_float(i - 1, "clanVehicleA");
		createClanVehicle(i);
	} printf("[LOADING] Clan Vehicles: %d", serverClanVehicles);
	return 1; 
}
new Float: clanVehLocations[6][4] = {
	{1556.1519,-2211.6204,13.2817,180.6299}, {1552.6866,-2211.2532,13.2817,179.3926}, {1549.4364,-2211.4348,13.2817,180.4563}, {1542.7700,-2211.1072,13.2817,179.8449}, {1536.4052,-2211.3948,13.2817,179.9692}, {1529.8094,-2211.2747,13.2817,179.4927}
};
function createClanVehicle(i) {
	new string[50];
	clanVehiclesVariables[i][clanVehicleInGame] = AddStaticVehicle(clanVehiclesVariables[i][clanVehicleModel], clanVehiclesVariables[i][clanVehicleX], clanVehiclesVariables[i][clanVehicleY], clanVehiclesVariables[i][clanVehicleZ], clanVehiclesVariables[i][clanVehicleA], clanVehiclesVariables[i][clanVehicleColor1], clanVehiclesVariables[i][clanVehicleColor2]);
	clanVehiclesVariables[i][clanVehicleObject] = CreateDynamicObject(19327, -2597.0762, -2638.4270, -5.3536, -87.6999, 90.4001, -87.1805);
	format(string, 50, "{%s}%s", clanVariables[clanVehiclesVariables[i][clanVehicleClan]][clanColor], clanVariables[clanVehiclesVariables[i][clanVehicleClan]][clanName]);
	SetDynamicObjectMaterialText(clanVehiclesVariables[i][clanVehicleObject], 0, string, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, -1, 0, 1);
	switch(clanVehiclesVariables[i][clanVehicleModel]) {
		case 411: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -1.9, 0.3, 270.0, 0.0, 0.0); // Infernus
		case 560: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -0.7, 0.8, 270.0, 0.0, 0.0); // Sultan
		case 541: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -0.4, 0.6, 274.5, 0.0, 0.0); // Bullet
		case 429: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -1.79, 0.33, 270.0, 0.0, 0.0); // Banshee
		case 495: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -1.2, 1, 270.0, 0.0, 0.0); // Sandking
		case 579: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -2, 1.21, 270.0, 0.0, 0.0); // Huntley
		case 562: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -0.69, 0.76, 270.0, 0.0, 0.0); // Elegy
		case 451: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -0.6, 0.56, 270.0, 0.0, 0.0); // Turismo
		case 480: AttachDynamicObjectToVehicle(clanVehiclesVariables[i][clanVehicleObject], clanVehiclesVariables[i][clanVehicleInGame], 0.0, -1.58, 0.27, 270.0, 0.0, 0.0); // COmet
	}
	return 1; 
}
function insertClanVehicles(playerid, model, clan) {
	new i = serverClanVehicles + 1, rand = random(sizeof clanVehLocations); serverClanVehicles ++;
	clanVehiclesVariables[i][clanVehicleID] = cache_insert_id(); clanVehiclesVariables[i][clanVehicleClan] = clan; clanVehiclesVariables[i][clanVehicleRank] = 1;
	clanVehiclesVariables[i][clanVehicleModel] = model; clanVehiclesVariables[i][clanVehicleColor1] = 0; clanVehiclesVariables[i][clanVehicleColor2] = 0;
	clanVehiclesVariables[i][clanVehicleX] = clanVehLocations[rand][0]; clanVehiclesVariables[i][clanVehicleY] = clanVehLocations[rand][1]; clanVehiclesVariables[i][clanVehicleZ] = clanVehLocations[rand][2];
	clanVehiclesVariables[i][clanVehicleA] = clanVehLocations[rand][3];
	createClanVehicle(i);
	gString[0] = (EOS); clanVariables[clan][clanSafe] -= desiredModelPrice[playerid];
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `clanvehicles` SET `clanVehicleX` = '%f' , `clanVehicleY` = '%f' , `clanVehicleZ` = '%f' , `clanVehicleA` = '%f' WHERE `clanVehicleID` = '%d'", clanVehiclesVariables[i][clanVehicleX], clanVehiclesVariables[i][clanVehicleY], clanVehiclesVariables[i][clanVehicleZ], clanVehiclesVariables[i][clanVehicleA], cache_insert_id());
	mysql_tquery(SQL, gString, "", "");
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `clans` SET `clanSafe` = '%d' WHERE `clanID` = '%d'", clanVariables[clan][clanSafe], clanVariables[clan][clanID]);
	mysql_tquery(SQL, gString, "", "");
	format(gString, sizeof(gString), "{%s}[CLAN] %s a cumparat un %s pentru clan.", clanVariables[clan][clanColor], GetName(playerid), aVehicleNames[model - 400]);
	SendToClan(clan, -1, "{%s}[CLAN] %s a cumparat un %s pentru clan.", clanVariables[clan][clanColor], GetName(playerid), aVehicleNames[model - 400]);
	SCMf(playerid, -1, "{%s}Ai cumparat un %s pentru clan cu succes.", clanVariables[clan][clanColor], aVehicleNames[model - 400]);
	return 1; 
}
CMD:clanturfs(playerid , params[]) {
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Nu esti intr-un clan.");
	switch(seeGangZones[playerid]) {
		case 0: {
			seeGangZones[playerid] = 1;
			SCM(playerid, -1, "Acum vei vedea turfurile clanurilor.");
			for(new i = 1; i <= serverClanZones; i++) GangZoneShowForPlayer(playerid, clanZoneVariables[i][clanZoneTurf], 0x136FBA99);
		}
		case 1: {
			seeGangZones[playerid] = 0;
			SCM(playerid, -1, "Acum nu vei mai vedea turfurile clanurilor.");
			for(new i = 1; i <= serverClanZones; i++) GangZoneHideForPlayer(playerid, clanZoneVariables[i][clanZoneTurf]);
		}
	}
	return 1; 
}
CMD:lc(playerid, parmas[]) {
    if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
    new id, result[124], test[32], test2[124], string[144];
    if(sscanf(parmas, "u", id)) return SCM(playerid, -1, "Syntax: /lc [name/playerid]");
    if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
    if(PlayerInfo[id][pAdmin] >= 6) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe acel player."); 
    gString[0] = (EOS);
    format(string, 144, "SELECT * FROM chat_logs WHERE playerid='%d' ORDER BY ID DESC LIMIT 10", PlayerInfo[id][pSQLID]);
    new Cache: resultt = mysql_query(SQL, string);
    for(new i, j = cache_get_row_count (); i != j; ++i) {
        cache_get_field_content(i, "time", result); format(test, 32, result);
        cache_get_field_content(i, "text", result); format(test2, 124, result);
        format(gString, sizeof(gString), "%s[%s] %s\n", gString, test, test2);
    }
    cache_delete(resultt);
    ShowPlayerDialogEx(playerid, DIALOG_LASTS, DIALOG_STYLE_MSGBOX, "chat for player", gString, "Close", "");
    return 1; 
}
CMD:trylucky(playerid, params[]) { 
	if(!IsPlayerInRangeOfPoint(playerid, 50.0,884.3581,-1645.5508,13.5469)) return SCM(playerid, -1, "Nu te afli in locatia corespunzatoare, foloseste comanda /gps - other locations - lucky system"); 
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, COLOR_GREY, "Nu poti folosi comanda doar de la level 3.");
	ShowPlayerDialogEx(playerid, DIALOG_TRYLUCKY, DIALOG_STYLE_INPUT, "LuckySystem", "Introdu suma pe care vrei sa o pariezi\n(poti sa castigi sau sa pierzi, daca pariezi $100,000,000 poti castiga dublu, adica $200,000,000).", "Ok", "Exit");
	return 1;
}
CMD:fillveh(playerid, params[]) {
	if(!IsPlayerInRangeOfPoint(playerid, 50.0,2043.3727, -69.1192, 3.0387)) return SCM(playerid, -1, "Nu te afli in locatia corespunzatoare /gps - gas station"); 
	new idcar = GetPlayerVehicleID(playerid); 
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return true;
    if(Gas[idcar] < 80) Gas[idcar] = 100;
	else return SCM(playerid, COLOR_DARKPINK, "You have enough fuel in your vehicle."); 
    if(GetPlayerCash(playerid) < 700000) return SCM(playerid, -1, "Nu ai $700,000");
	GivePlayerCash(playerid, -700000);
	SendClientMessage(playerid, COLOR_DARKPINK, "Ai alimentat cu succes la o benzinarie privata (-$700,000)");
    if(quest_type[playerid] == quest_benzina) quest_finish(playerid); 
	return 1; 
}
CMD:changepass(playerid,params[]) {
	ShowPlayerDialogEx(playerid, DIALOG_NEWPASS,DIALOG_STYLE_INPUT, "Change password:","Type in box your new password:","Done","Close");
	return 1; 
}
CMD:clanduty(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Nu esti intr-un clan.");
	switch(ClanDuty[playerid]) {
		case 0: {
			ClanDuty[playerid] = 1;
			SendToClan(PlayerInfo[playerid][pClan], -1, "{%s}[CLAN] %s este acum la datoria clanului.", clanVariables[PlayerInfo[playerid][pClan]][clanColor], GetName(playerid));
			SCMf(playerid, -1, "{%s}Acum esti la datoria clanului.", clanVariables[PlayerInfo[playerid][pClan]][clanColor]);
		}
		case 1: {
			ClanDuty[playerid] = 0;
			SendToClan(PlayerInfo[playerid][pClan], -1, "{%s}[CLAN] %s nu mai este acum la datoria clanului.", clanVariables[PlayerInfo[playerid][pClan]][clanColor], GetName(playerid));
			SCMf(playerid, -1, "{%s}Nu mai esti la datoria clanului.", clanVariables[PlayerInfo[playerid][pClan]][clanColor]);
		}
	}
	return 1; 
}
new Timer:spraytimer[MAX_CLANZONES];
timer spraytimerr[240000](zone) {
	if(clanZoneVariables[zone][clanZoneAttacked] == 0) return true;
	SendToClan(clanZoneVariables[zone][clanZoneClan], -1, "{%s}[CLAN] Clan %s failed to win turf %d owned by your clan.", clanVariables[clanZoneVariables[zone][clanZoneClan]][clanColor], clanVariables[clanZoneVariables[zone][clanZoneAttacked]][clanName], zone);
	SendToClan(clanZoneVariables[zone][clanZoneAttacked], -1, "{%s}[CLAN] Your clan failed to win turf %d owned by clan %s.", clanVariables[clanZoneVariables[zone][clanZoneAttacked]][clanColor], zone, clanVariables[clanZoneVariables[zone][clanZoneAttacked]][clanName]);
	clanZoneVariables[zone][clanZoneAttacked] = 0; clanZoneVariables[zone][clanZoneProcent] = 0;
	stop spraytimer[zone];
	return 1; 
}	
CMD:spray(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Nu esti intr-un clan.");
	new zone = -1, zoneclan, clan = PlayerInfo[playerid][pClan], string[50];
	for(new i = 1; i <= serverClanZones; i++) {
		if(isPlayerInClanTurf(playerid, i)) {
			zone = i;
			break;
		}
	}
	new hour, minute, second; 
	gettime(hour, minute, second);
	if(hour == 22 || hour == 01 || hour == 02 || hour == 03 || hour == 04 || hour == 05 || hour == 06 || hour == 07 || hour == 08 || hour == 09 || hour == 10 || hour == 11 || hour == 12 || hour == 13 || hour == 14 || hour == 15 || hour == 16 || hour == 17) return SCM(playerid, -1, "Poti face spray doar intre orele 18:00 - 22:00.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, clanZoneVariables[zone][clanZoneObjX], clanZoneVariables[zone][clanZoneObjY], clanZoneVariables[zone][clanZoneObjZ])) return SendClientMessage(playerid, -1, "Nu esti langa un teritoriu.");
	if(!ClanDuty[playerid]) return SendClientMessage(playerid, -1, "Nu esti la datoria clanului.");
	if(OnDuty[playerid]) return SendClientMessage(playerid, -1, "Nu poti folosi aceasta comanda deoarece esti duty.");
	if(zone == -1) return SendClientMessage(playerid, -1, "Nu esti intr-o zona de clan.");
	if(clanZoneVariables[zone][clanZoneClan] == PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Aceasta zona este deja detinuta de clanul tau.");
	if(clanZoneVariables[zone][clanZoneAttacked] != 0 && clanZoneVariables[zone][clanZoneAttacked] != PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Aceasta zona este deja atacata.");
	zoneclan = clanZoneVariables[zone][clanZoneClan];
	if(clanZoneVariables[zone][clanZoneClan] != 0 && !clanZoneVariables[zone][clanZoneAttacked] && !clanZoneVariables[zone][clanZoneProcent]) {
		SendToClan(zoneclan, -1, "{%s}[CLAN] %s from clan %s has attacked turf %d owned by your clan.", clanVariables[zoneclan][clanColor], GetName(playerid), clanVariables[clan][clanName], zone);
		SendToClan(clan, -1, "{%s}[CLAN] %s from your clan attacked turf %d owned by %s.", clanVariables[clan][clanColor], GetName(playerid), zone, clanVariables[zoneclan][clanName]);
		SendAdmins(0xFFC000FF, "[CLAN WAR] %s has attacked turf %d owned by clan %s.", 1, clanVariables[clan][clanName], zone, clanVariables[zoneclan][clanName]);
	}
	if(!clanZoneVariables[zone][clanZoneAttacked] && !clanZoneVariables[zone][clanZoneProcent]) {
		clanZoneVariables[zone][clanZoneProcent] = 100; 
		clanZoneVariables[zone][clanZoneAttacked] = PlayerInfo[playerid][pClan];
		spraytimer[zone] = defer spraytimerr(zone);
	}
	if(gettime() < GetPVarInt(playerid, "sprayDeelay")) return SendClientMessage(playerid, -1, "Asteapta cateva secunde.");
	SetPVarInt(playerid, "sprayDeelay", gettime() + 5);
	ApplyAnimation(playerid, "GRAFFITi", "spraycan_fire", 4.0, 0, 0, 0, 0, 0);
	GivePlayerWeaponEx(playerid, WEAPON_SPRAYCAN, 1);
	clanZoneVariables[zone][clanZoneProcent] -= 5;
	if(clanZoneVariables[zone][clanZoneProcent] > 0) {
		SCMf(playerid, -1, "{%s}Continua sa dai cu spray-ul, mai ai %d la suta.", clanVariables[clan][clanColor], clanZoneVariables[zone][clanZoneProcent]);
		PlayerTextDrawSetString(playerid, TimeLeftWar1[playerid], "You are in a war clan");
		PlayerTextDrawShow(playerid, TimeLeftWar1[playerid]);
	}	
	else {
		new bani = 70000 + random(50000);
		clanVariables[clan][clanSafe] += bani;
		SetPlayerAmmo(playerid, 9, 0);
		format(string, 50, "clanul %s", clanVariables[zoneclan][clanName]);
		SendToClan(clan, -1, "{%s}[CLAN] %s a castigat turful %d, detinut de %s si a castigat %s$.", clanVariables[clan][clanColor], GetName(playerid), zone, (!clanZoneVariables[zone][clanZoneClan]) ? ("nimeni") : (string), FormatNumber(bani));
		SCMf(playerid, -1, "{%s}Ai sprayat peretele cu succes.", clanVariables[clan][clanColor]);
		SendAdmins(0xFFC000FF, "[CLAN WAR] Clanul %s a castigat turful %d detinut de clanul %s.", 1, clanVariables[clan][clanName], zone, clanVariables[clanZoneVariables[zone][clanZoneClan]][clanName]);
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `clanzones` SET `zoneClan` = '%d' WHERE `zoneID` = '%d'", clan, zone);
		mysql_tquery(SQL, gString, "", "");
		mysql_format(SQL, gString, sizeof(gString), "UPDATE `clans` SET `clanSafe` = '%d' WHERE `clanID` = '%d'", clanVariables[clan][clanSafe], clanVariables[clan][clanID]);
		mysql_tquery(SQL, gString, "", "");
		clanZoneVariables[zone][clanZoneAttacked] = 0;
		clanZoneVariables[zone][clanZoneProcent] = 0;
		clanZoneVariables[zone][clanZoneClan] = clan;
		stop spraytimer[zone];
		DestroyDynamicObject(clanZoneVariables[zone][clanZoneObject]);
		format(string, 50, "{%s}%s", clanVariables[clanZoneVariables[zone][clanZoneClan]][clanColor], clanVariables[clanZoneVariables[zone][clanZoneClan]][clanName]);
		clanZoneVariables[zone][clanZoneObject] = CreateDynamicObject(19353, clanZoneVariables[zone][clanZoneObjX], clanZoneVariables[zone][clanZoneObjY], clanZoneVariables[zone][clanZoneObjZ], clanZoneVariables[zone][clanZoneObjRotX], clanZoneVariables[zone][clanZoneObjRotY], clanZoneVariables[zone][clanZoneObjRotZ], -1, -1, -1, STREAMER_OBJECT_SD, STREAMER_OBJECT_DD);
		SetDynamicObjectMaterialText(clanZoneVariables[zone][clanZoneObject], 0, string, OBJECT_MATERIAL_SIZE_256x128, "Arial", 28, 0, 0xFFFF9200, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
		if(!clanZoneVariables[zone][clanZoneClan])
			return true;
		SendToClan(zoneclan, -1, "{%s}[CLAN] %s din clanul %s a castigat turful %d, detinut de clanul tau.", clanVariables[zoneclan][clanColor], GetName(playerid), clanVariables[clan][clanName], zone);
		PlayerTextDrawHide(playerid, TimeLeftWar1[playerid]);
	}
	return 1; 
}
stock SendToClan(clanid, color, const text[], va_args<>)  {
	if(clanid == 0)
		return true;
    va_format(mesajsmek, 144, text, va_start<3>);
	foreach(new x : Player) { if(PlayerInfo[x][pClan] == clanid && seeClanChat[x]) SendClientMessage(x, color, mesajsmek); }
	return 1; 
}
stock inviteToClan(playerid, id, clan) {
	SendToClan(clan, -1, "{%s}[CLAN] %s has joined the clan invited by %s.", clanVariables[clan][clanColor], GetName(playerid), GetName(id));
	SCMf(playerid, -1, "{%s}Te-ai alaturat clanului %s, invitat de %s.", clanVariables[clan][clanColor], clanVariables[clan][clanName], GetName(id));
	SCMf(id, -1, "{%s}%s s-a alaturat clanului, invitat de tine.", clanVariables[clan][clanColor], GetName(playerid));
	pUpdateInt(playerid, "ClanTime", 0);
	SetPVarInt(playerid, "cinvitePlayer", INVALID_PLAYER_ID);
	return 1; 
}
stock getClanName(clanid) return clanVariables[clanid][clanName];
stock getClanTag(clanid) return clanVariables[clanid][clanTag];
stock getCRankName(playerid) {
	new string[32];
	switch(PlayerInfo[playerid][pCRank]) {
		case 1: format(string, 32, "%s", clanVariables[PlayerInfo[playerid][pClan]][clanRankName1]);
		case 2: format(string, 32, "%s", clanVariables[PlayerInfo[playerid][pClan]][clanRankName2]);
		case 3: format(string, 32, "%s", clanVariables[PlayerInfo[playerid][pClan]][clanRankName3]);
		case 4: format(string, 32, "%s", clanVariables[PlayerInfo[playerid][pClan]][clanRankName4]);
		case 5: format(string, 32, "%s", clanVariables[PlayerInfo[playerid][pClan]][clanRankName5]);
		case 6: format(string, 32, "%s", clanVariables[PlayerInfo[playerid][pClan]][clanRankName6]);
		case 7: format(string, 32, "%s", clanVariables[PlayerInfo[playerid][pClan]][clanRankName7]);
	} return string; }
stock getClanNameByID(clanid, listitem) {
	new string[32];
	switch(listitem) {
		case 1: format(string, sizeof string, "%s", clanVariables[clanid][clanRankName1]);
		case 2: format(string, sizeof string, "%s", clanVariables[clanid][clanRankName2]);
		case 3: format(string, sizeof string, "%s", clanVariables[clanid][clanRankName3]);
		case 4: format(string, sizeof string, "%s", clanVariables[clanid][clanRankName4]);
		case 5: format(string, sizeof string, "%s", clanVariables[clanid][clanRankName5]);
		case 6: format(string, sizeof string, "%s", clanVariables[clanid][clanRankName6]);
		case 7: format(string, sizeof string, "%s", clanVariables[clanid][clanRankName7]);
	} return string; }
function checkClanTag(playerid, tag[]) {
	if(cache_get_row_count() > 0) 
		return ShowPlayerDialogEx(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag:", "Scrie mai jos tagul pe care il doresti clanului.", "Ok", "");
	new clan = PlayerInfo[playerid][pClan];
	format(clanVariables[clan][clanTag], 50, "%s", tag);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `clans` SET `clanTag` = '%e' WHERE `clanID` = '%d'", tag, clan);
	mysql_tquery(SQL, gString, "", "");
	SCMf(playerid, -1, "{FFCC99}Tagul clanului este %s.", tag);
	SCM(playerid, -1, "{FFCC99}Clanul a fost creat cu succes.");
	setClanInformations(clan);
	return 1; 
}
function setClanInformations(clan) {
	clanVariables[clan][clanSlots] = 50;
	format(clanVariables[clan][clanColor], 20, "FFCC99");
	format(clanVariables[clan][clanRankName1], 32, "Newbie");
	format(clanVariables[clan][clanRankName2], 32, "Member");
	format(clanVariables[clan][clanRankName3], 32, "Advanced");
	format(clanVariables[clan][clanRankName4], 32, "Expert");
	format(clanVariables[clan][clanRankName5], 32, "Legend");
	format(clanVariables[clan][clanRankName6], 32, "Manager");
	format(clanVariables[clan][clanRankName7], 32, "Owner");
	return 1; 
}
function checkClanName(playerid, name[]) {
	if(cache_get_row_count() > 0) 
		return ShowPlayerDialogEx(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Scrie mai jos numele pe care il doresti clanului.", "Ok", "");
	new clan = PlayerInfo[playerid][pClan];
	format(clanVariables[clan][clanName], 50, "%s", name);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `clans` SET `clanName` = '%e' WHERE `clanID` = '%d'", name, clan);
	mysql_tquery(SQL, gString, "", "");
	SCMf(playerid, -1, "{FFCC99}Numele clanului este %s.", name);
	ShowPlayerDialogEx(playerid, DIALOG_CHOOSECLANTAG, DIALOG_STYLE_INPUT, "Clan tag:", "Scrie mai jos tagul pe care il doresti clanului.", "Ok", "");
	return 1; 
}
function insertServerClan(playerid) {
	new year, month, day, second, minute, hour; gettime(hour, minute, second); getdate(year, month, day);
	PlayerInfo[playerid][pPremiumPoints] -= 200; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
	PlayerInfo[playerid][pClan] = cache_insert_id(); pUpdateInt(playerid, "Clan", PlayerInfo[playerid][pClan]);
	PlayerInfo[playerid][pCRank] = 7; pUpdateInt(playerid, "CRank", PlayerInfo[playerid][pCRank]);
	//debug clan
	new string[245 char];
	format(string, sizeof(string), "Debug clan: %d | %d | %d", PlayerInfo[playerid][pPremiumPoints], PlayerInfo[playerid][pClan], PlayerInfo[playerid][pCRank]);
	SendClientMessage(playerid, -1, string);
	
	format(gString, sizeof(gString), "%02d-%02d-%d %02d:%02d:%02d", day, month, year, hour, minute, second);
	pUpdateStr(playerid, "ClanJoin", gString);
	SendAdmins(COLOR_PRINC, "%s [user: %d] bought a clan using 400 premium points.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID]);
	ShowPlayerDialogEx(playerid, DIALOG_CHOOSECLANNAME, DIALOG_STYLE_INPUT, "Clan name", "Scrie mai jos numele pe care il doresti clanului.", "Ok", "");
	return 1; 
}
function clanWarn(playerid, clanwarns) {
	new name[30], clanrank, clan = PlayerInfo[playerid][pClan]; clanrank = cache_get_field_content_int(0, "CRank"); cache_get_field_content(0, "name", name, SQL, 30);
	if(clanrank > 5 && PlayerInfo[playerid][pCRank] == 7)
		return SendClientMessage(playerid, -1, "Nu mai liderul poate da warnuri membrilor 5+.");
	foreach(new x : Player) { if(PlayerInfo[x][pSQLID] == Selected2[playerid]) PlayerInfo[x][pWarns] = clanwarns, SCMf(x, -1, "{%s}%s ti-a setat %d/3 warns in clan.", clanVariables[clan][clanColor], GetName(playerid), clanwarns); }
	SendToClan(clan, -1, "{%s}[CLAN] %s are acum %d/3 warnuri, date de %s.", clanVariables[clan][clanColor], name, clanwarns, GetName(playerid));
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `ClanWarns` = '%d' WHERE `id` = '%d'", clanwarns, Selected2[playerid]);
	mysql_tquery(SQL, gString, "", "");
	return 1; 
}
function clanChangeRank(playerid, changetype, newrank, clan) {
	if(changetype == CLAN_CHANGE_RANK_EQUAL_7) PlayerInfo[playerid][pCRank] = 6, pUpdateInt(playerid, "CRank", 6);
	new name[30]; cache_get_field_content(0, "name", name, SQL, 30);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `CRank` = '%d' WHERE `id` = '%d'", newrank, Selected2[playerid]);
	mysql_tquery(SQL, gString, "", "");
	foreach(new x : Player) {
		if(PlayerInfo[x][pSQLID] == Selected2[playerid]) {
			PlayerInfo[x][pCRank] = newrank;
			SCMf(x, -1, "{%s}Ai fost promovat la rankul %d in cadrul clanului %s de catre %s.", clanVariables[clan][clanColor], newrank, clanVariables[clan][clanName], GetName(playerid));		
		}
	}
	SendToClan(clan, -1, "{%s}[CLAN] %s a fost promovat la rankul %d de catre %s.", clanVariables[clan][clanColor], name, newrank, GetName(playerid));
	SCMf(playerid, -1, "{%s}L-ai promovat pe %s la rank %d.", clanVariables[clan][clanColor], name, newrank);
	return 1; 
}
function clanUninvite(playerid) {
	new name[30], clanrank, id, clan = PlayerInfo[playerid][pClan];
	for(new i = 0; i < cache_get_row_count(); i++) {
		id = cache_get_field_content_int(i, "id");
		clanrank = cache_get_field_content_int(i, "CRank");
		cache_get_field_content(i, "name", name, SQL, 130);
	}
	if(PlayerInfo[playerid][pCRank] == 7 && clanrank == 7) return SCM(playerid, -1, "Nu te poti da singur afara.");
	if(PlayerInfo[playerid][pCRank] < 7 && clanrank > 5) return SendClientMessage(playerid, -1, "Nu mai liderul poate da afara membii de rank 5+."); 
	foreach(new x : Player) {
		if(strmatch(PlayerInfo[x][pNormalName], name)) {
			SCMf(x, -1, "{%s}Ai fost dat afara din clan de catre %s.", clanVariables[clan][clanColor], GetName(playerid));
			playerTextDrawSetString(x, LogoTD, "%s/RPG.BLACK~p~MOON~w~.RO", PlayerInfo[id][pNormalName]);
			PlayerTextDrawShow(x, LogoTD);
			SetPlayerName(x, PlayerInfo[x][pNormalName]);
	   	    mysql_format(SQL, gString, 300, "INSERT INTO `clan_logs` (`clanid`, `text`) VALUES ('%d', '%s a parasit clanul.')", PlayerInfo[playerid][pClan], GetName(playerid));
	   		mysql_tquery(SQL, gString, "", "");			
			PlayerInfo[x][pClan] = 0, PlayerInfo[x][pCRank] = 0, PlayerInfo[x][pCWarns] = 0;			
		}
	}
	SendToClan(clan, -1, "{%s}[CLAN] %s has left the clan, uninvited by %s.", clanVariables[clan][clanColor], name, GetName(playerid));
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `CRank` = '0' , `Clan` = '0' , `ClanJoin` = '0' , `ClanTime` = '0' , `ClanTag` = '0' , `ClanWarns` = '0' WHERE `id` = '%d'", id);
	mysql_tquery(SQL, gString, "", "");
	return 1; 
}
function checkClanMember(playerid) {
	new name[30], clanrank, clanwarns, clantime, clanjoin[50], laston[50];
	for(new i = 0; i < cache_get_row_count(); i++) {
		clanrank = cache_get_field_content_int(i, "CRank");
		clantime = cache_get_field_content_int(i, "ClanTime");
		clanwarns = cache_get_field_content_int(i, "ClanWarns");
		cache_get_field_content(i, "name", name, SQL, 30);
		cache_get_field_content(i, "lastOn", laston, SQL, 50);
		cache_get_field_content(i, "ClanJoin", clanjoin, SQL, 50);
	} gString[0] = (EOS);
	format(gString, sizeof(gString), "Nume: %s\nRank: %d\nWarns: %d/3\nZile: %d\nJoined: %s\nLast Login: %s", name, clanrank, clanwarns, clantime, clanjoin, laston);
	ShowPlayerDialogEx(playerid, DIALOG_CLANMEMBERS2, DIALOG_STYLE_MSGBOX, "Manage User:", gString, "Options", "Exit");
	return 1; 
}
function showClanMembers(playerid) {
	new count = 0, name[30], string[30], clanrank, clanwarns, id, clan =PlayerInfo[playerid][pClan];
	new stringmare[1600];
	for(new i = 0; i < cache_get_row_count(); i++) {
		id = cache_get_field_content_int(i, "id");
		clanrank = cache_get_field_content_int(i, "CRank");
		clanwarns = cache_get_field_content_int(i, "ClanWarns");
		cache_get_field_content(i, "name", name, SQL, 30);
		format(stringmare, sizeof stringmare, "%s[R%d] [%d/3 warns] %s\n", stringmare, clanrank, clanwarns, name);
		Selected[playerid][count] = id;
		count ++;
	} format(string, sizeof string, "Clan Members %d/%d:", cache_num_rows(), clanVariables[clan][clanSlots]);
	ShowPlayerDialogEx(playerid, DIALOG_CLANMEMBERS, DIALOG_STYLE_LIST, string, stringmare, "Ok", "Exit");
	return 1; 
}
function isPlayerInClanTurf(playerid, turfid) {
	new Float: x, Float: y, Float:z; GetPlayerPos(playerid, x, y, z);
	if(x >= clanZoneVariables[turfid][clanZoneMinX] && x < clanZoneVariables[turfid][clanZoneMaxX] && y >= clanZoneVariables[turfid][clanZoneMinY] && y < clanZoneVariables[turfid][clanZoneMaxY]) 
		return true;
	return 0; }
CMD:clan(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Nu faci parte dintr-un clan.");
	//printf("playerid %d | clanid %d | slots %d", playerid, PlayerInfo[playerid][pClan], clanVariables[PlayerInfo[playerid][pClan]][clanSlots]);
	ShowPlayerDialogEx(playerid, DIALOG_CLAN, DIALOG_STYLE_LIST, "Clan:", "Clan help\nClan members\nClan settings\nClan safe\nClan vehicles\nClan turfs", "Ok", "Iesi");
	return 1; 
}
CMD:c(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Nu faci parte dintr-un clan.");
	if(PlayerInfo[playerid][pMuteTime] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute.");
	if(!seeClanChat[playerid]) return SCM(playerid, -1, "Nu poti folosi aceasta comanda in acest moment. Foloseste /tog.");
	new mesaj[128];
	if(sscanf(params, "s[128]", mesaj)) return SendClientMessage(playerid, -1, "Syntax: /c [mesaj]");
	SendToClan(PlayerInfo[playerid][pClan], -1, "{%s}[CLAN] %s %s: %s", clanVariables[PlayerInfo[playerid][pClan]][clanColor], getCRankName(playerid), GetName(playerid), mesaj);
	return 1; 
}
CMD:claninfo(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Nu faci parte dintr-un clan.");
	SCMf(playerid, -1, "Faci parte din clanul %s si ai rankul %d.", clanVariables[PlayerInfo[playerid][pClan]][clanName], PlayerInfo[playerid][pCRank]);
	return 1; 
}
CMD:quitclan(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Nu faci parte dintr-un clan.");
	if(PlayerInfo[playerid][pCRank] == 7) return SendClientMessage(playerid, -1, "Nu poti parasi clanul daca esti lider.");
	ShowPlayerDialogEx(playerid, DIALOG_QUITCLAN, DIALOG_STYLE_MSGBOX, "Are you sure?", "Vrei sa parasesti acest clan?", "Ok", "No");
	return 1; 
}
CMD:cinvite(playerid, params[]) {
	if(!PlayerInfo[playerid][pClan]) return SendClientMessage(playerid, -1, "Nu faci parte dintr-un clan.");
	if(PlayerInfo[playerid][pCRank] < 6) return SendClientMessage(playerid, -1, "Nu ai rank 6+ in clan.");
	new id;
	if(sscanf(params, "u", id)) return SendClientMessage(playerid, -1, "Syntax: /cinvite [playerid/name]");
	if(id == playerid) return SendClientMessage(playerid, -1, "Nu iti poti da invite tie.");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, -1, "Acest player nu este conectat.");
	if(PlayerInfo[id][pClan] != 0) return SendClientMessage(playerid, -1, "Acest jucator este deja intr-un clan.");
	if(GetDistanceBetweenPlayers(playerid, id) > 10) return SendClientMessage(playerid, -1, "Nu esti langa acest jucator.");
	SCM(playerid, COLOR_LIGHTBLUE, "Processing invite..");
	gString[0] = (EOS); mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `users` WHERE `Clan` = '%d'", PlayerInfo[playerid][pClan]);
	mysql_tquery(SQL, gString, "checkCMembers", "ddd", playerid, id, PlayerInfo[playerid][pClan]);
	return 1; 
}	
function checkCMembers(playerid, id, clan) {
	if(cache_get_row_count() > clanVariables[clan][clanSlots])
		return SendClientMessage(playerid, -1, "Sunt prea multi jucatori in clan.");
	SCMf(playerid, COLOR_LIGHTBLUE, "L-ai invitat pe %s sa se alature clanului.", GetName(id));
	SCMf(id, COLOR_BLUE, "%s te-a invitat sa te alaturi clanului %s. Foloseste comanda [/accept cinvite %d] pentru a accepta.", GetName(playerid), clanVariables[clan][clanName], playerid);
	SetPVarInt(id, "cinvitePlayer", playerid);
	return 1; 
}
timer seducedraqadu[30000](playerid) {
	if(adatad[playerid] >= 1) {
		va_SendClientMessageToAll(0x41d62aFF, adtext[playerid]);
		adatad[playerid] = 0; format(adtext[playerid], 30, "NULL");
		stop timerptad[playerid];
	}
	return 1; 
}		
CMD:report(playerid, params[]) {
	if(PlayerInfo[playerid][pRmute] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute pe report.");
	if(reportstuck[playerid] >= 1 || reportdat[playerid] >= 1) return SCM(playerid, -1, "Ai trimis deja un report.");
	if(PlayerInfo[playerid][pAdmin] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece esti administrator.");
	ShowPlayerDialogEx(playerid, DIALOG_REPORT, DIALOG_STYLE_LIST, "SERVER: Report System", "Am gasit un bug\nIntrebari despre donatii\nSunt blocat/nu vad nimic\nVreau sa fac o afacere\nAlta problema", "Select", "Exit");
	return 1; 
}
CMD:reports(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	SCM(playerid, COLOR_PRINC, "Reports:");
	foreach(new i : Player) {
		if(strcmp(reporttext[i], "NULL", true)) SendClientMessage(playerid, COLOR_SKEMA2, reporttext[i]);
	}
	return 1; 
}
CMD:cr(playerid, params[]) {
	new id, mesaj[128];
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(sscanf(params, "us[128]", id, mesaj)) return SCM(playerid, -1, "Syntax: /cr [name/playerid] [message]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Acel player nu este conectat.");
	if(reportdat[id] < 1) return SCM(playerid, -1, "Acest player nu are un report activ.");
	reportdat[id] = 0;
	SendAdmins(COLOR_DARKPINK, "%s answered to %s with message: %s.",1, GetName(playerid), GetName(id), mesaj);
	SCM(id, COLOR_GREEN, "Reportul tau a fost rezolvat.");
	SCMf(id, COLOR_GREEN, "Admin %s: %s.", GetName(playerid), mesaj);
	format(reporttext[id], 30, "NULL");
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `HelpedPlayers` = `HelpedPlayers` + '1' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", ""); 		
	PlayerInfo[playerid][pTokens] ++;
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Tokens` = `Tokens` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);		
	return 1; 
}	
CMD:deleteallreports(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, -1, AdminOnly);
	foreach(new i : Player) { reportdat[i] = 0; format(reporttext[i], 30, "NULL"); }
	SendAdmins(COLOR_GREEN, "Administrator %s deleted all active reports.", 1, GetName(playerid));
	return 1; 
}	
CMD:ad(playerid, params[]) {
	if(adatad[playerid] >= 1) return SCM(playerid, -1, "Ai plasat deja un anunt.");
	if(PlayerInfo[playerid][pPnumber] < 1) return SCM(playerid, -1, "Nu ai telefon.");
	new anunt[120], string[144], hour, minute, second;
	gettime(hour, minute, second);
	if(hour == 01 || hour == 02 || hour == 03 || hour == 04 || hour == 05 || hour == 06 || hour == 07 || hour == 08) return SCM(playerid, -1, "Nu poti folosi aceasta comanda intre orele 01 - 09.");	
	if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, -1, "You didn't reach level 5.");
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 361.8299,173.6462,1008.3828) || IsPlayerInRangeOfPoint(playerid, 5.0, 361.8299,173.6462,1008.3828)) {
		if(GetPlayerCash(playerid) < 5000) return SCM(playerid, -1, " You don't have $5,000.");
		if(sscanf(params, "s[120]", anunt)) return SCM(playerid, -1, "Syntax: /ad [message]");
		format(string, sizeof string, "Ad by %s ({FFFFFF}%d{41d62a}): %s", GetName(playerid), PlayerInfo[playerid][pPnumber], anunt);
		SendAdmins(0x41d62aFF, string, 1);
		SendHelpers(0x41d62aFF, string, 1);
		SCM(playerid, COLOR_DARKPINK, "You paid the ad (30 seconds to published). The price is $5,000.");
		format(adtext[playerid], sizeof(string), string);
		adatad[playerid] = 1;
		timerptad[playerid] = defer seducedraqadu(playerid);
		GivePlayerCash(playerid, -5000);
	}
	else return SCM(playerid, -1, "You are not next to CNN business type, use /gps command.");	
	return 1; 
}
CMD:deletemyad(playerid, params[]) {
	if(adatad[playerid] < 1) return SCM(playerid, -1, "You don't have any active ad.");
	adatad[playerid] = 0;
	format(adtext[playerid], 30, "NULL");
	SCM(playerid, COLOR_DARKPINK, "Your ad has been deleted.");
	stop timerptad[playerid];
	return 1; 
}
CMD:da(playerid, params[]) {
	new id, reason[64];
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	if(sscanf(params, "us[64]", id, reason)) return SCM(playerid, -1, "Syntax: /da [name/playerid] [reason]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Acel player nu este conectat.");
	if(adatad[id] < 1) return SCM(playerid, -1, "Acel player nu a plasat un anunt.");
	SendAdmins(COLOR_PRINC, "(/da) {ffffff}%s deleted %s's ad with reason: %s.", 1, GetName(playerid), GetName(id), reason);
	SendHelpers(COLOR_PRINC, "(/da) {ffffff}%s deleted %s's ad with reason: %s.", 1, GetName(playerid), GetName(id), reason);
	SCMf(id, COLOR_DARKPINK, "Admin %s deleted your ad, reason: %s.", GetName(playerid), reason);
	format(adtext[id], 30, "NULL"); adatad[id] = 0;
	stop timerptad[id];
	return 1; 
}
function punecpfireman(playerid) {
	new type = random(4);
	switch(type) {
		case 0: {
			SetPlayerCheckpoint(playerid, 1525.83240, -1319.81030, 15.28489, 3.0);
			objectfireman[playerid] = CreatePlayerObject(playerid, 18688, 1525.83240, -1319.81030, 15.28489,   0.00000, 0.00000, 0.00000);
		}
		case 1: {	
			SetPlayerCheckpoint(playerid, 515.47253, -1472.03296, 14.45576, 3.0);
			objectfireman[playerid] = CreatePlayerObject(playerid, 18688, 515.47253, -1472.03296, 14.45576,   0.00000, 0.00000, 0.00000);
		}
		case 2: {
			SetPlayerCheckpoint(playerid, 1035.24512, -1927.28149, 13.00874, 3.0);
			objectfireman[playerid] = CreatePlayerObject(playerid, 18688, 1035.24512, -1927.28149, 13.00874,   0.00000, 0.00000, 0.00000);	
		}
		case 3: {
			SetPlayerCheckpoint(playerid, 2638.91895, -1977.28296, 13.07259, 3.0);
			objectfireman[playerid] = CreatePlayerObject(playerid, 18688, 2638.91895, -1977.28296, 13.07259,   0.00000, 0.00000, 0.00000);				
		}
		case 4: {
			SetPlayerCheckpoint(playerid, 1519.59363, -612.05383, 87.79057, 3.0);
			objectfireman[playerid] = CreatePlayerObject(playerid, 18688, 1519.59363, -612.05383, 87.79057,   0.00000, 0.00000, 0.00000);		
		}
	}
	CP[playerid] = 115;
	return 1; 
}		
CMD:hduty(playerid) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	switch(helperduty[playerid]) {
		case 0: {
			helperduty[playerid] = 1;
			SCM(playerid, COLOR_GREY, "Now you're on duty as a helper.");
		}
		case 1: {
			helperduty[playerid] = 0;
			SCM(playerid, COLOR_GREY, "Now you're not on duty as a helper.");
		}
	}
	return 1; 
} 	
CMD:n(playerid, params[]) {
	if(PlayerInfo[playerid][pNmute] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai mute pe /n.");
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece esti in staff.");
	if(adatn[playerid] == 1) return SCM(playerid, -1, "Deja ai o intrebare activa.");
	new question[100];
	if(sscanf(params, "s[100]", question)) return SCM(playerid, -1, "Syntax: /n [question]");
	SCM(playerid, -1, "Your question has been sent successfully.");
	SendHelpers(COLOR_PRINC, "[question from %s]:{ffffff} %s(/nre %d)", 1, GetName(playerid), question, playerid);
	format(questiontext[playerid], sizeof question, question);
	adatn[playerid] = 1;
	return 1; 
}	
CMD:nr(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	if(helperduty[playerid] == 0) return SCM(playerid, -1, "Nu esti on duty.");
	new answer[128], id;
	if(sscanf(params, "us[128]", id, answer)) return SCM(playerid, -1, "Syntax: /nr [name/playerid] [answer]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(adatn[id] == 0) return SCM(playerid, -1, "Acel player nu are o intrebare activa.");
	if(intrebareaccept[id] != playerid) return SCM(playerid, -1, "Deja, acel player este ajutat de altcineva.");
	SCMf(id, COLOR_PRINC, "* Answer from the helper %s: %s", GetName(playerid), answer);
	va_SendClientMessageToAll(COLOR_NEWBIE, "* Newbie %s ask: %s", GetName(id), questiontext[id]);
	va_SendClientMessageToAll(COLOR_NEWBIE, "* Helper %s answer: %s", GetName(playerid), answer);
	format(questiontext[id], 30, "NULL");
	adatn[id] = 0; intrebareaccept[id] = 0;
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `HelpedPlayers` = `HelpedPlayers` + '1' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", ""); 		
	PlayerInfo[playerid][pTokens] ++;
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Tokens` = `Tokens` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);				
	return 1; 
}		
CMD:questions(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	if(helperduty[playerid] == 0) return SCM(playerid, -1, "Nu esti on duty.");
	SCM(playerid, COLOR_YELLOW, "Active questions:");
	foreach(new i : Player) {
		if(strcmp(questiontext[i], "NULL", true)) SCMf(playerid, COLOR_YELLOW, "[question from %s]:{ffffff} %s (/nre %d)", GetName(i), questiontext[i], i);
	}
	return 1; 
}	

alias:ndelete("nd")
CMD:ndelete(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	if(helperduty[playerid] == 0) return SCM(playerid, -1, "Nu esti on duty.");
	new answer[100], id;
	if(sscanf(params, "us[100]", id, answer)) return SCM(playerid, -1, "Syntax: /ndelete [name/playerid] [answer]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(adatn[id] == 0) return SCM(playerid, -1, "Acel player nu are o intrebare activa.");
	if(intrebareaccept[id] != playerid) return SCM(playerid, -1, "Acel player nu are o intrebare acceptata de tine.");
	SCMf(id, COLOR_PRINC, "* Answer from the helper %s: %s", GetName(playerid), answer);
	SendAdmins(COLOR_GREY, "(/ndelete) %s replied to %s: %s", 1, GetName(playerid), GetName(id), answer);
	SendHelpers(COLOR_GREY, "(/ndelete) %s replied to %s: %s", 1, GetName(playerid), GetName(id), answer);
	format(questiontext[id], 30, "NULL");
	adatn[id] = 0; intrebareaccept[id] = 0;
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `HelpedPlayers` = `HelpedPlayers` + '1' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", "");
	PlayerInfo[playerid][pTokens] ++;
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Tokens` = `Tokens` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);					
	return 1; 
}	
CMD:nreport(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);
	new id, string[128];
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /nreport [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(adatn[id] < 1) return SCM(playerid, -1, "Acel player nu are o intrebare activa.");
	if(helperduty[playerid] == 0) return SCM(playerid, -1, "Nu esti on duty.");
	format(string, sizeof string, "* Question from %s: %s", GetName(id), questiontext[id]);
	format(reporttext[id], sizeof string, string);
	format(questiontext[id], 30, "NULL");
	SendAdmins(COLOR_SKEMA2, "* %s has marked %s's question as a report.", 1, GetName(playerid), GetName(id));
	SendHelpers(COLOR_SKEMA2, "* %s has marked %s's question as a report.", 1, GetName(playerid), GetName(id));
	reportdat[id] = 1; adatn[id] = 0; intrebareaccept[id] = 0;
	return 1; 
}
CMD:acceptn(playerid, params[]) {
	if(PlayerInfo[playerid][pHelper] < 1 && PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly); 
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /nre [name/playerid]");
	if(adatn[id] < 1) return SCM(playerid, -1, "Acel player nu are o intrebare activa.");
	if(intrebareaccept[id] >= 1) return SCM(playerid, -1, "Deja, acel player este ajutat de altcineva.");
	if(helperduty[playerid] == 0) return SCM(playerid, -1, "Nu esti on duty.");
	SCMf(playerid, COLOR_GREY, "You've accepted %s's question.", GetName(id));
	intrebareaccept[id] = playerid;
	return 1; 
}	
alias:acceptn("nre")
function paintspawn(playerid) {
	new randompula = random(6);
	switch(randompula) {
		case 0: SetPlayerPosEx(playerid, -1132.5438,1095.1453,1345.7958);	
		case 1: SetPlayerPosEx(playerid, -1132.7791,1078.4966,1353.4447);	
		case 2: SetPlayerPosEx(playerid, -975.2333,1089.5105,1344.9728);	
		case 3: SetPlayerPosEx(playerid, -1041.9192,1026.2943,1343.2273);	
		case 4: SetPlayerPosEx(playerid, -1030.2020,1074.6399,1343.2925);
		case 5: SetPlayerPosEx(playerid, -1081.7600,1044.2140,1343.7288);				
	}
	SetPlayerSkin(playerid, 250); SetPlayerInterior(playerid, 10);
	return 1; 
}
function showpainttd(playerid) {
	PlayerTextDrawShow(playerid, PaintTD[playerid]);
	new string[64];
	if(painttime > 180) format(string, 64, "Paintball round starts in ~b~~h~%d seconds", painttime - 180);
	else format(string, 64, "Paintball round ends in ~b~~h~%d seconds", painttime);
	PlayerTextDrawSetString(playerid, PaintTD[playerid], string);
	return 1; 
}	
function SendPaintMessage(color, const string[]) {
	foreach(new i : PlayerPaint) SendClientMessage(i, color, string);
	return 1; 
}
CMD:paint(playerid, parmas[]) {
	if(Iter_Contains(PlayerPaint, playerid)) return SCM(playerid, -1, "Deja te afli in paint, foloseste /paintleave.");
	if(PlayerInfo[playerid][pGunLic] < 1) return SCM(playerid, -1, "Nu ai licenta gun.");
	if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, -1, "Nu ai level 5.");
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti intra deoarece ai wanted.");
	if(OnDuty[playerid] == 1) return SCM(playerid, -1, "Nu poti intra deoarece esti on-duty.");
	if(GetPlayerCash(playerid) < 50000) return SCM(playerid, -1, "Nu ai 50,000$.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1412.0887,-1699.8264,13.5395)) return SCM(playerid, -1, "Nu te afli in locatia corespunzatoare.");
	if(soexpire[playerid] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai fost somat recent de un politist.");
	GivePlayerCash(playerid, -50000);
	format(mesajsmek, sizeof mesajsmek, "%s has joined the paintball arena.", GetName(playerid));
	SendPaintMessage(COLOR_PRINC, mesajsmek);
	Iter_Add(PlayerPaint, playerid);
	SpawnPlayer(playerid);
	paintkills[playerid] = 0;
	if(Iter_Count(PlayerPaint) == 2 && painttime == -1) painttime = 195;
	return 1; 
}
CMD:paintleave(playerid, params[]) {
	if(!Iter_Contains(PlayerPaint, playerid)) return SCM(playerid, -1, "Nu te afli in arena paintball.");
	format(mesajsmek, sizeof mesajsmek, "%s has left the paintball arena.", GetName(playerid));
	SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
	SetPlayerPosEx(playerid, 1412.0887,-1699.8264,13.5395);
	SendPaintMessage(COLOR_PRINC, mesajsmek);
	Iter_Remove(PlayerPaint, playerid);
	PlayerTextDrawHide(playerid, PaintTD[playerid]);
	ResetPlayerWeaponsEx(playerid);
	paintkills[playerid] = 0;
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
	SetPlayerHealthEx(playerid, 100);
	for (new i = 0; i != 5; ++i) SendDeathMessageToPlayer(playerid, 1001, 1001, 1001);
	return 1; 
}
CMD:tog(playerid, parmas[]) {
	new string1[20], string2[20], string3[20], string4[20], string5[20], string7[20], string8[20];
	gString[0] = (EOS);
	if(toglc[playerid] == 0) format(string1, 20, "{00FF00}ON");
	else format(string1, 20, "{7E689B}OFF");
	if(gNews[playerid] == 0) format(string2, 20, "{00FF00}ON");
	else format(string2, 20, "{7E689B}OFF");
	if(gFam[playerid] == 0) format(string3, 20, "{00FF00}ON");
	else format(string3, 20, "{7E689B}OFF");
	if(HidePM[playerid] == 1) format(string4, 20, "{00FF00}ON");
	else format(string4, 20, "{7E689B}OFF");
	if(seeClanChat[playerid] == 1) format(string5, 20, "{00FF00}ON");
	else format(string5, 20, "{7E689B}OFF");
	if(togvip[playerid] == 0) format(string7, 20, "{00FF00}ON");
	else format(string7, 20, "{7E689B}OFF");
	if(togdamage[playerid] == 0) format(string8, 20, "{00FF00}ON");
	else format(string8, 20, "{7E689B}OFF");
	format(gString, 256, "%sClan\t%s\nWhisper\t%s\nFaction\t%s\nReporter News\t%s\nLeader\t%s\nVIP\t%s\nDamage Informer\t%s", gString, string5, string4, string3, string2, string1, string7, string8);
	format(gString, 256, "Chat\tStatus\n%s", gString);
	ShowPlayerDialogEx(playerid, DIALOG_TOG, DIALOG_STYLE_TABLIST_HEADERS, "Chat Options", gString, "Select", "Close");
	return 1; 
}   
CMD:go(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted.");
	ShowPlayerDialogEx(playerid, DIALOG_GO, DIALOG_STYLE_LIST, "SERVER: Teleport locations", "Event Arena\nChiliad\nPaint\nAirport LV\nAdmin HQ\nLos Santos\nLas Venturas\nDealership\nStrip club\nPleasure domes", "Select", "Exit");
	return 1; 
}	
CMD:friends(playerid) {
	cmd_friends(playerid);
    return true;
}
function cmd_friends(playerid) {
	if(barcadelay[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 5 secunde.");
    new query[128]; format(query, 128, "SELECT * FROM `friends` WHERE `pid` = '%d'", PlayerInfo[playerid][pSQLID]);
    new Cache: frlist = mysql_query(SQL, query);
    new fid, name[25], mid;
    gString[0] = (EOS);
    for(new i, j = cache_get_row_count (); i != j; ++i) {
        fid = cache_get_field_content_int(i, "fid");
        cache_get_field_content(i, "name", name);
        SelFriend[playerid][mid] = fid;
        format(gString, sizeof(gString), "%s{FFFFFF}%s\n", gString, name);
        mid++;     
    }
    cache_delete(frlist);
    format(gString, sizeof(gString), "{ff8b2d}[+] {ff8b2d}Add friend\n%s", gString);
    ShowPlayerDialogEx(playerid, DIALOG_FRIENDS, DIALOG_STYLE_LIST, "Your friends", gString, "Manage", "Cancel");
    barcadelay[playerid] = 5;
	return 1;
}    
CMD:hit(playerid, params[]) {
	if(PlayerInfo[playerid][pEscapePoints] < 10) return SCM(playerid, -1, "Nu ai 10 escape points.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 285.2640,1877.5803,17.6406) && !IsPlayerInRangeOfPoint(playerid, 5.0, 213.7711,1799.1077,17.6406) && !IsPlayerInRangeOfPoint(playerid, 5.0, 177.6988,1940.9779,18.0813) &&
		!IsPlayerInRangeOfPoint(playerid, 5.0, 97.0143,1888.0488,17.8985)) return SCM(playerid, -1, "Nu esti in locatia potrivita.");
	if(escapedat[playerid] == 1) return SCM(playerid, -1, "Asteapta cateva secunde pentru a sapa din nou.");
	GivePlayerWeaponEx(playerid, 6, 69);	
	TogglePlayerControllable(playerid, 0);
	OnePlayAnim(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	defer timerescape(playerid);
	escapedat[playerid] = 1;
	return 1; 
}
timer timerescape[5000](playerid) {
	escapeprogress[playerid] += 10;	
	if(escapeprogress[playerid] <= 90) {
		SCMf(playerid, COLOR_LIGHTBLUE, "* Gardul este acum %d la suta distrus. Continua sa lovesti...", escapeprogress[playerid]);
		escapedat[playerid] = 0;
		ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid);
	}	
	if(escapeprogress[playerid] == 100) {
		SCM(playerid, COLOR_LIGHTBLUE, "* Gardul a fost doborat cu succes. Ai fost teleportat intr-o zona sigura.");
		SCM(playerid, COLOR_LIGHTBLUE, "* Cauta cel mai apropiat Binco Store si schimba-ti hainele pentru a scapa de politie, ai grija sa nu mori!");
		SetPlayerWantedLevel(playerid, 6); pUpdateInt(playerid, "WantedLevel", 6);
		PlayerTextDrawShow(playerid, WantedText[playerid]);
		new smecherie[64];
		format(smecherie, 64, "WANTED SCADE IN: ~r~%d MINUTE", wantedlost[playerid]/60+1);
		PlayerTextDrawSetString(playerid, WantedText[playerid], smecherie);
		WantedPoints[playerid] = 12;
		SetPlayerCriminal(playerid, -1, "escape prison");
		SetPlayerPosEx(playerid, -247.7240,2196.9680,59.0594);
		SetPlayerSkin(playerid, 62);
		escapeprogress[playerid] = 0; 
		escapedat[playerid] = 2;
		ClearAnimations(playerid);
		ResetPlayerWeaponsEx(playerid); ResetPlayerWeapons(playerid);
		PlayerInfo[playerid][pJailed] = 0; PlayerInfo[playerid][pJailTime] = 0;
		pUpdateInt(playerid, "Jailed", 0); pUpdateInt(playerid, "JailTime", 0);
		PlayerTextDrawHide(playerid, Jailtime[playerid]);
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pEscapePoints] -= 10; pUpdateInt(playerid, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
	}
	TogglePlayerControllable(playerid, 1);
	return 1; 
}
function GetWeaponShotRate(weaponid) {
    switch(weaponid) {
        case 31: return 10;
        case 24: return 2;
        case 22: return 6;
        case 23: return 3;
        case 25: return 1;
        case 26: return 7;
        case 27: return 4;
        case 28: return 18;
        case 29: return 11;
        case 30: return 10;
        case 32: return 18;
        case 33: return 3;
        case 34: return 3;
        case 38: return 56;
    }
    return 0; }
forward OnIncomingConnection(playerid, ip_address[], port);
public OnIncomingConnection(playerid, ip_address[], port) {
	mysql_format(SQL, gString, sizeof(gString), "SELECT * FROM `ban_ip` WHERE `IP`='%s' LIMIT 1", ip_address);
	mysql_tquery(SQL, gString, "check_banned_ip", "i", playerid);
	return 1;
}
function check_banned_ip(playerid) {
	if(cache_get_row_count()) {
		SendClientMessage(playerid, COLOR_WHITE, "IP-ul tau se afla in lista serverului de IP-uri blocate.");
		SendClientMessage(playerid, COLOR_WHITE, "Pentru orice problema puteti face un ticket pe panel-ul nostru 'panel.redtimes.eu'.");
		return Kick(playerid);
	}
	return 1;
}
CMD:banip(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
	new id, ip[20];
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /banip [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	GetPlayerIp(id, ip, sizeof ip);
	format(mesajsmek, sizeof mesajsmek, "banip %s", ip);
	SendRconCommand(mesajsmek);
	SendAdmins(COLOR_PRINC, "(/banip) {ffffff}%s has banned IP %s at player %s.", 1, GetName(playerid), ip, GetName(id));
	SCM(playerid, -1, "Done, ip banned.");
	return 1; 
}	
CMD:jailmenu(playerid, params[]) {
	if(PlayerInfo[playerid][pJailed] >= 2) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece te afli in admin jail.");
	if(PlayerInfo[playerid][pJailTime] < 1) return SCM(playerid, -1, "Nu te afli in jail.");
	ShowPlayerDialogEx(playerid, DIALOG_JAIL, DIALOG_STYLE_LIST, "SERVER: Jail", "Escape (10 points)\nFree (25,000,000$)", "Select", "Close");
	return 1; 
}	
CMD:free(playerid, params[]) {
	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
	if(PlayerInfo[playerid][pRob] < 10) return SCM(playerid, -1, "Ai nevoie de minim 10 free points.");
	new bani = 15000*PlayerInfo[playerid][pRob];
	format(mesajsmek, sizeof mesajsmek, "Doresti sa vinzi %d free points pentru $%s?", PlayerInfo[playerid][pRob], FormatNumber(bani));
	ShowPlayerDialogEx(playerid, DIALOG_FREE, DIALOG_STYLE_MSGBOX, "Selling free points", mesajsmek, "Yes", "No");
	return 1; 
}		
CMD:cbug(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /cbug [name/playerid]");
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	PlayerInfo[id][pGunLic] = 0; 
	PlayerInfo[id][pGunLicSuspend] = 5; pUpdateInt(id, "GunLic", 0);
	pUpdateInt(id, "GunLicSuspend", 5);
	SendAdmins(COLOR_PRINC, "(/cbug) {ffffff}%s confiscated and suspended his %s weapons license for 5 hours.", 1, GetName(playerid), GetName(id));
	SCMf(id, COLOR_GREY, "%s ti-a confiscat si suspendat licenta de arme pentru 5 ore.", GetName(playerid));
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`reason`,`playername`,`givername`,`actiontime`,`unixtime`) VALUES ('%d','%d','7','c-bug','%s','%s','0','%d')", PlayerInfo[id][pSQLID],PlayerInfo[playerid][pSQLID],PlayerInfo[id][pNormalName],PlayerInfo[playerid][pNormalName],gettime());
	mysql_tquery(SQL,gString);	
	return 1; 
}	
CMD:edithouse(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
	new house, action[20], value;
	if(sscanf(params, "is[20]i", house, action, value)) return SCM(playerid, -1, "Syntax: /edithouse [id house] [action: move, price, level, owned, owner(id)] [value (move = 1)]");
	if(house < 1 || house > 100) return SCM(playerid, -1, "Invalid id house.");
	if(value < 0 || value > 1000000000) return SCM(playerid, -1, "Invalid value.");
	gString[0] = (EOS);
	if(strcmp(action, "move", true) == 0) {
		new Float: x, Float: y, Float: z; GetPlayerPos(playerid, x, y, z);
		HouseInfo[house][hEntrancex] = x; HouseInfo[house][hEntrancey] = y; HouseInfo[house][hEntrancez] = z;	
		mysql_format(SQL, gString, 144, "UPDATE `houses` SET `Entrancex` = '%f', `Entrancey` = '%f', `Entrancez` = '%f' WHERE `ID` = '%d' LIMIT 1", x, y, z, house);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_DARKPINK, "You have edited the house %d position in %f, %f, %f.", house, x, y, z);
		SendAdmins(COLOR_PRINC, "(/edithouse) {ffffff}%s has edited the house %d position in %f, %f, %f.", 1, GetName(playerid), house, x, y, z);
	}
	else if(strcmp(action, "price", true) == 0) {
		HouseInfo[house][hPrice] = value; HouseInfo[house][hValue] = value;
		mysql_format(SQL, gString, 144, "UPDATE `houses` SET `Value` = '%d', `Prices` = '%d' WHERE `ID` = '%d' LIMIT 1", value, value, house);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_DARKPINK, "You have edited the house %d price in $%s.", house, FormatNumber(value));
		SendAdmins(COLOR_PRINC, "(/edithouse) {ffffff}%s has edited the house %d price in $%s.", 1, GetName(playerid), house, FormatNumber(value));
	}
	else if(strcmp(action, "level", true) == 0) {
		HouseInfo[house][hLevel] = value;
		mysql_format(SQL, gString, 144, "UPDATE `houses` SET `Level` = '%d' WHERE `ID` = '%d' LIMIT 1", value, house);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_DARKPINK, "You have edited the house %d level in %d.", house, value);
		SendAdmins(COLOR_PRINC, "(/edithouse) {ffffff}%s has edited the house %d level in %d.", 1, GetName(playerid), house, value);
	}
	else if(strcmp(action, "owned", true) == 0) {
		HouseInfo[house][hOwned] = value;
		if(value == 0) {
			strmid(HouseInfo[house][hOwner], "AdmBot", 0, 25, 255);
			mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Owner` = 'AdmBot' WHERE `ID` = '%d' LIMIT 1", house);
			mysql_tquery(SQL, gString);
			mysql_format(SQL, gString, 256, "UPDATE `users` SET `House` = '999' WHERE `House` = '%d' LIMIT 1", house);
			mysql_tquery(SQL, gString);
		}			
		mysql_format(SQL, gString, 144, "UPDATE `houses` SET `Owned` = '%d' WHERE `ID` = '%d' LIMIT 1", value, house);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_DARKPINK, "You have edited the house %d owned in %d [0 = false, 1 = true].", house, value);
		SendAdmins(COLOR_PRINC, "(/edithouse) {ffffff}%s has edited the house %d owned in %d [0 = false, 1 = true].", 1, GetName(playerid), house, value);
	}
	else if(strcmp(action, "owner", true) == 0) {
		if(!IsPlayerConnected(value)) return SCM(playerid, -1, "Player not connected.");
		strmid(HouseInfo[house][hOwner], PlayerInfo[value][pNormalName], 0, 25, 255);
		PlayerInfo[value][pPhousekey] = house; PlayerInfo[value][pRented] = -1;
		mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Owner` = '%s' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[value][pNormalName], house);
		mysql_tquery(SQL, gString);	
		pUpdateInt(value, "House", house);
		SCMf(playerid, COLOR_DARKPINK, "You have edited the house %d owner in %s.", house, GetName(value));
		SendAdmins(COLOR_PRINC, "(/edithouse) {ffffff}%s has edited the house %d owner in %s.", 1, GetName(playerid), house, GetName(value));
	}
	OnPropTextdrawUpdate(1, house); 
	return 1; 
}
CMD:crates(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece esti intr-un vehicul.");
	if(sim[playerid] == 1 || mega[playerid] == 1 || special[playerid] == 1 || xcrate[playerid] == 1 || timecrate[playerid] == 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda in acest moment."); 
	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1247.0133,-871.0790,42.8828)) return SCM(playerid, -1, "Nu te afli in locatia corespunzatoare, foloseste comanda /gps - other locations - crates."); 
	gString[0] = (EOS);
	format(gString, 256, "Crate Type\tAmount\n");
	if(PlayerInfo[playerid][pTimeCrate] >= 1) format(gString, sizeof(gString), "%sLowest\t%d\nMiddle\t%d\nMillenium\t%d\nMagistrate\t%d\nReward\topen in %d payday", gString, PlayerInfo[playerid][pMiniCrate], PlayerInfo[playerid][pBigCrate], PlayerInfo[playerid][pGigantCrate], PlayerInfo[playerid][pXcrate], PlayerInfo[playerid][pTimeCrate]);
	if(PlayerInfo[playerid][pTimeCrate] < 1) format(gString, sizeof(gString), "%sLowest\t%d\nMiddle\t%d\nMillenium\t%d\nMagistrate\t%d\nReward\topen now", gString, PlayerInfo[playerid][pMiniCrate], PlayerInfo[playerid][pBigCrate], PlayerInfo[playerid][pGigantCrate], PlayerInfo[playerid][pXcrate]);
	ShowPlayerDialogEx(playerid, DIALOG_CRATES, DIALOG_STYLE_TABLIST_HEADERS, "Choose a crate", gString, "Select", "Exit");
	return 1; 
}	
function loadcratetextdraw(playerid) {
	for(new i; i < 4; i++) PlayerTextDrawShow(playerid, cratetextdraw[playerid][i]);	
	new castig = random(7);
	if(sim[playerid] == 1) {
		switch(castig) {
			case 1: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "5,000,000$");
			case 2: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "70,000,000$");
			case 3: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "5 respect");
			case 4: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "30 rob");
			case 5: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "x1 vouch (n)");
			case 6: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "20 PP");
			case 7: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "1x hidden");
		}	
	}	
	if(mega[playerid] == 1) {
		switch(castig) {
			case 1: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "5,000,000$");
			case 2: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "100,000,000$");
			case 3: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "70 PP");
			case 4: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "2x hideen");
			case 5: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "10 drugs");
			case 6: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "2x vouch (n)");
			case 7: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "10h jboost");
		}		
	}
	if(special[playerid] == 1) {
		switch(castig) {
			case 1: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "50kk");
			case 2: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "125kk");
			case 3: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "250pp");
			case 4: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "1x level up");
			case 5: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "voucher [p]");
			case 6: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "25h joboost");
		}		
	}
	if(xcrate[playerid] == 1) {
		switch(castig) {
			case 1: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "500pp");
			case 2: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "350kk");
			case 3: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "x2 vouch (p)");
			case 4: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "200h jobboost");
			case 5: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "x2 level up");
			case 6: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "x5 vouch (n)");

		}		
	} 
	if(timecrate[playerid] == 1) {
		switch(castig) {
			case 1: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "7,000,000$");
			case 2: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "rob points");
			case 3:	PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "escape points");
			case 4:	PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "5 PP"); 
			case 5: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "nimic");
			case 6: PlayerTextDrawSetString(playerid, cratetextdraw[playerid][3], "gift points");
		}
	}
	return 1; 
}
function cratecastig(playerid) {
	new castig = random(76);
	if(sim[playerid] == 1) {
		switch(castig) {
			case 0..10: {
				GivePlayerCash(playerid, 5000000);
				SCM(playerid, COLOR_RED, "{4db2ff}Lowest Crate:{FFFFFF} Ai castigat 5,000,000$.");
			}	
			case 11..21: {
				GivePlayerCash(playerid, 70000000);
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {4db2ff}Lowest Crate{FFFFFF} si a primit {5eff00}$70,000,000! {4db2ff}))", GetName(playerid));
			} 
			case 22..32: {
				PlayerInfo[playerid][pExp] += 5; pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);
				SCM(playerid, COLOR_RED, "{f6ff4d}Lowest Crate:{FFFFFF} Ai castigat 5 respect points.");
				checkLevelProgress(playerid);
			}
			case 33..43: {
				PlayerInfo[playerid][pRob] += 30; pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
				SCM(playerid, COLOR_RED, "{f6ff4d}Lowest Crate:{FFFFFF} Ai castigat 30 rob points.");
			}
			case 44..54: {
				PlayerInfo[playerid][pNormalVoucher] += 1; pUpdateInt(playerid, "NormalVoucher", PlayerInfo[playerid][pNormalVoucher]);
				SCM(playerid, COLOR_RED, "{f6ff4d}Lowest Crate:{FFFFFF} Ai castigat un voucher normal.");
			}
			case 55..65: {
				PlayerInfo[playerid][pPremiumPoints] += 20; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				SCM(playerid, COLOR_RED, "{f6ff4d}Lowest Crate:{FFFFFF} Ai castigat 20 premium points. Felicitari!");
			}
			case 66..76: {
				PlayerInfo[playerid][pHiddenColor] += 1; pUpdateInt(playerid, "HiddenColor", PlayerInfo[playerid][pHiddenColor]);
				SCM(playerid, COLOR_RED, "{f6ff4d}Lowest Crate:{ffffff} Ai castigat o culoare hidden. Felicitari!");
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {f6ff4d}Lowest Crate{FFFFFF} si a primit {5eff00}culoare hidden! {4db2ff}))", GetName(playerid));	
			}
		}
	}
	if(mega[playerid] == 1) {
		switch(castig) {
			case 0..10: {
				GivePlayerCash(playerid, 5000000);
				SCM(playerid, COLOR_RED, "{4dff7a}Middle Crate:{ffffff} Ai castigat 5,000,000$.");
			}	
			case 11..21: {
				GivePlayerCash(playerid, 100000000);
				SCM(playerid, COLOR_RED, "{4dff7a}Middle Crate:{ffffff} Ai castigat 100,000,000$.");
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {4dff7a}Middle Crate{FFFFFF} si a primit {5eff00}$100,000,000!{4db2ff}))", GetName(playerid));
			}
			case 22..32: {
				PlayerInfo[playerid][pPremiumPoints] += 70; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				SCM(playerid, COLOR_RED, "{4dff7a}Middle Crate:{ffffff} Ai castigat 70 premium points.");
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {4dff7a}Middle Crate{FFFFFF} si a primit {5eff00}70 puncte premium! {4db2ff}))", GetName(playerid));
			}
			case 33..43: {
				PlayerInfo[playerid][pHiddenColor] += 2; pUpdateInt(playerid, "HiddenColor", PlayerInfo[playerid][pHiddenColor]);
				SCM(playerid, COLOR_RED, "{4dff7a}Middle Crate:{ffffff} Ai castigat 2 culori hidden.");
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {4dff7a}Middle Crate{FFFFFF} si a primit {5eff00}hidden color[x2]! {4db2ff}))", GetName(playerid));
			}
			case 44..54: {
				PlayerInfo[playerid][pDrugs] += 10; pUpdateInt(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
				SCM(playerid, COLOR_RED, "{4dff7a}Middle Crate:{ffffff} Ai castigat 10 drugs.");
			}
			case 55..65: {
				PlayerInfo[playerid][pNormalVoucher] += 2; pUpdateInt(playerid, "NormalVoucher", PlayerInfo[playerid][pNormalVoucher]);
				SCM(playerid, COLOR_RED, "{4dff7a}Middle Crate:{ffffff} Ai castigat doua vouchere normale.");
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {4dff7a}Middle Crate{FFFFFF} si a primit {5eff00}normal voucher[x2]! {4db2ff}))", GetName(playerid));
			}
			case 66..76: {
				SCM(playerid, COLOR_RED, "{4dff7a}Middle Crate:{ffffff} Ai castigat 10 ore de jobboost. Felicitari!");
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {4dff7a}Middle Crate{FFFFFF} si a primit {5eff00}joob boost[x10h]! {4db2ff}))", GetName(playerid));
			}
		}
	}		
	if(special[playerid] == 1) {
		new castigbun = random(65);
		switch(castigbun) {
			case 0..10: {
				GivePlayerCash(playerid, 50000000);
				SCM(playerid, COLOR_RED, "{ff8d03}Millenium Crate:{ffffff} Ai castigat 50,000,000$.");
			}
			case 11..21: {
				GivePlayerCash(playerid, 125000000);
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ff8d03}Millenium Crate{FFFFFF} si a primit {5eff00}$125,000,000! {4db2ff}))", GetName(playerid));
			}
			case 22..32: {
				PlayerInfo[playerid][pPremiumPoints] += 250; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ff8d03}Millenium Crate{FFFFFF} si a primit {5eff00}250 puncte premium! {4db2ff}))", GetName(playerid));
			}
			case 33..43: {
				PlayerInfo[playerid][pLevel] ++; pUpdateInt(playerid, "Level", PlayerInfo[playerid][pLevel]); SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ff8d03}Millenium Crate{FFFFFF} si a primit {5eff00}level up! {4db2ff}))", GetName(playerid));
				checkLevelProgress(playerid);
			}
			case 44..54: {
				PlayerInfo[playerid][pPremiumVoucher] += 1; pUpdateInt(playerid, "PremiumVoucher", PlayerInfo[playerid][pPremiumVoucher]);
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ff8d03}Millenium Crate{FFFFFF} si a primit {5eff00}premium voucher[x1]! {4db2ff}))", GetName(playerid));
			}
			case 55..65: {
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ff8d03}Millenium Crate{FFFFFF} si a primit {5eff00}job boost[x25h]! {4db2ff}))", GetName(playerid));
			}
		}
	}
	if(xcrate[playerid] == 1) {
		new castigbun = random(66);
		switch(castigbun) {
			case 0..10: {
				PlayerInfo[playerid][pPremiumPoints] += 500; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				va_SendClientMessageToAll(COLOR_PRINC, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ad0303}Magistrate Crate{FFFFFF} si a primit {5eff00}500 puncte premium! {4db2ff}))", GetName(playerid));
			}
			case 11..21: {
				GivePlayerCash(playerid, 350000000);
				SCM(playerid, COLOR_RED, "{ad0303}Magistrate Crate:{ffffff} Ai castigat 350,000,000$.");
			}
			case 22..32: {
				PlayerInfo[playerid][pPremiumVoucher] += 2; pUpdateInt(playerid, "PremiumVoucher", PlayerInfo[playerid][pPremiumVoucher]);
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ad0303}Magistrate Crate{FFFFFF} si a primit {5eff00}premium voucher[x2]! {4db2ff}))", GetName(playerid));
			}
			case 33..43: {
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ad0303}Magistrate Crate{FFFFFF} si a primit {5eff00}job boost[x200h]! {4db2ff}))", GetName(playerid));
			}
			case 44..54: {
				PlayerInfo[playerid][pLevel] += 2; pUpdateInt(playerid, "Level", PlayerInfo[playerid][pLevel]); SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ad0303}Magistrate Crate{FFFFFF} si a primit {5eff00}level up[x2]! {4db2ff}))", GetName(playerid));
				checkLevelProgress(playerid);
			}
			case 55..65: {
				PlayerInfo[playerid][pNormalVoucher] += 5; pUpdateInt(playerid, "NormalVoucher", PlayerInfo[playerid][pNormalVoucher]);
				va_SendClientMessageToAll(COLOR_RED, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis {ad0303}Magistrate Crate{FFFFFF} si a primit {5eff00}normal voucher[x5]! {4db2ff}))", GetName(playerid));
			}
		}
	}
	if(timecrate[playerid] == 1) {
		new skemacastig = random(40);
		switch(skemacastig) {
			case 0..8: {
				GivePlayerCash(playerid, 7000000);
				SCM(playerid, COLOR_SKEMA2, "Reward Crate: Ai castigat 7,000,000$.");
			}
			case 9..15: {
				PlayerInfo[playerid][pRob] += 10; pUpdateInt(playerid, "Rob", PlayerInfo[playerid][pRob]);
				SCM(playerid, COLOR_SKEMA2, "Reward Crate: Ai castigat 10 puncte de rob.");
			}
			case 16..22: {
				PlayerInfo[playerid][pEscapePoints] += 10; pUpdateInt(playerid, "EscapePoints", PlayerInfo[playerid][pEscapePoints]);
				SCM(playerid, COLOR_SKEMA2, "Reward Crate: Ai castigat 10 puncte de evadare."); 
			}
			case 23..25: {
				PlayerInfo[playerid][pPremiumPoints] += 5; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
				SCM(playerid, COLOR_SKEMA2, "Reward Crate: Ai castigat 5 puncte premium. Felicitari!");
				va_SendClientMessageToAll(COLOR_SKEMA2, "{4db2ff}((Crate Info:{FFFFFF} %s a deschis Reward Crate si a primit {5eff00}5 puncte premium! {4db2ff}))", GetName(playerid));
			}
			case 26..33: {
				PlayerInfo[playerid][pGems] += 70; pUpdateInt(playerid, "Gems", PlayerInfo[playerid][pGems]);
				SCM(playerid, COLOR_SKEMA2, "Reward Crate: Nu ai avut noroc si ai deschis o cutie goala");
			}
			case 34..40: {
				cratecastig(playerid);
			}
		}	
	}
	sim[playerid] = 0; mega[playerid] = 0; special[playerid] = 0; xcrate[playerid] = 0; timecrate[playerid] = 0;
	for(new i; i < 4; i++) PlayerTextDrawHide(playerid, cratetextdraw[playerid][i]);
	return 1; 
}
CMD:speed(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 2) return SCM(playerid, -1, AdminOnly);
	switch(SpeedBoost[playerid]) {
		case 0: {
			SpeedBoost[playerid] = 1;
			SCM(playerid, -1, "Speed enabled.");
		}
		case 1: {
			SpeedBoost[playerid] = 0;
			SCM(playerid, -1, "Speed disabled.");

		}
	}
	return 1; 
}
stock GetFactionMembers(fid) {
	new string[128], Cache: Result, Get[2];
	format(string, 128, "SELECT `Member` FROM `users` WHERE `Member` = %d", fid);
	Result = mysql_query(SQL, string);
	cache_get_data(Get[0], Get[1], SQL);
	cache_delete(Result);
	return Get[0]; }
function givesalariu(playerid) {
	switch(PlayerInfo[playerid][pRank]) {
		case 1: GivePlayerCash(playerid, 100000), SCMf(playerid, COLOR_PRINC, "Ai primit suma de 100,000$ deoarece faci parte din factiunea %s (rank %d).", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank]);
		case 2: GivePlayerCash(playerid, 250000), SCMf(playerid, COLOR_PRINC, "Ai primit suma de 250,000$ deoarece faci parte din factiunea %s (rank %d).", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank]);
		case 3: GivePlayerCash(playerid, 350000), SCMf(playerid, COLOR_PRINC, "Ai primit suma de 350,000$ deoarece faci parte din factiunea %s (rank %d).", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank]);
		case 4: GivePlayerCash(playerid, 500000), SCMf(playerid, COLOR_PRINC, "Ai primit suma de 500,000$ deoarece faci parte din factiunea %s (rank %d).", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank]);
		case 5: GivePlayerCash(playerid, 700000), SCMf(playerid, COLOR_PRINC, "Ai primit suma de 700,000$ deoarece faci parte din factiunea %s (rank %d).", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank]);
		case 6: GivePlayerCash(playerid, 850000), SCMf(playerid, COLOR_PRINC, "Ai primit suma de 850,000$ deoarece faci parte din factiunea %s (rank %d).", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank]);
		case 7: GivePlayerCash(playerid, 1000000), SCMf(playerid, COLOR_PRINC, "Ai primit suma de 1,000,000$ deoarece faci parte din factiunea %s (rank %d).", NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank]);
	}
	return 1; 
}	
CMD:buycrate(playerid, params[]) {
 	if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1247.0133,-871.0790,42.8828)) return SCM(playerid, -1, "Nu te afli in locatia corespunzatoare, foloseste comanda /gps - other locations - crates");
 	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1236.8131,-869.3061,42.8828)) return ShowPlayerDialogEx(playerid, DIALOG_SIM, DIALOG_STYLE_LIST, "Lowest Crate", "Buy this crate for $50,000,000\nBuy this crate for 50 premium points", "Buy", "Cancel");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1242.9139,-867.8486,42.8828)) return ShowPlayerDialogEx(playerid, DIALOG_MEGA, DIALOG_STYLE_LIST, "Middle Crate", "Buy this crate for $65,000,000\nBuy this crate for 65 premium points", "Buy", "Cancel");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1248.2958,-866.6432,42.8828)) return ShowPlayerDialogEx(playerid, DIALOG_SPECIAL, DIALOG_STYLE_LIST, "Millenium Crate", "Buy this crate for $150,000,000\nBuy this crate for 150 premium points", "Buy", "Cancel");
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1254.3928,-865.2795,42.8828)) return ShowPlayerDialogEx(playerid, DIALOG_XCRATE, DIALOG_STYLE_LIST, "Magistrate Crate", "Buy this crate for $450,000,000\nBuy this crate for 450 premium points", "Buy", "Cancel");		
	return 1; 
}
CMD:buyparachute(playerid, params[]) {
 	if(!IsPlayerInRangeOfPoint(playerid, 10.0, -2231.9773,-1734.4346,480.8744)) return SCM(playerid, -1, "Nu esti pe muntele chilliad.");
 	if(GetPlayerCash(playerid) < 100000) return SCM(playerid, -1, "Ai nevoie de minim 100,000$.");
	sendNearbyMessage(playerid, 50.0, COLOR_PURPLE, "* %s bought a parachute.", GetName(playerid));
	GivePlayerCash(playerid, -100000);
	GivePlayerWeaponEx(playerid, 46, 1);
	return 1; 
}
//CMD:buysanta(playerid, params[]) {
//	if(PlayerInfo[playerid][pSantaHat] >= 1) return SCM(playerid, -1, "Ai deja o caciula de Mos Craciun.");
//	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 854.2154,-1652.1752,13.5547)) return SCM(playerid, -1, "Trebuie sa fi la spawn civil.");
//	if(GetPlayerCash(playerid) < 20000000) return SCM(playerid, -1, "Ai nevoie de $20,000,000");
//	PlayerInfo[playerid][pSantaHat] = 1; pUpdateInt(playerid, "SantaHat", 1);
//	GivePlayerCash(playerid, -20000000);
//	SendClientMessage(playerid, COLOR_DARKPINK, "Ti-ai achizitionat o caciula de Mos Craciun, utilizeaza </santa> (-$20,000,000)");
//	return 1; }

function arataquests(playerid) {
	return 1; 
}
CMD:duty(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] < 1) return SCM(playerid, -1, "Nu faci parte dintr-o factiune.");
	if(IsACop(playerid) && PlayerInfo[playerid][pGunLic] < 1) return SCM(playerid, -1, "You don't have gun license.");
	if(GetPlayerInterior(playerid) < 1) return SCM(playerid, -1, "Nu te afli intr-un interior.");
	if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 10 secunde.");
	dutyonfactions(playerid);
	delayfactions[playerid] = 10;
	return 1; 
}
function dutyonfactions(playerid) {
	switch(OnDuty[playerid]) {
		case 0: {
			switch(PlayerInfo[playerid][pMember]) {
				case 1: {
					GivePlayerWeaponEx(playerid, 24, 500); GivePlayerWeaponEx(playerid, 3, 1); GivePlayerWeaponEx(playerid, 41, 500);
					GivePlayerWeaponEx(playerid, 29, 1000); GivePlayerWeaponEx(playerid, 31, 1000); SetPlayerArmourEx(playerid, 100);
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1: SetPlayerSkin(playerid, 71); 
						case 2: SetPlayerSkin(playerid, 284);
						case 3: SetPlayerSkin(playerid, 281);
						case 4: SetPlayerSkin(playerid, 266);
						case 5: SetPlayerSkin(playerid, 283);
						case 6..7: SetPlayerSkin(playerid, 267);
					}
					SetPlayerToTeamColor(playerid);
				}
				case 2: {
					GivePlayerWeaponEx(playerid, 24, 500); GivePlayerWeaponEx(playerid, 3, 1); GivePlayerWeaponEx(playerid, 41, 500);
					GivePlayerWeaponEx(playerid, 29, 1000); GivePlayerWeaponEx(playerid, 31, 1000); SetPlayerArmourEx(playerid, 100);
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1: SetPlayerSkin(playerid, 163);
						case 2: SetPlayerSkin(playerid, 164);
						case 3..4: SetPlayerSkin(playerid, 166); 
						case 5: SetPlayerSkin(playerid, 286);
						case 6..7: SetPlayerSkin(playerid, 295);
					}
					SetPlayerToTeamColor(playerid);
				}
				case 3: {
					GivePlayerWeaponEx(playerid, 24, 500); GivePlayerWeaponEx(playerid, 3, 1); GivePlayerWeaponEx(playerid, 41, 500);
					GivePlayerWeaponEx(playerid, 29, 1000); GivePlayerWeaponEx(playerid, 31, 1000); SetPlayerArmourEx(playerid, 100);
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1: SetPlayerSkin(playerid, 287); 
						case 2: SetPlayerSkin(playerid, 287);
						case 3: SetPlayerSkin(playerid, 284);
						case 4: SetPlayerSkin(playerid, 285);
						case 5: SetPlayerSkin(playerid, 283);
						case 6..7: SetPlayerSkin(playerid, 288);
					}
					SetPlayerToTeamColor(playerid);
				}				
				case 4: {
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1: SetPlayerSkin(playerid, 114);
						case 2: SetPlayerSkin(playerid, 116);
						case 3..5: SetPlayerSkin(playerid, 115);
						case 6..7: SetPlayerSkin(playerid, 113); 
					}	
					SetPlayerToTeamColor(playerid);
				}
				case 5: {
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1: SetPlayerSkin(playerid, 106);
						case 2..3: SetPlayerSkin(playerid, 271);
						case 4..5: SetPlayerSkin(playerid, 269);
						case 6..7: SetPlayerSkin(playerid, 270);
					}
				}
				case 6: {
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1: SetPlayerSkin(playerid, 108);
						case 2..3: SetPlayerSkin(playerid, 110);
						case 4..5: SetPlayerSkin(playerid, 109);
						case 6..7: SetPlayerSkin(playerid, 292);
					}
				}
				case 8: {
					GivePlayerWeaponEx(playerid, 24, 500); GivePlayerWeaponEx(playerid, 3, 1); GivePlayerWeaponEx(playerid, 41, 500);
					GivePlayerWeaponEx(playerid, 29, 1000); GivePlayerWeaponEx(playerid, 31, 1000); SetPlayerArmourEx(playerid, 100);
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1: SetPlayerSkin(playerid, 71); 
						case 2: SetPlayerSkin(playerid, 284);
						case 3: SetPlayerSkin(playerid, 281);
						case 4: SetPlayerSkin(playerid, 266);
						case 5: SetPlayerSkin(playerid, 283);
						case 6..7: SetPlayerSkin(playerid, 267);
					}
					SetPlayerToTeamColor(playerid);
				}				
				case 9: {
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1..2: SetPlayerSkin(playerid, 188);
						case 3: SetPlayerSkin(playerid, 17);
						case 4..5: SetPlayerSkin(playerid, 187);
						case 6..7: SetPlayerSkin(playerid, 147);
					}
				}
				case 10: {
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1:	SetPlayerSkin(playerid, 185);
						case 2: SetPlayerSkin(playerid, 102);
						case 3..5: SetPlayerSkin(playerid, 104);
						case 6..7: SetPlayerSkin(playerid, 296);
					}
				}
				case 11: {
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1:	SetPlayerSkin(playerid, 208);
						case 2..3: SetPlayerSkin(playerid, 186); 
						case 4..7: SetPlayerSkin(playerid, 294);
					}
				}
				case 13: {
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1..2: SetPlayerSkin(playerid, 253);
						case 3..4: SetPlayerSkin(playerid, 255);
						case 5: SetPlayerSkin(playerid, 61);
						case 6..7: SetPlayerSkin(playerid, 228);
					}
 				}
 				case 14: {
 					OnDuty[playerid] = 1;
 					switch(PlayerInfo[playerid][pRank]) {
 						case 1: SetPlayerSkin(playerid, 276);
 						case 2:	SetPlayerSkin(playerid, 275);
 						case 3: SetPlayerSkin(playerid, 275);
 						case 4: SetPlayerSkin(playerid, 274);
 						case 5: SetPlayerSkin(playerid, 70);
 						case 6..7: SetPlayerSkin(playerid, 228);
 					}
 				}
 				case 15: {
 					OnDuty[playerid] = 1;
 					switch(PlayerInfo[playerid][pRank]) {
 						case 1..2: SetPlayerSkin(playerid, 8);
 						case 3..5: SetPlayerSkin(playerid, 42);
 						case 6..7: SetPlayerSkin(playerid, 50);
 					}
 				}
 				case 16: {
					OnDuty[playerid] = 1;
					switch(PlayerInfo[playerid][pRank]) {
						case 1..2: SetPlayerSkin(playerid, 253);
						case 3..4: SetPlayerSkin(playerid, 255);
						case 5: SetPlayerSkin(playerid, 61);
						case 6..7: SetPlayerSkin(playerid, 228);
					}
 				}				
			}
		}	
		case 1: {
			if(IsACop(playerid)) SetPlayerColor(playerid, -1);
			SetPlayerArmour(playerid, 0), ResetPlayerWeapons(playerid), ResetPlayerWeaponsEx(playerid);
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);	
			OnDuty[playerid] = 0;
		}
	}
	SetPlayerHealthEx(playerid, 100);
	SCM(playerid, COLOR_DARKPINK, "Changed duty status.");
	return 1; 
}
CMD:vowner(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);	
	new name[30], carid;
	if(sscanf(params, "s[30]i", name, carid)) return SCM(playerid, -1, "Syntax: /vowner [exact player name] [exact vehicle db id - view on panel]");
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "UPDATE `cars` SET `Owner` = '%s' WHERE `ID` = '%d' LIMIT 1", name, carid);
	mysql_tquery(SQL, gString);
	SendAdmins(COLOR_PRINC, "(/vowner) {ffffff}Administrator %s [user: %d] has set %s owner for vehicle id %d (must relog to update).", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], name, carid);
	return 1; 
}	
alias:paintleave("leavepaint")
stock quest_name(id) {
	new name[64];
	switch(id) {
		case quest_barbut: format(name, 64, "Joaca barbut cu o persoana");
		case quest_drog: format(name, 64, "Drogheaza-te");
		case quest_find: format(name, 64, "Localieaza un player");
		case quest_credit: format(name, 64, "Cumpara credit dintr-un 24/7");
		case quest_benzina: format(name, 64, "Alimenteaza masina cu benzina");
		case quest_flori: format(name, 64, "Cumpara un buchet de flori");
		case quest_depozit: format(name, 64, "Depoziteaza o suma de bani");
		case quest_food: format(name, 64, "Mananca la un fast food");
		case quest_sellcar: format(name, 64, "Vinde un vehicul");
		case quest_skin: format(name, 64, "Cumpara un skin nou");
		case quest_news: format(name, 64, "Munceste la Newsman");
		case quest_farmer: format(name, 64, "Munceste la Farmer");
		case quest_rob: format(name, 64, "Jefuieste o afacere");
		case quest_contract: format(name, 64, "Plaseaza un contract");
		case quest_rent: format(name, 64, "Inchiriaza o casa");
		case quest_crate: format(name, 64, "Deschide un crate");
	}
	return name; }
CMD:getquest(playerid, params[]) {
	if(PlayerInfo[playerid][pQuests] >= 3) return SCM(playerid, -1, "Deja ai facut 3 quest-uri.");
	if(GetPVarInt(playerid, "questget") == 1) return SCM(playerid, -1, "Deja ai un quest activ, foloseste /myquest.");
	if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1329.0900,-1557.5757,13.5469)) return SCM(playerid, -1, "Nu te afli in locatia potrivita. Foloseste [/gps - other locations - quests].");
	gString[0] = (EOS);
	strcat(gString, "1. Joaca barbut cu o persoana\n2. Drogheaza-te\n3. Localizeaza un player\n4. Cumpara credit dintr-un 24/7\n5. Alimenteaza masina cu benzina\n6. Cumpara un buchet de flori\n7. Depoziteaza o suma de bani\n8. Mananca la un fast food\n9. Vinde un vehicul\n");
	strcat(gString, "10. Cumpara un skin nou\n11. Munceste la Newsman\n12. Munceste la Farmer\n13. Jefuieste o afacere\n14. Plaseaza un contract\n15. Inchiriaza o casa\n16. Deschide un crate");
	ShowPlayerDialogEx(playerid, DIALOG_QUESTS, DIALOG_STYLE_LIST, "Quests Place", gString, "Select", "Cancel");
	return 1; 
}
CMD:myquest(playerid, params[]) {
 	if(quest_type[playerid] < 0) return SCM(playerid, -1, "Nu ai un quest activ.");
 	SCMf(playerid, COLOR_PRINC, "(Quests Place): {ffffff}%s.", quest_name(quest_type[playerid]));
	return 1; 
}
function quest_finish(playerid) {
	new bani = 50000 + random(50000);
	SCM(playerid, COLOR_PRINC, "(Quests Place): {ffffff}Quest finalizat cu succes.");
	SCMf(playerid, COLOR_PRINC, "(Quests Place): {ffffff}Ai primit $%s si un respect point.", FormatNumber(bani));
	GivePlayerCash(playerid, bani);
	last_quest[playerid] = quest_type[playerid];
	quest_type[playerid] = -1;
	PlayerInfo[playerid][pQuests] ++; pUpdateInt(playerid, "Quests", PlayerInfo[playerid][pQuests]);
	PlayerInfo[playerid][pExp] ++; pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);
	SetPVarInt(playerid, "questget", 0);
	checkLevelProgress(playerid);
	return 1; 
}
CMD:manageserver(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
	gString[0] = (EOS);
	format(gString, 400, "Max vehicles in range - %d\nSpeed vehicles - %d\nTroll hack - onplayerdeath - %d\nTroll hack - %d\nCrashers - %d\nTroll kill / fake damage - %d\nTeleport hack - %d\nWar system - %d\nFly hack - %d\nBullets hack - %d\nVehicle teleport - %d", ac_allowed, ac_speedhack, ac_onplayerdeath, ac_trolltimer, ac_crasher, ac_fakedamage, ac_teleport, blockattack, ac_fly, ac_bullets, ac_trollvehicle);
	ShowPlayerDialogEx(playerid, DIALOG_CHEATS, DIALOG_STYLE_LIST, "Anti-Cheats", gString, "Select", "Close");	
	SCM(playerid, COLOR_DARKPINK, "1 - activat | 0 - dezactivat.");
	SendAdmins(COLOR_COOLRED, "(/manageserver) %s open server manager", 1, GetName(playerid));
	return 1; 
}
function workfarmer(playerid) {
	new speed = Carspeed(playerid); 
	if(speed < 25) { 
		PlayerTextDrawSetString(playerid, textdrawfarmer[playerid], "Mareste viteza vehiculului la 25 km/h"); 
		PlayerTextDrawShow(playerid, textdrawfarmer[playerid]);
		return true;	
	}	
	if(speed >= 25) {
		if(!IsPlayerInRangeOfPoint(playerid, 200.0, -382.7500,-1426.5015,26.2620)) { 
			PlayerTextDrawSetString(playerid, textdrawfarmer[playerid], "Te-ai indepartat prea mult de ferma"); 
			PlayerTextDrawShow(playerid, textdrawfarmer[playerid]);
			return true;
		}	
		if(timerfarmer[playerid] >= 1) {
			timerfarmer[playerid] --;
			gString[0] = (EOS);
			format(gString, 64, "Munceste pentru inca %d secunde pentru a fi platit", timerfarmer[playerid]);
			PlayerTextDrawSetString(playerid, textdrawfarmer[playerid], gString);
			PlayerTextDrawShow(playerid, textdrawfarmer[playerid]);
			return true;
		}
		if(timerfarmer[playerid] == 0) {
			timerfarmer[playerid] = -1;
			PlayerTextDrawHide(playerid, textdrawfarmer[playerid]);
			new castig = random(10);
			switch(castig) {
				case 0..5: {
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					SetPVarInt(playerid, "fainafarmer", 1);
					SCM(playerid, COLOR_PRINC, "Detinatorii fermei nu au bani pentru a te plati, dar iti pot oferi un sac cu faina drept rasplata.");
					SCM(playerid, COLOR_PRINC, "Ai primit un sac de faina. Poti vinde acest sac la unul din fast food-urile serverului pentru a primi bani.");
					if(PlayerInfo[playerid][pPet] == 1) SCMf(playerid, COLOR_GREEN, "(Pet){ffffff} deoarece detii un pet, ai primti $100,000 bonus");
					if(PlayerInfo[playerid][pPet] == 1) GivePlayerCash(playerid, 100000);
					if(quest_type[playerid] == quest_farmer) quest_finish(playerid);
				}
				case 6..10: {
					SetVehicleToRespawn(GetPlayerVehicleID(playerid));
					new money = 70000 + random(55000);
					GivePlayerCash(playerid, money);
					SCM(playerid, COLOR_PRINC, "(Job): {ffffff}Detinatorii fermei au fost foarte multumiti pentru munca prestata.");
					SCMf(playerid, COLOR_PRINC, "(Job): {ffffff}Drept rasplata ai primit suma de $%s.", FormatNumber(money));
					SCMf(playerid, COLOR_GREEN, "(Pet){ffffff} deoarece detii un pet, ai primti $100,000 bonus");
					if(quest_type[playerid] == quest_farmer) quest_finish(playerid);
					GivePlayerCash(playerid, 100000);
				}
			}	
		}	
	}
	return 1; 
}
CMD:skills(playerid, params[]) {
	SCM(playerid, COLOR_LIGHTGREEN3, "Nu mai exista skill-uri pe server, banii se primesc in functie de level.");
	SCM(playerid, COLOR_LIGHTGREEN3, "Cand faceti level 4, 7, 10 si 15 castigurile joburilor se updateaza.");
	return 1; 
}
alias:skills("skill")
CMD:roll(playerid, params[]) {
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1285.4689,-862.0477,43.0937)) return SCM(playerid, -1, "Nu te afli la roata norocului. Foloseste [/gps - other locations - crates].");
	if(PlayerInfo[playerid][pRoll] < 350) return SCM(playerid, -1, "Ai nevoie de minim 350 roll points.");
	new castig = random(61);
	switch(castig) {
		case 0..30: {
			new money = 500000 + random(1000000);
			GivePlayerCash(playerid, money);
			SCMf(playerid, COLOR_PRINC, "Ai castigat $%s.", FormatNumber(money));
		}
		case 31..37: {
			new rp = 2 + random(5);
			PlayerInfo[playerid][pExp] += rp; pUpdateInt(playerid, "Respect", PlayerInfo[playerid][pExp]);
			SCMf(playerid, COLOR_PRINC, "Ai castigat %d puncte de respect.", rp);
			checkLevelProgress(playerid);
		} 
		case 38..43: {
			PlayerInfo[playerid][pHiddenColor] ++; pUpdateInt(playerid, "HiddenColor", PlayerInfo[playerid][pHiddenColor]);
			SCM(playerid, COLOR_PRINC, "Ai castigat o culoare hidden.");
			va_SendClientMessageToAll(COLOR_GENANNOUNCE, "((Roata norocului: %s a castigat o culoare hidden. Felicitari!))", GetName(playerid));
		}
		case 44..47: {
			new pp = 5 + random(15);
			PlayerInfo[playerid][pPremiumPoints] += pp; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
			SCMf(playerid, COLOR_PRINC, "Ai castigat %d premium points. Felicitari!", pp);
			va_SendClientMessageToAll(COLOR_GENANNOUNCE, "((Roata norocului: %s a castigat %d puncte premium. Felicitari!))", GetName(playerid), pp);
		}
		case 48..55: {
			new gems = 10 + random(20);	
			PlayerInfo[playerid][pGems] += gems; pUpdateInt(playerid, "Gems", PlayerInfo[playerid][pGems]);
			SCMf(playerid, COLOR_PRINC, "Ai fost ghinionist si nu ai castigat nimic.", gems);
		}
		case 56..59: {
			PlayerInfo[playerid][pMiniCrate] ++; pUpdateInt(playerid, "MiniCrate", PlayerInfo[playerid][pMiniCrate]);
			SCM(playerid, COLOR_PRINC, "Ai castigat un Lowest Crate. Felicitari!");
			va_SendClientMessageToAll(COLOR_GENANNOUNCE, "((Roata norocului: %s a castigat un Lowest Crate. Felicitari!))", GetName(playerid));
		}
		case 60..61: {
			if(PlayerInfo[playerid][pCarSlots] < 19) PlayerInfo[playerid][pCarSlots] ++, pUpdateInt(playerid, "CarSlots", PlayerInfo[playerid][pCarSlots]);
			InsertCar(playerid, 21, 1);
			SCM(playerid, COLOR_PRINC, "Ai castigat un vehicul de tip Blista Compact (+ 1 slot de vehicule). Felicitari!");
			va_SendClientMessageToAll(COLOR_GENANNOUNCE, "((Roata norocului: %s a castigat un vehicul de tip Blista Compact. Felicitari!)) ", GetName(playerid));
		}
	}
	PlayerInfo[playerid][pRoll] -= 350; pUpdateInt(playerid, "Roll", PlayerInfo[playerid][pRoll]);
	return 1; 
}
CMD:nobi(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	foreach(new i : Player) { if(PlayerInfo[i][pLevel] < 2) SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s (%d) - level %d", GetName(i), i, PlayerInfo[i][pLevel]); }
	return true;
}
function f_panelactions() {
	if(cache_get_row_count() == 0) return 0;
	new playerid, giverid, actionid, actiontime, complaint, reason[64], dm, name[25], givername[25], reason2[64];
	for(new i, j = cache_get_row_count(); i != j; ++i) {
		playerid 					= cache_get_field_content_int(i, "playerid");
		giverid 					= cache_get_field_content_int(i, "giverid");
		actionid					= cache_get_field_content_int(i, "actionid");
		complaint 					= cache_get_field_content_int(i, "complaintid");
		dm 							= cache_get_field_content_int(i, "dm");
		actiontime					= cache_get_field_content_int(i, "actiontime");
		cache_get_field_content(i, "playername", name, SQL, 25);
		cache_get_field_content(i, "givername", givername, SQL, 25);
		cache_get_field_content(i, "reason", reason, SQL, 64);	

		switch(actionid) {
			case 1: {
				gString[0] = (EOS);
				va_SendClientMessageToAll(COLOR_LIGHTRED, "AdmPanel: %s has been banned by %s for %d days, reason: %s.", name, givername, actiontime, reason);
				mysql_format(SQL, gString, sizeof gString, "INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '%d', 0, 1)", name, givername, reason2, actiontime);
				mysql_tquery(SQL, gString);	
				mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','%d','reclamatie','%s','%s','%d')", playerid, giverid, actiontime, 0, name, givername, gettime());
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "UPDATE `users` SET `Ban` = '1', `BanDays` = '%d' WHERE `Name` = '%s' LIMIT 1", actiontime, name);
				mysql_tquery(SQL, gString); 
				foreach(new idd : Player) if(PlayerInfo[idd][pSQLID] == playerid) defer KickEx(idd);
			}
			case 2: {
				gString[0] = (EOS);
				va_SendClientMessageToAll(COLOR_LIGHTRED, "AdmPanel: %s has been permanent banned by %s, reason: %s.", name, givername, reason);
				mysql_format(SQL, gString, sizeof gString, "INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '999', 1, 1)", name, givername, reason2);
				mysql_tquery(SQL, gString);	
				mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','0','reclamatie','%s','%s','%d')", playerid, giverid, name, givername, gettime());
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "UPDATE `users` SET `Ban` = '1', `BanDays` = '999' WHERE `Name` = '%s' LIMIT 1", name);
				mysql_tquery(SQL, gString);
				foreach(new idd : Player) if(PlayerInfo[idd][pSQLID] == playerid) defer KickEx(idd);
			}
			case 3: {
				gString[0] = (EOS);
				if(complaint > 0) {
					va_SendClientMessageToAll(COLOR_LIGHTRED, "AdmPanel: %s was jailed by %s for %d minutes, reason: %s [complaint: #%d].", name, givername, actiontime, reason, complaint);
					format(reason2, 64, "%s [complaint: %d]", reason, complaint);
				}
				mysql_format(SQL, gString, 256, "UPDATE `users` SET `Jailed` = '1', `JailTime`= '%d' WHERE `Name` = '%s' LIMIT 1", actiontime*60, name);
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','6','%d','%s','%s','%s','%d')", playerid, giverid, actiontime, reason2, name, givername, gettime());
				mysql_tquery(SQL, gString);
				foreach(new idd : Player) {
					if(PlayerInfo[idd][pSQLID] == playerid) {
						ResetPlayerWeaponsEx(idd); ResetPlayerWeapons(idd);
						WantedPoints[idd] = 0; 
						PlayerInfo[idd][pJailed] = 2; PlayerInfo[idd][pJailTime] = actiontime*60;
						SetPlayerInterior(idd, 10);
						new rand = random(sizeof gRandomAJailSpawns);
						SetPlayerPosEx(idd, gRandomAJailSpawns[rand][0], gRandomAJailSpawns[rand][1], gRandomAJailSpawns[rand][2]);
						if(dm > 0) { PlayerInfo[idd][pGunLic] = 0; PlayerInfo[idd][pGunLicSuspend] = dm + 1; }
					}
				}
			}
			case 4: {
				gString[0] = (EOS);
				va_SendClientMessageToAll(COLOR_LIGHTRED, "AdmPanel: %s received a warn from admin %s, reason %s. ", name, givername, reason);
				mysql_format(SQL, gString, 256, "UPDATE `users` SET `Warnings` = `Warnings` + '1' WHERE `Name` = '%s' LIMIT 1", name);
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','5','%d','reclamatie','%s','%s','%d')", playerid, giverid, actiontime, name, givername, gettime());
				mysql_tquery(SQL, gString);
				foreach(new idd : Player) if(PlayerInfo[idd][pSQLID] == playerid) { PlayerInfo[idd][pWarns] ++; defer KickEx(idd); } 
			}
			case 5: {
				va_SendClientMessageToAll(COLOR_LIGHTRED, "AdmPanel: %s has been muted by %s for %d minutes, reason: %s.", name, givername, actiontime, reason);
				mysql_format(SQL, gString, 256, "UPDATE `users` SET `Muted` = '1', `MuteTime` = '%d' WHERE `Name` = '%s' LIMIT 1", actiontime*60, name);
				mysql_tquery(SQL, gString);
				mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','7','%d','reclamatie','%s','%s','%d')", playerid, giverid, actiontime, name, givername, gettime());
				mysql_tquery(SQL, gString);
				foreach(new idd : Player) if(PlayerInfo[idd][pSQLID] == playerid) { PlayerInfo[idd][pMuteTime] = actiontime*60; }
			}
			case 6:
			{
				SendAdmins(COLOR_RED, "(panel): %s [user: %d] received a warn from administrator %s [user: %d] (profile action).", 1, givername, giverid, name, playerid);
			}
			case 7:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] has unmuted %s [user: %d] from panel.", 1, givername, giverid, name, playerid);

				foreach(new idd : Player)
				{
					if(PlayerInfo[idd][pSQLID] == playerid)
					{
						PlayerInfo[idd][pMuteTime] = 0;

						SCMf(idd, COLOR_RED, "(panel): administrator %s has unmuted you.", givername);
					}
				}
			}
			case 8:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] added %s [user: %d] to premium users.", 1, givername, giverid, name, playerid);
		
				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pPremiumAccount] = 1;

						SCMf(x, COLOR_RED, "(panel): administrator %s added you to premium users.", givername);
					}
				}
			}
			case 9: 
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] added %s [user: %d] to vip users.", 1, givername, giverid, name, playerid);

				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pVIP] = 1;

						SCMf(x, COLOR_RED, "(panel): administrator %s added you to vip users.", givername);
					}
				}
			}
			case 10:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] added %s [user: %d] to golden users.", 1, givername, giverid, name, playerid);

				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pGoldenAccount] = 1;

						SCMf(x, COLOR_RED, "(panel): administrator %s added you to golden users.", givername);
					}
				}
			}
			case 11: 
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] added vehicle slot to %s [user: %d].", 1, givername, giverid, name, playerid);

				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pCarSlots] ++;

						SCMf(x, COLOR_RED, "(panel): administrator %s added you slot vehicle.", givername);
					}
				}
			}
			case 12: 
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] removed %s [user: %d] from helpers team.", 1, givername, giverid, name, playerid);

				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pHelper] = 0;
						Iter_Remove(Helpers, x);

						SCMf(x, COLOR_RED, "(panel): administrator %s removed you from helpers team.", givername);
					}
				}
			}
			case 13:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] added %s [user: %d] to beta tester team.", 1, givername, giverid, name, playerid);
			}
			case 14: 
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] removed %s [user: %d] from admins team.", 1, givername, giverid, name, playerid);

				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pAdmin] = 0;
						Iter_Remove(Admins, x);

						SCMf(x, COLOR_RED, "(panel): administrator %s removed you from admins team.", givername);
					}
				}
			}
			case 15:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] has unbanned %s [user: %d] from profile.", 1, givername, giverid, name, playerid);
			}
			case 16:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] reseted faction application for %s [user: %d].", 1, givername, giverid, name, playerid);
			}
			case 17:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] created a new vehicle for %s [user: %d] from panel.", 1, givername, giverid, name, playerid);

				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						SCMf(x, COLOR_RED, "(panel): administrator %s created a new vehicle for you (please relog).", givername);
					}
				}
			}
			case 18:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] changed nickname %s [user: %d] from panel.", 1, givername, giverid, name, playerid);
				
				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						SCMf(x, COLOR_RED, "(panel): administrator %s changed nickname you.", givername);

						defer KickEx(x);
					}
				}
			}
			case 19:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] cleared a warn for %s [user: %d].", 1, givername, giverid, name, playerid);
				
				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pWarns] --;

						SCMf(x, COLOR_RED, "(panel): administrator %s cleared a warn for you.", givername);
					}
				}	
			}
			case 20:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] setted premium points to %d for %s [user: %d].", 1, givername, giverid, actiontime, name, playerid);

				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pPremiumPoints] = actiontime;

						SCMf(x, COLOR_RED, "(panel): administrator %s setted premium points to %d for you.", givername, actiontime, name);
					}
				}
			}
			case 21:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] setted level to %d for %s [user: %d].", 1, givername, giverid, actiontime, name, playerid);

				foreach(new x : Player)
				{
					if(PlayerInfo[x][pSQLID] == playerid)
					{
						PlayerInfo[x][pLevel] = actiontime;

						SetPlayerScore(x, actiontime);
						SCMf(x, COLOR_RED, "(panel): administrator %s setted level to %d for you.", givername, actiontime, name);
					}
				}
			}
			case 22:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] setted hours for %s [user: %d].", 1, givername, giverid, name, playerid);
			}
			case 23:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] changed email for %s [user: %d].", 1, givername, giverid, name, playerid);
			}
			case 24: 
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] setted money for %s [user: %d].", 1, givername, giverid, name, playerid);
			}
			case 25:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] reseted parameter profile for %s [user: %d].", 1, givername, giverid, name, playerid);
			}
			case 26:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] gaved %s [user: %d] suspend from panel.", 1, givername, giverid, name, playerid);
			}
			case 27:
			{
				SendAdmins(COLOR_RED, "(panel): administrator %s [user: %d] gaved %s [user: %d] a staff warn.", 1, givername, giverid, name, playerid);
			}
		}
	}		
	new query[144];
	mysql_format(SQL, query, sizeof query, "DELETE FROM `panelactions` WHERE `actionid` = '%d'", actionid);
	mysql_tquery(SQL, query);
	return 1;
}
function checkpanel() {
	
	gString[0] = (EOS);
	format(gString, 256, "SELECT * FROM `panelactions`");
	mysql_tquery(SQL, gString, "f_panelactions");

	return 1; 
}
CMD:fspec(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "i", id)) return SCM(playerid, -1, "Syntax: /fspec [faction id]");
	if(id < 0 || id > 15 || id == 3 || id == 7 || id == 8 || id == 12) return SCM(playerid, -1, "Invalid faction id.");
	if(id != 0 && PlayerInfo[playerid][pMember] == id) return SCM(playerid, -1, "Te afli deja in aceasta factiune.");
	if(id != 0) SendAdmins(COLOR_PRINC, "(/fspec) {ffffff}%s is now spectating on faction %s.", 1, GetName(playerid), NumeFactiune(id));
	if(id == 0)	SendAdmins(COLOR_PRINC, "(/fspec)) {ffffff}%s stoped fspec.", 1, GetName(playerid));
	specfaction[playerid] = id;
	return 1; 
}	
CMD:fchat(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(specfaction[playerid] < 1) return SCM(playerid, -1, "Nu te afli spec pe o factiune.");
	new message[128];
	if(sscanf(params, "s[128]", message)) return SCM(playerid, -1, "Syntax: /fchat [message]");
	SendFamilyMessage(specfaction[playerid], 0xa32a9fFF, "# Admin %s: %s", GetName(playerid), message);
	return 1; 
}
CMD:vipname(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You are not in a vehicle.");
	new carid = GetPlayerVehicleID(playerid), idcar = -1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) if(carid == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
	if(idcar == -1) return SCM(playerid, -1, "Poti folosi aceasta comanda doar pe vehicule VIP.");	
	if(carid == PlayerInfo[playerid][pCarID][idcar] && PlayerInfo[playerid][pCarVIP][idcar] > 0) {
		new text[15];
		if(sscanf(params, "s[15]", text)) return SCM(playerid, -1, "Syntax: /vipname [text - max 15 caractere]");
		if(strlen(text) < 3) return SCM(playerid, -1, "Maxim 15 de caractere si minim 3 caractere.");
		if(strlen(text) > 15) return SCM(playerid, -1, "Maxim 15 de caractere si minim 3 caractere.");
		format(CarVipName[playerid][idcar], 15, text);	
		SetVipText(playerid, idcar);
		gString[0] = (EOS);
		mysql_format(SQL, gString, 256, "UPDATE `cars` SET `VipText` = '%s' WHERE `ID` = '%d' LIMIT 1", text, PlayerInfo[playerid][pCar][idcar]);
		mysql_tquery(SQL, gString);
		SCM(playerid, COLOR_GREY, "Daca textul depaseste 15 caractere, acesta nu se va updata.");
		SCMf(playerid, COLOR_GREY, "Text pentru vehicul setat: %s.", text);		
	}	
	return 1; 
}
CMD:vipnamecolor(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "You are not in a vehicle.");
	new carid = GetPlayerVehicleID(playerid), idcar = -1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) if(carid == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
	if(idcar == -1) return SCM(playerid, -1, "Poti folosi aceasta comanda doar pe vehicule VIP.");
	if(carid == PlayerInfo[playerid][pCarID][idcar] && PlayerInfo[playerid][pCarVIP][idcar] > 0) ShowPlayerDialogEx(playerid, DIALOG_VIPNAMECOLOR, DIALOG_STYLE_LIST, "VIP name color", "{FFFFFF}White\n{7E689B}Red\n{640000}Dark Red\n{00FF00}Green\n{004B01}Dark Green\n{008DFF}Blue\n{001AFF}Dark Blue\n{FFFF00}Yellow\n{FF6B00}Orange\n{EB00FF}Purple", "Ok", "Cancel");
	return 1; 
}
function SetVipText(playerid, idcar) {
	new skema[128];
	if(strlen(CarVipName[playerid][idcar]) > 0) {
		switch(PlayerInfo[playerid][pCarVipColor][idcar]) {
			case 0: format(skema, 128, "{FFFFFF}%s", CarVipName[playerid][idcar]);	
			case 1:	format(skema, 128, "{7E689B}%s", CarVipName[playerid][idcar]);
			case 2: format(skema, 128, "{640000}%s", CarVipName[playerid][idcar]);
			case 3: format(skema, 128, "{00FF00}%s", CarVipName[playerid][idcar]); 
			case 4: format(skema, 128, "{004B01}%s", CarVipName[playerid][idcar]);
			case 5: format(skema, 128, "{008DFF}%s", CarVipName[playerid][idcar]); 
			case 6: format(skema, 128, "{001AFF}%s", CarVipName[playerid][idcar]); 
			case 7: format(skema, 128, "{FFFF00}%s", CarVipName[playerid][idcar]); 
			case 8: format(skema, 128, "{FF6B00}%s", CarVipName[playerid][idcar]); 
			case 9: format(skema, 128, "{EB00FF}%s", CarVipName[playerid][idcar]);
		}
		if(vObject[PlayerInfo[playerid][pCarID][idcar]]) DestroyDynamicObject(vObject[PlayerInfo[playerid][pCarID][idcar]]);
		vObject[PlayerInfo[playerid][pCarID][idcar]] = CreateDynamicObject(19327,0,0,-1000,0,0,0);
		//SetObjectMaterialText(vObject[PlayerInfo[playerid][pCarID][idcar]], skema, 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 30, 1, 0xFFFFFFFF, 0, 1);
		SetDynamicObjectMaterialText(vObject[PlayerInfo[playerid][pCarID][idcar]], 0, skema, OBJECT_MATERIAL_SIZE_256x128, "Arial", 25, 1, COLOR_WHITE, 0, 1);
		switch(PlayerInfo[playerid][pCarModel][idcar]) {
			case 411: AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], -0.029999, -1.974998, 0.233999, -84.824964, 0.000000, 0.000000);
			case 541: AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -1.649998, 0.390999, -76.379989, 0.000000, 0.000000);
			case 560: AttachDynamicObjectToVehicle(vObject[PlayerInfo[playerid][pCarID][idcar]], PlayerInfo[playerid][pCarID][idcar], 0.000000, -0.614999, 0.799999, -88.439956, 0.000000, 0.000000);
		}
	}
	return 1; 
}
CMD:editbusiness(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
	new business, action[20], value;
	if(sscanf(params, "is[20]i", business, action, value)) return SCM(playerid, -1, "Syntax: /editbusiness [id business] [action: price, owned, owner(id)] [value]");
	if(business < 1 || business > 51) return SCM(playerid, -1, "Invalid business id.");
	if(value < 0 || value > 999999999) return SCM(playerid, -1, "Invalid value.");
	gString[0] = (EOS);		
	if(strcmp(action, "price", true) == 0) {
		BizzInfo[business][bBuyPrice] = value; BizzInfo[business][bPrice] = value;
		mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `BuyPrice` = '%d', `Prices` = '%d' WHERE `ID` = '%d' LIMIT 1", value, value, business);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_DARKPINK, "You have edited the business %d price in $%s.", business, FormatNumber(value));	
		SendAdmins(COLOR_PRINC, "(/editbusiness) {ffffff}%s has edited the business %d price in $%s.", 1, GetName(playerid), business, FormatNumber(value));
	}	
	else if(strcmp(action, "owned", true) == 0) {
		BizzInfo[business][bOwned] = value;
		if(value == 0) {
			strmid(BizzInfo[business][bOwner], "AdmBot", 0, 25, 255);
			mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Owner` = 'AdmBot' WHERE `ID` = '%d' LIMIT 1", business);
			mysql_tquery(SQL, gString);
			mysql_format(SQL, gString, 256, "UPDATE `users` SET `Bizz` = '255' WHERE `Bizz` = '%d' LIMIT 1", business);
			mysql_tquery(SQL, gString);
		}	
		mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Owned` = '%d' WHERE `ID` = '%d' LIMIT 1", value, business);
		mysql_tquery(SQL, gString);
		SCMf(playerid, COLOR_DARKPINK, "You have edited the business %d owned in %d [0 = false, 1 = true].", business, value);
		SendAdmins(COLOR_PRINC, "(/editbusiness) {ffffff}%s has edited the business %d owned in %d [0 = false, 1 = true].", 1, GetName(playerid), business, value);			
	}
	else if(strcmp(action, "owner", true) == 0) {
		if(!IsPlayerConnected(value)) return SCM(playerid, -1, "Player not connected.");
		strmid(BizzInfo[business][bOwner], PlayerInfo[value][pNormalName], 0, 25, 255);
		PlayerInfo[value][pPbiskey] = value;
		mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `OWner` = '%s' WHERE `id` = '%d' LIMIT 1", PlayerInfo[value][pNormalName], business);
		mysql_tquery(SQL, gString);
		pUpdateInt(value, "Bizz", business);
		SCMf(playerid, COLOR_DARKPINK, "You have edited the business %d owner in %s.", business, GetName(value));
		SendAdmins(COLOR_PRINC, "(/editbusiness) {ffffff}%s has edited the business %d owner in %s.", 1, GetName(playerid), business, GetName(value));
	}
	OnPropTextdrawUpdate(2, business);
	return 1; 
}
function manevrabug(playerid) {
	if(cache_get_row_count() > 0) {
		SCM(playerid, -1, "Acel nume exista deja.");
		defer KickEx(playerid);
		return true;
	}
	gString[0] = (EOS);
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) {
		format(HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], 25, "%s", WantName[playerid]);
		mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Owner` = '%s' WHERE `Owner` = '%s' LIMIT 1", WantName[playerid], PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL, gString);
	}
	if(PlayerInfo[playerid][pPbiskey] != 255) {
		format(BizzInfo[PlayerInfo[playerid][pPbiskey]], 25, "%s", WantName[playerid]);
		mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Owner` = '%s' WHERE `Owner` = '%s' LIMIT 1", WantName[playerid], PlayerInfo[playerid][pNormalName]);
		mysql_tquery(SQL, gString);
	}
	for(new i; i < MAX_PERSONAL_VEHICLES; i++) {
		if(PlayerInfo[playerid][pCar][i] != -1) {
			format(CarOwner[playerid][i], 30, "%s", WantName[playerid]);
			mysql_format(SQL, gString, 256, "UPDATE `cars` SET `Owner` = '%s' WHERE `ID` = '%d' LIMIT 1", WantName[playerid], PlayerInfo[playerid][pCar][i]);
			mysql_tquery(SQL, gString);
		}
	}
	SCMf(playerid, COLOR_DARKPINK, "Noul tau nume este %s.", WantName[playerid]);
	pUpdateStr(playerid, "name", WantName[playerid]);
	SendAdmins(COLOR_PRINC, "AdmWarning: {ffffff}%s has changed name in %s (debug).", 1, GetName(playerid), WantName[playerid]);
	defer KickEx(playerid);	
	return 1; 
}
CMD:startradar(playerid, params[]) {
	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
	if(!IsACopCar(GetPlayerVehicleID(playerid)) && !IsALVPDCar(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "Nu te afli intr-un vehicul de politie.");
	if(vehEngine[GetPlayerVehicleID(playerid)] == 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda cu motorul pornit.");
	new maxspeed;
	if(sscanf(params, "i", maxspeed)) return SCM(playerid, -1, "Syntax: /startradar [max speed]");
	if(maxspeed < 30 || maxspeed > 250) return SCM(playerid, -1, "Max speed 30 - 250.");
	if(radar_police[playerid] == 1) return SCM(playerid, -1, "Deja ai radarul pornit.");
	SCMf(playerid, COLOR_GREY, "Radar pornit. Limita viteza: %d km/h.", maxspeed);
	SCM(playerid, COLOR_GREY, "Foloseste /stopradar pentru a opri radarul.");
	radar_police[playerid] = 1;
	SetPVarInt(playerid, "max_speed", maxspeed);
	return 1; 
}
CMD:stopradar(playerid, params[]) {
	if(!IsACop(playerid)) return SCM(playerid, -1, "Nu esti politist.");
	if(!IsACopCar(GetPlayerVehicleID(playerid)) && !IsALVPDCar(GetPlayerVehicleID(playerid))) return SCM(playerid, -1, "Nu te afli intr-un vehicul de politie.");
	if(radar_police[playerid] == 0) return SCM(playerid, -1, "Nu ai radarul pornit.");	
	radar_police[playerid] = 0;
	DeletePVar(playerid, "max_speed");
	SCM(playerid, COLOR_GREY, "Radar oprit.");
	return 1; 
}
CMD:ban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id, days, reason[64];
	if(sscanf(params, "uis[64]", id, days, reason)) return SCM(playerid, -1, "Syntax: /ban [name/playerid] [days, 0 = permanent] [reason]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(days < 0) return SCM(playerid, -1, "Invalid days.");
	if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Asteapta cateva secunde.");
	if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[id][pAdmin]) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe un admin mai mare sau egal cu tine.");
	gString[0] = (EOS);	
	if(days == 0) {
		va_SendClientMessageToAll(COLOR_LIGHTRED, "Ban: %s has been permanent banned by %s, reason: %s.", GetName(id), GetName(playerid), reason);
		mysql_format(SQL, gString, sizeof(gString), "INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '999', 1, 1)", PlayerInfo[id][pNormalName], GetName(playerid), reason);
		mysql_tquery(SQL, gString);			
		mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','0','%s','%s','%s','%d')", PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID], reason, PlayerInfo[id][pNormalName], GetName(playerid), gettime());
		mysql_tquery(SQL, gString);
		pUpdateInt(id, "Ban", 1); pUpdateInt(id, "BanDays", 999);
	}
	if(days >= 1) {
		va_SendClientMessageToAll(COLOR_LIGHTRED, "Ban: %s has been banned by %s for %d days, reason: %s.", GetName(id), GetName(playerid), days, reason);
		mysql_format(SQL, gString, sizeof(gString), "INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '%d', 0, 1)", PlayerInfo[id][pNormalName], GetName(playerid), reason, days);
		mysql_tquery(SQL, gString);		
		mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','2','%d','%s','%s','%s','%d')", PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID], days, reason, PlayerInfo[id][pNormalName], GetName(playerid), gettime());
		mysql_tquery(SQL, gString);
		pUpdateInt(id, "Ban", 1); pUpdateInt(id, "BanDays", days);
	}
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Banuri` = `Banuri` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);
	SCMf(id, COLOR_SKEMA2, "Ai fost banat de catre adminul %s. Poti face o cerere de unban pe panel.redtimes.eu", GetName(playerid));
	defer KickEx(id);
	sanctiondelay[playerid] = 30;
	return 1; 
}
CMD:sban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, -1, AdminOnly);
	new id, days, reason[64];
	if(sscanf(params, "uis[64]", id, days, reason)) return SCM(playerid, -1, "Syntax: /sban [name/playerid] [0 = veryfie] [reason]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(days < 0) return SCM(playerid, -1, "Invalid days.");
	if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Asteapta cateva secunde.");
	if(PlayerInfo[playerid][pAdmin] <= PlayerInfo[id][pAdmin]) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe un admin mai mare sau egal cu tine.");
	gString[0] = (EOS);	
	if(days == 0) {
		SendAdmins(COLOR_PRINC, "(/sban){ffffff} %s banned silent  by %s.", 1, GetName(id), GetName(playerid));
		mysql_format(SQL, gString, sizeof(gString), "INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '999', 1, 1)", PlayerInfo[id][pNormalName], GetName(playerid), reason);
		mysql_tquery(SQL, gString);			
		mysql_format(SQL, gString, 256, "INSERT INTO punishlogs (`playerid`,`giverid`,`actionid`,`actiontime`,`reason`,`playername`,`givername`,`unixtime`) VALUES ('%d','%d','1','0','%s','%s','%s','%d')", PlayerInfo[id][pSQLID], PlayerInfo[playerid][pSQLID], reason, PlayerInfo[id][pNormalName], GetName(playerid), gettime());
		mysql_tquery(SQL, gString);
		pUpdateInt(id, "Ban", 1); pUpdateInt(id, "BanDays", 999);
	}
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Banuri` = `Banuri` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);
	SCMf(id, COLOR_SKEMA2, "Ai fost banat de catre adminul %s. Poti face o cerere de unban pe panel.redtimes.eu", GetName(playerid));
	defer KickEx(id);
	sanctiondelay[playerid] = 30;
	return 1; 
}
CMD:unban(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4) return SCM(playerid, -1, AdminOnly);
	new name[64], reason[64];
	if(sscanf(params, "s[64]s[64]", name, reason)) return SCM(playerid, -1, "Syntax: /unban [exact player name] [reason]");
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "UPDATE `bans` SET `Active` = '0' WHERE `name` = '%s' AND `Active` = '1' LIMIT 1", name);
	mysql_tquery(SQL, gString);
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Ban` = '0', `BanDays` = '0' WHERE `name` = '%s' LIMIT 1", name);
	mysql_tquery(SQL, gString);
	SendAdmins(COLOR_PRINC, "(/unban) {ffffff}%s unbanned player %s, reason: %s.", 1, GetName(playerid), name, reason);
	return 1; 
}
CMD:banoff(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly); 
	new name[64], days, reason[64];
	if(sscanf(params, "s[64]is[64]", name, days, reason)) return SCM(playerid, -1, "Syntax: /banoff [exact player name] [days, 0 = permanent] [reason]");
	if(days < 0) return SCM(playerid, -1, "Invalid days.");
	if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Asteapta cateva secunde."); 	
	gString[0] = (EOS);
	if(days == 0) {
		va_SendClientMessageToAll(COLOR_LIGHTRED, "Ban Offline: %s has been permanent banned by %s, reason: %s.", name, GetName(playerid), reason);
		mysql_format(SQL, gString, sizeof(gString), "INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '999', 1, 1)", name, GetName(playerid), reason);
		mysql_tquery(SQL, gString);			
		mysql_format(SQL, gString, 256, "UPDATE `users` SET `Ban` = '1', `BanDays` = '999' WHERE `name` = '%s' LIMIT 1", name);
		mysql_tquery(SQL, gString);
	}
	if(days >= 1) {
		va_SendClientMessageToAll(COLOR_LIGHTRED, "Ban Offline: %s has been banned by %s for %d days, reason: %s.", name, GetName(playerid), days, reason);
		mysql_format(SQL, gString, sizeof(gString), "INSERT INTO bans (Name, AdminName, Reason, Days, Permanent, Active) VALUES('%s', '%s', '%s', '%d', 0, 1)", name, GetName(playerid), reason, days);
		mysql_tquery(SQL, gString);			
		mysql_format(SQL, gString, 256, "UPDATE `users` SET `Ban` = '1', `BanDays` = '%d' WHERE `name` = '%s' LIMIT 1", days, name);
		mysql_tquery(SQL, gString);
	}
	gString[0] = (EOS);
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Banuri` = `Banuri` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);
	sanctiondelay[playerid] = 30;		
	return 1; 
}
CMD:vouchers(playerid, params[]) {
	if(PlayerInfo[playerid][pNormalVoucher] < 1 && PlayerInfo[playerid][pPremiumVoucher] < 1 && PlayerInfo[playerid][pExtraVoucher] < 1) return SCM(playerid, -1, "Nu ai niciun voucher.");
	gString[0] = (EOS);
	format(gString, 256, "Type\tTotal\tInfo\n");
	format(gString, sizeof(gString), "%sNormal Voucher\t%d in total\t50 premium points\nPremium Voucher\t%d in total\t190 premium points\nExtra voucher\t%d in total\t490 premium points", gString, PlayerInfo[playerid][pNormalVoucher], PlayerInfo[playerid][pPremiumVoucher], PlayerInfo[playerid][pExtraVoucher]);
	ShowPlayerDialogEx(playerid, DIALOG_VOUCHERS, DIALOG_STYLE_TABLIST_HEADERS, "SERVER: Vouchers", gString, "Select", "Close");
	return 1; 
}
alias:vouchers("myvouchers")
CMD:sellvoucher(playerid, params[]) {
	if(PlayerInfo[playerid][pNormalVoucher] < 1 && PlayerInfo[playerid][pPremiumVoucher] < 1 && PlayerInfo[playerid][pExtraVoucher] < 1) return SCM(playerid, -1, "Nu ai niciun voucher.");
	if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "Ai nevoie de minim 5 ore jucate.");
	new id, price, item[64];
	if(sscanf(params, "uis[64]", id, price, item)) return SCM(playerid, -1, "Syntax: /sellvoucher [name/playerid] [price] [normal/premium]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(price < 1 || price > 999999999) return SCM(playerid, -1, "Invalid price, 1$ - 999,999,999$.");
	if(id == playerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
	if(strcmp(item, "normal", true) == 0) {
		if(PlayerInfo[playerid][pNormalVoucher] < 1) return SCM(playerid, -1, "Nu ai un normal voucher.");
		if(GetDistanceBetweenPlayers(playerid, id) > 8.0) return SCM(playerid, -1, "This player is not near you.");
		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You offered %s to buy a normal voucher for $%s.", GetName(id), FormatNumber(price));
		SCMf(id, COLOR_PRINC, "(Trade): {ffffff}%s wants to sell you a normal voucher for $%s, type /acceptvoucher %d normal to buy item.", GetName(playerid), FormatNumber(price), playerid);
		NormalOffer[id] = playerid; NormalPrice[id] = price;
	}
	else if(strcmp(item, "premium", true) == 0) {	
		if(PlayerInfo[playerid][pPremiumVoucher] < 1) return SCM(playerid, -1, "Nu ai un premium voucher.");
		if(GetDistanceBetweenPlayers(playerid, id) > 8.0) return SCM(playerid, -1, "This player is not near you.");
 		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You offered %s to buy a premium voucher for $%s.", GetName(id), FormatNumber(price));
		SCMf(id, COLOR_PRINC, "(Trade): {ffffff}%s wants to sell you a premium voucher for $%s, type /acceptvoucher %d premium to buy item.", GetName(playerid), FormatNumber(price), playerid);
		PremiumOffer[id] = playerid; PremiumPrice[id] = price;
	}
	else if(strcmp(item, "extra", true) == 0) {	
		if(PlayerInfo[playerid][pExtraVoucher] < 1) return SCM(playerid, -1, "Nu ai un extra voucher.");
		if(GetDistanceBetweenPlayers(playerid, id) > 8.0) return SCM(playerid, -1, "This player is not near you.");
 		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You offered %s to buy a premium voucher for $%s.", GetName(id), FormatNumber(price));
		SCMf(id, COLOR_PRINC, "(Trade): {ffffff}%s wants to sell you a premium voucher for $%s, type /acceptvoucher %d premium to buy item.", GetName(playerid), FormatNumber(price), playerid);
		ExtraOffer[id] = playerid; ExtraPrice[id] = price;
	}
	return 1; 
}	
CMD:acceptvoucher(playerid, params[]) {
	new id, item[64];
	if(sscanf(params, "us[64]", id, item)) return SCM(playerid, -1, "Syntax: /acceptvoucher [name/playerid] [normal/premium]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(strcmp(item, "normal", true) == 0) {
		if(NormalOffer[playerid] >= 999) return SCM(playerid, -1, "Nu ti-a oferit nimeni un voucher.");
		if(PlayerInfo[id][pNormalVoucher] < 1) return SCM(playerid, -1, "Acel player nu are un voucher.");
		if(NormalOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you a normal voucher.");
		if(GetPlayerCash(playerid) < NormalPrice[playerid]) return SCM(playerid, -1, "Nu ai bani.");
		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You bought a normal voucher for $%s from %s.", FormatNumber(NormalPrice[playerid]), GetName(NormalOffer[playerid]));	
		SCMf(NormalOffer[playerid], COLOR_PRINC, "(Trade): {ffffff}%s has bought your normal voucher for $%s.", GetName(playerid), FormatNumber(NormalPrice[playerid]));
		GivePlayerCash(NormalOffer[playerid], NormalPrice[playerid]); GivePlayerCash(playerid, -NormalPrice[playerid]);
		PlayerInfo[playerid][pNormalVoucher] ++; pUpdateInt(playerid, "NormalVoucher", PlayerInfo[playerid][pNormalVoucher]);
		PlayerInfo[NormalOffer[playerid]][pNormalVoucher] --; pUpdateInt(NormalOffer[playerid], "NormalVoucher", PlayerInfo[NormalOffer[playerid]][pNormalVoucher]);
		NormalOffer[playerid] = 999; NormalPrice[playerid] = 0;
		NormalOffer[id] = 999; NormalPrice[id] = 0;
	 	gString[0] = (EOS);
	 	mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s sold normal voucher to %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[NormalOffer[playerid]][pSQLID], GetName(NormalOffer[playerid]), GetName(playerid), FormatNumber(NormalPrice[playerid]));
	    mysql_tquery(SQL, gString, "", "");  		
	}
	else if(strcmp(item, "premium", true) == 0) {
		if(PremiumOffer[playerid] >= 999) return SCM(playerid, -1, "Nu ti-a oferit nimeni un voucher.");
		if(PlayerInfo[id][pPremiumVoucher] < 1) return SCM(playerid, -1, "Acel player nu are un voucher.");
		if(PremiumOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you a premium voucher.");
		if(GetPlayerCash(playerid) < PremiumPrice[playerid]) return SCM(playerid, -1, "Nu ai bani.");
		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You bought a premium voucher for $%s from %s.", FormatNumber(PremiumPrice[playerid]), GetName(PremiumOffer[playerid]));	
		SCMf(PremiumOffer[playerid], COLOR_PRINC, "(Trade): {ffffff}%s has bought your premium voucher for $%s.", GetName(playerid), FormatNumber(PremiumPrice[playerid]));
		GivePlayerCash(PremiumOffer[playerid], PremiumPrice[playerid]); GivePlayerCash(playerid, -PremiumPrice[playerid]);
		PlayerInfo[playerid][pPremiumVoucher] ++; pUpdateInt(playerid, "PremiumVoucher", PlayerInfo[playerid][pPremiumVoucher]);
		PlayerInfo[PremiumOffer[playerid]][pPremiumVoucher] --; pUpdateInt(PremiumOffer[playerid], "PremiumVoucher", PlayerInfo[PremiumOffer[playerid]][pPremiumVoucher]);
		PremiumOffer[playerid] = 999; PremiumPrice[playerid] = 0;
		PremiumOffer[id] = 999; PremiumPrice[id] = 0;
	 	gString[0] = (EOS);
	 	mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s sold premium voucher to %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[NormalOffer[playerid]][pSQLID], GetName(PremiumOffer[playerid]), GetName(playerid), FormatNumber(PremiumPrice[playerid]));
	    mysql_tquery(SQL, gString, "", "");  	
	}
	else if(strcmp(item, "extra", true) == 0) {
		if(ExtraOffer[playerid] >= 999) return SCM(playerid, -1, "Nu ti-a oferit nimeni un voucher.");
		if(PlayerInfo[id][pExtraVoucher] < 1) return SCM(playerid, -1, "Acel player nu are un voucher.");
		if(ExtraOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you a extra voucher.");
		if(GetPlayerCash(playerid) < ExtraPrice[playerid]) return SCM(playerid, -1, "Nu ai bani.");
		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You bought a premium voucher for $%s from %s.", FormatNumber(ExtraPrice[playerid]), GetName(ExtraOffer[playerid]));	
		SCMf(ExtraOffer[playerid], COLOR_PRINC, "(Trade): {ffffff}%s has bought your premium voucher for $%s.", GetName(playerid), FormatNumber(ExtraPrice[playerid]));
		GivePlayerCash(ExtraOffer[playerid], ExtraPrice[playerid]); GivePlayerCash(playerid, -ExtraPrice[playerid]);
		PlayerInfo[playerid][pExtraVoucher] ++; pUpdateInt(playerid, "PremiumVoucher", PlayerInfo[playerid][pExtraVoucher]);
		PlayerInfo[ExtraOffer[playerid]][pExtraVoucher] --; pUpdateInt(ExtraOffer[playerid], "PremiumVoucher", PlayerInfo[ExtraOffer[playerid]][pExtraVoucher]);
		ExtraOffer[playerid] = 999; ExtraPrice[playerid] = 0;
		ExtraOffer[id] = 999; ExtraPrice[id] = 0;
	 	gString[0] = (EOS);
	 	mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s sold premium voucher to %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[ExtraOffer[playerid]][pSQLID], GetName(ExtraOffer[playerid]), GetName(playerid), FormatNumber(ExtraPrice[playerid]));
	    mysql_tquery(SQL, gString, "", "");  	
	}
	return 1; 
}
CMD:putplayerinvehicle(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, -1, AdminOnly);
	new carid, seatid, id;
	if(sscanf(params, "uii", id, carid, seatid)) return SCM(playerid, -1, "Syntax: /putplayerinvehicle [name/playerid] [carid] [seat id]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Player not connected.");
	if(IsPlayerInAnyVehicle(id)) return SCM(playerid, -1, "Acel player deja se afla intr-un vehicul.");	
	if(seatid < 0 || seatid > 4) return SCM(playerid, -1, "Invalid seat id.");
	PutPlayerInVehicle(id, carid, seatid);
	SendAdmins(COLOR_PRINC, "(putplayer) {ffffff}%s used command /putplayerinvehicle on player %s - carid %d, seatid %d.", 1, GetName(playerid), GetName(id), carid, seatid);	
	SCMf(id, -1, "You have been teleported by admin %s.", GetName(playerid));
	return 1; 
}
CMD:accept(playerid, params[]) {
	new item[64], id;
	if(sscanf(params, "s[64]u", item, id)) {
		SCM(playerid, -1, "Syntax: /accept [item] [id]");
		SCM(playerid, -1, "Items: invite, gun, car, ticket, dice, cinvite, materials, refill, live, repair, drugs, hidden, tradecar.");
		return true;
	}
	if(id == INVALID_PLAYER_ID) return SCM(playerid, -1, "Invalid id.");
	if(strcmp(item, "invite", true) == 0) {
		if(PlayerInfo[playerid][pMember] >= 1) return SCM(playerid, -1, "Deja te afli intr-o factiune.");
		if(PlayerInfo[FactionOffer[playerid]][pMember] < 1) return SCM(playerid, -1, "Playerul ce ti-a dat invite nu este intr-o factiune.");
		if(FactionOffer[playerid] == 999) return SCM(playerid, -1, "Nu ai primit o invitatie.");
		switch(PlayerInfo[FactionOffer[playerid]][pMember]) {
			case 1: PlayerInfo[playerid][pTeam] = 2;
			case 2: PlayerInfo[playerid][pTeam] = 2;
			case 3: PlayerInfo[playerid][pTeam] = 2;
			case 4: PlayerInfo[playerid][pTeam] = 5;
			case 5: PlayerInfo[playerid][pTeam] = 5; 
			case 6: PlayerInfo[playerid][pTeam] = 5;
			case 8: PlayerInfo[playerid][pTeam] = 2;
			case 9: PlayerInfo[playerid][pTeam] = 4;
			case 10: PlayerInfo[playerid][pTeam] = 5;
			case 11: PlayerInfo[playerid][pTeam] = 11;
			case 13: PlayerInfo[playerid][pTeam] = 4;
			case 14: PlayerInfo[playerid][pTeam] = 4;
			case 15: PlayerInfo[playerid][pTeam] = 4;
		}
		PlayerInfo[playerid][pMember] = PlayerInfo[FactionOffer[playerid]][pMember]; PlayerInfo[playerid][pRank] = 1;
		PlayerInfo[playerid][pFactionJoin] = gettime();
		SetPlayerVirtualWorld(playerid, 0); SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pModel],0.0,0.0,0.0,0,0,0,0,0,0,0);
		gTeam[playerid] = PlayerInfo[playerid][pTeam];
		SetPlayerToTeamColor(playerid); SpawnPlayer(playerid);		gString[0] = (EOS);
		SCMf(playerid, COLOR_LIGHTBLUE, "You are now a member of the %s.", NumeFactiune(PlayerInfo[playerid][pMember]));
		SendFamilyMessage(PlayerInfo[playerid][pMember], COLOR_GENANNOUNCE, "%s has joined the group (invited by %s).", GetName(playerid), GetName(FactionOffer[playerid]));
		mysql_format(SQL, gString, 256, "UPDATE `users` SET `Team` = '%d', `Member` = '%d', `Rank` = '1', `FactionJoin` = '%d' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pMember], PlayerInfo[playerid][pFactionJoin], PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString);
		gString[0] = (EOS);
		mysql_format(SQL, gString, 300, "INSERT INTO faction_logs (`text`, `player`,`leader`) VALUES ('%s has joined the group %s (invited by %s).','%d','%d')", PlayerInfo[playerid][pNormalName], NumeFactiune(PlayerInfo[playerid][pMember]), PlayerInfo[FactionOffer[playerid]][pNormalName], PlayerInfo[playerid][pSQLID], PlayerInfo[FactionOffer[playerid]][pSQLID]);
		mysql_tquery(SQL, gString);
		gString[0] = (EOS);
		mysql_format(SQL, gString, 256, "UPDATE `users` SET `Raport1` = '0', `Raport2` = '0', `Raport3` = '0', `Raport4` = '0', `Raport5` = '0', `Raport6` = '0', `Raport7` = '0' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString);
		mysql_format(SQL, gString, 256, "UPDATE `users` SET `PaydayON` = '0', `FactionTime` = '0' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
		mysql_tquery(SQL, gString);
		if(IsACop(playerid)) Iter_Add(Cops, playerid);
	}
	else if(strcmp(item, "cinvite", true) == 0) {
		if(GetPVarInt(playerid, "cinvitePlayer") == INVALID_PLAYER_ID) return SCM(playerid, -1, "Acest jucator nu este conectat.");
		if(id != GetPVarInt(playerid, "cinvitePlayer")) return SCM(playerid, -1, "Nu acest jucator ti-a oferit o invitatie in clan.");
		new year, month, day, hour, minute, second; gettime(hour, minute, second); getdate(year, month, day); gString[0] = (EOS);
		format(gString, sizeof(gString), "%02d-%02d-%d %02d:%02d:%02d", day, month, year, hour, minute, second); pUpdateStr(playerid, "ClanJoin", gString);
		PlayerInfo[playerid][pClan] = PlayerInfo[id][pClan]; pUpdateInt(playerid, "Clan", PlayerInfo[playerid][pClan]);
		PlayerInfo[playerid][pCRank] = 1; pUpdateInt(playerid, "CRank", 1);
		inviteToClan(playerid, id, PlayerInfo[playerid][pClan]);
 	    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '0', '%s accepted invitation in clan id %d')", PlayerInfo[playerid][pSQLID], GetName(playerid), PlayerInfo[playerid][pClan]);
   		mysql_tquery(SQL, gString, "", "");	
   	    mysql_format(SQL, gString, 300, "INSERT INTO `clan_logs` (`clanid`, `text`) VALUES ('%d', '%s a intrat in clan.')", PlayerInfo[playerid][pClan], GetName(playerid));
   		mysql_tquery(SQL, gString, "", "");	
	}
	else if(strcmp(item, "materials", true) == 0) {
		if(MatsOffer[playerid] < 0) return true;
		if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "Ai nevoie de minim 5 ore pentru a folosi aceasta comanda.");
		if(MatsOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you materials.");
		if(GetPlayerCash(playerid) < MatsPrice[playerid]) return SCM(playerid, -1, "You don't have enough money.");
		PlayerInfo[playerid][pMats] += MatsAmmo[playerid]; PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmmo[playerid];
		GivePlayerCash(playerid, -MatsPrice[playerid]); GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You buy %d materials for $%s from %s.", MatsAmmo[playerid], FormatNumber(MatsPrice[playerid]), GetName(MatsOffer[playerid]));
		SCMf(MatsOffer[playerid], COLOR_PRINC, "(Trade): {ffffff}%s bought your materials for $%s.", GetName(playerid), FormatNumber(MatsPrice[playerid]));
		pUpdateInt(playerid, "Materials", PlayerInfo[playerid][pMats]); pUpdateInt(MatsOffer[playerid], "Materials", PlayerInfo[MatsOffer[playerid]][pMats]);
		gString[0] = (EOS);
 	    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s sold mats %d to %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[MatsOffer[playerid]][pSQLID], GetName(MatsOffer[playerid]), MatsAmmo[playerid], GetName(playerid), FormatNumber(MatsPrice[playerid]));
   		mysql_tquery(SQL, gString, "", "");  	
   		MatsOffer[playerid] = -1; MatsAmmo[playerid] = 0; MatsPrice[playerid] = 0;
	}

	else if(strcmp(item, "gun", true) == 0) {
		if(SellgunOffer[playerid] < 0) return true;
		if(SellgunOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you gun.");
		if(GetPlayerCash(playerid) < SellgunPrice[playerid]) return SCM(playerid, -1, "You don't have enough money.");
		new weaponid, ammo, price, mats, idoffer;
		weaponid = SellgunID[playerid]; ammo = SellgunAmmo[playerid]; price = SellgunPrice[playerid]; mats = SellgunMats[playerid]; idoffer = SellgunOffer[playerid]; 
		GivePlayerWeaponEx(playerid, weaponid, ammo);
		PlayerInfo[idoffer][pMats] -= mats; pUpdateInt(idoffer, "Materials", PlayerInfo[idoffer][pMats]);
		GivePlayerCash(playerid, -price); GivePlayerCash(idoffer, price);
		SCMf(idoffer, COLOR_PRINC, "(Trade): {ffffff}You have given %s, weapon with %d ammo, for %d materials.", GetName(playerid), ammo, mats);
		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You have recieved a weapon with %d ammo from %s.", ammo, GetName(idoffer));
		gString[0] = (EOS);
 	    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s sold gun %d to %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[SellgunOffer[playerid]][pSQLID], GetName(SellgunOffer[playerid]), SellgunID[playerid], GetName(playerid), FormatNumber(SellgunPrice[playerid]));
   		mysql_tquery(SQL, gString, "", "");  			
   		SellgunOffer[playerid] = -1; SellgunPrice[playerid] = 0; SellgunMats[playerid] = 0; SellgunAmmo[playerid] = 0; SellgunID[playerid] = 0;
	}
	else if(strcmp(item, "ticket", true) == 0) {
		if(TicketOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you ticket.");
		if(!IsPlayerConnected(TicketOffer[playerid])) return SCM(playerid, -1, "Acel player nu este conectat.");
		if(GetPlayerCash(playerid) < 25000000) return SCM(playerid, COLOR_GREY, "Nu ai minim $25.000.000");
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}You have paid the $%d ticket %s issued you.", TicketMoney[playerid], GetName(TicketOffer[playerid]));
		SCMf(TicketOffer[playerid], -1, "%s has accepted the $%d ticket you issued them.", GetName(playerid), TicketMoney[playerid]);
		GivePlayerCash(playerid, -TicketMoney[playerid]); GivePlayerCash(TicketOffer[playerid], TicketMoney[playerid]);
		gString[0] = (EOS);
 	    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s ticketed %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[TicketOffer[playerid]][pSQLID], GetName(TicketOffer[playerid]), GetName(playerid), FormatNumber(TicketMoney[playerid]));
   		mysql_tquery(SQL, gString, "", "");    
		TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	}	
	else if(strcmp(item, "refill", true) == 0) {
		if(RefillOffer[playerid] >= 999) return true;
		if(RefillOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you a refill.");
		if(!IsPlayerConnected(RefillOffer[playerid])) return SCM(playerid, -1, "Acel player nu este conectat.");
		if(GetPlayerCash(playerid) < RefillPrice[playerid]) return SCM(playerid, -1, "Nu ai bani.");
		new car = gLastCar[playerid];
		SCMf(playerid, COLOR_PRINC, ">> {ffffff}You refilled your car for $%d by Car Mechanic %s.", RefillPrice[playerid], GetName(RefillOffer[playerid]));
		SCMf(RefillOffer[playerid], -1, "You refilled %s's car and you received $%d.", GetName(playerid), RefillPrice[playerid]);
		GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]); GivePlayerCash(playerid, -RefillPrice[playerid]);
		if(Gas[car] < 110) { Gas[car] = 100; }
		RefillOffer[playerid] = 999; RefillPrice[playerid] = 0;
		gString[0] = (EOS);
	    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s refill vehicle %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[RefillOffer[playerid]][pSQLID], GetName(RefillOffer[playerid]), GetName(playerid), FormatNumber(RefillPrice[playerid]));
    	mysql_tquery(SQL, gString, "", "");   		
	    mysql_format(SQL, gString, 256, "UPDATE `users` SET `Raport1` = `Raport1` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[RefillOffer[id]][pSQLID]);
	    mysql_tquery(SQL, gString);    
	}
	else if(strcmp(item, "live", true) == 0) {
		if(LiveOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you live.");
		if(!IsPlayerConnected(LiveOffer[playerid])) return SCM(playerid, -1, "Acel player nu este conectat.");
		if(TalkingLive[LiveOffer[playerid]] == 0) {
			gString[0] = (EOS);
			mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `Raport6` = `Raport6` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[LiveOffer[playerid]][pSQLID]);
			mysql_tquery(SQL, gString, "", ""); 			
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "You are now in a live interview! Respect the rules or you will get kicked!");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Everything you say will be seen by everyone on the server!");
		SendClientMessage(playerid, COLOR_DARKPINK, "Ai primit freeze. Te vei putea misca dupa ce se va termina live-ul.");		
		SCMf(LiveOffer[playerid], COLOR_LIGHTBLUE, "%s accepted live interview.", GetName(playerid));
		SCM(LiveOffer[playerid], COLOR_DARKPINK, "Ai primit freeze. Te vei putea misca dupa ce vei termina live-ul.");		
		TogglePlayerControllable(playerid, 0); TogglePlayerControllable(LiveOffer[playerid], 0);
		TalkingLive[playerid] = 1; TalkingLive[LiveOffer[playerid]] = 1; LiveOffer[playerid] = 999;
	}
	else if(strcmp(item, "drugs", true) == 0) {
		if(DrugOffer[playerid] >= 999) return true;
		if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "Ai nevoie de minim 5 ore pentru a folosi aceasta comanda.");
		if(DrugOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you drugs.");
		if(GetPlayerCash(playerid) < DrugPrice[playerid]) return SCM(playerid, -1, "Nu ai bani.");
		if(!IsPlayerConnected(DrugOffer[playerid])) return SCM(playerid, -1, "Acel player nu este conectat.");
		if(PlayerInfo[playerid][pDrugs] > 50) return SCM(playerid, -1, "You are fully loaded with drugs, use them first.");
		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}You bought %d gram for $%d from Drug Dealer %s.", DrugGram[playerid], DrugPrice[playerid], GetName(DrugOffer[playerid]));
		SCMf(DrugOffer[playerid], COLOR_PRINC, "(Trade): {ffffff}%s has bought your %d gram, the $%d was added to your PayCheck.", GetName(playerid), DrugGram[playerid], DrugPrice[playerid]);
		GivePlayerCash(DrugOffer[playerid], DrugPrice[playerid]); GivePlayerCash(playerid, -DrugPrice[playerid]);
		PlayerInfo[playerid][pDrugs] += DrugGram[playerid]; PlayerInfo[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
		pUpdateInt(DrugOffer[playerid], "Drugs", PlayerInfo[DrugOffer[playerid]][pDrugs]); pUpdateInt(playerid, "Drugs", PlayerInfo[playerid][pDrugs]);
 		gString[0] = (EOS);
	 	mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s sold %d drugs to %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[DrugOffer[playerid]][pSQLID], GetName(DrugOffer[playerid]), DrugGram[playerid], GetName(playerid), FormatNumber(DrugPrice[playerid]));
	    mysql_tquery(SQL, gString, "", "");    
	    DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0;
	}	
	else if(strcmp(item, "repair", true) == 0) {
		if(RepairOffer[playerid] >= 999) return true;
		if(RepairOffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you repair.");
		if(GetPlayerCash(playerid) < RepairPrice[playerid]) return SCM(playerid, -1, "Nu ai bani.");
		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
		if(!IsPlayerConnected(RepairOffer[playerid])) return SCM(playerid, -1, "Acel player nu este conectat.");
		RepairCar[playerid] = GetPlayerVehicleID(playerid);
		SetVehicleHealth(RepairCar[playerid], 1000.0); RepairVehicle(RepairCar[playerid]);
		gString[0] = (EOS);
 	    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s repaired vehicle %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[RepairOffer[playerid]][pSQLID], GetName(RepairOffer[playerid]), GetName(playerid), FormatNumber(RepairPrice[playerid]));
	    mysql_tquery(SQL, gString, "", "");  
		mysql_format(SQL, gString, 256, "UPDATE `users` SET `Raport1` = `Raport1` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[RepairOffer[playerid]][pSQLID]);
		mysql_tquery(SQL, gString);		 		
		RepairOffer[playerid] = 999; RepairPrice[playerid] = 0;
	}
	else if(strcmp(item, "hidden", true) == 0) {
		if(!IsPlayerConnected(hiddenoffer[playerid])) return SCM(playerid, -1, "Acel player nu este conectat.");
		if(hiddenoffer[playerid] != id) return SCM(playerid, -1, "This player has not offered you a hidden color.");
		if(PlayerInfo[id][pHiddenColor] < 1) return SCM(playerid, -1, "Acest jucator nu are destule culori.");
		if(GetPlayerCash(playerid) < hiddenprice[playerid]) return SCM(playerid, -1, "Nu ai bani.");
		PlayerInfo[playerid][pHiddenColor] ++; PlayerInfo[id][pHiddenColor] --;
		pUpdateInt(playerid, "HiddenColor", PlayerInfo[playerid][pHiddenColor]); pUpdateInt(id, "HiddenColor", PlayerInfo[id][pHiddenColor]);
		GivePlayerCash(playerid, -hiddenprice[playerid]); GivePlayerCash(hiddenoffer[playerid], hiddenprice[playerid]);
		SCMf(playerid, COLOR_PRINC, "(Trade): {ffffff}Ai cumparat o culoare hidden in schimbul sumei de $%s.", FormatNumber(hiddenprice[playerid]));
		SCMf(hiddenoffer[playerid], COLOR_PRINC, "(Trade): {ffffff}Ai primit $%s in schimbul unui hidden.", FormatNumber(hiddenprice[playerid]));
		gString[0] = (EOS);
	    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s sold hidden %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[hiddenoffer[playerid]][pSQLID], GetName(hiddenoffer[playerid]), GetName(playerid), FormatNumber(hiddenprice[playerid]));
	    mysql_tquery(SQL, gString, "", "");     
	    hiddenoffer[playerid] = 999; hiddenprice[playerid] = 0; SellTradeTimer[id] = 0;
	}
	else if(strcmp(item, "tradecar", true) == 0) {
		if(!IsPlayerConnected(tradeofferer[playerid])) return SCM(playerid, -1, "Acel player nu este conectat.");
		if(tradeofferer[playerid] != id) return SCM(playerid, -1, "This player has not offered you a car.");
		if(GetPlayerCash(tradeofferer[playerid]) < tradediff[playerid]) return SCM(playerid, -1, "Nu ai bani.");
		new tid = tradeofferer[playerid], idcar1, idcar2;
		for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) { if(PlayerInfo[playerid][pCar][vv] == tradetype2[playerid]) idcar1 = vv; }
		for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) { if(PlayerInfo[tid][pCar][vv] == tradetype[playerid]) idcar2 = vv; }
		if(tradetype2[playerid] != PlayerInfo[playerid][pCar][idcar1]) return SendClientMessage(playerid, COLOR_WHITE, "Masina oferita numai este detinuta de tine.");
		if(tradetype[playerid] != PlayerInfo[tid][pCar][idcar2]) return SendClientMessage(playerid, COLOR_WHITE, "Acel jucator numai detine aceasta masina.");
		if(tradecars2[playerid] == PlayerInfo[playerid][pCarID][idcar1]) PlayerInfo[playerid][pCarID][idcar1] = tradecars[playerid];
		if(tradecars[playerid] == PlayerInfo[tid][pCarID][idcar2]) PlayerInfo[tid][pCarID][idcar2] = tradecars2[playerid];
		if(tradetype2[playerid] == PlayerInfo[playerid][pCar][idcar1]) PlayerInfo[playerid][pCar][idcar1] = tradetype[playerid];
		if(tradetype[playerid] == PlayerInfo[tid][pCar][idcar2]) PlayerInfo[tid][pCar][idcar2] = tradetype2[playerid];
		GivePlayerCash(tradeofferer[playerid], -tradediff[playerid]); GivePlayerCash(playerid, tradediff[playerid]);
		strmid(CarOwner[playerid][idcar1], PlayerInfo[playerid][pNormalName], 0, 50, 999);
		cUpdate(playerid, idcar1, cOwnerx);
		strmid(CarOwner[tid][idcar2], PlayerInfo[tid][pNormalName], 0, 50, 999);
		cUpdate(tid, idcar2, cOwnerx);
		SCM(playerid, -1, "Afacerea s-a incheiat cu succes.");
		SCM(tid, -1, "Afacerea s-a incheiat cu succes.");
		SendAdmins(COLOR_ORANGE, "* %s traded his %s with %s's %s, with difference of $%s.", 1, GetName(tradeofferer[playerid]), aVehicleNames[PlayerInfo[tradeofferer[playerid]][pCarModel][idcar1] - 400], GetName(playerid), aVehicleNames[PlayerInfo[playerid][pCarModel][idcar2] - 400], FormatNumber(tradediff[playerid]));
		tradeofferer[playerid] = -1; tradediff[playerid] = 0; tradetype[playerid] = -1; tradetype2[playerid] = -1; tradecars[playerid] = -1; tradecars2[playerid] = -1; SellTradeTimer[id] = 0;
		LoadCar(playerid);
		LoadCar(tid);
		RemovePlayerFromVehicle(playerid); RemovePlayerFromVehicle(tid);		
	}
	else if(strcmp(item, "dice", true) == 0) {
		if(PlayerInfo[playerid][pConnectTime] < 5) return SCM(playerid, -1, "Ai nevoie de minim 5 ore pentru a folosi aceasta actiune.");	
		if(diceid[playerid] == 999) return SCM(playerid, -1, "Nobody invited you to play dice.");
		if(diceid[playerid] != id) return SCM(playerid, -1, "That player didn't invited you to play dice with him.");
		if(GetPlayerCash(playerid) < dicemoney[playerid]) return SCM(playerid, -1, "You or your adversary doesn't have enough money to play dice.");
		if(GetPlayerCash(id) < dicemoney[playerid]) return SCM(playerid, -1, "You or your adversary doesn't have enough money to play dice.");
		if(GetDistanceBetweenPlayers(playerid, diceid[playerid]) > 10) return SCM(playerid, -1, "Nu te afli langa acel player.");
		new dice1[MAX_PLAYERS], dice2[MAX_PLAYERS], total[MAX_PLAYERS];
	    dice1[playerid] = random(6) + 1; dice2[playerid] = random(6) + 1; total[playerid] = dice1[playerid] + dice2[playerid];
	    dice1[diceid[playerid]] = random(6) + 1; dice2[diceid[playerid]] = random(6) + 1; 
	    total[diceid[playerid]] = dice1[diceid[playerid]] + dice2[diceid[playerid]];
	    if(total[playerid] > total[diceid[playerid]]) {
			GivePlayerCash(playerid, dicemoney[playerid]);
			GivePlayerCash(diceid[playerid], -dicemoney[playerid]);
			SCMf(playerid, COLOR_GREEN, "(+) You won $%s!", FormatNumber(dicemoney[playerid]));
			SCMf(diceid[playerid], COLOR_GREEN, "(-) You lost $%s!", FormatNumber(dicemoney[playerid]));             			
		}
		if(total[diceid[playerid]] > total[playerid]) {
			GivePlayerCash(playerid, -dicemoney[playerid]);
			GivePlayerCash(diceid[playerid], dicemoney[playerid]);
			SCMf(diceid[playerid], COLOR_GREEN, "(+) You won $%s!", FormatNumber(dicemoney[playerid]));
			SCMf(playerid, COLOR_GREEN, "(-) You lost $%s!", FormatNumber(dicemoney[playerid]));		
		}
		if(total[diceid[playerid]] == total[playerid]) {
			SCM(diceid[playerid], -1, "Equal.");
			SCM(playerid, -1, "Equal.");
		}
		if(quest_type[playerid] == quest_barbut) quest_finish(playerid);
		if(quest_type[diceid[playerid]] == quest_barbut) quest_finish(diceid[playerid]);
		diceid[playerid] = 999; dicemoney[playerid] = 0;    
	}   
    else if(strcmp(item, "car", true) == 0) {
    	if(!IsPlayerConnected(ofercar[playerid])) return SCM(playerid, -1, "Acel player nu este conectat.");
    	if(ofercar[playerid] != id) return SCM(playerid, -1, "This player has not offered you a car.");
    	if(GetPlayerCash(playerid) < carprice[playerid]) return SCM(playerid, -1, "Nu ai bani.");
    	new idcar1, idcar2, total;
    	if(GetDistanceBetweenPlayers(playerid, id) > 15) return SCM(playerid, -1, "Nu esti langa acel player.");
		for(new v; v < MAX_PERSONAL_VEHICLES; v++) {
			if(PlayerInfo[playerid][pCar][v] != -1) total++;
		}
		if(total+1 > PlayerInfo[playerid][pCarSlots]) return SCM(playerid, COLOR_WHITE, "Nu ai sloturi disponibile.");
		for(new v; v < PlayerInfo[playerid][pCarSlots]; v++) {
			if(PlayerInfo[playerid][pCar][v] == -1) {
				idcar1 = v;
				break;
			}
		}
		for(new v; v < PlayerInfo[id][pCarSlots]; v++) {
			if(PlayerInfo[id][pCar][v] == cartype[playerid]) idcar2 = v;
		}
		if(cartype[playerid] != PlayerInfo[id][pCar][idcar2]) return SendClientMessage(playerid, COLOR_WHITE, "Acel jucator nu mai detine aceasta masina.");
		PlayerInfo[playerid][pCar][idcar1] = PlayerInfo[id][pCar][idcar2]; PlayerInfo[playerid][pCarID][idcar1] = PlayerInfo[id][pCarID][idcar2];
		PlayerInfo[id][pCar][idcar2] = -1; PlayerInfo[id][pCarID][idcar2] = 0; SellTradeTimer[id] = 0;
		LoadCar(playerid);
		LoadCar(id);
		sendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s sold his %s [vehicle: %d] to %s for $%s.",GetName(ofercar[playerid]),aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400],PlayerInfo[playerid][pCar][idcar1],GetName(playerid),FormatNumber(carprice[playerid]));
		SendAdmins(COLOR_PRINC, "* %s sold his %s [vehicle: %d] to %s for $%s.", 1, GetName(ofercar[playerid]), aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400], PlayerInfo[playerid][pCar][idcar1], GetName(playerid), FormatNumber(carprice[playerid]));	
		SendClientMessage(id, COLOR_WHITE, "The sell/trade car offer has expired.");
		RemovePlayerFromVehicleEx(ofercar[playerid]);
		GivePlayerCash(playerid, -carprice[playerid]); GivePlayerCash(ofercar[playerid], carprice[playerid]);
		strmid(CarOwner[playerid][idcar1], PlayerInfo[playerid][pNormalName], 0, 50, 999);
		cUpdate(playerid, idcar1, cOwnerx);
		strmid(CarOwner[id][idcar2], PlayerInfo[id][pNormalName], 0, 50, 999);
		cUpdate(id, idcar2, cOwnerx);	
		gString[0] = (EOS);
	    mysql_format(SQL, gString, 300, "INSERT INTO `playerlogs` (`playerid` , `giverid` , `action`) VALUES ('%d', '%d', '%s sold his %s [car: %d] to %s for $%s')", PlayerInfo[playerid][pSQLID], PlayerInfo[ofercar[playerid]][pSQLID] , GetName(ofercar[playerid]), aVehicleNames[PlayerInfo[playerid][pCarModel][idcar1] - 400], PlayerInfo[playerid][pCar][idcar1], GetName(playerid), FormatNumber(carprice[playerid]));
	    mysql_tquery(SQL, gString, "", "");   		
		ofercar[playerid] = -1; carprice[playerid] = 0; primesccar[playerid] = 0; cartype[playerid] = 0;
		LoadCar(playerid);
		LoadCar(id);	
		if(quest_type[playerid] == quest_sellcar) quest_finish(playerid);		
    } else {
    	SCM(playerid, -1, "Campuri invalide.");
    	return true;
    }	 	
	return 1; 
}
CMD:givepp(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);
	new id, amount, reason[64];
	if(sscanf(params, "uis[64]", id, amount, reason)) return SCM(playerid, -1, "Syntax: /givepp [name/playerid] [amount] [reason]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(amount < 1 || amount > 1000) return SCM(playerid, -1, "Invalid amount.");
	PlayerInfo[id][pPremiumPoints] += amount; pUpdateInt(id, "PremiumPoints", PlayerInfo[id][pPremiumPoints]);
	SendAdmins(COLOR_PRINC, "(/givepp) {ffffff} %s [admin: %d] gived %d premium points to %s [user: %d, total: %d], reason: %s.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], amount, GetName(id), PlayerInfo[id][pSQLID], PlayerInfo[id][pPremiumPoints], reason);
	SCMf(id, COLOR_PRINC, "[premium points changed]: +%d from administrator %s.", amount, GetName(playerid));
	return 1; 
}
CMD:dr(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	new id;
	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /dr [name/playerid]");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Acel player nu este conectat.");
	if(reportdat[id] < 1) return SCM(playerid, -1, "Acel player nu are un report activ.");
	reportdat[id] = 0;
	SendAdmins(COLOR_DARKPINK, "%s closed '%s'.", 1, GetName(playerid), reporttext[id]);
	SCM(id, COLOR_GREEN, "Reportul tau este in curs de rezolvare.");
	format(reporttext[id], 30, "NULL");
	gString[0] = (EOS);
	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `HelpedPlayers` = `HelpedPlayers` + '1' WHERE `id` = '%d'", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString, "", ""); 
	PlayerInfo[playerid][pTokens] ++;
	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Tokens` = `Tokens` + '1' WHERE `id` = '%d' LIMIT 1", PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, gString);		
	return 1; 
}	
task timer_ac[500]() {
	foreach(new x : Player) {
		if(ac_trolltimer == 1 && PlayerInfo[x][pAdmin] < 1) {
			checkTroll(x);
		}
	}
	return 1; 
}
checkTroll(playerid, type = 0) {
	if(acdebugserver >= 1) return true;
	if(type == 1) {
		//SendAdmins(COLOR_PRINC1, "Kick: %s was kicked by AdmBot, reason: possible troll hack #8.", 1, GetName(playerid));		
		SendAdmins(COLOR_PRINC1, "%s - possible troll hack #8.", 1, GetName(playerid));		
		SendAdmins(COLOR_PRINC1, "%s - possible troll hack #8.", 1, GetName(playerid));		
		SendAdmins(COLOR_PRINC1, "%s - possible troll hack #8.", 1, GetName(playerid));		
		
		//Kick(playerid);	
		acdebugserver = 30;	
		return true;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		new Float: Vel[3]; GetVehicleVelocity(GetPlayerVehicleID(playerid), Vel[0], Vel[1], Vel[2]);
		if(Vel[1] == -90.000000 && Vel[2] == 0.100000) {
			//SendAdmins(COLOR_PRINC1, "Kick: %s was kicked by AdmBot, reason: possible troll hack #9.", 1, GetName(playerid));	
			SendAdmins(COLOR_PRINC1, "%s - possible troll hack #9.", 1, GetName(playerid));	
			SendAdmins(COLOR_PRINC1, "%s - possible troll hack #9.", 1, GetName(playerid));	
			SendAdmins(COLOR_PRINC1, "%s - possible troll hack #9.", 1, GetName(playerid));							
			//Kick(playerid);
			acdebugserver = 30;
			return true;
		}	
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && flymode[playerid] == 0) {
		new Float: Vel[3]; GetPlayerVelocity(playerid, Vel[0], Vel[1], Vel[2]);
		new Float:vel1 = Vel[0] - LastVel[playerid][0], Float:vel2 = Vel[1] - LastVel[playerid][2];
		if(vel1 > 6.0 || vel1 < -8.0 || vel2 > 20.0 || vel2 < -20.0 || Vel[2] == 0.100000) {
			//SendAdmins(COLOR_PRINC1, "Kick: %s was kicked by AdmBot, reason: possible troll hack #10.", 1, GetName(playerid));	
			SendAdmins(COLOR_PRINC1, "%s - possible troll hack #10.", 1, GetName(playerid));	
			SendAdmins(COLOR_PRINC1, "%s - possible troll hack #10.", 1, GetName(playerid));
			SendAdmins(COLOR_PRINC1, "%s - possible troll hack #10.", 1, GetName(playerid));
			SendAdmins(COLOR_PRINC1, "%s - possible troll hack #10.", 1, GetName(playerid));				
			//Kick(playerid);
			acdebugserver = 30;
			return true;
		}
	}	
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) GetPlayerVelocity(playerid, LastVel[playerid][0], LastVel[playerid][1], LastVel[playerid][2]);
	return 1; 
}
alias:clanduty("cduty")
CMD:debugpayday(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, -1, AdminOnly);
	PayDay();
	SCM(playerid, -1, "debugged");
	return 1; 
}
CMD:gethit(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 11) return SCM(playerid, -1, "Nu faci parte din Hitman Agency.");
	if(OnDuty[playerid] < 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece nu esti on duty.");
	if(contract_get[playerid] >= 0) return SCM(playerid, -1, "You have already a contract.");
	if(Iter_Count(Contracts) < 1) return SCM(playerid, -1, "No contracts available.");
	new gasit = 0;
	new x = Iter_Random(Contracts);
	if(PlayerInfo[x][pHeadValue] > 0 && PlayerInfo[x][pMember] != 11 && gPlayerLogged[x] == 1 && PlayerInfo[x][pSleeping] == 0 && PlayerInfo[x][pJailTime] < 1 && GetPlayerVirtualWorld(x) != 50 && PlayerInfo[x][pAdmin] < 1) {
		contract_get[playerid] = x;
		Iter_Remove(Contracts, x);
		gasit = 1;
	}
	if(gasit == 0) return SCM(playerid, -1, "Ai nimerit un contract neacceptat, foloseste din nou /gethit.");
	SendFamilyMessage(11, COLOR_BLUE, "%s received a contract. Target: %s. Money: $%s.", GetName(playerid), GetName(contract_get[playerid]), FormatNumber(PlayerInfo[contract_get[playerid]][pHeadValue]));
	SCM(playerid, COLOR_PRINC, "You have a new contract (/mycontract).");
	togfind[playerid] = 1;
	return 1; 
}
CMD:cancelhit(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 11) return SCM(playerid, -1, "Nu faci parte din Hitman Agency.");
	if(contract_get[playerid] < 0) return SCM(playerid, -1, "Nu ai un contract.");
	contract_get[playerid] = -1; togfind[playerid] = 0;
	SendFamilyMessage(11, COLOR_BLUE, "%s canceled and deleted his contract.", GetName(playerid));
	return 1; 
}
CMD:mycontract(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 11) return SCM(playerid, -1, "Nu faci parte din Hitman Agency.");
	if(contract_get[playerid] < 0) return SCM(playerid, -1, "Nu ai un contract.");
	SCMf(playerid, COLOR_PRINC, "You have a contract on %s (id: %d, money: $%s).", GetName(contract_get[playerid]), contract_get[playerid], FormatNumber(PlayerInfo[contract_get[playerid]][pHeadValue]));
	return 1; 
}	
CMD:undercover(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 11) return SCM(playerid, -1, "Nu faci parte din Hitman Agency.");
	if(OnDuty[playerid] < 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece nu esti on duty.");	
	switch(Undercover[playerid]) {
		case 0: {
			Undercover[playerid] = 1;
			foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, 0);
			PlayerTextDrawSetString(playerid, Jailtime[playerid], "You are now undercover");
			PlayerTextDrawShow(playerid, Jailtime[playerid]);
			SCM(playerid, COLOR_PRINC, "You are now undercover.");
		}
		case 1: {
			Undercover[playerid] = 0;
			foreach(new i : Player) ShowPlayerNameTagForPlayer(i, playerid, 1);
			PlayerTextDrawHide(playerid, Jailtime[playerid]);
			SCM(playerid, COLOR_PRINC, "You are not undercover anymore.");
		}
	}
	return 1; 
}
CMD:contract(playerid, params[]) {
	if(PlayerInfo[playerid][pLevel] < 3) return SCM(playerid, -1, "Nu ai level 3.");
	if(PlayerInfo[playerid][pMember] == 11) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece esti hitman.");
	if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Asteapta cateva secunde.");	
	new id, money;
	if(sscanf(params, "ui", id, money)) return SCM(playerid, -1, "Syntax: /contract [name/playerid] [money]");
	if(money < 10000 || money > 10000000) return SCM(playerid, -1, "Invalid money.");
	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	if(id == playerid) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe tine.");
	if(GetPlayerVirtualWorld(id) >= 1) return SCM(playerid, -1, "Nu poti pune un contract pe acel jucator deoarece se afla in virtual world.");
	if(PlayerInfo[id][pAdmin] >= 1) return SCM(playerid, -1, "Nu poti pune un contract pe acel jucator deoarece este admin.");
	if(PlayerInfo[id][pMember] == 11) return SCM(playerid, -1, "Nu poti pune un contract pe acel player deoarece este hitman.");
	if(GetPlayerCash(playerid) < money) return SCM(playerid, -1, "Nu ai bani.");
	GivePlayerCash(playerid, -money);
	PlayerInfo[id][pHeadValue] += money; pUpdateInt(id, "HeadValue", PlayerInfo[id][pHeadValue]);
	Iter_Add(Contracts, id);
	SendFamilyMessage(11, COLOR_BLUE, "New hit available! Target: %s. Price: $%s.", GetName(id), FormatNumber(PlayerInfo[id][pHeadValue]));
	SCM(playerid, COLOR_GREY, "Contract placed!");
	if(quest_type[playerid] == quest_contract) quest_finish(playerid);
	delayfactions[playerid] = 10;
	return 1; 
}
CMD:contracts(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 11) return SCM(playerid, -1, "Nu faci parte din Hitman Agency.");
	if(OnDuty[playerid] < 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece nu esti on duty.");
	SCM(playerid, COLOR_GREY, "----- Contracts -----");
	foreach(new x : Contracts) { SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s [id: %d, afk time: %d, jail time: %d]", GetName(x), x, IsPlayerAFK[x], PlayerInfo[x][pJailTime]); }
	SCMf(playerid, COLOR_BLUE, "Total targets: %d", Iter_Count(Contracts));
	SCM(playerid, COLOR_GREY, "----------");
	return 1; 
}
CMD:afklist(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	foreach(new x : Player) { if(PlayerInfo[x][pLevel] < 3 && GetDistanceBetweenPlayers(playerid, x) < 100) SCMf(playerid, COLOR_PRINC, ">> {ffffff}nob: %s, level %d, in range %f", GetName(x), PlayerInfo[x][pLevel], GetDistanceBetweenPlayers(playerid, x)); }
	return 1; 
}
CMD:spawnchange(playerid, params[])
{
	switch(PlayerInfo[playerid][pSpawnChange])
	{
		case 0:
		{
			if(PlayerInfo[playerid][pPhousekey] == 999) return SCM(playerid, -1, "Nu ai o casa.");

			PlayerInfo[playerid][pSpawnChange] = 1;
			pUpdateInt(playerid, "SpawnChange", 1);

			SCM(playerid, COLOR_GREY, "You will now spawn at your own / rented house!");
		}

		case 1:
		{
			PlayerInfo[playerid][pSpawnChange] = 0;
			pUpdateInt(playerid, "SpawnChange", 0);

			SCM(playerid, COLOR_GREY, "You will now spawn at your normal place!");
		}
	}
	return true;
}

CMD:mute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);
	if(sanctiondelay[playerid] >= 1) return SCM(playerid, -1, "Asteapta cateva secunde.");

	new id, time, reason[64];

	if(sscanf(params, "uis[64]", id, time, reason)) return SCM(playerid, -1, "Syntax: /mute [name/playerid] [time] [reason]");

	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Acel player nu este conectat.");
	if(PlayerInfo[playerid][pAdmin] < PlayerInfo[id][pAdmin]) return SCM(playerid, -1, "Nu poti folosi aceasta comanda pe un admin mai mare decat tine.");
	if(PlayerInfo[id][pMuteTime] >= 1) return SCM(playerid, -1, "Acel player are deja mute.");
	if(time < 1 || time > 30) return SCM(playerid, -1, "Invalid time.");

	SCMf(id, COLOR_GREY, "(mute): {ffffff}ai primit mute de la administratorul %s timp de %d minute.", GetName(playerid), time);
	va_SendClientMessageToAll(COLOR_LIGHTRED, "Mute: %s has been muted by %s for %d minutes, reason: %s.", GetName(id), GetName(playerid), time, reason);

	PlayerInfo[id][pMuteTime] = time*60;
	pUpdateInt(id, "MuteTime", PlayerInfo[id][pMuteTime]);

	sanctiondelay[playerid] = 30;

	return true;
}	

CMD:unmute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);

	new id;

	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /unmute [name/playerid]");

	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Acel player nu este conectat.");
	if(PlayerInfo[id][pMuteTime] < 1) return SCM(playerid, -1, "Acel player nu are mute.");

	PlayerInfo[id][pMuteTime] = 0;
	pUpdateInt(id, "MuteTime", 0);

	SCMf(id, COLOR_GREY, "(mute): {ffffff}ai primit unmute de la administratorul %s.", GetName(playerid));
	SendAdmins(COLOR_PRINC, "(/unmute) {ffffff}%s used command /unmute on %s.", 1, GetName(playerid), GetName(id));

	return true;
}

function clearchat(playerid)
{
	for(new i; i < 15; i++)
	{
		SCM(playerid, -1, "");
	}
}

CMD:gmx(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return true;

	SendRconCommand("gmx");

	return true;
}


CMD:carradio(playerid, params[])
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, -1, "Trebuie sa te afli intr-un vehicul.");
 
	radio_work(playerid);
	return true;
}

CMD:mp3(playerid, params[])
{
	if(PlayerInfo[playerid][pMp3] < 1) return SCM(playerid, -1, "Nu ai un mp3.");
 
	pula_mp3(playerid);
	return true;
}

function radio_work(playerid)
{
	new listen[20], stringy[400]; gString[0] = (EOS);
	for(new x; x < 20; x++) 
	{
		foreach(new i : Player) 
		{
			if(Listening[i] == x) listen[x]++;
		}
	}

	format(gString, 500, "Radio station\n{7E689B}Turn Off Radio\nRedtimes Radio\nRadio Bandit Romania\nRadio Taraf Romania\nRadio Hot Romania\nRadio Gangsta Dance\nRadio Gangsta Manele\n.977 Hitz\n",listen[0],listen[1],listen[2],listen[3],listen[4],listen[5],listen[6]);
	strcat(stringy, gString);
	format(gString, 500, ".977 Mix\n.977 Alternative\nRadio BBC One UK\nDubstep.fm\nRadio Hit Romania\nRadio ClubMix Romania\nKiss FM Romania [Audio Plugin]\nRadio Zu Romania [Audio Plugin]\n",listen[7],listen[8],listen[9],listen[10],listen[11],listen[12],listen[13],listen[14]);
	strcat(stringy, gString);
	format(gString, 500, "Radio Popular\nTrap.FM",listen[15],listen[16],listen[17]);
    strcat(stringy, gString);
	ShowPlayerDialogEx(playerid, DIALOG_RADIO, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Radio", stringy, "Play", "Cancel");		
	return true;
}

function pula_mp3(playerid)
{
	new listen[20], stringy[400]; gString[0] = (EOS);
	for(new x; x < 20; x++) 
	{
		foreach(new i : Player) 
		{
			if(Listening[i] == x) listen[x]++;
		}
	}

	format(gString, 500, "Radio station\n{7E689B}Turn Off Radio\nRedTimes Radio\nRadio Bandit Romania\nRadio Taraf Romania\nRadio Hot Romania\nRadio Gangsta Dance\nRadio Gangsta Manele\n.977 Hitz\n",listen[0],listen[1],listen[2],listen[3],listen[4],listen[5],listen[6]);
	strcat(stringy, gString);
	format(gString, 500, ".977 Mix\n.977 Alternative\nRadio BBC One UK\nDubstep.fm\nRadio Hit Romania\nRadio ClubMix Romania\nKiss FM Romania [Audio Plugin]\nRadio Zu Romania [Audio Plugin]\n",listen[7],listen[8],listen[9],listen[10],listen[11],listen[12],listen[13],listen[14]);
	strcat(stringy, gString);
	format(gString, 500, "Radio Popular\nTrap.FM",listen[15],listen[16],listen[17]);
    strcat(stringy, gString);
	ShowPlayerDialogEx(playerid, DIALOG_MP3, DIALOG_STYLE_TABLIST_HEADERS, "Vehicle Radio", stringy, "Play", "Cancel");		
	return true;
}

function check_bank(playerid)
{
	if(PlayerInfo[playerid][pMiliarde] >= 1 && PlayerInfo[playerid][pAccount] < 999999999)
	{
		PlayerInfo[playerid][pAccount] += 999999999;
		pUpdateInt(playerid, "Bank", PlayerInfo[playerid][pAccount]);

		PlayerInfo[playerid][pMiliarde] --;
		pUpdateInt(playerid, "Miliarde", PlayerInfo[playerid][pMiliarde]);
	}

	return true;
}

function manage_licenses(playerid)
{
	if(PlayerInfo[playerid][pCarLic] >= 1)
	{
		PlayerInfo[playerid][pCarLic] --;
		pUpdateInt(playerid, "CarLic", PlayerInfo[playerid][pCarLic]);

		if(PlayerInfo[playerid][pCarLic] < 1)
		{	
			PlayerInfo[playerid][pCarLic] = 0;
			pUpdateInt(playerid, "CarLic", 0);

			SCM(playerid, COLOR_PRINC, "* Licenta ta de condus a expirat.");
		}
	}

	if(PlayerInfo[playerid][pGunLic] >= 1)
	{
		PlayerInfo[playerid][pGunLic] --;
		pUpdateInt(playerid, "GunLic", PlayerInfo[playerid][pGunLic]);

		if(PlayerInfo[playerid][pGunLic] < 1)
		{	
			PlayerInfo[playerid][pGunLic] = 0;
			pUpdateInt(playerid, "GunLic", 0);

			SCM(playerid, COLOR_PRINC, "* Licenta ta de arme a expirat.");
		}
	}

	if(PlayerInfo[playerid][pBoatLic] >= 1)
	{
		PlayerInfo[playerid][pBoatLic] --;
		pUpdateInt(playerid, "BoatLic", PlayerInfo[playerid][pBoatLic]);

		if(PlayerInfo[playerid][pBoatLic] < 1)
		{	
			PlayerInfo[playerid][pBoatLic] = 0;
			pUpdateInt(playerid, "BoatLic", 0);

			SCM(playerid, COLOR_PRINC, "* Licenta ta de barca a expirat.");
		}
	}

	if(PlayerInfo[playerid][pFlyLic] >= 1)
	{
		PlayerInfo[playerid][pFlyLic] --;
		pUpdateInt(playerid, "FlyLic", PlayerInfo[playerid][pFlyLic]);

		if(PlayerInfo[playerid][pFlyLic] < 1)
		{	
			PlayerInfo[playerid][pFlyLic] = 0;
			pUpdateInt(playerid, "FlyLic", 0);

			SCM(playerid, COLOR_PRINC, "* Licenta ta de zbor a expirat.");
		}
	}

	return true;
}

CMD:showlicenses(playerid, params[])
{
	new id;

	if(sscanf(params, "u", id)) return SCM(playerid, -1, "Syntax: /showlicenses [name/id]");
	if(id == INVALID_PLAYER_ID)	return SCM(playerid, -1, "Player not connected.");
	if(GetDistanceBetweenPlayers(playerid, id) > 8 || Spectate[id] != -1) return SCM(playerid, -1, "This player is not near you.");
		
	SCMf(id, -1, "---- %s's licenses ----", GetName(playerid));	

	if(PlayerInfo[playerid][pCarLic] >= 1) SCMf(id, -1, "Drivers licence: Passed (expires in %d hours)", PlayerInfo[playerid][pCarLic]);
	if(PlayerInfo[playerid][pCarLic] < 1) SCM(id, -1, "Drivers licence: Not Passed");

	if(PlayerInfo[playerid][pFlyLic] >= 1) SCMf(id, -1, "Flying licence: Passed (expires in %d hours)", PlayerInfo[playerid][pFlyLic]);
	if(PlayerInfo[playerid][pFlyLic] < 1) SCM(id, -1, "Flying licence: Not Passed");

	if(PlayerInfo[playerid][pBoatLic] >= 1) SCMf(id, -1, "Boat licence: Passed (expires in %d hours)", PlayerInfo[playerid][pBoatLic]);
	if(PlayerInfo[playerid][pBoatLic] < 1) SCM(id, -1, "Boat licence: Not Passed");

	if(PlayerInfo[playerid][pGunLic] >= 1) SCMf(id, -1, "Weapon licence: Passed (expires in %d hours)", PlayerInfo[playerid][pGunLic]);
	if(PlayerInfo[playerid][pGunLic] < 1) SCM(id, -1, "Weapon licence: Not Passed");		
	
	SCM(id, -1, "------------");	
	SCMf(id, COLOR_LIGHTBLUE, "* %s has shown his/her Licenses to you.", GetName(playerid));
	SCMf(id, COLOR_LIGHTBLUE, "* You have shown your Licenses to %s.", GetName(id));

	return true;
}

CMD:licenses(playerid, params[])
{
	SCM(playerid, -1, "---- Your licenses ----");

	if(PlayerInfo[playerid][pCarLic] >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}Drivers licence: Passed (expires in %d hours)", PlayerInfo[playerid][pCarLic]);
	if(PlayerInfo[playerid][pCarLic] < 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}Drivers licence: Not passed (%d hours suspended)", PlayerInfo[playerid][pCarLicSuspend]);

	if(PlayerInfo[playerid][pGunLic] >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}Weapon licence: Passed (expires in %d hours)", PlayerInfo[playerid][pGunLic]);
	if(PlayerInfo[playerid][pGunLic] < 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}Weapon licence: Not passed (%d hours suspended)", PlayerInfo[playerid][pGunLicSuspend]);

	if(PlayerInfo[playerid][pFlyLic] >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}Flying licence: Passed (expires in %d hours)", PlayerInfo[playerid][pFlyLic]);
	if(PlayerInfo[playerid][pFlyLic] < 1) SCM(playerid, -1, "Flying licence: Not passed");

	if(PlayerInfo[playerid][pBoatLic] >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}Boat licence: Passed (expires in %d hours)", PlayerInfo[playerid][pBoatLic]);
	if(PlayerInfo[playerid][pBoatLic] < 1) SCM(playerid, -1, "Boat licence: Not passed");

	SCM(playerid, -1, "------------");

	return true;
}

CMD:netstats(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);

	new ip[16]; NetStats_GetIpPort(playerid, ip, sizeof ip);

	gString[0] = (EOS);

	format(gString, sizeof(gString), "server tickrate: %d\nmysql unprocessed queries: %d\n\nnet connected time: %d\nnet messages reived: %d\n", GetServerTickRate(), mysql_unprocessed_queries(), NetStats_GetConnectedTime(playerid), NetStats_MessagesReceived(playerid));
	format(gString, sizeof(gString), "%snet bytes received: %d\nnet messages sent: %d\nnet bytes sent: %d\nnet messages received per second: %d\n", gString, NetStats_BytesReceived(playerid), NetStats_MessagesSent(playerid), NetStats_BytesSent(playerid), NetStats_MessagesRecvPerSecond(playerid));
	format(gString, sizeof(gString), "%snet packet lost percent: %d\nnet connection status: %d\nnet ip port: %s", gString, NetStats_PacketLossPercent(playerid), NetStats_ConnectionStatus(playerid), ip);
	
	ShowPlayerDialogEx(playerid, DIALOG_GOL, DIALOG_STYLE_MSGBOX, "Net Stats", gString, "Exit", "");

	return true;
}

function fly_work(playerid)
{
	if(!IsPlayerConnected(playerid) || GetPVarInt(playerid, "now_login") >= 1 || gPlayerLogged[playerid] == 0 || IsPlayerInAnyVehicle(playerid) || PlayerInfo[playerid][pAdmin] >= 1 || ac_fly < 1 || PlayerInfo[playerid][pTut] < 1 || PlayerInfo[playerid][pFPS] < 1 || PlayerInfo[playerid][pHelper] >= 1) return true;
	if(GetPlayerSurfingVehicleID(playerid) != INVALID_VEHICLE_ID) return true;
	
	if(!IsPlayerInRangeOfPoint(playerid, 10, PlayerPosii[playerid][0], PlayerPosii[playerid][1], PlayerPosii[playerid][2]) && GetPlayerWeapon(playerid) != 46) 
	{
		if(fly_warnings[playerid] == 0)	SendAdmins(COLOR_RED, "%s (level %d) may be using cheats (fly/teleport).", 1, GetName(playerid), PlayerInfo[playerid][pLevel]);
	}

	fly_warnings[playerid] = 0;

	return true;
}

function detect_troll(playerid)
{
	fly_warnings[playerid] = 0;

	if(!IsPlayerConnected(playerid) || GetPVarInt(playerid, "now_login") >= 1 || gPlayerLogged[playerid] == 0 || ac_trollvehicle < 1 || PlayerInfo[playerid][pTut] < 1) return true;

	if(doesVehicleExist(GetClosestVehicle(playerid)) && fly_warnings[playerid] == 0)
	{
		new vh = GetClosestVehicle(playerid);
				
		new Float: x, Float: y, Float: z; 
		GetPlayerPos(playerid, x, y, z);

		new Float: vx, Float: vy, Float: vz;
		GetVehiclePos(vh, vx, vy, vz);

		if(x == vx && y == vy && GetPlayerVehicleID(playerid) != vh && PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1)
		{
			if(z >= vz+1 || z <= vz-1 || z >= vz-1 || z <= vz+1 || z == vz) SendAdmins(COLOR_RED, "%s (level %d) may be using cheats (vehicle teleport/troll hack) - car %d.", 1, GetName(playerid), PlayerInfo[playerid][pLevel], vh);
		}
	} 

	return true;
}

#include 	< clothes_system >
#include 	< containere 	 >
//#include 	< sfv 			 >
//#include 	< vmrk 			>


public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid) 
{
	if(playertextid == clothes_td[playerid][4])
	{
		if(GetPVarInt(playerid, "clothes_start") < 1 || GetPVarInt(playerid, "clothes_type") < 1) return true;

		if(GetPVarInt(playerid, "clothes_type") == 1)
		{
			new choose = random(sizeof normalskin);

			SetPlayerSkin(playerid, normalskin[choose]);

			PlayerTextDrawSetString(playerid, clothes_td[playerid][5], "~g~10.000$");
			PlayerTextDrawShow(playerid, clothes_td[playerid][5]);
		}

		if(GetPVarInt(playerid, "clothes_type") == 2)
		{
			new choose = random(sizeof premiumskin);

			SetPlayerSkin(playerid, premiumskin[choose]);

			PlayerTextDrawSetString(playerid, clothes_td[playerid][2], "~g~50.000.000$ ~w~/ ~y~50PP");
			PlayerTextDrawShow(playerid, clothes_td[playerid][2]);
		}
	}

	if(playertextid == clothes_td[playerid][3])
	{
		if(GetPVarInt(playerid, "clothes_type") == 2) ShowPlayerDialogEx(playerid, DIALOG_BUYSKIN, DIALOG_STYLE_LIST, "Buy skin", "Buy with money\nBuy with premium points", "Buy", "Exit");

		if(GetPVarInt(playerid, "clothes_type") == 1)
		{
			if(GetPlayerCash(playerid) < 10000) return SCM(playerid, -1, "Ai nevoie de minim 10,000$.");

			PlayerInfo[playerid][pModel] = GetPlayerSkin(playerid);
			pUpdateInt(playerid, "Model", GetPlayerSkin(playerid));

			GivePlayerCash(playerid, -10000);

			exit_clothes(playerid);

			SCMf(playerid, COLOR_ORANGE, "Felicitari! Ti-ai cumparat skin-ul %d de tip normal(-10,000$).", GetPlayerSkin(playerid));
		}
	}	
	return false;
}

CMD:specialskin(playerid, params[])
{
	if(PlayerInfo[playerid][pPremiumAccount] < 1 && PlayerInfo[playerid][pVIP] < 1 && PlayerInfo[playerid][pGoldenAccount] < 1  && PlayerInfo[playerid][pPet] < 167) return SCM(playerid, -1, "Nu poti folosi aceasta comanda.");

	ShowPlayerDialogEx(playerid, DIALOG_SPECIALSKIN, DIALOG_STYLE_TABLIST_HEADERS, "Skins", "Type\tID\nPremium\t121\nVIP\t126\nLegendary\t115\nChicken(Pet)\t167", "Select", "Exit");	

	return true;
}

CMD:rentveh(playerid, params[])
{
	if(GetPlayerCash(playerid) < 50000) return SCM(playerid, -1, "Nu ai $50,000.");
	if(GetPVarInt(playerid, "rent_take") >= 1) return SCM(playerid, -1, "Deja ai o masina inchiriata, foloseste /unrentveh.");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2115.4949,1395.0531,10.8203) && !IsPlayerInRangeOfPoint(playerid, 5.0, 527.4523,-1285.5564,17.2422)) return SCM(playerid, -1, "Nu te afli in locatia potrivita.");

	gString[0] = (EOS);

	format(gString, 128, "Name\tStock\n");

	format(gString, sizeof(gString), "%sSultan\t%d in stock\nNRG-500\t%d in stock\nSuper GT\t%d in stock\nSandking\t%d in stock\nFlash\t%d in stock\nComet\t%d in stock\nMountain Bike\t%d in stock", 
		gString, rent_sultan, rent_nrg, rent_super, rent_sandking, rent_flash, rent_comet, rent_mtb);

	ShowPlayerDialogEx(playerid, DIALOG_RENTVEH, DIALOG_STYLE_TABLIST_HEADERS, "Rent vehicle", gString, "Select", "Exit");

	return true;
}

CMD:unrentveh(playerid, params[])
{
	cmd_unrentveh(playerid);

	return true;
}
stock cmd_unrentveh(playerid) {
	if(GetPVarInt(playerid, "rent_take") < 1) return SCM(playerid, -1, "Nu ai inchiriat un vehicul.");
	DestroyVehicle(carrent[GetPVarInt(playerid, "rent_take")]);
	carrent[GetPVarInt(playerid, "rent_take")] = 0;
	SCM(playerid, -1, "Ai renuntat la vehiculul inchiriat.");
	DeletePVar(playerid, "rent_take");
	return 1;
}

CMD:removeallrentvehicle(playerid, params[])
{	
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);

	for(new i = 1; i < MAX_VEHICLES; i++) { if(carrent[i] != 0) DestroyVehicle(carrent[i]), carrent[i] = 0; }

	foreach(new x : Player)
	{
		if(GetPVarInt(x, "rent_take") >= 1)
		{
			DeletePVar(x, "rent_take");

			SCMf(x, -1, "Vehiculul tau inchiriat a fost distrus de administratorul %s.", GetName(playerid));
		}
	}	

	SendAdmins(COLOR_PRINC, "Administrator %s destroyed all vehicles from rent.", 1, GetName(playerid));

	return true;
}

CMD:restockrentvehicle(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3) return SCM(playerid, -1, AdminOnly);

	rent_sultan = 10; 
	rent_nrg = 10;
	rent_super = 10;
	rent_sandking = 10; 
	rent_flash = 10; 
	rent_comet = 10; 
	rent_mtb = 10;

	SendAdmins(COLOR_PRINC, "Administrator %s used command /restockrentvehicle and restocked all vehicles from rent.", 1, GetName(playerid));

	return true;
}

CMD:staff(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1) return SCM(playerid, -1, AdminOnly);

	ShowPlayerDialogEx(playerid, DIALOG_STAFF, DIALOG_STYLE_LIST, "Server staff", "Administrators\nHelpers", "Select", "Exit");

	return true;
}

timer timer_rainbow[rainbowspeed[playerid]](playerid)
{
	stop timerrainbow[playerid];

	if(!IsPlayerInAnyVehicle(playerid)) return true;

	new culoare1 = random(255), culoare2 = random(255);

	ChangeVehicleColor(GetPlayerVehicleID(playerid), culoare1, culoare2);

	timerrainbow[playerid] = defer timer_rainbow(playerid);

	return true;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == Ruleta_TD[13]){
        ShowPlayerDialogEx(playerid, DIALOG_RULETA_BLACK, DIALOG_STYLE_INPUT, "Bet on black", "Type the amount of money you want to bet.", "Bet", "Cancel");
        return 1;
    }
    else if(clickedid == Ruleta_TD[14]){
        ShowPlayerDialogEx(playerid, DIALOG_RULETA_GREEN, DIALOG_STYLE_INPUT, "Bet on green", "Type the amount of money you want to bet.", "Bet", "Cancel");
        return 1;
    }
    else if(clickedid == Ruleta_TD[15]){
        ShowPlayerDialogEx(playerid, DIALOG_RULETA_RED, DIALOG_STYLE_INPUT, "Bet on red", "Type the amount of money you want to bet.", "Bet", "Cancel");
        return 1;
    }
    else if(clickedid == Ruleta_TD[16]){
        ExitRulette(playerid);
        return 1;
    }
    else if(clickedid == Text:INVALID_TEXT_DRAW && inruleta[playerid]) return SelectTextDraw(playerid, 0xFFFFFF00);

    if(clickedid == StageTD[0]) {
		new i = StageVehicle[playerid], string[256];
		if(PlayerInfo[playerid][pCarStage][i] == 3) return SendClientMessage(playerid, COLOR_WHITE, "You can upgrade your vehicle because his have maximum stage.");
   		if(i == -1) return SCM(playerid, COLOR_WHITE, "An error has created, please select close and try again.");
   		if(PlayerInfo[playerid][pCarStage][i] == 0 && PlayerInfo[playerid][pPremiumPoints] < 250) return SCM(playerid, -1, "Ai nevoie de minim 250 puncte premium pentru a cumpara stage #1."); 
   		if(PlayerInfo[playerid][pCarStage][i] == 0) PlayerInfo[playerid][pPremiumPoints] -= 250; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);  
   		if(PlayerInfo[playerid][pCarStage][i] == 1 && PlayerInfo[playerid][pPremiumPoints] < 300) return SCM(playerid, -1, "Ai nevoie de minim 300 puncte premium pentru a cumpara stage #2.");
   		if(PlayerInfo[playerid][pCarStage][i] == 1) PlayerInfo[playerid][pPremiumPoints] -= 300; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);
   		if(PlayerInfo[playerid][pCarStage][i] == 2 && PlayerInfo[playerid][pPremiumPoints] < 400) return SCM(playerid, -1, "Ai nevoie de minim 400 puncte premium pentru a cumpara stage #3.");
   		if(PlayerInfo[playerid][pCarStage][i] == 2) PlayerInfo[playerid][pPremiumPoints] -= 400; pUpdateInt(playerid, "PremiumPoints", PlayerInfo[playerid][pPremiumPoints]);  
   		PlayerInfo[playerid][pCarStage][i]++;
   		PlayerInfo[playerid][pCarStageKM][i] += (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) / 6);
   		cUpdate(playerid, i, cStagex);
   		cUpdate(playerid, i, cStageKMx);
   		SCMf(playerid, COLOR_YELLOW, "* You upgraded your vehicle at stage %d/3.", PlayerInfo[playerid][pCarStage][i]);
		if(PlayerInfo[playerid][pCarStage][i] == 0) format(string, sizeof(string), "Vehicle: ~B~%s (%d)~W~~H~~N~Max. Speed: ~B~%d ~W~~H~KM/h~N~Current stage: ~B~%d/3~W~~H~~N~Total boost: ~B~+%d~W~~H~ KM/h / ~P~%d~W~~H~ km/h", 
			aVehicleNames[PlayerInfo[playerid][pCarModel][i] - 400], PlayerInfo[playerid][pCarModel][i], MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]), PlayerInfo[playerid][pCarStage][i], (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) / 6), (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) + PlayerInfo[playerid][pCarStageKM][i]));
		else format(string, sizeof(string), "Vehicle: ~B~%d (%d)~W~~H~~N~Max. Speed: ~B~%d ~W~~H~KM/h~N~Current stage: ~B~%d/3~W~~H~~N~Total boost: ~B~+%d~W~~H~ KM/h / ~P~%d~W~~H~ km/h", 
			aVehicleNames[PlayerInfo[playerid][pCarModel][i] - 400], PlayerInfo[playerid][pCarModel][i], MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]), PlayerInfo[playerid][pCarStage][i], (PlayerInfo[playerid][pCarStageKM] + (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) / 6)), (MySQLCheckSpeed(PlayerInfo[playerid][pCarModel][i]) + PlayerInfo[playerid][pCarStageKM][i]));
		PlayerTextDrawSetString(playerid, StagePTD[playerid], string);
		PlayerTextDrawShow(playerid, StagePTD[playerid]);
	}
	else if(clickedid == StageTD[1]) {
		TogglePlayerControllable(playerid, true);
		CancelSelectTextDraw(playerid);
		PlayerTextDrawHide(playerid, StagePTD[playerid]);
		TextDrawHideForPlayer(playerid, StageTD[0]);
		TextDrawHideForPlayer(playerid, StageTD[1]);
		StageVehicle[playerid] = -1;
	}
	else if(clickedid == Text:INVALID_TEXT_DRAW) {
		if(StageVehicle[playerid] != -1) {
			TogglePlayerControllable(playerid, true);
			CancelSelectTextDraw(playerid);
			PlayerTextDrawHide(playerid, StagePTD[playerid]);
			TextDrawHideForPlayer(playerid, StageTD[0]);
			TextDrawHideForPlayer(playerid, StageTD[1]);
			StageVehicle[playerid] = -1;
		}
	}	

	return true;
}



CMD:factions(playerid, params[])
{
	if(delayfactions[playerid] >= 1) return SCM(playerid, -1, "Poti folosi aceasta comanda peste 15 de secunde.");

	gString[0] = (EOS);

	format(gString, 128, "ID\tName\tMembers\tMax members\n");

	format(gString, sizeof(gString), "%s1\tLos Santos Police Department\t%d\t%d\n2\tHitman Agency\t%d\t%d\n3\tFBI\t%d\t%d\n4\tNews Reporters\t%d\t%d\n5\tGrove Street\t%d\t%d\n6\tBallas\t%d\t%d\n7\tLos Aztecas\t%d\t%d\n8\tParamedic Department\t%d\t%d\n9\tLos Vagos\t%d\t%d\n10\tTaxi LV\t%d\t%d\n11\tTow Car Company\t%d\t%d\n12\tUber Company\t%d\t%d\n13\tNational Guard\t%d\t%d\n14\tLas Venturas Police Departament\t%d\t%d", 
		gString, GetFactionMembers(1), DynamicFactions[1][fMaxMembers], GetFactionMembers(11), DynamicFactions[11][fMaxMembers], GetFactionMembers(2), DynamicFactions[2][fMaxMembers], GetFactionMembers(9), DynamicFactions[9][fMaxMembers], GetFactionMembers(5), DynamicFactions[5][fMaxMembers], GetFactionMembers(10), DynamicFactions[10][fMaxMembers],
		GetFactionMembers(4), DynamicFactions[4][fMaxMembers], GetFactionMembers(14), DynamicFactions[14][fMaxMembers], GetFactionMembers(6), DynamicFactions[6][fMaxMembers], GetFactionMembers(13), DynamicFactions[13][fMaxMembers], GetFactionMembers(15), DynamicFactions[15][fMaxMembers], GetFactionMembers(16), DynamicFactions[16][fMaxMembers], GetFactionMembers(3), DynamicFactions[3][fMaxMembers], GetFactionMembers(8), DynamicFactions[8][fMaxMembers]);	

	ShowPlayerDialogEx(playerid, DIALOG_FACTIONS, DIALOG_STYLE_TABLIST_HEADERS, "Factions", gString, "Close", "");

	delayfactions[playerid] = 15;	

	return true;
}

CMD:asellhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);

	new houseid;

	if(sscanf(params, "i", houseid)) return SCM(playerid, -1, "Syntax: /asellhouse [house id]");

	HouseInfo[houseid][hLock] = 0; 
	HouseInfo[houseid][hOwned] = 1; 
	HouseInfo[houseid][hRentabil] = 1;
	HouseInfo[houseid][hRent] = 5; 

	strmid(HouseInfo[houseid][hOwner], "AdmBot", 0, strlen("AdmBot"), 255);
	OnPropTextdrawUpdate(1, houseid);

	gString[0] = (EOS);

	mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Lockk`='0', `Owned`='1', `Owner`='AdmBot', `Rentabil`='1', `Rent`='5' WHERE `ID`='%d' LIMIT 1", houseid);
	mysql_tquery(SQL, gString);

	mysql_format(SQL, gString, 256, "UPDATE `users` SET `House` = '999' WHERE `House` = '%d' LIMIT 1", houseid);
	mysql_tquery(SQL, gString);

	SendAdmins(COLOR_PRINC, "(/asellhouse) {ffffff}%s moved house %d to state.", 1, GetName(playerid), houseid);

	return true;
}

CMD:asellbusiness(playerid, params[])
{	
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);

	new bizzid;

	if(sscanf(params, "i", bizzid)) return SCM(playerid, -1, "Syntax: /asellbusiness [business id]");

	BizzInfo[bizzid][bLocked] = 0;
	BizzInfo[bizzid][bOwned] = 1; 
	BizzInfo[bizzid][bEntranceCost] = 5;

	strmid(BizzInfo[bizzid][bOwner], "AdmBot", 0, strlen("AdmBot"), 255);
	OnPropTextdrawUpdate(2, bizzid);

	gString[0] = (EOS);

	mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Locked`='0', `Owned`='1', `Till`='0',`Owner`='AdmBot', `EntranceCost`='5' WHERE `ID`='%d' LIMIT 1", bizzid);
	mysql_tquery(SQL, gString);

	mysql_format(SQL, gString, 256, "UPDATE `users` SET `Bizz` = '255' WHERE `Bizz` = '%d' LIMIT 1", bizzid);
	mysql_tquery(SQL, gString);

	SendAdmins(COLOR_PRINC, "(/asellbusiness) {ffffff}%s moved business %d to state.", 1, GetName(playerid), bizzid);

	return true;
}

CMD:enter(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece te afli intr-un vehicul.");
	for(new i = 1; i < sizeof(HouseInfo); i++) {
		if(IsPlayerInRangeOfPoint(playerid, 2, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) && GetPlayerVirtualWorld(playerid) == 0) {
			if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0) {
				SetPlayerInterior(playerid, HouseInfo[i][hInterior]); SetPlayerPosEx(playerid, HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hInterior]; PlayerInfo[playerid][pLocal] = i; 
				SetPlayerVirtualWorld(playerid, HouseInfo[i][hVirtual]); 
				InHouse[playerid] = i;
				if(strlen(housestring[InHouse[playerid]]) > 0) {
   			  	  StopAudioStreamForPlayer(playerid);
			   	  PlayAudioStreamForPlayer(playerid, housestring[InHouse[playerid]]);
				}   						
			}
	   		else {
		   		SendClientMessage(playerid, COLOR_WHITE, "This house is locked.");
		   		if(IsACop(playerid)) {
		   			BreachID[playerid] = i;
        			ShowPlayerDialogEx(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "SERVER: Housing", "This house is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
		   		}
		   		if(PlayerInfo[playerid][pMember] == 11) {
		   			BreachID[playerid] = i;
        			ShowPlayerDialogEx(playerid, DIALOG_RAMHOUSE, DIALOG_STYLE_MSGBOX, "SERVER: Housing", "This house is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
		   		}
	   		}   											
		}
	}
	for(new i = 1; i < sizeof(BizzInfo); i++) {
		if (IsPlayerInRangeOfPoint(playerid,2,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) && (GetPlayerVirtualWorld(playerid) == 0 || (GetPlayerVirtualWorld(playerid) == playerid + 146000 && BizzInfo[i][bType] == 6) || (GetPlayerVirtualWorld(playerid) == playerid + 146000 && BizzInfo[i][bType] == 11))) { 
			if(BizzInfo[i][bSbiz] != 0) return false;
			if(GetPlayerCash(playerid) < BizzInfo[i][bEntranceCost]) return SCM(playerid, -1, "Nu ai bani.");
			if(BizzInfo[i][bLocked] == 1) {
				SCM(playerid, -1, "This business is locked.");
		   		if(IsACop(playerid)) {
		   			BreachID[playerid] = i;
        			ShowPlayerDialogEx(playerid, DIALOG_RAMBIZ, DIALOG_STYLE_MSGBOX, "SERVER: Businesses", "This business is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
		   		}
		  		if(PlayerInfo[playerid][pMember] == 11) {
		   			BreachID[playerid] = i;
        			ShowPlayerDialogEx(playerid, DIALOG_RAMBIZ, DIALOG_STYLE_MSGBOX, "SERVER: Businesses", "This business is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
		   		}
		   		return true;						
			}
			if(LastBiz[playerid] != i) {
				GivePlayerCash(playerid, -BizzInfo[i][bEntranceCost]); BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
				va_GameTextForPlayer(playerid, "~r~-$%d", 5000, 1, BizzInfo[i][bEntranceCost]);
		   		LastBizTime[playerid] = 60;						
			} else GameTextForPlayer(playerid, "welcome back", 5000, 1);
			LastBiz[playerid] = i;
	   		if(BizzInfo[i][bType] == 1) {
           		SCM(playerid,COLOR_GREEN3,"Inselatoriile (tepele) nu sunt permise pe server. Pentru orice incercare de a insela un player cu bunuri/bani puteti primi ban PERMANENT.");
           		SCM(playerid,COLOR_GREEN3,"Imprumuturile de orice fel (inclusiv datoriile) se fac pe proprie raspundere. Nu ai nicio garantie ca ii vei recupera.");
           		SCM(playerid,COLOR_GREEN3,"Afacerile cu bani reali nu sunt permise. Se pedepseste cu ban 7-14 zile la prima abatere si ban permanent la urmatoarea abatere.");
           		SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /deposit, /withdraw, /transfer");
	   		} else if(BizzInfo[i][bType] == 2) SCM(playerid, -1, "Welcome to the gun shop! The commands of this business are as follows: /buygun");
	   		else if(BizzInfo[i][bType] == 3) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buydrink");
	   		else if(BizzInfo[i][bType] == 4) SCM(playerid,COLOR_WHITE,"Welcome to the sex shop! The commands of this business are as follows: /buytoys");
	   		else if(BizzInfo[i][bType] == 5) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /dice /roulette");
	   		else if(BizzInfo[i][bType] == 6) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buy");
	   		else if(BizzInfo[i][bType] == 7 || BizzInfo[i][bType] == 14) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood");			           	           
	   		else if(BizzInfo[i][bType] == 8) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfightstyle");
	   		else if(BizzInfo[i][bType] == 9) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /buyfood");	
	   		else if(BizzInfo[i][bType] == 11) SCM(playerid,COLOR_WHITE,"Welcome! The commands of this business are as follows: /clothes, /exitclothes");				   		

	   		SetPlayerInterior(playerid, BizzInfo[i][bInterior]); SetPlayerPosEx(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
   			SetPlayerVirtualWorld(playerid, BizzInfo[i][bVirtual]); 
   			InBussines[playerid] = i;
   			gString[0] = (EOS);
	   		mysql_format(SQL, gString, 144, "UPDATE `bizz` SET `Till`='%d' WHERE `ID`='%d' LIMIT 1", BizzInfo[i][bTill],i);
	   		mysql_tquery(SQL, gString);	
		} 			
	}
   	for(new fid; fid < sizeof(DynamicFactions); fid++) {
   		if(IsPlayerInRangeOfPoint(playerid, 2, DynamicFactions[fid][fceX], DynamicFactions[fid][fceY], DynamicFactions[fid][fceZ]) && GetPlayerVirtualWorld(playerid) == 0) {
   			if(DynamicFactions[fid][fLocked] == 1 && PlayerInfo[playerid][pMember] == fid) {
	   			SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
            	SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]); SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
            	InHQ[playerid] = fid;
       		} else if(DynamicFactions[fid][fLocked] == 0) {
        		SetPlayerPosEx(playerid, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]);
           	 	SetPlayerInterior(playerid, DynamicFactions[fid][fInterior]); SetPlayerVirtualWorld(playerid, DynamicFactions[fid][fVirtual]);
           	 	InHQ[playerid] = fid;
       		} else {
        		SendClientMessage(playerid, COLOR_WHITE, "This HQ is locked.");
        		if(IsACop(playerid)) {
        			BreachID[playerid] = fid;
        			ShowPlayerDialogEx(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "SERVER: Group HQ", "This Group HQ is locked.\nAs a law enforcement officer, you can breach this door and enter. Would you like to do so?", "Yes", "No");
        		}
        		if(PlayerInfo[playerid][pMember] == 11) {
        			BreachID[playerid] = fid;
        			ShowPlayerDialogEx(playerid, DIALOG_RAMHQ, DIALOG_STYLE_MSGBOX, "SERVER: Group HQ", "This Group HQ is locked.\nAs a hitman, you can breach this door and enter. Would you like to do so?", "Yes", "No");
        		}
       	 	}
   		}
	} 

	return true;
}

CMD:exit(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece te afli intr-un vehicul.");

	if(IsPlayerInRangeOfPoint(playerid, 5.0, 372.5400,-133.0090,1001.4922) && GetPlayerVirtualWorld(playerid) == 50) {
		SetPlayerPosEx(playerid, 2397.8408,-1899.1869,13.5469);
		SetPlayerInterior(playerid, 0); SetPlayerVirtualWorld(playerid, 0);
		DisablePlayerCheckpoint(playerid);
		CP[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 9);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); 
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]); 				
	}

   	for(new fid; fid < sizeof(DynamicFactions); fid++) {
   	   	if(IsPlayerInRangeOfPoint(playerid, 2, DynamicFactions[fid][fcX], DynamicFactions[fid][fcY], DynamicFactions[fid][fcZ]) && GetPlayerVirtualWorld(playerid) == DynamicFactions[fid][fVirtual]) {
	   		SetPlayerPosEx(playerid, DynamicFactions[fid][fceX], DynamicFactions[fid][fceY], DynamicFactions[fid][fceZ]);
		    SetPlayerInterior(playerid, 0); PlayerInfo[playerid][pInt] = 0; 
		    SetPlayerVirtualWorld(playerid, 0); InHQ[playerid] = -1;
	   }
   	}
		   
   	for(new i = 1; i <  sizeof(HouseInfo); i++) {
	   	if (IsPlayerInRangeOfPoint(playerid, 2,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]) && HouseInfo[i][hVirtual] == GetPlayerVirtualWorld(playerid)) {
       	   	if(PlayerInfo[playerid][pSleeping] != 0) return true;
		   	SetPlayerVirtualWorld(playerid,0); SetPlayerInterior(playerid,0);
		   	SetPlayerPosEx(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
		   	PlayerInfo[playerid][pInt] = 0; PlayerInfo[playerid][pLocal] = 255;
		   	InHouse[playerid] = -1; StopAudioStreamForPlayer(playerid);
			PlayerInfo[playerid][pSleeping] = 0;
	   	}
   	}
   	for(new i = 1; i <  sizeof(BizzInfo); i++) {
	   	if (IsPlayerInRangeOfPoint(playerid, 2,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]) && BizzInfo[i][bVirtual]==GetPlayerVirtualWorld(playerid) && BizzInfo[i][bSbiz] == 0) {
		   	SetPlayerInterior(playerid,0); PlayerInfo[playerid][pInt] = 0;
		   	SetPlayerPosEx(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
		   	PlayerInfo[playerid][pLocal] = 255; SetPlayerVirtualWorld(playerid,0);
           	InBussines[playerid] = -1; StopAudioStreamForPlayer(playerid);
	   	}
   	}	

	return true;
}

CMD:uber(playerid, params[]) 
{
	if(PlayerInfo[playerid][pMember] != 16) return SCM(playerid, -1, "To call a uber, use /service uber.");

	new action[10], id, Float: X, Float: Y, Float: Z;
	
	if(sscanf(params, "s[10]u", action, id)) return SCM(playerid, -1, "Syntax: /uber [action] [id]");
	
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");
	
	if(strcmp(action, "accept", true) == 0) 
	{
		if(TaxiFare[playerid] == 0) return SCM(playerid, -1, "You can't accept a call because you're not on duty.");
		if(TaxiCall[id] == 0 || TaxiCall[id] == 1) return SCM(playerid, -1, "This player hasn't called for a uber, or someone else accepted the call.");
		
		SCMf(id, COLOR_PRINC, "Uber driver %s has accepted your call. Please wait here for the uber.", GetName(playerid));
		SendFamilyMessage(16, COLOR_CYAN, "Uber driver %s has accepted the call from %s.", GetName(playerid), GetName(id));
		SCMf(playerid, COLOR_PRINC, "Checkpoint set on %s [%d].", GetName(id), id);
		
		TaxiAccepted[playerid] = id; TaxiCall[id] = 0;
		GetPlayerPos(id, X, Y, Z);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, X, Y, Z, 3.0);
		
		UsedFind[playerid] = 1; targetfind[playerid] = id;
	
		return true;
	}

	else if(strcmp(action, "cancel", true) == 0) 
	{
		SCM(playerid, -1, "You have canceled the uber call.");
		SCMf(TaxiAccepted[playerid], COLOR_PRINC, "Uber driver %s canceled your call.", GetName(playerid));
		
		TaxiAccepted[playerid] = -1; 
		UsedFind[playerid] = 0; 
		targetfind[playerid] = -1;
		
		DisablePlayerCheckpoint(playerid);
	}

	return true; 
} 	

CMD:roulette(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 50.0, 1977.7538, 1017.7076, 994.4688)) return SCM(playerid, -1, "You can use this command only in casinos.");
    if(inruleta[playerid]) return ExitRulette(playerid);
  
    inruleta[playerid] = 1;
   
    for(new i; i < 17; i++) TextDrawShowForPlayer(playerid, Ruleta_TD[i]);
    for(new x; x < 3; x++) PlayerTextDrawShow(playerid, Ruleta_PTD[playerid][x]);
   
    TogglePlayerControllable(playerid, 0);
    SelectTextDraw(playerid, 0xFFFFFFFF);
    Iter_Add(InRoulette, playerid);

    return true; 
}

ExitRulette(playerid)
{
    for(new i; i < 17; i++) TextDrawHideForPlayer(playerid, Ruleta_TD[i]);
    for(new x; x < 3; x++) PlayerTextDrawHide(playerid, Ruleta_PTD[playerid][x]);
   
    inruleta[playerid] = 0;
    
    CancelSelectTextDraw(playerid);
    TogglePlayerControllable(playerid, 1);
    Iter_Remove(InRoulette, playerid);

    rlbet[playerid][0] = 0; 
    rlbet[playerid][1] = 0; 
    rlbet[playerid][2] = 0;

    return true;
}

CMD:acolor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] < 1) return SCM(playerid, -1, AdminOnly);

	ShowPlayerDialogEx(playerid, 7879, DIALOG_STYLE_LIST, "Admin colors" , "White\nCool Red\nDark Red\nLight Red", "Select", "Cancel");

	return true;
}

CMD:agivehouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 6) return SCM(playerid, -1, AdminOnly);

	new houseid, id;

	if(sscanf(params, "ui", id, houseid)) return SCM(playerid, -1, "Syntax: /agivehouse [name/playerid] [house id]");

	if(!IsPlayerConnected(id)) return SCM(playerid, -1, "Invalid id.");

	gString[0] = (EOS);

	mysql_format(SQL, gString, sizeof(gString), "UPDATE `users` SET `House` = '999' WHERE `House` = '%d' LIMIT 1", houseid);
	mysql_tquery(SQL, gString);

	HouseInfo[houseid][hLock] = 0; 
	HouseInfo[houseid][hOwned] = 1; 
	HouseInfo[houseid][hRentabil] = 1;
	HouseInfo[houseid][hRent] = 5; 

	PlayerInfo[id][pPhousekey] = houseid;
	pUpdateInt(id, "House", houseid);

	strmid(HouseInfo[houseid][hOwner], PlayerInfo[id][pNormalName], 0, strlen(PlayerInfo[id][pNormalName]), 255);
	OnPropTextdrawUpdate(1, houseid);

	mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Lockk`='0', `Owned`='1', `Owner`='%s', `Rentabil`='1', `Rent`='5' WHERE `ID`='%d' LIMIT 1", PlayerInfo[id][pNormalName], houseid);
	mysql_tquery(SQL, gString);

	SCMf(id, COLOR_PRINC, "Administrator %s gived you house %d.", GetName(playerid), houseid);

	SendAdmins(COLOR_PRINC, "(/agivehouse) {ffffff} Admin %s [admin: %d] gived house [%d] to %s [user: %d].", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], houseid, GetName(id), PlayerInfo[id][pSQLID]);

	return true;
}

CMD:servername(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);

	new name[128], string[128];

	if(sscanf(params, "s[128]", name)) return SCM(playerid, -1, "Syntax: /servername [name]");

	format(string, sizeof string, "hostname %s", name);

	SendRconCommand(string);

	SendAdmins(COLOR_PRINC, "(/servername) %s [admin: %d] changed host name server in '%s'.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], name);

	return true;
}

CMD:addhousetobid(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, AdminOnly);
	if(licitatiactiva >= 1) return SCM(playerid, -1, "Deja este o licitatie activa.");

	new houseid;

	if(sscanf(params, "i", houseid)) return SCM(playerid, -1, "Syntax: /addhousetobid [house id]");

	bidhouseid = houseid;
	licitatiactiva = 1;

	SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");
	va_SendClientMessageToAll(COLOR_PRINC, "[BID]: O noua licitatie tocmai a inceput (House ID: %d).", houseid);
	SendClientMessageToAll(COLOR_PRINC, "[BID]: Pentru a licita folositi comanda /bid, trebuie sa aveti banii in mana.");
	SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");

	defer timer_bid();

	return true;
}

CMD:addbusinesstobid(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 5) return SCM(playerid, -1, "Nu poti face acest lucru!");
	if(licitatiactiva >= 1) return SCM(playerid, -1, "Deja este o licitatie activa.");

	new businessid;

	if(sscanf(params, "i", businessid)) return SCM(playerid, -1, "Syntax: /addbusinesstobid [business id]");

	bidbusinessid = businessid;
	licitatiactiva = 1;

	SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");
	va_SendClientMessageToAll(COLOR_PRINC, "[BID]: O noua licitatie tocmai a inceput (Business ID: %d).", businessid);
	SendClientMessageToAll(COLOR_PRINC, "[BID]: Pentru a licita folositi comanda /bid, trebuie sa aveti banii in mana.");
	SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");

	defer timer_bid();

	return true;
}

CMD:bid(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 5) return SCM(playerid, -1, "Ai nevoie de minim level 5 pentru a licita.");
	if(licitatiactiva < 1) return SCM(playerid, -1, "Nu este o licitatie activa.");
	if(lastplayerbid == playerid) return SCM(playerid, -1, "Deja ai licitat.");
	if(bidhouseid >= 1 && PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) return SCM(playerid, -1, "You already own a house.");
	if(bidbusinessid >= 1 && PlayerInfo[playerid][pPbiskey] != 255) return SCM(playerid, -1, "Deja ai un business.");

	new money;

	if(sscanf(params, "i", money)) {
		SCM(playerid, -1, "Syntax: /bid [money]");
		SCM(playerid, -1, "");

		if(bidhouseid >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}Casa %d este scoasa la licitatie.", bidhouseid);
		if(bidbusinessid >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}Business-ul %d este scos la licitatie.", bidbusinessid);

		if(maxbid >= 1) SCMf(playerid, COLOR_PRINC, ">> {ffffff}%s conduce licitatia cu $%s.", GetName(lastplayerbid), FormatNumber(maxbid));		
		return true;
	}

	if(GetPlayerCash(playerid) < money) return SCM(playerid, -1, "Nu ai destui bani.");
	if(money < 1 || money > 999999999) return SCM(playerid, -1, "Invalid amount.");
	if(maxbid + 1000000 > money) return SCM(playerid, -1, "Deja a licitat altcineva mai mult decat tine sau ai licitat mai putin de $1.000.000!");

	GivePlayerCash(playerid, -money);
	if(lastplayerbid != 999 && IsPlayerConnected(lastplayerbid)) GivePlayerCash(lastplayerbid, moneyplayerbid[lastplayerbid]);

	lastplayerbid = playerid;
	SetPVarInt(playerid, "bidplayer", 1);
	maxbid = money;
	moneyplayerbid[playerid] = money;

	va_SendClientMessageToAll(COLOR_PRINC, "[BID]: %s a licitat suma de $%s.", GetName(playerid), FormatNumber(money));

	stop timer_licitatie;

	timer_licitatie = defer timer_bid();

	return true;
}

timer timer_bid[120000]()
{
	if(licitatiactiva < 1) return true;

	if(maxbid < 1 || lastplayerbid == 999)
	{
		maxbid = 0; 
		bidhouseid = 0;
		bidbusinessid = 0;
		licitatiactiva = 0;

		SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");
		SendClientMessageToAll(COLOR_PRINC, "[BID]: Licitatia s-a anulat deoarece nimeni nu a licitat.");
		SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");	

		return true;
	}

	if(bidhouseid >= 1)
	{
		HouseInfo[bidhouseid][hLock] = 0;
		HouseInfo[bidhouseid][hOwned] = 1;
		HouseInfo[bidhouseid][hRentabil] = 1;
		HouseInfo[bidhouseid][hRent] = 5;
		PlayerInfo[lastplayerbid][pPhousekey] = bidhouseid;

		strmid(HouseInfo[bidhouseid][hOwner], PlayerInfo[lastplayerbid][pNormalName], 0, 25, 255);
		OnPropTextdrawUpdate(1, bidhouseid);

		gString[0] = (EOS);

		mysql_format(SQL, gString, 256, "UPDATE `houses` SET `Lockk` = 0, `Owned` = '1', `Owner` = '%s', `Rentabil` = '1', `Rent` = '5' WHERE `ID` = '%d' LIMIT 1", PlayerInfo[lastplayerbid][pNormalName], bidhouseid);
		mysql_tquery(SQL, gString);

		mysql_format(SQL, gString, 256, "UPDATE `users` SET `House` = '%d' WHERE `ID` = '%d' LIMIT 1", bidhouseid, PlayerInfo[lastplayerbid][pSQLID]);
		mysql_tquery(SQL, gString);

		SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");
		va_SendClientMessageToAll(COLOR_PRINC, "[BID]: %s a licitat suma de $%s si a castigat casa %d.", GetName(lastplayerbid), FormatNumber(maxbid), bidhouseid);
		SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");	

		licitatiactiva = 0;
		lastplayerbid = 999;
		DeletePVar(lastplayerbid, "bidplayer");
		maxbid = 0;
		bidhouseid = 0;		

	}

	if(bidbusinessid >= 1)
	{
		BizzInfo[bidbusinessid][bLocked] = 0;
		BizzInfo[bidbusinessid][bOwned] = 1;
		BizzInfo[bidbusinessid][bEntranceCost] = 5;
		PlayerInfo[lastplayerbid][pPbiskey] = bidbusinessid;

		strmid(BizzInfo[bidbusinessid][bOwner], PlayerInfo[lastplayerbid][pNormalName], 0, 25, 255);
		OnPropTextdrawUpdate(2, bidbusinessid);

		gString[0] = (EOS);

		mysql_format(SQL, gString, 256, "UPDATE `bizz` SET `Locked`='0', `Owned`='1', `Till`='0', `Owner`='%s', `EntranceCost`='5' WHERE `ID`='%d' LIMIT 1", PlayerInfo[lastplayerbid][pNormalName], bidbusinessid);
		mysql_tquery(SQL, gString);

		mysql_format(SQL, gString, 256, "UPDATE `users` SET `Bizz` = '%d' WHERE `ID` = '%d' LIMIT 1", bidbusinessid, PlayerInfo[lastplayerbid][pSQLID]);
		mysql_tquery(SQL, gString);

		SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");
		va_SendClientMessageToAll(COLOR_PRINC, "[BID]: %s a licitat suma de $%s si a castigat business-ul %d.", GetName(lastplayerbid), FormatNumber(maxbid), bidbusinessid);
		SendClientMessageToAll(COLOR_PRINC, "---------------- BIDS ----------------");	

		licitatiactiva = 0;
		lastplayerbid = 999;
		DeletePVar(lastplayerbid, "bidplayer");
		maxbid = 0;
		bidbusinessid = 0;

	}

	return true;
}
CMD:trade(playerid, params[])
{
	SCM(playerid, -1, "Comanda aceasta a fost inlocuita cu alte comenzi (/sellcarto, /sellhidden, /sellvoucher, etc).");

	return true;
}

CMD:serverpass(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 7) return SCM(playerid, -1, AdminOnly);

	new name[128], string[128];

	if(sscanf(params, "s[128]", name)) return SCM(playerid, -1, "Syntax: /serverpass [password]");

	format(string, sizeof string, "password %s", name);

	SendRconCommand(string);

	SendAdmins(COLOR_PRINC, "(/serverpass){ffffff} %s [admin: %d] changed password server in '%s'.", 1, GetName(playerid), PlayerInfo[playerid][pSQLID], name);

	return true;
}

function save_battle_missions(playerid) 
{
	new szQuery[712], items[712];

	format(items, sizeof(items), 
		"%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d", 
		PlayerInfo[playerid][pBattlePassMissions][0], PlayerInfo[playerid][pBattlePassMissions][1], PlayerInfo[playerid][pBattlePassMissions][2], PlayerInfo[playerid][pBattlePassMissions][3], PlayerInfo[playerid][pBattlePassMissions][4]
		, PlayerInfo[playerid][pBattlePassMissions][5], PlayerInfo[playerid][pBattlePassMissions][6], PlayerInfo[playerid][pBattlePassMissions][7], PlayerInfo[playerid][pBattlePassMissions][8], PlayerInfo[playerid][pBattlePassMissions][9],
		PlayerInfo[playerid][pBattlePassMissions][10], PlayerInfo[playerid][pBattlePassMissions][11], PlayerInfo[playerid][pBattlePassMissions][12], PlayerInfo[playerid][pBattlePassMissions][13], PlayerInfo[playerid][pBattlePassMissions][14],
		PlayerInfo[playerid][pBattlePassMissions][15], PlayerInfo[playerid][pBattlePassMissions][16], PlayerInfo[playerid][pBattlePassMissions][17]);
		
	format(szQuery, sizeof(szQuery), 
		"UPDATE `users` SET `BattlePassMissions`='%s' WHERE `ID`='%d'", items, PlayerInfo[playerid][pSQLID]);
	mysql_tquery(SQL, szQuery, "", "");

	return true;
}


function finish_battle_mission(playerid, id) 
{
	if(PlayerInfo[playerid][pBattlePassMissions][id] == 1) return true;

	PlayerInfo[playerid][pBattlepasQuests] ++;
	PlayerInfo[playerid][pBattlePassMissions][id] = 1;
	save_battle_missions(playerid);
	pUpdateInt(playerid, "BattlepasQuests", PlayerInfo[playerid][pBattlepasQuests]);

	PlayerInfo[playerid][pGloburi] += 2;
	pUpdateInt(playerid, "globuri", PlayerInfo[playerid][pGloburi]);

	SCMf(playerid, COLOR_DARKPINK, "(winter quest) {ffffff}You received 2 globes for this mission.");
	
	return true;
}

CMD:amanet(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, -2238.1331,128.5863,1035.4141)) return SCM(playerid, -1, "Nu te afli la locatia potrivita.");
 
    ShowPlayerDialogEx(playerid, DIALOG_AMANET, DIALOG_STYLE_LIST, "amanet menu", "amaneteaza un vehicul\namaneteaza o casa\namaneteaza o afacere\nrecupereaza un vehicul\nrecupereaza o casa\nrecupereaza o afacere", "Select", "Exit");
 
    return true;
}

//CMD:activities(playerid, params[])
//{
//    ShowPlayerDialogEx(playerid, DIALOG_BATTLE, DIALOG_STYLE_LIST, "activities", "quest status {00b300} [online]", "Select", "Exit");
//    return true;
//}
 
function amanet_stock(playerid)
{
    if(PlayerInfo[playerid][pCarAmanet] >= 1 || PlayerInfo[playerid][pHouseAmanet] >= 1 || PlayerInfo[playerid][pBusinessAmanet] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece deja ai un lucru la amanet.");
 
    return false;
}

function checkLevelProgress(const playerid) {
	new expamount, szStr[64];

	if(PlayerInfo[playerid][pLevel] == 1 || PlayerInfo[playerid][pLevel] == 2 || PlayerInfo[playerid][pLevel] == 3 || PlayerInfo[playerid][pLevel] == 4) expamount = PlayerInfo[playerid][pLevel]*2;
	else if(PlayerInfo[playerid][pLevel] >= 5) expamount = PlayerInfo[playerid][pLevel]*levelexp;

	new Float: textdrawProcent = (267 + PlayerInfo[playerid][pExp] * 100 / expamount);

	if(PlayerInfo[playerid][pExp] >= expamount)
	{
		format(szStr,sizeof szStr,"_LEVEL %d (100%s)", PlayerInfo[playerid][pLevel], "%"); 
		PlayerTextDrawSetString(playerid, LevelTD[playerid][0], szStr);
	} 

	else
	{
		format(szStr,sizeof szStr,"_LEVEL %d (%d%s)", PlayerInfo[playerid][pLevel], (PlayerInfo[playerid][pExp] * 100 / expamount),"%");
		PlayerTextDrawSetString(playerid, LevelTD[playerid][0], szStr);	

		PlayerTextDrawTextSize(playerid, LevelTD[playerid][2], textdrawProcent, 0.000000);	
	}

	PlayerTextDrawShow(playerid, LevelTD[playerid][0]), PlayerTextDrawShow(playerid, LevelTD[playerid][1]);
	
	PlayerTextDrawHide(playerid, LevelTD[playerid][2]), PlayerTextDrawShow(playerid, LevelTD[playerid][2]);
	return 1;
}

stock IsNeonActive(vehicleid)
{
    if(SolidNeon[vehicleid] == 1) return 1;
    return 0;
}
stock IsVehicleValid(v)
{
    if(v==403||v==406||v==407||v==408||v==416||v==417||v==424||v==425||v==430||v==432||v==433||v==435||v==437||v==441||v==443||v==444||v==446||v==447||v==448||v==449||v==450||v==452||v==453||v==454||v==455||v==456||v==457||v==460||v==461||v==462) return 0;
    if(v==463||v==464||v==465||v==468||v==469||v==470||v==471||v==472||v==473||v==476||v==481||v==484||v==485||v==486||v==487||v==488||v==493||v==497||v==500||v==501||v==509||v==510||v==511||v==512||v==513||v==514||v==515||v==519||v==520||v==521) return 0;
    if(v==522||v==523||v==524||v==530||v==532||v==537||v==538||v==539||v==544||v==548||v==553||v==556||v==557||v==563||v==564||v==568||v==569||v==570||v==571||v==572||v==573||v==574||v==577||v==578||v==581||v==582||v==584||v==583||v==586||v==590) return 0;
    if(v==591||v==592||v==593||v==594||v==595||v==601||v==606||v==607||v==608||v==610||v==11) return 0;
    else return 1;
}
CMD:neon(playerid,params[])
{
	new carid = GetPlayerVehicleID(playerid), idcar = -1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) { if(carid == PlayerInfo[playerid][pCarID][vv]) idcar = vv; }
	if(idcar == -1) return SCM(playerid, -1, "You are not in your car.");   
    if(PlayerInfo[playerid][pNeon] < 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece nu ai neon din /shop.");
    if(!IsVehicleValid(GetVehicleModel(GetPlayerVehicleID(playerid)))) return SendClientMessage(playerid, -1, "{F81414}ERROR: {FFFFFF}You can't use neon on this vehicle.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{F81414}ERROR: {FFFFFF}You must be the driver of a vehicle to use this.");
    ShowPlayerDialogEx(playerid, DIALOG_NEONTYPES, DIALOG_STYLE_LIST, "Neon Settings", "Neon\nSterge neon", "Select", "Cancel");
    return 1;
}
forward SetBlueNeons(vehicleid);
public SetBlueNeons(vehicleid)
{
    StopBlinkNeons(vehicleid);
    SolidNeon[vehicleid] = 1;
    souvenire_objects[vehicleid][5] = CreateDynamicObject(18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    souvenire_objects[vehicleid][6] = CreateDynamicObject(18648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][5], vehicleid, -0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][6], vehicleid, 0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    return 1;
}

forward SetGreenNeons(vehicleid);
public SetGreenNeons(vehicleid)
{
    StopBlinkNeons(vehicleid);
    SolidNeon[vehicleid] = 1;
    souvenire_objects[vehicleid][7] = CreateDynamicObject(18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    souvenire_objects[vehicleid][8] = CreateDynamicObject(18649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][7], vehicleid, -0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][8], vehicleid, 0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    return 1;
}
forward SetPinkNeons(vehicleid);
public SetPinkNeons(vehicleid)
{
    StopBlinkNeons(vehicleid);
    SolidNeon[vehicleid] = 1;
    souvenire_objects[vehicleid][9] = CreateDynamicObject(18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    souvenire_objects[vehicleid][10] = CreateDynamicObject(18651, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][9], vehicleid, -0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][10], vehicleid, 0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    return 1;
}

forward SetRedNeons(vehicleid);
public SetRedNeons(vehicleid)
{
    StopBlinkNeons(vehicleid);
    SolidNeon[vehicleid] = 1;
    souvenire_objects[vehicleid][11] = CreateDynamicObject(18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    souvenire_objects[vehicleid][12] = CreateDynamicObject(18647, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][11], vehicleid, -0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][12], vehicleid, 0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    return 1;
}

forward SetWhiteNeons(vehicleid);
public SetWhiteNeons(vehicleid)
{
    StopBlinkNeons(vehicleid);
    SolidNeon[vehicleid] = 1;
    souvenire_objects[vehicleid][13] = CreateDynamicObject(18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    souvenire_objects[vehicleid][14] = CreateDynamicObject(18652, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][13], vehicleid, -0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][14], vehicleid, 0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    return 1;
}

forward SetYellowNeons(vehicleid);
public SetYellowNeons(vehicleid)
{
    StopBlinkNeons(vehicleid);
    SolidNeon[vehicleid] = 1;
    souvenire_objects[vehicleid][15] = CreateDynamicObject(18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    souvenire_objects[vehicleid][16] = CreateDynamicObject(18650, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][15], vehicleid, -0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    AttachDynamicObjectToVehicle(souvenire_objects[vehicleid][16], vehicleid, 0.8, 0.0, -0.55, 0.0, 0.0, 0.0);
    return 1;
}
forward StopBlinkNeons(vehicleid);
public StopBlinkNeons(vehicleid)
{
    DeleteNeons(vehicleid);
    return 1;
}

forward DeleteNeons(vehicleid);
public DeleteNeons(vehicleid)
{
    SolidNeon[vehicleid] = 0;
    for(new x = 5; x < 17; x++)
    {
    	if(souvenire_objects[vehicleid][x]) DestroyDynamicObject(souvenire_objects[vehicleid][x]);
    	souvenire_objects[vehicleid][x]=0;
    }
    return 1;
}

CMD:removeneon(playerid)
{
	new carid = GetPlayerVehicleID(playerid), idcar = -1;
	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) { if(carid == PlayerInfo[playerid][pCarID][vv]) idcar = vv; }
	if(idcar == -1) return SCM(playerid, -1, "You are not in your car.");   
    StopBlinkNeons(carid);
    SCM(playerid, -1, "Neonul a fost sters.");   

    return true;
}

CMD:entergarage(playerid, params[])
{
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) 
	{	
		new casa = PlayerInfo[playerid][pPhousekey];

		if(HouseInfo[casa][hGarage] < 1) return SCM(playerid, -1, "Casa ta nu are garaj.");
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[casa][hGarageX], HouseInfo[casa][hGarageY], HouseInfo[casa][hGarageZ])) return SCM(playerid, -1, "Nu te afli langa garajul tau.");
	
		SetPlayerVirtualWorld(playerid, playerid + 1);

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new car = GetPlayerVehicleID(playerid);

			SetPlayerPosEx(playerid, 483.4854,-438.1280,2758.2688);
			SetPlayerVirtualWorld(playerid, playerid + 1);
			SetVehicleVirtualWorld(car, playerid + 1);
			SetVehiclePos(car, 486.0312,-429.1757,2758.0149);
			PutPlayerInVehicleEx(playerid, car, 0);
		}

		if(!IsPlayerInAnyVehicle(playerid))
		{
			SetPlayerPosEx(playerid, 483.4854,-438.1280,2758.2688);
			SetPlayerVirtualWorld(playerid, playerid + 1);
		}

		SCM(playerid, -1, "Ai intrat in garaj. Foloseste /exitgarage in acest loc pentru a iesi.");
	}		
	return true;
}

CMD:exitgarage(playerid, params[])
{	
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 483.4854,-438.1280,2758.2688)) return SCM(playerid, -1, "Nu te afli la iesirea din garaj.");

	new casa = PlayerInfo[playerid][pPhousekey];

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new car = GetPlayerVehicleID(playerid);

		SetPlayerVirtualWorld(playerid, 0);
		SetVehicleVirtualWorld(car, 0);
		SetVehiclePos(car, HouseInfo[casa][hGarageX] + 5.0, HouseInfo[casa][hGarageY], HouseInfo[casa][hGarageZ]);

		PutPlayerInVehicleEx(playerid, car, 0);		
	}

	if(!IsPlayerInAnyVehicle(playerid))
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(playerid, HouseInfo[casa][hGarageX], HouseInfo[casa][hGarageY], HouseInfo[casa][hGarageZ]);
	}

	SCM(playerid, -1, "Ai iesit din garaj.");

	return true;
} 

CMD:sellgarage(playerid, params[])
{	
	if(PlayerInfo[playerid][pPhousekey] != 999 && strcmp(PlayerInfo[playerid][pNormalName], HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) 
	{	
		new casa = PlayerInfo[playerid][pPhousekey];

		if(HouseInfo[casa][hGarage] < 1) return SCM(playerid, -1, "Casa ta nu are garaj.");

		ShowPlayerDialogEx(playerid, DIALOG_BUYGARAGE+2000, DIALOG_STYLE_MSGBOX, "Sell garage", "Esti sigur ca vrei sa-ti vinzi garajul la stat?\nVei primi $250,000,000.", "Yes", "No");
	}	

	return true;
}


alias:tf("tfix")

CMD:tf(playerid, params[])
{
	if(PlayerInfo[playerid][pWantedLevel] >= 1) return SCM(playerid, -1, "Nu poti folosi aceasta comanda deoarece ai wanted."); 
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
	if(barcadelay[playerid] >= 1) return SCMf(playerid, -1, "Poti folosi aceasta comanda peste %d secunde.", barcadelay[playerid]);

	new idcar = -1, car = GetPlayerVehicleID(playerid);

  	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) 
  	{
  		if(car == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
  	}    	

  	if(PlayerInfo[playerid][pCarTranscendent][idcar] < 1) return SCM(playerid, -1, "Vehiculul nu este transcendent.");

  	RepairVehicle(car);
  	SetVehicleHealth(car, 1200); 

  	SCM(playerid, -1, "Ti-ai reparat vehiculul.");

  	barcadelay[playerid] = 120; 

	return true;
}

CMD:tnos(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, -1, "Nu te afli intr-un vehicul.");
	if(barcadelay[playerid] >= 1) return SCMf(playerid, -1, "Poti folosi aceasta comanda peste %d secunde.", barcadelay[playerid]);

	new idcar = -1, car = GetPlayerVehicleID(playerid);

  	for(new vv; vv < MAX_PERSONAL_VEHICLES; vv++) 
  	{
  		if(car == PlayerInfo[playerid][pCarID][vv]) idcar = vv;
  	}    	

  	if(PlayerInfo[playerid][pCarTranscendent][idcar] < 1) return SCM(playerid, -1, "Vehiculul nu este transcendent.");

  	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);

  	SCM(playerid, -1, "Ti-ai adaugat nos pe vehicul");

  	barcadelay[playerid] = 120; 

	return true;
}

AntiDeAMX()
{
	new a[][] =
 	{
 		"Unarmed (Fist)",
 		"Brass K"
 	};
	#pragma unused a
}
